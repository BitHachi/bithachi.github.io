<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>七牛云测试图床</title>
      <link href="/posts/6857fdb3.html"/>
      <url>/posts/6857fdb3.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> uncategorized </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hello word</title>
      <link href="/posts/26ca43fa.html"/>
      <url>/posts/26ca43fa.html</url>
      
        <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> none </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>3.2 java数据类型（整型、浮点型、char类型、boolean型、变量初始化、常量）</title>
      <link href="/posts/abf8abd7.html"/>
      <url>/posts/abf8abd7.html</url>
      
        <content type="html"><![CDATA[<p>@[toc]</p><hr><h2 id="0-思维导图总览"><a href="#0-思维导图总览" class="headerlink" title="0.思维导图总览"></a>0.思维导图总览</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020031115504948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-整型"><a href="#1-整型" class="headerlink" title="1.整型"></a>1.整型</h2><ul><li>整型用于表示没有小数部分的数值， 它允许是负数。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311155123643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>byte 和 short 类型主要用于特定的应用场合，例如，底层的文件处理或者需要控制占用<br>存储空间量的大数组。</li><li>在 Java 中， 整型的范围与运行 Java 代码的机器无关。这就解决了软件从一个平台移植到<br>另一个平台，或者在同一个平台中的不同操作系统之间进行移植给程序员带来的诸多问题。</li><li>长整型数值有一个后缀 L 或 l ( 如 4000000000L。) </li><li>十六进制数值有一个前缀 0x 或 0X (如0xCAFEL </li><li>八进制有一个前缀 0 , 例如， 010 对应八进制中的 8。</li><li>很显然， 八进制表示法比较容易混淆， 所以建议最好不要使用八进制常数。 </li><li>从 Java 7 开始， 加上前缀 0b 或 0B 就可以写二进制数。例如，0bl001就是 9。</li><li>从 Java 7 开始，还可以为数字字面量加下划线，如用 1_000_000(或者0b1111_0100_0010_10 00_0000 )表示一百万。这些下划线只是为了让人更易读。·<code>Java 编译器会去除这些下划线</code>。</li><li>在 Java 中， 所有的数值类型所占据的字节数量与平台无关。</li><li>注意： Java 没有任何无符号（unsigned) 形式的 int、 long、short 或 byte 类型。</li><li>代码测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 十六进制  0x或0X都可行</span></span><br><span class="line">        <span class="keyword">int</span> a0 = <span class="number">0xa0</span>;  <span class="comment">// a0的十进制值为160</span></span><br><span class="line">        <span class="keyword">short</span> b0 = <span class="number">0Xa0</span>;</span><br><span class="line">        <span class="keyword">long</span> c0 = <span class="number">0xa0</span>;</span><br><span class="line">        <span class="keyword">byte</span> d0 = <span class="number">0X10</span>; <span class="comment">// 10对应十进制16,不能用0xa0因为超过了byte数值范围</span></span><br><span class="line">        System.out.println(a0 + <span class="string">"  "</span> + b0 + <span class="string">"  "</span> + c0 + <span class="string">"  "</span> + d0);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 八进制  0开头</span></span><br><span class="line">        <span class="keyword">int</span> a1 = <span class="number">010</span>; <span class="comment">// 10的十进制为8</span></span><br><span class="line">        <span class="keyword">short</span> b2 = <span class="number">010</span>;</span><br><span class="line">        <span class="keyword">long</span> c2 = <span class="number">010</span>;</span><br><span class="line">        <span class="keyword">byte</span> d2 = <span class="number">010</span>;</span><br><span class="line">        System.out.println(a1 + <span class="string">"  "</span> + b2 + <span class="string">"  "</span> + c2 + <span class="string">"  "</span> + d2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//二进制  0b或0B都行</span></span><br><span class="line">        <span class="keyword">int</span> a3 = <span class="number">0b100</span>; <span class="comment">// 100十进制的值为4</span></span><br><span class="line">        <span class="keyword">short</span> b3 = <span class="number">0B100</span>;</span><br><span class="line">        <span class="keyword">long</span> c3 = <span class="number">0B100</span>;</span><br><span class="line">        <span class="keyword">byte</span> d3 = <span class="number">0b100</span>;</span><br><span class="line">        System.out.println(a3 + <span class="string">"  "</span> + b3 + <span class="string">"  "</span> + c3 + <span class="string">"  "</span> + d3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> long1 = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">long</span> long2 = <span class="number">100l</span>;</span><br><span class="line">        <span class="keyword">long</span> long3 = <span class="number">100L</span>;</span><br><span class="line">        System.out.println(long1 + <span class="string">"  "</span> + long2 + <span class="string">"  "</span> + long3);</span><br><span class="line">        <span class="comment">//从结果可以看出不加l或L对结果无影响</span></span><br><span class="line">        <span class="comment">//当数值超过int的范围时必须加上L</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以为数字字面量加下划线,Java 编译器会去除这些下划线</span></span><br><span class="line">        <span class="keyword">int</span> a4 = <span class="number">1____00___00</span>;</span><br><span class="line">        <span class="keyword">short</span> b4 = <span class="number">2_0_3_0</span>;</span><br><span class="line">        <span class="keyword">long</span> c4 = <span class="number">19____00</span>;</span><br><span class="line">        <span class="keyword">byte</span> d4 = <span class="number">10_1</span>;</span><br><span class="line">        System.out.println(a4 + <span class="string">"   "</span> + b4 + <span class="string">"   "</span> + c4 + <span class="string">"   "</span> + d4);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311162756389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-浮点型"><a href="#2-浮点型" class="headerlink" title="2.浮点型"></a>2.浮点型</h2><ul><li>浮点类型用于表示有小数部分的数值<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311162835476.png" alt="在这里插入图片描述"></li><li>double 表示这种类型的数值精度是 float 类型的两倍（有人称之为双精度数值)</li><li>实际上，只有很少的情况适合使用 float 类型，例如，需要单精度数据的库， 或者需要存储大量数据。</li><li>float 类型的数值有一个后缀 F 或 f (例如，3.14F。) 没有后缀 F 的浮点数值（如 3.14 ) 默认为 double 类型。</li><li>当然，也可以在浮点数值double后面添加后缀 D 或 d (例如，3.14D),不加也可以。</li><li>可以使用十六进制表示浮点数值。例如，0.125=2^-3^ 可以表示成 0x1.0p^-3^。在十六进制表示法中， 使用 p 表示指数， 而不是 e。 <code>注意， 尾数采用十六进制，指数采用十进制。指数的基数是 2，而不是 10。</code><font color=red> 对于十六进制表示我没怼出来，还请大佬多多指教，留个言教教我，抱拳了！</font></li><li>所有的浮点数值计算都遵循 <code>IEEE 754</code> 规范。具体来说，下面是用于表示<code>溢出和出错</code>情况的三个特殊的浮点数值：<br>•正无穷大<br>•负无穷大<br>•NaN (不是一个数字）<br>例如， 一 正整数除以 0 的结果为正无穷大。计算 0/0 或者负数的平方根结果为 NaN。<br>常量 <code>Double.POSITIVE_INFINITY、 Double.NEGATIVE_INFINITY 和 Double.NaN</code><br>( 以及相应的 Float 类型的常量） 分别表示<code>这三个特殊的值</code>， 但在实际应用中很少遇到。</li><li>特别要说明的是， 不能这样检测一个特定值是否等于<code>Double.NaN</code>:</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x = Double.NaN) <span class="comment">// is never true</span></span><br></pre></td></tr></table></figure><ul><li>所有“ 非数值” 的值都认为是不相同的。然而，可以使用 Double.isNaN 方法：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Double.isNaN(x)) <span class="comment">// check whether x is "not a number"</span></span><br></pre></td></tr></table></figure><ul><li><p>浮点数值<code>不适用于无法接受舍入误差的金融计算中</code>。</p></li><li><p>例如，命令 System.out.println( 2.0-1.1 ) 将打印出 0.8999999999999999, 而不是人们想象的 0.9。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311163957316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>这种舍入误差的主要原因是浮点数值采用二进制系统表示， 而在二进制系统中无法精确地表示分数 1/10。 这就好像十进制无法精确地表示分数 1/3—样。</p></li><li><p>如果在数值计算中<code>不允许有任何舍入误差</code>，就应该使用 BigDecimal类</p></li><li><p>代码测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> a = <span class="number">100.111f</span>;</span><br><span class="line">        <span class="keyword">float</span> b = <span class="number">100.111F</span>;</span><br><span class="line">        <span class="keyword">double</span> c = <span class="number">100.111</span>;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">100.111</span>D;</span><br><span class="line">        <span class="keyword">double</span> e = <span class="number">100.111</span>d;</span><br><span class="line">        System.out.println(a + <span class="string">"   "</span> + b + <span class="string">"   "</span> + c + <span class="string">"   "</span> + d + <span class="string">"   "</span> + e);</span><br><span class="line">        System.out.println(Double.POSITIVE_INFINITY);</span><br><span class="line">        System.out.println(Double.NEGATIVE_INFINITY);</span><br><span class="line">        System.out.println(Double.NaN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311175055588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="3-char型"><a href="#3-char型" class="headerlink" title="3.char型"></a>3.char型</h2><ul><li>char 类型原本用于表示单个字符。不过，现在情况已经有所变化。 如今，有些 Unicode<br>字符可以用一个 char值描述，另外一些 Unicode 字符则需要两个 char 值。</li><li>char 类型的字面量值要用<code>单引号</code>括起来。</li><li>char 类型的值可以表示为十六进制值，其范围从 \u0000 到 \Uffff。例如：  \u03C0 表示希腊字母 π。</li><li>除了转义序列 \u 之外， <code>还有一些用于表示特殊字符的转义序列</code>。所有这些转义序列都可以出现在加引号的字符字面量或字符串中。例如，’\u2122’ 或 “Hello\n”。</li><li></li><li>转义序列 \u还可以出现在加引号的<code>字符常量或字符串之外</code>（而其他所有转义序列不可以）。例 如：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String\u005B\ u00SD args)</span><br></pre></td></tr></table></figure><p>就完全符合语法规则， \u005B 和 \u005D 是 [ 和 ] 的编码</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311180337755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311181305507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311181416181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//   \u000A   asdasda</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Look inside c:\users</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311181532607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020031118161161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>抱着玩的兴趣测试了一下\u转义序列</li><li>Unicode转义字符序列的官网  <a href="http://www.52unicode.com/" target="_blank" rel="noopener">http://www.52unicode.com/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311182811687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-boolean型"><a href="#4-boolean型" class="headerlink" title="4.boolean型"></a>4.boolean型</h2><ul><li>boolean (布尔）类型有两个值：<code>false 和 true</code>, 用来判定逻辑条件 整型值和布尔值之间<br>不能进行相互转换。</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311183101733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-java内置常量对应数据类型的取值范围"><a href="#5-java内置常量对应数据类型的取值范围" class="headerlink" title="5.java内置常量对应数据类型的取值范围"></a>5.java内置常量对应数据类型的取值范围</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// byte</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：byte 二进制位数："</span> + Byte.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Byte"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Byte.MIN_VALUE="</span> + Byte.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Byte.MAX_VALUE="</span> + Byte.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// short</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：short 二进制位数："</span> + Short.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Short"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Short.MIN_VALUE="</span> + Short.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Short.MAX_VALUE="</span> + Short.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// int</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：int 二进制位数："</span> + Integer.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Integer"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Integer.MIN_VALUE="</span> + Integer.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Integer.MAX_VALUE="</span> + Integer.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// long</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：long 二进制位数："</span> + Long.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Long"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Long.MIN_VALUE="</span> + Long.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Long.MAX_VALUE="</span> + Long.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// float</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：float 二进制位数："</span> + Float.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Float"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Float.MIN_VALUE="</span> + Float.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Float.MAX_VALUE="</span> + Float.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// double</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：double 二进制位数："</span> + Double.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Double"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Double.MIN_VALUE="</span> + Double.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Double.MAX_VALUE="</span> + Double.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// char</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：char 二进制位数："</span> + Character.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Character"</span>);</span><br><span class="line">                <span class="comment">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span></span><br><span class="line">                System.out.println(<span class="string">"最小值：Character.MIN_VALUE="</span></span><br><span class="line">                        + (<span class="keyword">int</span>) Character.MIN_VALUE);</span><br><span class="line">                <span class="comment">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台</span></span><br><span class="line">                System.out.println(<span class="string">"最大值：Character.MAX_VALUE="</span></span><br><span class="line">                        + (<span class="keyword">int</span>) Character.MAX_VALUE);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020031119152014.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-数据类型默认值"><a href="#6-数据类型默认值" class="headerlink" title="6.数据类型默认值"></a>6.数据类型默认值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> bool;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span> by;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> d;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> l;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">short</span> sh;</span><br><span class="line">    <span class="keyword">static</span> String str;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bool :"</span> + bool);</span><br><span class="line">        System.out.println(<span class="string">"Byte :"</span> + by);</span><br><span class="line">        System.out.println(<span class="string">"Character:"</span> + ch);</span><br><span class="line">        System.out.println(<span class="string">"Double :"</span> + d);</span><br><span class="line">        System.out.println(<span class="string">"Float :"</span> + f);</span><br><span class="line">        System.out.println(<span class="string">"Integer :"</span> + i);</span><br><span class="line">        System.out.println(<span class="string">"Long :"</span> + l);</span><br><span class="line">        System.out.println(<span class="string">"Short :"</span> + sh);</span><br><span class="line">        System.out.println(<span class="string">"String :"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311191720101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-变量初始化"><a href="#7-变量初始化" class="headerlink" title="7.变量初始化"></a>7.变量初始化</h2><ul><li>声明一个变量之后，必须用赋值语句对变量进行显式初始化， 不可以使用未初始化的<br>变量。</li></ul><h2 id="8-常量"><a href="#8-常量" class="headerlink" title="8.常量"></a>8.常量</h2><ul><li>在 Java 中， 利用关键字 final 指示常量。 </li><li>关键字 final 表示这个变量只能被赋值一次。一旦被赋值之后，就不能够再更改了。习惯上,<br>常量名使用全大写。</li><li><code>如果一个常量被声明为 public，那么其他类的方法也可以使用这个常量</code>。</li><li>const 是 Java 保留的关键字，但目前并没有使用。在 Java 中， 必须使用 final<br>定义常量</li><li>在 Java 中，经常希望某个常量可以在一个类中的多个方法中使用，通常将这些常量称为<br><code>类常量</code>。可以使用关键字 static fina丨设置一个类常量。 下面是使用类常量的示例：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Test.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"半径为5的圆的面积为： "</span>+A.P*<span class="number">5</span>*<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"A半径为10的面积为"</span>+A.jisuan(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">A.java</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> P=<span class="number">3.14f</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">jisuan</span><span class="params">(<span class="keyword">float</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> P*r*r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311190026152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p>参考:<a href="https://www.runoob.com/java/java-basic-datatypes.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-basic-datatypes.html</a><br>《java核心技术卷一第十版》</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指offer》之一维维数组中的查找（HashSet、哈希思想）</title>
      <link href="/posts/5eccdac0.html"/>
      <url>/posts/5eccdac0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-题目描述"><a href="#1-题目描述" class="headerlink" title="1.题目描述"></a>1.题目描述</h2><blockquote><p>找出数组中重复的数字。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。<br>示例 1：<br>输入：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;[2, 3, 1, 0, 2, 5, 3]<br>输出：2 或 3<br>限制：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2 &lt;= n &lt;= 100000</p></blockquote><h2 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2.解决方案"></a>2.解决方案</h2><h3 id="（1）HashSet方法解决"><a href="#（1）HashSet方法解决" class="headerlink" title="（1）HashSet方法解决"></a>（1）HashSet方法解决</h3><blockquote><ul><li>使用 HashSet 来进行处理，因为 HashSet 本身不允许出现重复元素，所以当添加元素失败或已经包含该数字时，则表示出现了重复元素，将其返回即可。 </li><li>时间复杂度：O(n)，空间复杂度：O(n)<ul><li>时间复杂度为O(n)，是因为有for循环</li></ul></li><li>空间复杂度为O(n)，是因为new HashSet()申请了空间</li></ul></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200218232000409.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; demo= <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> a: nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!demo.add(a)) &#123;</span><br><span class="line">                <span class="keyword">return</span> a;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="（2）哈希思想-巧解"><a href="#（2）哈希思想-巧解" class="headerlink" title="（2）哈希思想(巧解)"></a>（2）哈希思想(巧解)</h3><blockquote><ul><li>所有数字都在 0 ～ n-1 的范围内，<strong>将每个位置的数交换映射到其对应的数组下标下面，当出现新的元素与其对应的下标中的数字相等时，即为重复数字</strong></li><li>哈希的思想，数组本身做哈希表，达到了节省空间的目的</li><li>while 循环，保证交换过来的新元素位置也要正确，即令：a[i]=i 。</li><li>时间复杂度：O(n)，空间复杂度：O(1)<ul><li>看图了解其过程：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200218233205525.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020021823340252.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200218233418156.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200218233558172.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findRepeatNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len = nums.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (nums[i] != i) &#123;<span class="comment">//保证交换过来的新元素位置也要正确，即令：a[i]=i </span></span><br><span class="line">                <span class="keyword">if</span> (nums[i] == nums[nums[i]]) &#123;<span class="comment">//将每个位置的数交换映射到其对应的数组下标下面，当出现新的元素与其对应的下标中的数字相等时，即为重复数字</span></span><br><span class="line">                    <span class="keyword">return</span> nums[i]; </span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">int</span> temp = nums[i]; <span class="comment">//交换，使对应下标的数组值与其下标值相等，即令 a[i]=i</span></span><br><span class="line">                nums[i] = nums[temp];</span><br><span class="line">                nums[temp] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-参考"><a href="#3-参考" class="headerlink" title="3.参考"></a>3.参考</h2><p>链接：<a href="https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/solution/hua-jie-suan-fa-mian-shi-ti-3-shu-zu-zhong-zhong-f/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/shu-zu-zhong-zhong-fu-de-shu-zi-lcof/solution/hua-jie-suan-fa-mian-shi-ti-3-shu-zu-zhong-zhong-f/</a></p>]]></content>
      
      
      <categories>
          
          <category> 蓝桥杯 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 蓝桥杯 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
