<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringMVC对JSON的处理[Jackson,FastJson]</title>
      <link href="/posts/d3ee03e7.html"/>
      <url>/posts/d3ee03e7.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是JSON？"><a href="#1-什么是JSON？" class="headerlink" title="1. 什么是JSON？"></a>1. 什么是JSON？</h2><h3 id="1-1-JSON简介"><a href="#1-1-JSON简介" class="headerlink" title="1.1 JSON简介"></a>1.1 JSON简介</h3><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔 {“name”: “QinJiang”}</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键/值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"name"</span>: <span class="string">"QinJiang"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"age"</span>: <span class="string">"3"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"sex"</span>: <span class="string">"男"</span>&#125;</span><br></pre></td></tr></table></figure><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><p><code>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;a: 'Hello', b: 'World'&#125;; //这是一个对象，注意键名也是可以使用引号包裹的</span><br><span class="line">var json = '&#123;"a": "Hello", "b": "World"&#125;'; //这是一个 JSON 字符串，本质是一个字符串</span><br></pre></td></tr></table></figure><h3 id="1-2-JSON-和-JavaScript-对象互转"><a href="#1-2-JSON-和-JavaScript-对象互转" class="headerlink" title="1.2 JSON 和 JavaScript 对象互转"></a>1.2 JSON 和 JavaScript 对象互转</h3><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var obj = JSON.parse('&#123;"a": "Hello", "b": "World"&#125;');</span><br><span class="line"><span class="comment">//结果是 &#123;a: 'Hello', b: 'World'&#125;</span></span><br></pre></td></tr></table></figure><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var json = JSON.stringify(&#123;a: 'Hello', b: 'World'&#125;);</span><br><span class="line"><span class="comment">//结果是 '&#123;"a": "Hello", "b": "World"&#125;'</span></span><br></pre></td></tr></table></figure><h2 id="2-Jackson"><a href="#2-Jackson" class="headerlink" title="2. Jackson"></a>2. Jackson</h2><p>Jackson是一个简单基于Java应用库，Jackson可以轻松的将Java对象转换成json对象和xml文档，同样也可以将json、xml转换成Java对象。</p><p>测试目录结构：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209235645.png" alt="image-20201209235645624"></p><p><strong>导入它的jar包</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置web.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>springmvc-servlet.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.bithachi.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>写一个User的实体类，然后我们去编写我们的测试UserController</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age, String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", sex='"</span> + sex + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>UserController.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.utils.JsonUtils;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span>  <span class="comment">//这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！</span></span><br><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//produces:指定响应体返回类型和编码  produces = "application/json;charset=utf-8"</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/json1"</span>)</span><br><span class="line">    <span class="comment">//@ResponseBody//@ResponseBody注解，这里会将str转成json字符串格式返回；不会走视图解析器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="string">"小明1号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">        <span class="comment">//将我们的对象解析成为json字符串格式</span></span><br><span class="line">        String str = mapper.writeValueAsString(user);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/json2"</span>)</span><br><span class="line">    <span class="comment">//@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">"小明1号"</span>, <span class="number">1</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">"小明2号"</span>, <span class="number">2</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">"小明3号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="string">"小明4号"</span>, <span class="number">4</span>, <span class="string">"男"</span>);</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line">        list.add(user4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">        String str = mapper.writeValueAsString(list);</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/json3"</span>)</span><br><span class="line">    <span class="comment">//@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException </span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String json = JsonUtils.getJson(date);</span><br><span class="line">        <span class="keyword">return</span> json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>JsonUtils.java</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonUtils</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getJson(object,<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getJson</span><span class="params">(Object object,String dateFormat)</span> </span>&#123;</span><br><span class="line">        ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        <span class="comment">//不使用时间错的方式</span></span><br><span class="line">        mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//自定义日期格式对象</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(dateFormat);</span><br><span class="line">        <span class="comment">//指定日期格式</span></span><br><span class="line">        mapper.setDateFormat(sdf);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置Tomcat ， 启动测试一下！</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209235739.png" alt="image-20201209235739359">)<img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209235752.png" alt="image-20201209235752832">)<img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209235850.png" alt="image-20201209235850928"></p><p><strong>关于乱码问题，如果项目中有许多请求则每一个都要添加<code>produces = &quot;application/json;charset=utf-8&quot;</code>，可以通过Spring配置统一指定，这样就不用每次都去处理了！</strong></p><p><strong>我们可以在springmvc的配置文件springmvc-servlet.xml上添加一段消息StringHttpMessageConverter转换配置！</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.bithachi.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC自带的解决json乱码的配置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"objectMapper"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"failOnEmptyBeans"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Fastjson"><a href="#3-Fastjson" class="headerlink" title="3. Fastjson"></a>3. Fastjson</h2><p>Fastjson是阿里巴巴的开源JSON解析库，它可以解析JSON格式的字符串，支持将Java Bean序列化为JSON字符串，也可以从JSON字符串反序列化到JavaBean。</p><p><strong>Fastjson使用场景</strong></p><p>Fastjson已经被广泛使用在各种场景，包括cache存储、RPC通讯、MQ通讯、网络协议通讯、Android客户端、Ajax服务器处理程序等等。</p><p><strong>Fastjson的 pom依赖！</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Fastjson三个主要的类：</strong></p><ol><li><p><strong>JSONObject  代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul></li><li><p><strong>JSONArray  代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul></li><li><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul></li></ol><p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastJsonDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个对象</span></span><br><span class="line">        User user1 = <span class="keyword">new</span> User(<span class="string">"小明1号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user2 = <span class="keyword">new</span> User(<span class="string">"小明2号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user3 = <span class="keyword">new</span> User(<span class="string">"小明3号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">        User user4 = <span class="keyword">new</span> User(<span class="string">"小明4号"</span>, <span class="number">3</span>, <span class="string">"男"</span>);</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">        list.add(user1);</span><br><span class="line">        list.add(user2);</span><br><span class="line">        list.add(user3);</span><br><span class="line">        list.add(user4);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*******Java对象 转 JSON字符串*******"</span>);</span><br><span class="line">        String str1 = JSON.toJSONString(list);</span><br><span class="line">        System.out.println(<span class="string">"JSON.toJSONString(list)==&gt;"</span>+str1);</span><br><span class="line">        String str2 = JSON.toJSONString(user1);</span><br><span class="line">        System.out.println(<span class="string">"JSON.toJSONString(user1)==&gt;"</span>+str2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n****** JSON字符串 转 Java对象*******"</span>);</span><br><span class="line">        User jp_user1=JSON.parseObject(str2,User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"JSON.parseObject(str2,User.class)==&gt;"</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n****** Java对象 转 JSON对象 ******"</span>);</span><br><span class="line">        JSONObject jsonObject1 = (JSONObject) JSON.toJSON(user2);</span><br><span class="line">        System.out.println(<span class="string">"(JSONObject) JSON.toJSON(user2)==&gt;"</span>+jsonObject1.getString(<span class="string">"name"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"\n****** JSON对象 转 Java对象 ******"</span>);</span><br><span class="line">        User to_java_user = JSON.toJavaObject(jsonObject1, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"JSON.toJavaObject(jsonObject1, User.class)==&gt;"</span>+to_java_user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201210000558.png" alt="image-20201210000558186"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC实现重定向与转发+请求数据处理+数据显示乱码解决方案</title>
      <link href="/posts/1b366050.html"/>
      <url>/posts/1b366050.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-回顾ServletAPI-方式的重定向与转发"><a href="#1-回顾ServletAPI-方式的重定向与转发" class="headerlink" title="1. 回顾ServletAPI 方式的重定向与转发"></a>1. 回顾ServletAPI 方式的重定向与转发</h2><p>关于这个可参考之前写的：<a href="https://www.bithachi.cn/posts/cc4f65f8.html">Servlet入门篇[处理表单数据,重定向与转发,数据库访问,异常处理]</a></p><h2 id="2-SpringMVC实现转发和重定向"><a href="#2-SpringMVC实现转发和重定向" class="headerlink" title="2. SpringMVC实现转发和重定向"></a>2. SpringMVC实现转发和重定向</h2><h3 id="2-1-无需xml配置视图解析器方式"><a href="#2-1-无需xml配置视图解析器方式" class="headerlink" title="2.1 无需xml配置视图解析器方式"></a>2.1 无需xml配置视图解析器方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rsm/t1"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rsm/t2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//转发二</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"forward:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/rsm/t3"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//重定向,会改变URL地址栏</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：<a href="http://localhost:8080/rsm/t2，OK" target="_blank" rel="noopener">http://localhost:8080/rsm/t2，OK</a></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209215147.png" alt="image-20201209215147896"></p><h3 id="2-2-xml配置视图解析器方式"><a href="#2-2-xml配置视图解析器方式" class="headerlink" title="2.2 xml配置视图解析器方式"></a>2.2 xml配置视图解析器方式</h3><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 可以重定向到另外一个请求实现 .</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultSpringMVC2</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/rsm2/t1"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/rsm2/t2"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"redirect:/index.jsp"</span>;</span><br><span class="line">       <span class="comment">//return "redirect:hello.do"; //hello.do为另一个请求/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-请求数据处理"><a href="#3-请求数据处理" class="headerlink" title="3. 请求数据处理"></a>3. 请求数据处理</h2><h3 id="3-1-提交的参数名和处理方法的参数名一致"><a href="#3-1-提交的参数名和处理方法的参数名一致" class="headerlink" title="3.1 提交的参数名和处理方法的参数名一致"></a>3.1 提交的参数名和处理方法的参数名一致</h3><p>提交数据 : <a href="http://localhost:8080/hello?name=bithachi" target="_blank" rel="noopener">http://localhost:8080/hello?name=bithachi</a></p><p>处理方法 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(String name, Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>hello.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209220055.png" alt="image-20201209220055292"></p><h3 id="3-2-提交的参数名和处理方法的参数名不一致"><a href="#3-2-提交的参数名和处理方法的参数名不一致" class="headerlink" title="3.2 提交的参数名和处理方法的参数名不一致"></a>3.2 提交的参数名和处理方法的参数名不一致</h3><p>提交数据 : <a href="http://localhost:8080/hello2?username=bithachi" target="_blank" rel="noopener">http://localhost:8080/hello2?username=bithachi</a></p><p>处理方法 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//@RequestParam("username") : username URI提交的参数名的名称 .</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String name, Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209220603.png" alt="image-20201209220603831"></p><h3 id="3-3-提交的是一个对象"><a href="#3-3-提交的是一个对象" class="headerlink" title="3.3 提交的是一个对象"></a>3.3 提交的是一个对象</h3><p>要求提交的表单域和对象的属性名一致  , 参数使用对象即可</p><p>1、实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、提交数据 : <a href="http://localhost:8080/user?name=bithachi&amp;id=1&amp;age=18" target="_blank" rel="noopener">http://localhost:8080/user?name=bithachi&amp;id=1&amp;age=18</a></p><p>3、处理方法 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">(User user, Model model)</span></span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209220930.png" alt="image-20201209220930841">)<img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209221012.png" alt="image-20201209221012954"></p><p><strong>说明：如果使用对象的话，前端传递的参数名和对象名必须一致，否则就是null。</strong></p><h2 id="4-数据显示到前端的三种方式"><a href="#4-数据显示到前端的三种方式" class="headerlink" title="4. 数据显示到前端的三种方式"></a>4. 数据显示到前端的三种方式</h2><p><strong>第一种 : 通过ModelAndView</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ControllerTest1</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">       mv.addObject(<span class="string">"msg"</span>,<span class="string">"ControllerTest1"</span>);</span><br><span class="line">       mv.setViewName(<span class="string">"test"</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二种 : 通过ModelMap</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello100"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello1</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String name, ModelMap model)</span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute("name",name);</span></span><br><span class="line">   model.addAttribute(<span class="string">"msg"</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209221614.png" alt="image-20201209221614873"></p><p><strong>第三种 : 通过Model</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello200"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">hello2</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span> String name, Model model)</span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute("name",name);</span></span><br><span class="line">   model.addAttribute(<span class="string">"msg"</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209221654.png" alt="image-20201209221654293"></p><p><strong>对比</strong></p><p>对于刚开始理解来说，使用区别就是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Model 只有寥寥几个方法只适合用于储存数据，简化了初学者对于Model对象的操作和理解；</span><br><span class="line">ModelMap 继承了 LinkedMap ，除了实现了自身的一些方法，同样的继承 LinkedMap 的方法和特性；</span><br><span class="line">ModelAndView 可以在储存数据的同时，可以进行设置返回的逻辑视图，进行控制展示层的跳转。</span><br></pre></td></tr></table></figure><p>当然更多的以后开发考虑的更多的是性能和优化，就不能单单仅限于此的了解。</p><h2 id="5-数据显示乱码解决方案"><a href="#5-数据显示乱码解决方案" class="headerlink" title="5. 数据显示乱码解决方案"></a>5. 数据显示乱码解决方案</h2><p>关于过滤器可参考：<a href="https://www.bithachi.cn/posts/98d10afd.html">Filter 过滤器与 Listener 监听器</a></p><p>以前乱码问题通过过滤器可以解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在<code>web.xml</code>中配置 .</p><p>修改了xml文件需要重启服务器！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是我们发现 , 有些极端情况下.这个过滤器对get的支持不好 .</p><p>处理方法 :</p><p>1、修改tomcat配置文件：tomcat\apache-tomcat-9.0.39\conf\server.xml </p><p>设置编码:<code>URIEncoding=&quot;utf-8&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">"utf-8"</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2、自定义过滤器filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决get和post请求 全部乱码的过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">       <span class="comment">//处理response的字符编码</span></span><br><span class="line">       HttpServletResponse myResponse=(HttpServletResponse) response;</span><br><span class="line">       myResponse.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">       HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">       <span class="comment">// 对request包装增强</span></span><br><span class="line">       HttpServletRequest myrequest = <span class="keyword">new</span> MyRequest(httpServletRequest);</span><br><span class="line">       chain.doFilter(myrequest, response);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义request对象，HttpServletRequest的包装类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyRequest</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">   <span class="comment">//是否编码的标记</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> hasEncode;</span><br><span class="line">   <span class="comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">MyRequest</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">       <span class="keyword">this</span>.request = request;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Map <span class="title">getParameterMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 先获得请求方式</span></span><br><span class="line">       String method = request.getMethod();</span><br><span class="line">       <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"post"</span>)) &#123;</span><br><span class="line">           <span class="comment">// post请求</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 处理post乱码</span></span><br><span class="line">               request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">               <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"get"</span>)) &#123;</span><br><span class="line">           <span class="comment">// get请求</span></span><br><span class="line">           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">           <span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">               <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                   String[] values = parameterMap.get(parameterName);</span><br><span class="line">                   <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               <span class="comment">// 处理get乱码,java默认编码：ISO-8859-1</span></span><br><span class="line">                               values[i] = <span class="keyword">new</span> String(values[i].getBytes(<span class="string">"ISO-8859-1"</span>), <span class="string">"utf-8"</span>);</span><br><span class="line">                          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                               e.printStackTrace();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">               hasEncode = <span class="keyword">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="keyword">return</span> parameterMap;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.getParameterMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取一个值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">if</span> (values == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取所有值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">return</span> values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>然后在web.xml中配置这个过滤器即可！</strong></p><p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
            <tag> 重定向 </tag>
            
            <tag> 转发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC实现Restful风格+@RequestMapping</title>
      <link href="/posts/fe73775d.html"/>
      <url>/posts/fe73775d.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是Restful风格？"><a href="#1-什么是Restful风格？" class="headerlink" title="1. 什么是Restful风格？"></a>1. 什么是Restful风格？</h2><p>Restful就是一个<code>资源定位</code>及<code>资源操作</code>的<code>风格</code>。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>资源：</strong>互联网所有的事物都可以被抽象为资源</p><p><strong>资源操作：</strong>使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p><p>分别对应 添加、 删除、修改、查询。</p><p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p>​    <a href="http://127.0.0.1/item/queryItem.action?id=1" target="_blank" rel="noopener">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item/saveItem.action" target="_blank" rel="noopener">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item/updateItem.action" target="_blank" rel="noopener">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p><p>​    <a href="http://127.0.0.1/item/deleteItem.action?id=1" target="_blank" rel="noopener">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p><p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p>​    <a href="http://127.0.0.1/item/1" target="_blank" rel="noopener">http://127.0.0.1/item/1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item" target="_blank" rel="noopener">http://127.0.0.1/item</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item" target="_blank" rel="noopener">http://127.0.0.1/item</a> 更新,PUT</p><p>​    <a href="http://127.0.0.1/item/1" target="_blank" rel="noopener">http://127.0.0.1/item/1</a> 删除,DELETE</p><h2 id="2-Spring-MVC中实现Restful风格—-PathVariable"><a href="#2-Spring-MVC中实现Restful风格—-PathVariable" class="headerlink" title="2. Spring MVC中实现Restful风格—@PathVariable"></a>2. Spring MVC中实现Restful风格—@PathVariable</h2><p>在Spring MVC中可以使用  <code>@PathVariable</code> 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestFulController</span> </span>&#123;</span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/commit/&#123;p1&#125;/&#123;p2&#125;"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(@PathVariable <span class="keyword">int</span> p1, @PathVariable <span class="keyword">int</span> p2, Model model)</span></span>&#123;</span><br><span class="line">       <span class="keyword">int</span> result = p1+p2;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">"msg"</span>, <span class="string">"结果："</span>+result);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-RequestMapping"><a href="#3-RequestMapping" class="headerlink" title="3. @RequestMapping"></a>3. @RequestMapping</h2><h3 id="3-1-可用于类或方法上"><a href="#3-1-可用于类或方法上" class="headerlink" title="3.1 可用于类或方法上"></a>3.1 可用于类或方法上</h3><ul><li>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。<code>可用于类或方法上</code>。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/admin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">   <span class="meta">@RequestMapping</span>(<span class="string">"/h1"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> / 项目名/ admin /h1  , 需要先指定类的路径再指定方法的路径；</p><hr><h3 id="3-2-method属性"><a href="#3-2-method属性" class="headerlink" title="3.2 method属性"></a>3.2 method属性</h3><p><strong>使用 @RequestMapping注解中的method属性指定请求类型</strong></p><ul><li>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</li><li><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>,method = &#123;RequestMethod.POST&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index2</span><span class="params">(Model model)</span></span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">"msg"</span>, <span class="string">"hello!"</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"test"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不是POST方法访问URI会报错</p><h3 id="3-3-几个组合注解"><a href="#3-3-几个组合注解" class="headerlink" title="3.3 几个组合注解"></a>3.3 几个组合注解</h3><p><strong>方法级别的注解变体有如下几个：组合注解</strong></p><ul><li>@GetMapping</li><li>@PostMapping</li><li>@PutMapping</li><li>@DeleteMapping</li><li>@PatchMapping</li></ul><p>@GetMapping 是一个组合注解，平时使用的会比较多！</p><p>它所扮演的是 @RequestMapping(method =RequestMethod.GET) 的一个快捷方式。</p><h3 id="3-4-RequestMapping源代码"><a href="#3-4-RequestMapping源代码" class="headerlink" title="3.4 @RequestMapping源代码"></a>3.4 @RequestMapping源代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Copyright 2002-2018 the original author or authors.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Licensed under the Apache License, Version 2.0 (the "License");</span></span><br><span class="line"><span class="comment"> * you may not use this file except in compliance with the License.</span></span><br><span class="line"><span class="comment"> * You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *      https://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Unless required by applicable law or agreed to in writing, software</span></span><br><span class="line"><span class="comment"> * distributed under the License is distributed on an "AS IS" BASIS,</span></span><br><span class="line"><span class="comment"> * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span></span><br><span class="line"><span class="comment"> * See the License for the specific language governing permissions and</span></span><br><span class="line"><span class="comment"> * limitations under the License.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.web.bind.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Annotation for mapping web requests onto methods in request-handling classes</span></span><br><span class="line"><span class="comment"> * with flexible method signatures.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Both Spring MVC and Spring WebFlux support this annotation through a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> RequestMappingHandlerMapping&#125; and &#123;<span class="doctag">@code</span> RequestMappingHandlerAdapter&#125;</span></span><br><span class="line"><span class="comment"> * in their respective modules and package structure. For the exact list of</span></span><br><span class="line"><span class="comment"> * supported handler method arguments and return types in each, please use the</span></span><br><span class="line"><span class="comment"> * reference documentation links below:</span></span><br><span class="line"><span class="comment"> * &lt;ul&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Spring MVC</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-arguments"&gt;Method Arguments&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * and</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html#mvc-ann-return-types"&gt;Return Values&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;li&gt;Spring WebFlux</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-ann-arguments"&gt;Method Arguments&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * and</span></span><br><span class="line"><span class="comment"> * &lt;a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-ann-return-types"&gt;Return Values&lt;/a&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/li&gt;</span></span><br><span class="line"><span class="comment"> * &lt;/ul&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This annotation can be used both at the class and</span></span><br><span class="line"><span class="comment"> * at the method level. In most cases, at the method level applications will</span></span><br><span class="line"><span class="comment"> * prefer to use one of the HTTP method specific variants</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> GetMapping <span class="doctag">@GetMapping</span>&#125;, &#123;<span class="doctag">@link</span> PostMapping <span class="doctag">@PostMapping</span>&#125;,</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> PutMapping <span class="doctag">@PutMapping</span>&#125;, &#123;<span class="doctag">@link</span> DeleteMapping <span class="doctag">@DeleteMapping</span>&#125;, or</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> PatchMapping <span class="doctag">@PatchMapping</span>&#125;.&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;<span class="doctag">NOTE:</span>&lt;/b&gt; When using controller interfaces (e.g. for AOP proxying),</span></span><br><span class="line"><span class="comment"> * make sure to consistently put &lt;i&gt;all&lt;/i&gt; your mapping annotations - such as</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@RequestMapping</span>&#125; and &#123;<span class="doctag">@code</span> <span class="doctag">@SessionAttributes</span>&#125; - on</span></span><br><span class="line"><span class="comment"> * the controller &lt;i&gt;interface&lt;/i&gt; rather than on the implementation class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Juergen Hoeller</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Arjen Poutsma</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Sam Brannen</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2.5</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> GetMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PostMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PutMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> DeleteMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> PatchMapping</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Mapping</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestMapping &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Assign a name to this mapping.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Supported at the type level as well as at the method level!&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * When used on both levels, a combined name is derived by concatenation</span></span><br><span class="line"><span class="comment"> * with "#" as separator.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.servlet.handler.HandlerMethodMappingNamingStrategy</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The primary mapping expressed by this annotation.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;This is an alias for &#123;<span class="doctag">@link</span> #path&#125;. For example</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@RequestMapping</span>("/foo")&#125; is equivalent to</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@code</span> <span class="doctag">@RequestMapping</span>(path="/foo")&#125;.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Supported at the type level as well as at the method level!&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * When used at the type level, all method-level mappings inherit</span></span><br><span class="line"><span class="comment"> * this primary mapping, narrowing it for a specific handler method.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"path"</span>)</span><br><span class="line">String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The path mapping URIs (e.g. "/myPath.do").</span></span><br><span class="line"><span class="comment"> * Ant-style path patterns are also supported (e.g. "/myPath/*.do").</span></span><br><span class="line"><span class="comment"> * At the method level, relative paths (e.g. "edit.do") are supported</span></span><br><span class="line"><span class="comment"> * within the primary mapping expressed at the type level.</span></span><br><span class="line"><span class="comment"> * Path mapping URIs may contain placeholders (e.g. "/$&#123;connect&#125;").</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Supported at the type level as well as at the method level!&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * When used at the type level, all method-level mappings inherit</span></span><br><span class="line"><span class="comment"> * this primary mapping, narrowing it for a specific handler method.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.bind.annotation.ValueConstants#DEFAULT_NONE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 4.2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">String[] path() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The HTTP request methods to map to, narrowing the primary mapping:</span></span><br><span class="line"><span class="comment"> * GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Supported at the type level as well as at the method level!&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * When used at the type level, all method-level mappings inherit</span></span><br><span class="line"><span class="comment"> * this HTTP method restriction (i.e. the type-level restriction</span></span><br><span class="line"><span class="comment"> * gets checked before the handler method is even resolved).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">RequestMethod[] method() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The parameters of the mapped request, narrowing the primary mapping.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Same format for any environment: a sequence of "myParam=myValue" style</span></span><br><span class="line"><span class="comment"> * expressions, with a request only mapped if each such parameter is found</span></span><br><span class="line"><span class="comment"> * to have the given value. Expressions can be negated by using the "!=" operator,</span></span><br><span class="line"><span class="comment"> * as in "myParam!=myValue". "myParam" style expressions are also supported,</span></span><br><span class="line"><span class="comment"> * with such parameters having to be present in the request (allowed to have</span></span><br><span class="line"><span class="comment"> * any value). Finally, "!myParam" style expressions indicate that the</span></span><br><span class="line"><span class="comment"> * specified parameter is &lt;i&gt;not&lt;/i&gt; supposed to be present in the request.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Supported at the type level as well as at the method level!&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * When used at the type level, all method-level mappings inherit</span></span><br><span class="line"><span class="comment"> * this parameter restriction (i.e. the type-level restriction</span></span><br><span class="line"><span class="comment"> * gets checked before the handler method is even resolved).</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Parameter mappings are considered as restrictions that are enforced at</span></span><br><span class="line"><span class="comment"> * the type level. The primary path mapping (i.e. the specified URI value)</span></span><br><span class="line"><span class="comment"> * still has to uniquely identify the target handler, with parameter mappings</span></span><br><span class="line"><span class="comment"> * simply expressing preconditions for invoking the handler.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] params() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The headers of the mapped request, narrowing the primary mapping.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Same format for any environment: a sequence of "My-Header=myValue" style</span></span><br><span class="line"><span class="comment"> * expressions, with a request only mapped if each such header is found</span></span><br><span class="line"><span class="comment"> * to have the given value. Expressions can be negated by using the "!=" operator,</span></span><br><span class="line"><span class="comment"> * as in "My-Header!=myValue". "My-Header" style expressions are also supported,</span></span><br><span class="line"><span class="comment"> * with such headers having to be present in the request (allowed to have</span></span><br><span class="line"><span class="comment"> * any value). Finally, "!My-Header" style expressions indicate that the</span></span><br><span class="line"><span class="comment"> * specified header is &lt;i&gt;not&lt;/i&gt; supposed to be present in the request.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Also supports media type wildcards (*), for headers such as Accept</span></span><br><span class="line"><span class="comment"> * and Content-Type. For instance,</span></span><br><span class="line"><span class="comment"> * &lt;pre class="code"&gt;</span></span><br><span class="line"><span class="comment"> * &amp;#064;RequestMapping(value = "/something", headers = "content-type=text/*")</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> * will match requests with a Content-Type of "text/html", "text/plain", etc.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Supported at the type level as well as at the method level!&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * When used at the type level, all method-level mappings inherit</span></span><br><span class="line"><span class="comment"> * this header restriction (i.e. the type-level restriction</span></span><br><span class="line"><span class="comment"> * gets checked before the handler method is even resolved).</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.http.MediaType</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] headers() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The consumable media types of the mapped request, narrowing the primary mapping.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The format is a single media type or a sequence of media types,</span></span><br><span class="line"><span class="comment"> * with a request only mapped if the &#123;<span class="doctag">@code</span> Content-Type&#125; matches one of these media types.</span></span><br><span class="line"><span class="comment"> * Examples:</span></span><br><span class="line"><span class="comment"> * &lt;pre class="code"&gt;</span></span><br><span class="line"><span class="comment"> * consumes = "text/plain"</span></span><br><span class="line"><span class="comment"> * consumes = &#123;"text/plain", "application/*"&#125;</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> * Expressions can be negated by using the "!" operator, as in "!text/plain", which matches</span></span><br><span class="line"><span class="comment"> * all requests with a &#123;<span class="doctag">@code</span> Content-Type&#125; other than "text/plain".</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Supported at the type level as well as at the method level!&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * When used at the type level, all method-level mappings override</span></span><br><span class="line"><span class="comment"> * this consumes restriction.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.http.MediaType</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> javax.servlet.http.HttpServletRequest#getContentType()</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] consumes() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The producible media types of the mapped request, narrowing the primary mapping.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;The format is a single media type or a sequence of media types,</span></span><br><span class="line"><span class="comment"> * with a request only mapped if the &#123;<span class="doctag">@code</span> Accept&#125; matches one of these media types.</span></span><br><span class="line"><span class="comment"> * Examples:</span></span><br><span class="line"><span class="comment"> * &lt;pre class="code"&gt;</span></span><br><span class="line"><span class="comment"> * produces = "text/plain"</span></span><br><span class="line"><span class="comment"> * produces = &#123;"text/plain", "application/*"&#125;</span></span><br><span class="line"><span class="comment"> * produces = MediaType.APPLICATION_JSON_UTF8_VALUE</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;It affects the actual content type written, for example to produce a JSON response</span></span><br><span class="line"><span class="comment"> * with UTF-8 encoding, &#123;<span class="doctag">@link</span> org.springframework.http.MediaType#APPLICATION_JSON_UTF8_VALUE&#125; should be used.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Expressions can be negated by using the "!" operator, as in "!text/plain", which matches</span></span><br><span class="line"><span class="comment"> * all requests with a &#123;<span class="doctag">@code</span> Accept&#125; other than "text/plain".</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;b&gt;Supported at the type level as well as at the method level!&lt;/b&gt;</span></span><br><span class="line"><span class="comment"> * When used at the type level, all method-level mappings override</span></span><br><span class="line"><span class="comment"> * this produces restriction.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.http.MediaType</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">String[] produces() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>回顾Servlet-&gt;从基于Controller接口的SpringMVC-&gt;到基于@Controller注解的SpringMVC三个案例</title>
      <link href="/posts/81e025ff.html"/>
      <url>/posts/81e025ff.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-回顾Servlet"><a href="#1-回顾Servlet" class="headerlink" title="1. 回顾Servlet"></a>1. 回顾Servlet</h2><p>测试文件目录结构：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209140026.png" alt="image-20201209140026014"></p><p>1、新建一个Maven工程当做父工程！pom依赖！ </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、建立一个Moudle：springmvc-01-servlet ， 添加Web app 4.0的支持！</p><p>3、编写一个HelloServlet类，用来处理用户的请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1. 获取前端参数</span></span><br><span class="line">        String method = req.getParameter(<span class="string">"method"</span>);</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">"add"</span>))&#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">"msg"</span>,<span class="string">"执行了add方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">"delete"</span>))&#123;</span><br><span class="line">            req.getSession().setAttribute(<span class="string">"msg"</span>,<span class="string">"执行了delete方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2.调用业务层</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.视图转发(或者重定向)</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/WEB-INF/jsp/hello.jsp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、编写hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>5、在web.xml中注册HelloServle</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>cn.bithachi.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、测试</p><p><strong>配置Tomcat，并启动测试：</strong></p><ol><li><ul><li>localhost:8080/hello?method=add</li><li>localhost:8080/hello?method=delete</li></ul></li></ol><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209135830.png" alt="image-20201209135830074">)<img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209135842.png" alt="image-20201209135842051"></p><p><strong>程序执行说明：</strong></p><ol><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ol><h2 id="2-基于Controller接口的SpringMVC实现"><a href="#2-基于Controller接口的SpringMVC实现" class="headerlink" title="2. 基于Controller接口的SpringMVC实现"></a>2. 基于Controller接口的SpringMVC实现</h2><p>缺点：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</p><p>关于SpringMVC的执行原理，可参考：<a href="https://www.bithachi.cn/posts/8e55cf9f.html">MVC 架构与 SpringMVC 执行原理</a></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201208235448.png" alt="https://image.bithachi.cn/20201208235448.png"></p><p>文件目录结构：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209143250.png" alt="image-20201209143250362"></p><p>1、新建一个Moudle ， springmvc-02-hellomvc ， 添加web app 4.0的支持！</p><p>2、确定pom.xml导入了SpringMVC 的依赖！</p><p>3、配置web.xml  ， 注册DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--(1).配置DispatcherServlet 前端控制器，请求分发器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml 说明，这里的名称要求是按照官方来的，注意我们在web.xml配置的：</p><p><code>&lt;servlet-name&gt;springmvc&lt;/servlet-name&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--(2,3,4).DispatcherServlet 会查询一个或多个处理器映射 (handler mapping) 来确定请求的下一站在哪里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--(5).一旦选择了合适的控制器，DispatcherServlet 会将请求发送给选中的控制器目--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.controller.HelloController"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--(6).处理器适配器，调用找到的Controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--(9，10).视图解析器:</span></span><br><span class="line"><span class="comment">    HelloController给DispatcherServlet，DispatcherServlet再给视图解析器的ModelAndView</span></span><br><span class="line"><span class="comment">    视图解析器(view resolver)来将逻辑视图名匹配为一个特定的视图实现</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、编写我们要操作业务HelloController ，要么实现Controller接口，要么增加注解；</p><p>这里我们采用实现Controller接口，需要返回一个ModelAndView，装数据，封视图；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//这里我们实现Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> <span class="keyword">implements</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">        ModelAndView mv = <span class="keyword">new</span> ModelAndView();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//(7)HelloController 控制器所做的最后一件事就是将模型数据打包，并且标示出用于渲染输出的视图名</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"HelloSpringMVC!"</span>);</span><br><span class="line">        <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">        mv.setViewName(<span class="string">"hello"</span>); <span class="comment">// 相当于： /WEB-INF/jsp/hello.jsp</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//(8) 将请求连同模型和视图名(ModelAndView)发送回DispatcherServlet</span></span><br><span class="line">        <span class="keyword">return</span> mv;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、（1）添加处理映射器BeanNameUrlHandlerMapping，（2）添加处理器适配器SimpleControllerHandlerAdapter，（3）添加视图解析器InternalResourceViewResolver，（4）将自己的HelloController类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--(2,3,4).DispatcherServlet 会查询一个或多个处理器映射 (handler mapping) 来确定请求的下一站在哪里 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--(5).一旦选择了合适的控制器，DispatcherServlet 会将请求发送给选中的控制器目--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"/hello"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.controller.HelloController"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--(6).处理器适配器，调用找到的Controller--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--(9，10).视图解析器:</span></span><br><span class="line"><span class="comment">    HelloController给DispatcherServlet，DispatcherServlet再给视图解析器的ModelAndView</span></span><br><span class="line"><span class="comment">    视图解析器(view resolver)来将逻辑视图名匹配为一个特定的视图实现</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、写要跳转的hello.jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>8、配置Tomcat 启动测试！</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209143512.png" alt="image-20201209143512045"></p><p><strong>可能遇到的问题：访问出现404，排查步骤：</strong></p><ol><li>查看控制台输出，看一下是不是缺少了什么jar包。</li><li><code>如果jar包存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖！</code></li><li>重启Tomcat 即可解决！</li></ol><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209143501.png" alt="image-20201209143501153"></p><h2 id="3-基于-Controller注解的SpringMVC实现"><a href="#3-基于-Controller注解的SpringMVC实现" class="headerlink" title="3. 基于@Controller注解的SpringMVC实现"></a>3. 基于@Controller注解的SpringMVC实现</h2><p><strong>我们根据上面的基于xm的SpringMVC案例进行简化</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209154334.png" alt="image-20201209154334226"></p><p>1、修改springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/mvc/spring-mvc.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 1.自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.bithachi.controller"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.让Spring MVC不处理静态资源 js html css mp4 mp3…… --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--3.支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--4.配置视图解析器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span> <span class="attr">id</span>=<span class="string">"InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--在视图解析器中我们把所有的视图都存放在/WEB-INF/目录下，</span></span><br><span class="line"><span class="comment">        这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、修改HelloController.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>) </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Controller</span>是为了让Spring IOC容器初始化时自动扫描到；</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestMapping</span>是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是：/test/hello</span></span><br><span class="line"><span class="comment">     * 方法中声明Model类型的参数是为了把Action中的数据带到视图中；</span></span><br><span class="line"><span class="comment">     * 方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成：WEB-INF/jsp/hello.jsp。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model     向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String   web-inf/jsp/hello.jsp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">(Model model)</span></span>&#123;<span class="comment">// //Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line"></span><br><span class="line">        model.addAttribute(<span class="string">"msg"</span>,<span class="string">"hello,SpringMVC"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;<span class="comment">//返回视图位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、启动tomcat进行测试</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209154348.png" alt="image-20201209154348789"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201209154422.png" alt="image-20201209154422256"></p><h2 id="4-小结"><a href="#4-小结" class="headerlink" title="4. 小结"></a>4. 小结</h2><p>实现步骤其实非常的简单：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件，<strong>处理器映射器、处理器适配器、视图解析器</strong></li><li>接下来就是去创建对应的控制类 , xxxcontroller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ol><p>使用springMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC架构与SpringMVC执行原理</title>
      <link href="/posts/8e55cf9f.html"/>
      <url>/posts/8e55cf9f.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是MVC架构？"><a href="#1-什么是MVC架构？" class="headerlink" title="1. 什么是MVC架构？"></a>1. 什么是MVC架构？</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201208162002.png" alt="https://blog.csdn.net/zhouym_/article/details/90611839"></p><ul><li>MVC是<code>模型(Model)、视图(View)、控制器(Controller)</code>的简写，是一种软件设计规范。</li><li>MVC将<code>业务逻辑、数据、视图</code>分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。不同的MVC存在差异。</li></ul><p><strong>Model层:</strong> 在模型层中又可以分为两层，即Service层和Dao层,这两层的主要功能是：</p><ul><li>Service层: 负责一些业务处理，比如说：获取数据库连接，关闭数据库连接，事务回滚或者一些复杂的逻辑业务处理</li><li>Dao层：(Database Accept Object)  负责访问数据库，对数据的操作，获取结果集，将结果集中的数据装到OV（Object Value）对象中，之后再返回给Service层</li></ul><p><strong>Controller层：</strong>主要功能是接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个<code>调度员</code>的工作。</p><p><strong>View层：</strong>主要负责显示数据（Html、Css、jQuery等等）,一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>MVC框架要做哪些事情</strong></p><ol><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp / html 等表示层数据 .</li></ol><p><strong>说明：</strong></p><p>​    常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p><h2 id="2-什么是SpringMVC？"><a href="#2-什么是SpringMVC？" class="headerlink" title="2. 什么是SpringMVC？"></a>2. 什么是SpringMVC？</h2><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web" target="_blank" rel="noopener">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><p> <strong>Spring MVC的特点：</strong></p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> ( 调度Servlet ) 设计。</p><p><code>DispatcherServlet的作用是将请求分发到不同的处理器</code>。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p><h2 id="3-SpringMVC执行原理"><a href="#3-SpringMVC执行原理" class="headerlink" title="3. SpringMVC执行原理"></a>3. SpringMVC执行原理</h2><h3 id="2-2、中心控制器DispatcherServlet"><a href="#2-2、中心控制器DispatcherServlet" class="headerlink" title="2.2、中心控制器DispatcherServlet"></a>2.2、中心控制器DispatcherServlet</h3><p>​    Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本可以采用基于注解的@Controller声明方式。</p><p>​    Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，<strong>DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)</strong>。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201208230508.png" alt="image-20201208230508534"></p><p><strong>SpringMVC的原理如下图所示：</strong></p><p>​    当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201208235448.png" alt="image-20201208235448309"></p><p>详细描述，节选自《Spring4实战》：</p><ul><li>在请求离开浏览器时，会带有用户所请求内容的信息，至少会包含请求的URL。但是还可能带有其他的信息，例如用户提交的表单信息。</li><li><code>(1)</code>请求旅程的第一站是 Spring的DispatcherServlet，与大多数基于Java的Web框架一样，Spring MVC所有的请求都会通过一个前端控制器( front controller) Servlet。前端控制器是常用的Web应用程序模式，在这里一个单实例的Servlet 将请求委托给应用程序的其他组件来执行实际的处理。<code>在Spring MVC中，DispatcherServlet就是前端控制器。</code></li><li><code>(2,3,4)</code> DispatcherServlet的任务是将请求发送给Spring MVC控制器(controller)。控制器是一个用于处理请求的Spring 组件。在典型的应用程序中可能会有多个控制器,DispatcherServlet需要知道应该将请求发送给哪个控制器。所以<code>DispatcherServlet会查询一个或多个处理器映射(handler mapping)来确定请求的下一站在哪里。</code>处理器映射会根据请求所携带的URL信息来进行决策。</li><li><code>(5,6)</code> <code>一旦选择了合适的控制器，DispatcherServlet 会将请求发送给选中的控制器目。</code>到了控制器，请求会卸下其负载(用户提交的信息)并耐心等待控制器处理这些信息。(实际上，设计良好的控制器本身只处理很少甚至不处理工作，而是将业务逻辑委托给一个或多个service服务对象进行处理。)</li><li><code>(7,8)</code> 控制器在完成逻辑处理后，通常会产生一些信息，这些信息需要返回给用户并在浏览器上显示。这些信息被称为<code>模型(mode1)</code>。不过仅仅给用户返回原始的信息是不够的一这些信息需 要以用户友好的方式进行格式化，一般会是HTML。所以，信息需要发送给一个<code>视图(view)</code>, 通常会是JSP。<code>控制器所做的最后一件事就是将模型数据打包，并且标示出用于渲染输出的视图名</code>。它接下来会<code>将请求连同模型和视图名</code>发送回DispatcherServlet</li><li><code>(9,10)</code> 这样,控制器就不会与特定的视图相耦合，传递给DispatcherServlet的视图名并不直接表示某个特定的JSP。实际上，它甚至并不能确定视图就是JSP。相反，它仅仅传递了一个<code>逻辑名称</code>，这个名字将会用来查找产生结果的真正视图。DispatcherServlet将会使用<code>视图解析器(view resolver)来将逻辑视图名匹配为一个特定的视图实现</code>，它可能是也可能不是JSP。</li><li><code>(11)</code> 既然DispatcherServlet已经知道由哪个视图渲染结果，那请求的任务基本上也就完成了。它的最后一站是视图的实现(可能是JSP)，在这里它交付模型数据。请求的任务就完成了。视图将使用模型数据渲染输出，这个输出会通过响应对象传递给客户端(不会像听上去那样硬编码)。</li></ul><p><strong>参考：</strong></p><ul><li><a href="https://book.douban.com/subject/26767354/" target="_blank" rel="noopener">《Spring实战（第4版）》</a></li><li><a href="https://www.bilibili.com/video/BV1aE41167Tu?p=8" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1aE41167Tu?p=8</a></li><li><a href="http://www.10qianwan.com/articledetail/731021.html" target="_blank" rel="noopener">http://www.10qianwan.com/articledetail/731021.html</a></li><li><a href="https://blog.csdn.net/zhouym_/article/details/90611839" target="_blank" rel="noopener">https://blog.csdn.net/zhouym_/article/details/90611839</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringMVC </tag>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring AOP事务管理</title>
      <link href="/posts/ee8d0c39.html"/>
      <url>/posts/ee8d0c39.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-回顾事务"><a href="#1-回顾事务" class="headerlink" title="1. 回顾事务"></a>1. 回顾事务</h2><p><strong>事务就是把一系列的动作当成一个独立的工作单元，这些动作要么全部完成，要么全部不起作用。</strong></p><p><strong>事务四个属性ACID：</strong></p><ol><li><p>原子性（atomicity）</p><ul><li>事务是原子性操作，由一系列动作组成，事务的原子性确保动作要么全部完成，要么完全不起作用</li></ul></li><li><p>一致性（consistency）</p><ul><li>一旦所有事务动作完成，事务就要被提交。数据和资源处于一种满足业务规则的一致性状态中</li></ul></li><li><p>隔离性（isolation）</p><ul><li>可能多个事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏</li></ul></li><li><p>持久性（durability）</p><ul><li>事务一旦完成，无论系统发生什么错误，结果都不会受到影响。通常情况下，事务的结果被写到持久化存储器中</li></ul></li></ol><h2 id="2-没有事务的错误案例"><a href="#2-没有事务的错误案例" class="headerlink" title="2. 没有事务的错误案例"></a>2. 没有事务的错误案例</h2><p><strong>这里列举一个没有进行事务处理的错误情况：</strong></p><p>文件目录结构以及最初的数据表数据：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201208124359.png" alt="image-20201208124359090"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201208124616.png" alt="image-20201208124616754"></p><p>1、User.java实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String pwd;   <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", pwd='"</span> + pwd + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、UserDao.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//添加一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//根据id删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、UserDao.xml文件，我们故意把 deletes 写错，测试！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.bithachi.dao.UserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser"</span> <span class="attr">parameterType</span>=<span class="string">"cn.bithachi.pojo.User"</span>&gt;</span></span><br><span class="line">        insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--我们故意把 deletes 写错，测试！--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">"deleteUser"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">         deletes from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、编写UserDao接口的实现类UserDaoImpl，在实现类中，我们去操作一波</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一些操作</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">4</span>,<span class="string">"小明"</span>,<span class="string">"123456"</span>);</span><br><span class="line">        UserDao mapper = getSqlSession().getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        mapper.addUser(user);</span><br><span class="line">        mapper.deleteUser(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        UserDao mapper = getSqlSession().getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> mapper.addUser(user);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        UserDao mapper = getSqlSession().getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> mapper.deleteUser(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、Mybatis配置文件：mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.bithachi.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、Mybatis-Spring插件配置文件：mybatis-spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源: 这里使用Spring的数据源  其它数据源：c3p0 dbcp druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/forstudy?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联Mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联SQL映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:cn/bithachi/dao/*.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、Spring总配置文件：applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"mybatis-spring.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    UserDao mapper = (UserDao) context.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    List&lt;User&gt; user = mapper.selectUser();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201208125114.png" alt="image-20201208125113824"></p><p>报错：sql异常，delete写错了</p><p>结果 ：插入成功！</p><p>没有进行事务的管理；我们想让他们都成功才成功，有一个失败，就都失败，我们就应该需要<strong>事务！</strong></p><p>以前我们都需要自己手动管理事务，十分麻烦！</p><p>但是Spring给我们提供了事务管理，我们只需要配置即可；</p><h2 id="3-Spring中的事务管理"><a href="#3-Spring中的事务管理" class="headerlink" title="3. Spring中的事务管理"></a>3. Spring中的事务管理</h2><p>Spring在不同的事务管理API之上定义了一个抽象层，使得开发人员不必了解底层的事务管理API就可以使用Spring的事务管理机制。</p><p>Spring支持<code>编程式事务管理</code>和<code>声明式的事务管理</code>。</p><p><strong>编程式事务管理</strong></p><ul><li>将事务管理<code>代码嵌到业务方法中来控制事务的提交和回滚</code></li><li>缺点：必须在每个事务操作业务逻辑中包含额外的事务管理代码</li></ul><p><strong>声明式事务管理</strong></p><ul><li>一般情况下比编程式事务好用。</li><li>将事务管理代码从业务方法中分离出来，以声明的方式来实现事务管理。</li><li>将事务管理作为横切关注点，通过aop方法模块化。Spring中<code>通过Spring AOP框架支持声明式事务管理</code>。</li></ul><p><strong>使用Spring管理事务，注意头文件的约束导入 : tx</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlns:tx="http://www.springframework.org/schema/tx"</span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd"&gt;</span><br></pre></td></tr></table></figure><p><strong>spring事务传播特性：</strong></p><p><code>&lt;tx:method name=&quot;add&quot; propagation=&quot;REQUIRED&quot;/&gt;</code></p><p>事务传播行为就是多个事务方法相互调用时，事务如何在这些方法间传播。spring支持7种事务传播行为：</p><ul><li>propagation_requierd：如果当前没有事务，就新建一个事务，如果已存在一个事务中，加入到这个事务中，这是最常见的选择。</li><li>propagation_supports：支持当前事务，如果没有当前事务，就以非事务方法执行。</li><li>propagation_mandatory：使用当前事务，如果没有当前事务，就抛出异常。</li><li>propagation_required_new：新建事务，如果当前存在事务，把当前事务挂起。</li><li>propagation_not_supported：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</li><li>propagation_never：以非事务方式执行操作，如果当前事务存在则抛出异常。</li><li>propagation_nested：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行与propagation_required类似的操作</li></ul><p>Spring 默认的事务传播行为是 PROPAGATION_REQUIRED，它适合于绝大多数的情况。</p><p>假设 ServiveX#methodX() 都工作在事务环境下（即都被 Spring 事务增强了），假设程序中存在如下的调用链：Service1#method1()-&gt;Service2#method2()-&gt;Service3#method3()，那么这 3 个服务类的 3 个方法通过 Spring 的事务传播机制都工作在同一个事务中。</p><p>就好比，我们刚才的几个方法存在调用，所以会被放在一组事务当中！</p><p>现在我们为上面的例子加上事务管理，修改mybatis-spring.xml配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       https://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源: 这里使用Spring的数据源  其它数据源：c3p0 dbcp druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/forstudy?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联Mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联SQL映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:cn/bithachi/dao/*.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置声明式事务管理器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置事务通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--配置哪些方法使用什么样的事务,配置事务的传播特性--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"search*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置aop织入事务--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"txPointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.bithachi.dao.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次进行测试test2():</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201208150822.png" alt="image-20201208150822268"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 事务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring整合Mybatis</title>
      <link href="/posts/3513a7dc.html"/>
      <url>/posts/3513a7dc.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-配置pom-xml"><a href="#1-配置pom-xml" class="headerlink" title="1. 配置pom.xml"></a>1. 配置pom.xml</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.bithachi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring06<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-回忆MyBatis"><a href="#2-回忆MyBatis" class="headerlink" title="2. 回忆MyBatis"></a>2. 回忆MyBatis</h2><p>在学习Spring整合Mybatis之前，先通过一个例子回顾一下Mybatis的写法。</p><p><strong>文件目录结构：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201207205848.png" alt="image-20201207205841274"></p><p><strong>编写pojo实体类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String pwd;   <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", pwd='"</span> + pwd + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>编写mybatis的配置文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.bithachi.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/forstudy?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.bithachi.dao"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>UserDao接口编写</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口对应的Mapper映射文件</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.bithachi.dao.UserDao"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>测试类</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">    SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">    SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">    UserDao mapper = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user: userList)&#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201207211744.png" alt="image-20201207211744732"></p><h2 id="3-MyBatis-Spring插件"><a href="#3-MyBatis-Spring插件" class="headerlink" title="3. MyBatis-Spring插件"></a>3. MyBatis-Spring插件</h2><p>Spring整合Mybatis需要MyBatis-Spring这一款插件，所以我们有必要对此插件有一些了解。</p><h3 id="3-1-什么是-MyBatis-Spring？"><a href="#3-1-什么是-MyBatis-Spring？" class="headerlink" title="3.1 什么是 MyBatis-Spring？"></a>3.1 什么是 MyBatis-Spring？</h3><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。它将允许 MyBatis 参与到 Spring 的事务管理之中，创建映射器 mapper 和 <code>SqlSession</code> 并注入到 bean 中，以及将 Mybatis 的异常转换为 Spring 的 <code>DataAccessException</code>。 最终，可以做到应用代码不依赖于 MyBatis，Spring 或 MyBatis-Spring。</p><p>更多信息官方文档已经很详细了，MyBatis-Spring官方文档：<a href="http://www.mybatis.org/spring/zh/index.html" target="_blank" rel="noopener">http://www.mybatis.org/spring/zh/index.html</a></p><h3 id="3-2-版本匹配"><a href="#3-2-版本匹配" class="headerlink" title="3.2 版本匹配"></a>3.2 版本匹配</h3><p>MyBatis-Spring 需要以下版本：</p><table><thead><tr><th align="left">MyBatis-Spring</th><th align="left">MyBatis</th><th align="left">Spring Framework</th><th align="left">Spring Batch</th><th align="left">Java</th></tr></thead><tbody><tr><td align="left"><strong>2.0</strong></td><td align="left">3.5+</td><td align="left">5.0+</td><td align="left">4.0+</td><td align="left">Java 8+</td></tr><tr><td align="left"><strong>1.3</strong></td><td align="left">3.4+</td><td align="left">3.2.2+</td><td align="left">2.1+</td><td align="left">Java 6+</td></tr></tbody></table><h2 id="4-Spring整合Mybatis方式一"><a href="#4-Spring整合Mybatis方式一" class="headerlink" title="4. Spring整合Mybatis方式一"></a>4. Spring整合Mybatis方式一</h2><p><strong>文件目录结构：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201207211920.png" alt="image-20201207211920472"></p><p>1、Mybatis配置文件mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.bithachi.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、Mybatis-spring插件的配置文件mybatis-spring.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置数据源: 这里使用Spring的数据源  其它数据源：c3p0 dbcp druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/forstudy?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置SqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionFactoryBean"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联Mybatis配置文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:mybatis-config.xml"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联SQL映射文件--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mapperLocations"</span> <span class="attr">value</span>=<span class="string">"classpath:cn/bithachi/dao/*.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册sqlSessionTemplate, 创建sqlSession, 关联sqlSessionFactory--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sqlSession"</span> <span class="attr">class</span>=<span class="string">"org.mybatis.spring.SqlSessionTemplate"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--利用构造器注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、Spring总配置文件：applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"mybatis-spring.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSession"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、增加Dao接口的实现类UserDaoImpl；<code>私有化sqlSessionTemplate</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//sqlSession不用我们自己创建了，由Spring来管理注入</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSession</span><span class="params">(SqlSessionTemplate sqlSession)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSession = sqlSession;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserDao mapper = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    UserDao mapper = (UserDao) context.getBean(<span class="string">"userDao"</span>);</span><br><span class="line">    List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user: userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201207211801.png" alt="image-20201207211801296"></p><h2 id="5-Spring整合Mybatis方式二"><a href="#5-Spring整合Mybatis方式二" class="headerlink" title="5. Spring整合Mybatis方式二"></a>5. Spring整合Mybatis方式二</h2><p>xxxdao继承SqlSessionDaoSupport类 , 直接利用 getSqlSession() 获得 , 然后直接注入SqlSessionFactory . 比起方式一 , 不需要管理SqlSessionTemplate , 而且对事务的支持更加友好 ，可跟踪源码查看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.mybatis.spring.support;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.dao.support.DaoSupport;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">extends</span> <span class="title">DaoSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSessionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlSessionDaoSupport</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//Spring进行注入，创建SqlSessionTemplate</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionFactory</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.sqlSessionTemplate == <span class="keyword">null</span> || sqlSessionFactory != <span class="keyword">this</span>.sqlSessionTemplate.getSqlSessionFactory()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.sqlSessionTemplate = <span class="keyword">this</span>.createSqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> SqlSessionTemplate <span class="title">createSqlSessionTemplate</span><span class="params">(SqlSessionFactory sqlSessionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> SqlSessionFactory <span class="title">getSqlSessionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionTemplate != <span class="keyword">null</span> ? <span class="keyword">this</span>.sqlSessionTemplate.getSqlSessionFactory() : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSqlSessionTemplate</span><span class="params">(SqlSessionTemplate sqlSessionTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sqlSessionTemplate = sqlSessionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">getSqlSessionTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.sqlSessionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">checkDaoConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Assert.notNull(<span class="keyword">this</span>.sqlSessionTemplate, <span class="string">"Property 'sqlSessionFactory' or 'sqlSessionTemplate' are required"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实践检验：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201207212621.png" alt="image-20201207212621774"></p><p>1、编写UserDaoImpl2实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.support.SqlSessionDaoSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl2</span> <span class="keyword">extends</span> <span class="title">SqlSessionDaoSupport</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserDao mapper = getSqlSession().getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">return</span> mapper.selectUser();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、修改applicationContext.xml，注册Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"mybatis-spring.xml"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.dao.UserDaoImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSession"</span> <span class="attr">ref</span>=<span class="string">"sqlSession"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userDao2"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.dao.UserDaoImpl2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sqlSessionFactory"</span> <span class="attr">ref</span>=<span class="string">"sqlSessionFactory"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">    UserDao mapper = (UserDao) context.getBean(<span class="string">"userDao2"</span>);</span><br><span class="line">    List&lt;User&gt; userList = mapper.selectUser();</span><br><span class="line">    <span class="keyword">for</span> (User user: userList) &#123;</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201207212632.png" alt="image-20201207212632794"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之AOP的思想与实现</title>
      <link href="/posts/2332360.html"/>
      <url>/posts/2332360.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-AOP思想"><a href="#1-AOP思想" class="headerlink" title="1. AOP思想"></a>1. AOP思想</h2><p>关于AOP的思想可参考<a href="https://www.bithachi.cn/posts/71fa00ec.html">Spring 入门图解（体系结构 - IOC-DI-AOP）</a></p><h2 id="2-为什么使用AOP？"><a href="#2-为什么使用AOP？" class="headerlink" title="2. 为什么使用AOP？"></a>2. 为什么使用AOP？</h2><p>为了更清晰的逻辑，可以让你的业务逻辑去关注自己本身的业务，而不去想一些其他的事情，这些其他的事情包括：安全，事务，日志等。可以少写很多公共的代码。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201162258.png" alt="image-20201201162258897"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201164426.png" alt="img"></p><h2 id="3-AOP术语"><a href="#3-AOP术语" class="headerlink" title="3. AOP术语"></a>3. AOP术语</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201205204327.png" alt="image-20201205204327137"></p><h3 id="3-1-通知（Advice）"><a href="#3-1-通知（Advice）" class="headerlink" title="3.1 通知（Advice）"></a>3.1 通知（Advice）</h3><p>　　就是你想要的功能，要执行的方法函数，也就是上面说的 安全，事物，日志等。先定义好，然后在想用的地方用一下。</p><h3 id="3-2-连接点（JoinPoint）"><a href="#3-2-连接点（JoinPoint）" class="headerlink" title="3.2 连接点（JoinPoint）"></a>3.2 连接点（JoinPoint）</h3><p>　　就是spring允许你使用通知的地方，基本每个方法的前，后（两者都有也行），或抛出异常时都可以是连接点，spring只支持方法连接点，其他如aspectJ还可以让你在构造器或属性注入时，连接点是程序执行时的某一个时刻。</p><h3 id="3-3-切入点（Pointcut）"><a href="#3-3-切入点（Pointcut）" class="headerlink" title="3.3 切入点（Pointcut）"></a>3.3 切入点（Pointcut）</h3><p>　　在上面说的连接点的基础上，来定义切入点，你的一个类里，有15个方法，那就有几十个连接点了，但是你并不想在所有方法附近都使用通知，你只想让其中的几个，在调用这几个方法之前，之后或者抛出异常时干点什么，那么就用切点来定义这几个方法，让切点来筛选连接点，选中那几个你想要的方法。</p><h3 id="3-4-切面（Aspect）"><a href="#3-4-切面（Aspect）" class="headerlink" title="3.4 切面（Aspect）"></a>3.4 切面（Aspect）</h3><p>　　<code>切面是通知和切入点的结合</code>,可以理解为一个目标对象的代理类。连接点就是为了让你好<strong>理解</strong>切点，搞出来的，明白这个<strong>概念</strong>就行了。通知说明了干什么和什么时候干（什么时候通过方法名中的before,after，around等就能知道），而切入点说明了在哪干（指定到底是在哪个方法的前后执行[纺入]通知），这就是一个完整的切面定义。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201205205104.png" alt="image-20201205205103969"></p><h3 id="3-5-引入（introduction）"><a href="#3-5-引入（introduction）" class="headerlink" title="3.5 引入（introduction）"></a>3.5 引入（introduction）</h3><p>　　允许我们向现有的类添加新方法或属性。就是把切面定义的新方法或属性用到目标类中。</p><h3 id="3-6-目标（target）"><a href="#3-6-目标（target）" class="headerlink" title="3.6 目标（target）"></a>3.6 目标（target）</h3><p>　　引入中所提到的目标类，也就是要被通知，被植入通知的对象，也就是真正的业务逻辑，他可以在毫不知情的情况下，被咱们织入切面。而自己专注于业务本身的逻辑。</p><h3 id="3-7-代理-proxy"><a href="#3-7-代理-proxy" class="headerlink" title="3.7 代理(proxy)"></a>3.7 代理(proxy)</h3><p>　由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的<code>中介</code>。这个中介可以做一些多余的非核心的事情，把核心的事情交给被代理的对象处理。</p><h3 id="3-8-织入-weaving"><a href="#3-8-织入-weaving" class="headerlink" title="3.8 织入(weaving)"></a>3.8 织入(weaving)</h3><p>　　<code>把切面应用到目标对象来创建新的代理对象的过程</code>。这可以在<code>编译时</code>(比如使用 AspectJ 编译器)、<code>加载时</code>或者<code>运行时</code>完成。Spring AOP 跟其他纯 Java AOP 框架一样，只在<code>运行时执行织入</code>。</p><h2 id="4-AspectJ切点表达式语言定义与编写切点"><a href="#4-AspectJ切点表达式语言定义与编写切点" class="headerlink" title="4. AspectJ切点表达式语言定义与编写切点"></a>4. AspectJ切点表达式语言定义与编写切点</h2><p>Spring是基于动态代理，所以Spring 只支持方法连接点。这与一些其他的AOP框架是不同的，例如AspectJ和JBoss,除了方法切点,它们还提供了字段和构造器接人点。</p><p>Spring缺少对字段连接点的支持，无法让我们创建细粒度的通知，例如拦截对象字段的修改。而且它不支持构造器连接点，我们就无法在bean创建时应用通知。<br>但是方法拦截可以满足绝大部分的需求。</p><p>如果需要方法拦截之外的连接点拦截功能，那么我们可以利用Aspect来补充Spring AOP的功能。</p><p><strong>定义切点：</strong></p><p>在Spring AOP中，要使用<code>AspectJ的切点表达式语言来定义切点</code>。下面列出了Spring AOP所支持的AspectJ切点指示器。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201205210235.png" alt="image-20201205210235730"></p><p><strong>编写切点：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201205211415.png" alt="image-20201205211414959"></p><h2 id="5-通过-Spring-API-xml-实现AOP"><a href="#5-通过-Spring-API-xml-实现AOP" class="headerlink" title="5. 通过 Spring API +xml 实现AOP"></a>5. 通过 Spring API +xml 实现AOP</h2><p><strong>文件目录结构：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201205235059.png" alt="image-20201205235059546"></p><p>使用AOP织入，需要导入一个依赖包！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>首先编写我们的业务接口和实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"增加用户"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"删除用户"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"更新用户"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">search</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"查询用户"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后去写我们的增强类 , 我们编写两个 , <code>一个前置增强 一个后置增强</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log</span> <span class="keyword">implements</span> <span class="title">MethodBeforeAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//method : 要执行的目标对象的方法</span></span><br><span class="line">   <span class="comment">//objects : 被调用的方法的参数</span></span><br><span class="line">   <span class="comment">//Object : 目标对象</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">(Method method, Object[] objects, Object o)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       System.out.println( o.getClass().getName() + <span class="string">"的"</span> + method.getName() + <span class="string">"方法被执行了"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AfterLog</span> <span class="keyword">implements</span> <span class="title">AfterReturningAdvice</span> </span>&#123;</span><br><span class="line">   <span class="comment">//returnValue 返回值</span></span><br><span class="line">   <span class="comment">//method被调用的方法</span></span><br><span class="line">   <span class="comment">//args 被调用的方法的对象的参数</span></span><br><span class="line">   <span class="comment">//target 被调用的目标对象</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"执行了"</span> + target.getClass().getName()</span><br><span class="line">       +<span class="string">"的"</span>+method.getName()+<span class="string">"方法,"</span></span><br><span class="line">       +<span class="string">"返回值："</span>+returnValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后去spring的文件中注册 , 并实现aop切入实现 , 注意导入约束 .</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"log"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.log.Log"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"afterLog"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.log.AfterLog"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义切入点 expression:表达式定义要插入通知的切点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.bithachi.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--执行环绕; advice-ref执行的通知 . pointcut-ref切入点--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"log"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"afterLog"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">       UserService userService = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">       userService.search();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201205235810.png" alt="image-20201205235809926"></p><p>Spring的Aop就是将公共的业务 (日志 , 安全等) 和领域业务结合起来 , 当执行领域业务时 , 将会把公共业务加进来 . 实现公共业务的重复利用 . 领域业务更纯粹 , 程序猿专注领域业务 , 其本质还是动态代理 . </p><h2 id="6-自定义类-xml来实现AOP"><a href="#6-自定义类-xml来实现AOP" class="headerlink" title="6. 自定义类+xml来实现AOP"></a>6. 自定义类+xml来实现AOP</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201206000228.png" alt="image-20201206000228371"></p><p>目标业务类不变依旧是userServiceImpl</p><p>第一步 : 写我们自己的一个切入类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DiyPointcut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mybefore</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"---------方法执行前---------"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myafter</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"---------方法执行后---------"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去spring中配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--第二种方式自定义实现--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--注册bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"diy"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.diy.DiyPointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--aop的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--定义切面为diy--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"diy"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--定义切点--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"diyPonitcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* cn.bithachi.service.UserServiceImpl.*(..))"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--在切点位置，使用diy切面里面指定的method="xxx"方法--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">"diyPonitcut"</span> <span class="attr">method</span>=<span class="string">"mybefore"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">"diyPonitcut"</span> <span class="attr">method</span>=<span class="string">"myafter"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">       UserService userService = (UserService) context.getBean(<span class="string">"userService"</span>);</span><br><span class="line">       userService.add();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201206000528.png" alt="image-20201206000528815"></p><h2 id="7-使用注解-xml实现AOP"><a href="#7-使用注解-xml实现AOP" class="headerlink" title="7. 使用注解+xml实现AOP"></a>7. 使用注解+xml实现AOP</h2><p>AspectJ提供了五个注解来定义通知，如下图所示：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201206000841.png" alt="image-20201206000841559"></p><p>下图展示了spring aop在方法正常返回和抛出异常时，各个通知的执行顺序。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201206001039.png" alt="image-20201206001039772"></p><p><strong>代码实践：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201206001854.png" alt="image-20201206001854505"></p><p>第一步：编写一个注解实现的增强类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Aspect定义这是一个切面</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationPointcut</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Pointcut定义切点，可复用，减少重复编写代码</span></span><br><span class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* cn.bithachi.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mypointcut</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(* cn.bithachi.service.UserServiceImpl.*(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---------方法执行前---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span>(<span class="string">"mypointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---------方法执行后---------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"mypointcut()"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">around</span><span class="params">(ProceedingJoinPoint jp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"环绕前"</span>);</span><br><span class="line">        System.out.println(<span class="string">"签名:"</span>+jp.getSignature());</span><br><span class="line">        <span class="comment">//执行目标方法proceed</span></span><br><span class="line">        Object proceed = jp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"环绕后"</span>);</span><br><span class="line">        System.out.println(proceed);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步：在Spring配置文件中，注册bean，并增加支持注解的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/aop/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--注册bean，并增加支持注解的配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"annotationPointcut"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.config.AnnotationPointcut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.service.UserServiceImpl"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>aop:aspectj-autoproxy说明:</strong></p><ul><li>通过aop命名空间的&lt;aop:aspectj-autoproxy /&gt;声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring 在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被&lt;aop:aspectj-autoproxy /&gt;隐藏起来了</li><li>&lt;aop:aspectj-autoproxy /&gt;有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为&lt;aop:aspectj-autoproxy  poxy-target-class=”true”/&gt;时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring自动装配Bean的三种方式[xml-注解-Java配置类]</title>
      <link href="/posts/f089300a.html"/>
      <url>/posts/f089300a.html</url>
      
        <content type="html"><![CDATA[<p>首先我们创建三个类，Cat.java Dog.java People.java ,People所依赖的属性有cat和dog，然后通过xml，注解，java配置类三种方式说明怎么自动装配Bean，来进行举例说明和结果截图演示。</p><h2 id="1-采用xml实现自动装配-byName-byType"><a href="#1-采用xml实现自动装配-byName-byType" class="headerlink" title="1.采用xml实现自动装配(byName-byType)"></a>1.采用xml实现自动装配(byName-byType)</h2><p>这里只说明通过xml配置文件采用byName和byType实现自动装配，关于通过xml依赖注入可参考：</p><ul><li><a href="https://www.bithachi.cn/posts/7aa31a4f.html">Spring【IOC 创建对象的有参无参方式 —Spring 配置实操】</a></li><li><a href="https://www.bithachi.cn/posts/af95be50.html">Spring 之依赖注入实操（构造器 - 普通值 - Array-List-Map-set-Properties-c-p）</a></li></ul><p><strong>文件目录结构：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201203200641.png" alt="image-20201203200641221"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"miao~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"wang~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>beans.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--autowire="byName" id名必须是setName中的Name值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Cat"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--自动在people下找name属性名，并通过相应的setName方法进行注入Bean对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.People"</span> <span class="attr">autowire</span>=<span class="string">"byName"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"str"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    autowire="byType" id不影响，</span></span><br><span class="line"><span class="comment">    但是必须要求Class的Type只有一种，即不允许有id名不同但Class的Type类型相同的Bean存在</span></span><br><span class="line"><span class="comment">    否则会报错</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;bean id="dog2" class="cn.bithachi.pojo.Dog"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;bean   class="cn.bithachi.pojo.Cat"/&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--        &lt;bean id="people" class="cn.bithachi.pojo.People" autowire="byType"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;property name="str" value="BitHachi"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    People people = (People) context.getBean(<span class="string">"people"</span>);</span><br><span class="line">    people.getCat().shout();</span><br><span class="line">    people.getDog().shout();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201203200955.png" alt="image-20201203200955019"></p><ul><li><p>当一个bean节点带有<code>autowire=&quot;byName&quot;</code>的属性时。</p><ol><li>将查找其类中所有的set方法名，例如setCat，获得将set去掉并且首字母小写的字符串，即cat。</li><li>然后去spring容器中寻找是否有此字符串名称id的对象。</li><li>如果有，就取出注入；如果没有，就报空指针异常。</li></ol></li></ul><ul><li><p>当一个bean节点带有<code>autowire=&quot;byType&quot;</code>的属性时。</p><p>需要保证：同一类型的对象，在spring容器中唯一。如果不唯一，会报不唯一的异常。<code>NoUniqueBeanDefinitionException</code>。</p></li></ul><h2 id="2-采用-xml-注解-实现自动装配"><a href="#2-采用-xml-注解-实现自动装配" class="headerlink" title="2. 采用(xml+注解)实现自动装配"></a>2. 采用(xml+注解)实现自动装配</h2><p><strong>Dog和Cat类不做修改</strong></p><h3 id="2-1-Autowired"><a href="#2-1-Autowired" class="headerlink" title="2.1 @Autowired"></a>2.1 @Autowired</h3><p><strong>@Autowired</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.beans.factory.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.CONSTRUCTOR, ElementType.METHOD, ElementType.PARAMETER, ElementType.FIELD, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Autowired是按byType类型自动转配的，不支持id匹配。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Autowired</span>是按byType自动注入的，不支持id匹配。</span></span><br><span class="line"><span class="comment">      spring容器对象context上下文自动在容器中找与Cat/Dog相对应name的Bean实例,实现<span class="doctag">@Autowired</span>注解的自动装配</span></span><br><span class="line"><span class="comment">      <span class="doctag">@Autowired</span>可以作用在变量、setter方法、构造函数、任意方法上。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span> </span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mysetDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-aop.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    引入context文件头</span></span><br><span class="line"><span class="comment">xmlns:context="http://www.springframework.org/schema/context"</span></span><br><span class="line"><span class="comment">http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="comment">    https://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启属性注解支持！--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--去掉dog和cat就会报错--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog1"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog2"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat1"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat2"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.People"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    <span class="comment">// spring容器对象context上下文自动在容器中找与Cat/Dog相对应name的Bean实例,实现@Autowired注解的自动装配</span></span><br><span class="line">    People people = (People) context.getBean(<span class="string">"people"</span>);</span><br><span class="line">    people.getCat().shout();</span><br><span class="line">    people.getDog().shout();</span><br><span class="line">    System.out.println(people.getStr());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201203210406.png" alt="image-20201203210406910"></p><p>如果去掉beans.xml中的cat和dog的Bean,则报错：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201203211416.png" alt="image-20201203211415871"></p><p>@Autowired(required=false)  说明：</p><ul><li>false，对象可以为null；</li><li>true，对象必须存对象，不能为null。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果允许对象为null，设置required = false,默认为true</span></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br></pre></td></tr></table></figure><h3 id="2-2-Qualifier"><a href="#2-2-Qualifier" class="headerlink" title="2.2 @Qualifier"></a>2.2 @Qualifier</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.beans.factory.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.FIELD, ElementType.METHOD, ElementType.PARAMETER, ElementType.TYPE, ElementType.ANNOTATION_TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Qualifier &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>@Qualifier</strong></p><ul><li>@Autowired是根据类型自动装配的，加上@Qualifier则可以根据byName的方式自动装配</li><li>@Qualifier不能单独使用。</li></ul><p>修改beans.xml，和People.java</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog1"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog2"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat1"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat2"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.People"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(<span class="string">"cat1"</span>)</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"dog2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mysetDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    People people = (People) context.getBean(<span class="string">"people"</span>);</span><br><span class="line">    people.getCat().shout();</span><br><span class="line">    people.getDog().shout();</span><br><span class="line">    System.out.println(people.getStr());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201203211114.png" alt="image-20201203211113979"></p><h3 id="2-3-Resource"><a href="#2-3-Resource" class="headerlink" title="2.3 @Resource"></a>2.3 @Resource</h3><ul><li>@Resource如有指定的name属性，先按该属性进行byName方式查找装配；</li><li>如果没有指定name属性，则进行默认的byName方式进行装配；</li><li>如果以上都不成功，则报异常。</li></ul><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-aop.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog1"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dog2"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Dog"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mycat"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat1"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"cat2"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Cat"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"people"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.People"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;第一种&gt;进行byName查找，及通过默认mycat查找与之对应的id为mycat的Bean</span></span><br><span class="line">    <span class="comment">//@Resource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//&lt;第二种&gt;直接通过byName找</span></span><br><span class="line">    <span class="comment">//@Resource(name="cat2")</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Cat mycat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mycat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"dog2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mysetDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    People people = (People) context.getBean(<span class="string">"people"</span>);</span><br><span class="line">    people.getCat().shout();</span><br><span class="line">    people.getDog().shout();</span><br><span class="line">    System.out.println(people.getStr());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201203212723.png" alt="image-20201203212723374"></p><h3 id="2-4-Component-扫描包"><a href="#2-4-Component-扫描包" class="headerlink" title="2.4 @Component+扫描包"></a>2.4 @Component+扫描包</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Indexed</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Component &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>文件目录结构：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201204110940.png" alt="image-20201204110940042"></p><p>beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/context/spring-context.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定注解扫描包,自动扫描Bean和注入属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"cn.bithachi.pojo"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"mycat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"miao~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"dog2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"wang~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="meta">@Component</span>(<span class="string">"mypeople"</span>)<span class="comment">// 相当于配置文件中 &lt;bean id="mypeople" class="当前注解的类"/&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"mycat"</span>)</span><br><span class="line">    <span class="keyword">private</span> Cat mycat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"BitHachi"</span>)<span class="comment">// 相当于配置文件中 &lt;property name="str" value="BitHachi"/&gt;</span></span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mycat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="meta">@Qualifier</span>(value = <span class="string">"dog2"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mysetDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"BitHachi222"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先执行上面的@Value("BitHachi")</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.str);</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    People people = (People) context.getBean(<span class="string">"mypeople"</span>);</span><br><span class="line">    people.getCat().shout();</span><br><span class="line">    people.getDog().shout();</span><br><span class="line">    System.out.println(people.getStr());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201204111123.png" alt="image-20201204111122645"></p><h3 id="2-6-scope"><a href="#2-6-scope" class="headerlink" title="2.6 @scope"></a>2.6 @scope</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.context.annotation;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Scope &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"scopeName"</span>)</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AliasFor</span>(<span class="string">"value"</span>)</span><br><span class="line">    <span class="function">String <span class="title">scopeName</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ScopedProxyMode <span class="title">proxyMode</span><span class="params">()</span> <span class="keyword">default</span> ScopedProxyMode.DEFAULT</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>singleton：默认的，Spring会采用单例模式创建这个对象。关闭工厂 ，所有的对象都会销毁。</li><li>prototype：多例模式。关闭工厂 ，所有的对象不会销毁。内部的垃圾回收机制会回收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="meta">@Value</span>(<span class="string">"BitHachi"</span>)</span><br><span class="line">   <span class="keyword">public</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试效果和更多解释：<a href="https://www.bithachi.cn/posts/6d85088a.html">Spring 中 Bean 的作用域（singleton-prototype-request-session-application）</a></p><h3 id="2-7-Component的衍生注解"><a href="#2-7-Component的衍生注解" class="headerlink" title="2.7  @Component的衍生注解"></a>2.7  @Component的衍生注解</h3><p><strong>@Component三个衍生注解</strong></p><p>为了更好的进行分层，Spring可以使用其它三个注解，功能一样，目前使用哪一个功能都一样。</p><ul><li>@Controller：web层</li><li>@Service：service层</li><li>@Repository：dao层</li></ul><p>写上这些注解，就相当于将这个类交给Spring管理装配了！</p><p><strong>spring5中这三个衍生注解的源代码：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = Component<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String value() default "";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Service &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = Component<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String value() default "";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.springframework.stereotype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.annotation.AliasFor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Repository &#123;</span><br><span class="line">    <span class="meta">@AliasFor</span>(</span><br><span class="line">        annotation = Component<span class="class">.<span class="keyword">class</span></span></span><br><span class="line"><span class="class">    )</span></span><br><span class="line">    String value() default "";</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Java-配置类"><a href="#3-Java-配置类" class="headerlink" title="3. Java 配置类"></a>3. Java 配置类</h2><p>JavaConfig 原来是 Spring 的一个子项目，它通过 Java 类的方式提供 Bean 的定义信息，在 Spring4 的版本， JavaConfig 已正式成为 Spring4 的核心功能 。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201204120221.png" alt="image-20201204120221394"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Cat;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Dog;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.People;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"><span class="doctag">@Import</span>(MyConfig2.class)  //导入合并其他配置类，类似于配置文件中的 inculde 标签</span></span><br><span class="line"><span class="comment"><span class="doctag">@ComponentScan</span>("cn.bithachi.pojo")//扫描包，装配带<span class="doctag">@Component</span>的Bean,</span></span><br><span class="line"><span class="comment">似于配置文件的&lt;context:component-scan base-package="cn.bithachi.pojo"/&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span>  <span class="comment">//代表这是一个配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//通过方法注册一个bean，这里的返回值就Bean的类型，方法名就是bean的id！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">mydog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span> <span class="comment">//通过方法注册一个bean，这里的返回值就Bean的类型，方法名就是bean的id！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">myCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Cat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span><span class="comment">//myPeople(Cat cat, Dog dog)按Bean类型byType进行装配</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">myPeople</span><span class="params">(Cat cat, Dog dog)</span> </span>&#123;</span><br><span class="line">        People people = <span class="keyword">new</span> People(cat, dog);</span><br><span class="line">        people.setStr(<span class="string">"This is a string."</span>);</span><br><span class="line">        <span class="keyword">return</span> people;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name = <span class="string">"dog"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"wang~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"miao~"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Cat cat;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(Cat cat, Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Cat <span class="title">getCat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCat</span><span class="params">(Cat cat)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cat = cat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">getDog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDog</span><span class="params">(Dog dog)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.dog = dog;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> AnnotationConfigApplicationContext(MyConfig<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Dog mydog = (Dog) applicationContext.getBean(<span class="string">"mydog"</span>);</span><br><span class="line">    mydog.shout();</span><br><span class="line">    System.out.println(mydog.name);</span><br><span class="line">    System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line">    People myPeople = (People) applicationContext.getBean(<span class="string">"myPeople"</span>);</span><br><span class="line">    myPeople.getCat().shout();</span><br><span class="line">    myPeople.getDog().shout();</span><br><span class="line">    System.out.println(myPeople.getStr());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201204120239.png" alt="image-20201204120239811"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> 自动装配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中Bean的作用域[xml]（singleton-prototype-request-session-application）</title>
      <link href="/posts/6d85088a.html"/>
      <url>/posts/6d85088a.html</url>
      
        <content type="html"><![CDATA[<h4 id="1-Bean作用域概述"><a href="#1-Bean作用域概述" class="headerlink" title="1. Bean作用域概述"></a>1. Bean作用域概述</h4><p>在Spring中，那些组成应用程序的主体及由Spring IoC容器所管理的对象，被称之为bean。简单地讲，bean就是由IoC容器初始化、装配及管理的对象 .</p><p>在Spring中，bean作用域用于确定哪种类型的bean实例应该从Spring容器中返回给调用者。</p><p>目前Spring Bean的作用域或者说范围主要有五种。</p><table><thead><tr><th>作用域</th><th>描述</th></tr></thead><tbody><tr><td>singleton</td><td>在spring IoC容器<code>仅存在一个Bean实例</code>，Bean以单例方式存在，bean作用域范围的默认值。</td></tr><tr><td>prototype</td><td><code>每次</code>从容器中调用Bean时，都<code>返回一个新的实例</code>，即每次调用getBean()时，相当于执行newXxxBean()。</td></tr><tr><td>request</td><td>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于web的Spring WebApplicationContext环境。</td></tr><tr><td>session</td><td>同一个HTTP Session共享一个Bean，不同Session使用不同的Bean。该作用域仅适用于web的Spring WebApplicationContext环境。</td></tr><tr><td>application</td><td>限定一个Bean的作用域为<code>ServletContext</code>的生命周期。该作用域仅适用于web的Spring WebApplicationContext环境。</td></tr></tbody></table><p>几种作用域中，request、session作用域仅在基于web的应用中使用（不必关心你所采用的是什么web应用框架），只能用在基于web的Spring ApplicationContext环境。</p><blockquote><p>下面将会以两个例子来验证singleton和prototype作用域，代码基础为我之前写的博客：<a href="https://www.bithachi.cn/posts/af95be50.html">https://www.bithachi.cn/posts/af95be50.html</a></p></blockquote><h4 id="2-Singleton"><a href="#2-Singleton" class="headerlink" title="2. Singleton"></a>2. Singleton</h4><p>当一个bean的作用域为Singleton，那么Spring IoC容器中只会存在一个共享的bean实例，并且所有对bean的请求，只要id与该bean定义相匹配，则只会返回bean的同一实例。Singleton是单例类型，就是在创建起容器时就同时自动创建了一个bean的对象，不管你是否使用，他都存在了，每次获取到的对象都是同一个对象。注意，Singleton作用域是Spring中的缺省作用域。要在XML中将bean定义成singleton，可以这样配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Student"</span> <span class="attr">scope</span>=<span class="string">"singleton"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">Student student1 = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">System.out.println(student1.hashCode());</span><br><span class="line">System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">Student student2 = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">System.out.println(student2.hashCode());</span><br><span class="line">System.out.println(student1==student2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201202151030.png" alt="image-20201202151030786"></p><h4 id="3-Prototype"><a href="#3-Prototype" class="headerlink" title="3. Prototype"></a>3. Prototype</h4><p>当一个bean的作用域为Prototype，表示一个bean定义对应多个对象实例。Prototype作用域的bean会导致在每次对该bean请求（将其注入到另一个bean中，或者以程序的方式调用容器的getBean()方法）时都会创建一个新的bean实例。Prototype是原型类型，它在我们创建容器的时候并没有实例化，而是当我们获取bean的时候才会去创建一个对象，而且我们每次获取到的对象都不是同一个对象。根据经验，对有状态的bean应该使用prototype作用域，而对无状态的bean则应该使用singleton作用域。在XML中将bean定义成prototype，可以这样配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Student"</span> <span class="attr">scope</span>=<span class="string">"prototype"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">Student student1 = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">System.out.println(student1.hashCode());</span><br><span class="line">System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">Student student2 = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">System.out.println(student2.hashCode());</span><br><span class="line">System.out.println(student1==student2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201202151644.png" alt="image-20201202151644019"></p><h4 id="4-Request"><a href="#4-Request" class="headerlink" title="4. Request"></a>4. Request</h4><p>当一个bean的作用域为Request，表示在一次HTTP请求中，一个bean定义对应一个实例；即每个HTTP请求都会有各自的bean实例，它们依据某个bean定义创建而成。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"loginAction"</span> <span class="attr">class</span>=<span class="string">"cn.xxx.LoginAction"</span> <span class="attr">scope</span>=<span class="string">"request"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>针对每次HTTP请求，Spring容器会根据loginAction bean的定义创建一个全新的LoginAction bean实例，且该loginAction bean实例仅在当前HTTP request内有效，因此可以根据需要放心的更改所建实例的内部状态，而其他请求中根据loginAction bean定义创建的实例，将不会看到这些特定于某个请求的状态变化。当处理请求结束，request作用域的bean实例将被销毁。</p><h4 id="5-Session"><a href="#5-Session" class="headerlink" title="5. Session"></a>5. Session</h4><p>当一个bean的作用域为Session，表示在一个HTTP Session中，一个bean定义对应一个实例。该作用域仅在基于web的Spring ApplicationContext情形下有效。考虑下面bean定义：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userPreferences"</span> <span class="attr">class</span>=<span class="string">"cn.xxx.UserPreferences"</span> <span class="attr">scope</span>=<span class="string">"session"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>针对某个HTTP Session，Spring容器会根据userPreferences bean定义创建一个全新的userPreferences bean实例，且该userPreferences bean仅在当前HTTP Session内有效。与request作用域一样，可以根据需要放心的更改所创建实例的内部状态，而别的HTTP Session中根据userPreferences创建的实例，将不会看到这些特定于某个HTTP Session的状态变化。当HTTP Session最终被废弃的时候，在该HTTP Session作用域内的bean也会被废弃掉。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> singleton </tag>
            
            <tag> prototype </tag>
            
            <tag> request </tag>
            
            <tag> session </tag>
            
            <tag> application </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring之依赖注入实操[xml]（构造器-普通值-Array-List-Map-set-Properties-c-p）</title>
      <link href="/posts/af95be50.html"/>
      <url>/posts/af95be50.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>关于<strong>依赖注入</strong>的思想可参考之前写的：<a href="https://www.bithachi.cn/posts/71fa00ec.html">https://www.bithachi.cn/posts/71fa00ec.html</a></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201202121257.png" alt="image-20201202121256844"></p><p>直接通过代码（+注释）和运行结果，一目了然！</p><h2 id="1-文件目录结构"><a href="#1-文件目录结构" class="headerlink" title="1.  文件目录结构"></a>1.  文件目录结构</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201202120712.png" alt="image-20201202120712547"></p><h2 id="2-不使用c-p命名空间的方式"><a href="#2-不使用c-p命名空间的方式" class="headerlink" title="2. 不使用c-p命名空间的方式"></a>2. 不使用c-p命名空间的方式</h2><h3 id="2-1-Student-java"><a href="#2-1-Student-java" class="headerlink" title="2.1  Student.java"></a>2.1  Student.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//地址</span></span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="comment">//拥有的书籍</span></span><br><span class="line">    <span class="keyword">private</span> String[] books;</span><br><span class="line">    <span class="comment">//爱好</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbys;</span><br><span class="line">    <span class="comment">//银行卡、学生卡……</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; card;</span><br><span class="line">    <span class="comment">//喜欢的游戏</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="comment">//妻子</span></span><br><span class="line">    <span class="keyword">private</span> String wife;</span><br><span class="line">    <span class="comment">//个人信息</span></span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        System.out.println(<span class="string">"有参构造器注入，初始化name="</span>+<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(Address address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBooks</span><span class="params">(String[] books)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHobbys</span><span class="params">(List&lt;String&gt; hobbys)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hobbys = hobbys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGames</span><span class="params">(Set&lt;String&gt; games)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWife</span><span class="params">(String wife)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setInfo</span><span class="params">(Properties info)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Address <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooks() &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getHobbys</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hobbys;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">getGames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWife</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String addressValue=<span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (address!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        addressValue=address.getAddress();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        addressValue=<span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", address="</span> +addressValue +</span><br><span class="line">                <span class="string">", books="</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">", hobbys="</span> + hobbys +</span><br><span class="line">                <span class="string">", \ncard="</span> + card +</span><br><span class="line">                <span class="string">", games="</span> + games +</span><br><span class="line">                <span class="string">", wife='"</span> + wife + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", info="</span> + info +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-Address-java"><a href="#2-2-Address-java" class="headerlink" title="2.2 Address.java"></a>2.2 Address.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Address</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-beans-xml"><a href="#2-3-beans-xml" class="headerlink" title="2.3 beans.xml"></a>2.3 beans.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">                           https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Address"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"中国"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"student"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构造器注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"王一"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--普通值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Bean值注入 ref--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"address"</span> <span class="attr">ref</span>=<span class="string">"address"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"books"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>红楼梦<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>水浒传<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--List注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hobbys"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>听歌<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>爬山<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Map注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"card"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"中国邮政"</span> <span class="attr">value</span>=<span class="string">"456456456465456"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"建设"</span> <span class="attr">value</span>=<span class="string">"1456682255511"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--set注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"games"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>BOB<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>COC<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Null注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"wife"</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Properties注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"学号"</span>&gt;</span>202065460604<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"性别"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"姓名"</span>&gt;</span>隔壁老王<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-Test"><a href="#2-4-Test" class="headerlink" title="2.4 Test"></a>2.4 Test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">//初始化Spring容器对象,容器自动使用Bean的无参和有参构造方法创建对象，执行构造方法！</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    Student student = (Student) context.getBean(<span class="string">"student"</span>);</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201202122152.png" alt="image-20201202122151791"></p><h2 id="3-使用c-p命名空间的方式"><a href="#3-使用c-p命名空间的方式" class="headerlink" title="3. 使用c-p命名空间的方式"></a>3. 使用c-p命名空间的方式</h2><h3 id="3-1-User-java"><a href="#3-1-User-java" class="headerlink" title="3.1 User.java"></a>3.1 User.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">"name="</span>+name+<span class="string">",age="</span>+age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-cpbeans-xml"><a href="#3-2-cpbeans-xml" class="headerlink" title="3.2 cpbeans.xml"></a>3.2 cpbeans.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">"http://www.springframework.org/schema/c"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">        https://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--导入约束 : xmlns:c="http://www.springframework.org/schema/c"--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--C(构造: Constructor)命名空间 , 属性依然要设置set方法--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--需要pojo类有一个有参构造函数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user1"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.User"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">c:name</span>=<span class="string">"BitHachi-1"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">c:age</span>=<span class="string">"18"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入约束 : xmlns:p="http://www.springframework.org/schema/p"--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--P(属性: properties)命名空间 , 属性依然要设置set方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user2"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.User"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">c:name</span>=<span class="string">"BitHachi-1"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">c:age</span>=<span class="string">"18"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:name</span>=<span class="string">"BitHachi-2"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">p:age</span>=<span class="string">"19"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Test"><a href="#3-3-Test" class="headerlink" title="3.3 Test"></a>3.3 Test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化Spring容器对象,容器自动使用Bean的无参和有参构造方法创建对象，执行构造方法！</span></span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"cpbeans.xml"</span>);</span><br><span class="line">    System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">    User user1 = (User) context.getBean(<span class="string">"user1"</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">    User user2 = context.getBean(<span class="string">"user2"</span>,User<span class="class">.<span class="keyword">class</span>)</span>;<span class="comment">//声明类型就不用强转了</span></span><br><span class="line">    System.out.println(user2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201202122407.png" alt="image-20201202122407755"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> DI </tag>
            
            <tag> c </tag>
            
            <tag> p </tag>
            
            <tag> 依赖注入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring[xml]【IOC创建对象的有参无参方式---Spring配置实操】</title>
      <link href="/posts/7aa31a4f.html"/>
      <url>/posts/7aa31a4f.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-文件目录结构"><a href="#0-文件目录结构" class="headerlink" title="0. 文件目录结构"></a>0. 文件目录结构</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201202713.png" alt="image-20201201202712864"></p><h2 id="1-创建对象的方式"><a href="#1-创建对象的方式" class="headerlink" title="1. 创建对象的方式"></a>1. 创建对象的方式</h2><h3 id="1-1-通过无参构造方法来创建"><a href="#1-1-通过无参构造方法来创建" class="headerlink" title="1.1 通过无参构造方法来创建"></a>1.1 通过无参构造方法来创建</h3><p>1、User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"user无参构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(String sex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"name="</span>+ name );</span><br><span class="line">        System.out.println(<span class="string">"sex="</span>+ sex );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">//在执行getBean的时候, user已经创建好了 , 通过无参构造</span></span><br><span class="line">        User user = (User) context.getBean(<span class="string">"user"</span>);</span><br><span class="line">        <span class="comment">//调用对象的方法 .</span></span><br><span class="line">        user.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果可以发现，在调用show方法之前，User对象已经通过无参构造初始化了！</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201194310.png" alt="image-20201201194310846"></p><h3 id="1-2-通过有参构造方法来创建"><a href="#1-2-通过有参构造方法来创建" class="headerlink" title="1.2 通过有参构造方法来创建"></a>1.2 通过有参构造方法来创建</h3><p>1、User.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加有参构造方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, String sex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--参数传值的三种方式--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--1.通过参数下标设置值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"男"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--2.通过参数类型设置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id="user" class="cn.bithachi.pojo.User"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg type="java.lang.String" value="BitHachi"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg type="java.lang.String" value="男"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--3.通过参数名字设置值--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id="user" class="cn.bithachi.pojo.User"&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg name="name" value="BitHachi"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;constructor-arg name="sex" value="男"/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    <span class="comment">//在执行getBean的时候, user已经创建好了 , 通过有参构造</span></span><br><span class="line">    User user = (User) context.getBean(<span class="string">"user"</span>);</span><br><span class="line">    <span class="comment">//调用对象的方法 .</span></span><br><span class="line">    user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201194620.png" alt="image-20201201194620050"></p><h3 id="1-3-没有使用getBean的初始化"><a href="#1-3-没有使用getBean的初始化" class="headerlink" title="1.3  没有使用getBean的初始化"></a>1.3  没有使用getBean的初始化</h3><p>1、UserT.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserT</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"user无参构造方法"</span>);</span><br><span class="line">        System.out.println(<span class="string">"name="</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、beans.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"男"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userT"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.UserT"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、 MyTest.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">    System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">    <span class="comment">//在执行getBean的时候, user已经创建好了 , 通过有参构造</span></span><br><span class="line">    User user = (User) context.getBean(<span class="string">"user"</span>);</span><br><span class="line">    <span class="comment">//调用对象的方法 .</span></span><br><span class="line">    user.show();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201202940.png" alt="image-20201201202940161"></p><p><strong>结论：在配置文件加载的时候。其中管理的对象都已经初始化了！</strong></p><h2 id="2-Spring配置"><a href="#2-Spring配置" class="headerlink" title="2. Spring配置"></a>2. Spring配置</h2><h3 id="2-1-别名-（alias-）"><a href="#2-1-别名-（alias-）" class="headerlink" title="2.1 别名 （alias ）"></a>2.1 别名 （alias ）</h3><p>alias 设置别名 , 为bean设置别名 , 可以设置多个别名</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.User"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"男"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--设置别名：在获取Bean的时候可以使用别名获取--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"user2"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">alias</span>=<span class="string">"user3"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userT"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.UserT"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201203107.png" alt="image-20201201203107157"></p><h3 id="2-2-Bean的配置"><a href="#2-2-Bean的配置" class="headerlink" title="2.2 Bean的配置"></a>2.2 Bean的配置</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">   id 是bean的标识符,要唯一,如果没有配置id,name就是默认标识符</span></span><br><span class="line"><span class="comment">   如果配置id,又配置了name,那么name是别名</span></span><br><span class="line"><span class="comment">   name可以设置多个别名,可以用逗号,分号,空格隔开</span></span><br><span class="line"><span class="comment">   如果不配置id和name,可以根据applicationContext.getBean(.class)获取对象;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">class是bean的全限定名=包名+类名</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"user"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.User"</span> <span class="attr">name</span>=<span class="string">"user2,user3"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"男"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userT"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.UserT"</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201203107.png" alt="image-20201201203107157"></p><h3 id="2-3-import"><a href="#2-3-import" class="headerlink" title="2.3 import"></a>2.3 import</h3><p>import, 一般用于团队开发使用，他可以将多个配置文件,导入合并为一个。<br>假设,现在项目中有多个人开发,这三个人复制不同的类开发,不同的类需要注册在不同的bean中，我们可以利<br>用import将所有人的beans.xml合并为一个总的!</p><ul><li>张三</li><li>李四</li><li>王五</li></ul><p><strong>通过import的顺序进行覆盖相同片段。</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201202132.png" alt="image-20201201202131986"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201203324.png" alt="image-20201201203323853"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> IOC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring入门图解（体系结构-IOC-DI-AOP）</title>
      <link href="/posts/71fa00ec.html"/>
      <url>/posts/71fa00ec.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-什么是Spring？"><a href="#0-什么是Spring？" class="headerlink" title="0. 什么是Spring？"></a>0. 什么是Spring？</h2><p>一句话：<strong>Spring是一个轻量级的控制反转(IoC-Inversion of Control)和面向切面(AOP-Aspect Oriented Programming)的容器（框架）。</strong></p><h2 id="1-体系结构"><a href="#1-体系结构" class="headerlink" title="1. 体系结构"></a>1. 体系结构</h2><h3 id="1-1-体系结构图"><a href="#1-1-体系结构图" class="headerlink" title="1.1 体系结构图"></a>1.1 体系结构图</h3><p>Spring 是模块化的，允许你挑选和选择适用于你的模块，不必要把剩余部分也引入。下面的部分对在 Spring 框架中所有可用的模块给出了详细的介绍。</p><p>Spring 总共大约有 20 个模块， 由 1300 多个不同的文件构成。 而这些组件被分别整合在</p><ul><li><code>核心容器（Core Container）</code> </li><li><code>AOP（Aspect Oriented Programming）</code></li><li><code>Aspects</code></li><li><code>设备支持（Instrmentation）</code> </li><li><code>消息（Messaging）</code> </li><li><code>数据访问与集成（Data Access/Integeration）</code> </li><li><code>Web</code></li><li><code>Test</code></li></ul><p>8 个大模块中。 以下是 Spring 5 的模块结构图：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201150858.png" alt="image-20201201150858218"></p><h3 id="1-2-核心容器（Core-Container）"><a href="#1-2-核心容器（Core-Container）" class="headerlink" title="1.2 核心容器（Core Container）"></a>1.2 核心容器（Core Container）</h3><p>核心容器由 <strong>spring-core，spring-beans，spring-context，spring-context-support和spring-expression</strong>（SpEL，Spring 表达式语言，Spring Expression Language）等模块组成，它们的细节如下：</p><ul><li><strong>spring-core</strong> 模块提供了框架的基本组成部分，包括 IoC 和依赖注入功能。</li><li><strong>spring-beans</strong> 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦。</li><li><strong>context</strong> 模块建立在由 <strong>core</strong>和 <strong>beans</strong> 模块的基础上建立起来的，它以一种类似于 JNDI 注册的方式访问对象。Context 模块继承自 Bean 模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过 Servelet 容器）等功能。Context 模块也支持 Java EE 的功能，比如 EJB、JMX 和远程调用等。<strong>ApplicationContext</strong> 接口是 Context 模块的焦点。<strong>spring-context-support</strong> 提供了对第三方集成到 Spring 上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</li><li><strong>spring-expression</strong> 模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是 JSP2.1 规范中定义的统一表达式语言的扩展，支持 set 和 get 属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从 Spring IoC 容器检索对象，还支持列表的投影、选择以及聚合等。</li></ul><p>它们的完整依赖关系如下图所示：</p><p><img src= "/img/loading.gif" data-src="https://atts.w3cschool.cn/attachments/image/20181023/1540290875453691.png" alt="Spring 体系结构"></p><h3 id="1-3-数据访问-集成-（Data-Access-Integeration）"><a href="#1-3-数据访问-集成-（Data-Access-Integeration）" class="headerlink" title="1.3 数据访问/集成 （Data Access/Integeration）"></a>1.3 数据访问/集成 （Data Access/Integeration）</h3><p>数据访问/集成层包括 JDBC，ORM，OXM，JMS 和事务处理模块，它们的细节如下：</p><p><code>（注：JDBC=Java Data Base Connectivity，ORM=Object Relational Mapping，OXM=Object XML Mapping，JMS=Java Message Service）</code></p><ul><li><strong>JDBC</strong> 模块提供了 JDBC 抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析。</li><li><strong>ORM</strong> 模块提供了对流行的对象关系映射 API 的集成，包括 JPA、JDO 、 Hibernate、Mybatis 等。通过此模块可以让这些 ORM 框架和 spring的其它功能整合，比如前面提及的事务管理。</li><li><strong>OXM</strong> 模块提供了对 OXM 实现的支持，比如 JAXB、Castor、XML Beans、JiBX、XStream 等。</li><li><strong>JMS</strong> 模块包含生产（produce）和消费（consume）消息的功能。从 Spring 4.1 开始，集成了 spring-messaging 模块。</li><li><strong>事务</strong>模块为实现特殊接口类及所有的 POJO 支持编程式和声明式事务管理。（注：编程式事务需要自己写 beginTransaction()、commit()、rollback() 等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务力度更细）</li></ul><h3 id="1-4-Web"><a href="#1-4-Web" class="headerlink" title="1.4 Web"></a>1.4 Web</h3><p>Web 层由 Web，Servlet，Web-Socket 和 Web-Portlet 组成，它们的细节如下：</p><ul><li><strong>Web</strong> 模块提供面向 web 的基本功能和面向 web 的应用上下文，比如多部分（multipart）文件上传功能、使用 Servlet 监听器初始化 IoC 容器等。它还包括 HTTP 客户端以及 Spring 远程调用中与 web 相关的部分。</li><li><strong>Servlet</strong> 模块为 web 应用提供了模型视图控制（MVC）和 REST Web服务的实现。Spring 的 MVC 框架可以使领域模型代码和 web 表单完全地分离，且可以与 Spring 框架的其它所有功能进行集成。</li><li><strong>Web-Socket</strong> 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。</li><li><strong>Web-Portlet</strong> 模块提供了用于 Portlet 环境的 MVC 实现，并反映了 spring-webmvc 模块的功能。</li></ul><h3 id="1-5-AOP"><a href="#1-5-AOP" class="headerlink" title="1.5  AOP"></a>1.5  AOP</h3><ul><li><strong>AOP</strong> 模块提供了面向方面（切面）的编程实现，允许你定义<code>方法拦截器</code>和<code>切入点</code>对代码进行干净地解耦，从而使实现功能的代码彻底的解耦出来。能够将那些与业务无关，却为业务模块所共同调用的逻辑或责任（例如事务处理、日志管理、权限控制等）封装起来，<strong>便于减少系统的重复代码，降低模块间的耦合度，并有利于未来的可拓展性和可维护性。</strong></li></ul><h3 id="1-6-Aspects"><a href="#1-6-Aspects" class="headerlink" title="1.6 Aspects"></a>1.6 Aspects</h3><ul><li><strong>Aspects</strong> 模块提供了与 <strong>AspectJ</strong> 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架。</li></ul><h3 id="1-7-Instrumentation"><a href="#1-7-Instrumentation" class="headerlink" title="1.7  Instrumentation"></a>1.7  Instrumentation</h3><ul><li><strong>Instrumentation</strong> 模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。</li></ul><h3 id="1-8-Messaging"><a href="#1-8-Messaging" class="headerlink" title="1.8 Messaging"></a>1.8 Messaging</h3><ul><li><strong>Messaging</strong> 模块为 STOMP 提供了支持作为在应用程序中 WebSocket 子协议的使用。它也支持一个注解编程模型，它是为了选路和处理来自 WebSocket 客户端的 STOMP 信息。</li></ul><h3 id="1-9-Test"><a href="#1-9-Test" class="headerlink" title="1.9 Test"></a>1.9 Test</h3><ul><li><strong>测试</strong>模块支持对具有 JUnit 或 TestNG 框架的 Spring 组件的测试。</li></ul><p>既然我们已经知道了Spring框架是什么，然后大致了解Spring框架的体系结构，那么接下来重点关注Spring最重要的两个思想：<code>IOC和AOP</code></p><h2 id="2-控制反转和依赖注入（IOC-DI）"><a href="#2-控制反转和依赖注入（IOC-DI）" class="headerlink" title="2. 控制反转和依赖注入（IOC-DI）"></a>2. 控制反转和依赖注入（IOC-DI）</h2><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。</p><p><strong>依赖注入（DI）</strong>，是指程序运行过程中，如果需要调用另一个对象协助时，无须在代码中创建被调用者，而是<strong>依赖</strong>于外部的<strong>注入</strong>。Spring的<strong>依赖注入</strong>对调用者和被调用者几乎没有任何要求，完全支持对POJO之间<strong>依赖</strong>关系的管理。</p><blockquote><ul><li>依赖 : 指Bean对象的创建<code>依赖于Spring容器</code> </li><li>注入 : 指Bean对象的属性(例如<code>pojo类对象属性</code>、其它需要依赖的<code>Bean对象</code>) , 由容器来<code>设置</code>和<code>装配</code>.</li></ul></blockquote><p>传统Java SE程序设计，我们直接在对象内部通过new进行创建对象，是<code>程序主动去创建依赖对象</code>；</p><p>IOC是由专门一个容器来创建这些对象，即由Ioc容器来控制对象的创建，<code>程序被动接受对象</code>,这就叫控制反转；</p><blockquote><p>在Spring中，我们可以把<code>IOC容器与Spring容器</code>等同于一个东西，及<code>IOC容器=Spring容器</code>，我们也可以把Spring容器看做配置文件xxx.xml来简单记忆</p></blockquote><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201163940.png" alt="image-20201201163940889"></p><p>以下是一个使用xml配置文件实现IOC的图例：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201160125.png" alt="无标题"></p><h2 id="3-切面编程-（AOP）"><a href="#3-切面编程-（AOP）" class="headerlink" title="3. 切面编程 （AOP）"></a>3. 切面编程 （AOP）</h2><p>AOP为Aspect Oriented Programming的缩写，意为：<code>面向切面编程</code>，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术。</p><p>AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。</p><p>利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，将<code>日志记录，性能统计，安全控制，事务处理，异常处理等相同代码从业务逻辑代码中划分出来</code>，通过对这些行为的分离，可以将它们独立到非指导业务逻辑的方法中，进而改变这些行为的时候不影响业务逻辑的代码。提高程序的可重用性，同时提高了开发的效率。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201162258.png" alt="image-20201201162258897"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201164426.png" alt="image-20201201164426038"></p><h2 id="4-通过Spring案例进一步理解IOC与DI"><a href="#4-通过Spring案例进一步理解IOC与DI" class="headerlink" title="4. 通过Spring案例进一步理解IOC与DI"></a>4. 通过Spring案例进一步理解IOC与DI</h2><h3 id="4-1-文件目录结构"><a href="#4-1-文件目录结构" class="headerlink" title="4.1 文件目录结构"></a>4.1 文件目录结构</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201180635.png" alt="image-20201201180635330"></p><h3 id="4-2-案例UML架构图"><a href="#4-2-案例UML架构图" class="headerlink" title="4.2 案例UML架构图"></a>4.2 案例UML架构图</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201182228.png" alt="image-20201201182228356"></p><h3 id="4-3-pom-xml"><a href="#4-3-pom-xml" class="headerlink" title="4.3 pom.xml"></a>4.3 pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-dao"><a href="#4-4-dao" class="headerlink" title="4.4 dao"></a>4.4 dao</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span>  <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*-------------------------------------*/</span></span><br><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"获取用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-------------------------------------*/</span></span><br><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoMySqlImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MySql获取用户数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-5-service"><a href="#4-5-service" class="headerlink" title="4.5 service"></a>4.5 service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*-------------------------------------*/</span>   </span><br><span class="line"><span class="keyword">package</span> cn.bithachi.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line">    <span class="comment">// 利用set实现依赖注入</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserDao</span><span class="params">(UserDao userDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userDao.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-6-pojo"><a href="#4-6-pojo" class="headerlink" title="4.6 pojo"></a>4.6 pojo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"Hello,"</span>+ name );</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-7-beans-xml"><a href="#4-7-beans-xml" class="headerlink" title="4.7 beans.xml"></a>4.7 beans.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">       http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--bean就是java对象 , 由Spring创建和管理, id为对象的引用变量名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hello"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.pojo.Hello"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"Spring"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"OriginImpl"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.dao.UserDaoImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"MysqlImpl"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.dao.UserDaoMySqlImpl"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--依赖注入，采用setUserDao方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ServiceImpl"</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.service.UserServiceImpl"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userDao"</span> <span class="attr">ref</span>=<span class="string">"OriginImpl"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-8-Test"><a href="#4-8-Test" class="headerlink" title="4.8 Test"></a>4.8 Test</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Hello;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.service.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//解析beans.xml文件 , 生成管理相应的Bean对象,创建容器对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">//getBean : 参数即为spring配置文件中bean的id .</span></span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">"hello"</span>);</span><br><span class="line">        hello.show();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取spring容器对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"beans.xml"</span>);</span><br><span class="line">        <span class="comment">//从容器中取出Bean对象的引用</span></span><br><span class="line">        UserServiceImpl serviceImpl = (UserServiceImpl) context.getBean(<span class="string">"ServiceImpl"</span>);</span><br><span class="line">        <span class="comment">//调用Bean对象的方法</span></span><br><span class="line">        serviceImpl.getUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201181706.png" alt="image-20201201181705347"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201201181728.png" alt="image-20201201181728096"></p><p>参考：</p><ul><li><a href="https://blog.csdn.net/sggtgfs/article/details/85338011" target="_blank" rel="noopener">https://blog.csdn.net/sggtgfs/article/details/85338011</a></li><li><a href="https://learnku.com/laravel/t/3845/the-two-picture-lets-you-understand-ioc-inversion-of-control" target="_blank" rel="noopener">https://learnku.com/laravel/t/3845/the-two-picture-lets-you-understand-ioc-inversion-of-control</a></li><li><a href="https://www.w3cschool.cn/wkspring/dcu91icn.html" target="_blank" rel="noopener">https://www.w3cschool.cn/wkspring/dcu91icn.html</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&mid=2247484096&idx=1&sn=c599734d2bc16a9a9c27a10731255bc9&scene=19#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=Mzg2NTAzMTExNg==&amp;mid=2247484096&amp;idx=1&amp;sn=c599734d2bc16a9a9c27a10731255bc9&amp;scene=19#wechat_redirect</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> DI </tag>
            
            <tag> IOC </tag>
            
            <tag> AOP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis一级缓存与二级缓存</title>
      <link href="/posts/d03e1ce1.html"/>
      <url>/posts/d03e1ce1.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-缓存简介"><a href="#1-缓存简介" class="headerlink" title="1. 缓存简介"></a>1. 缓存简介</h2><p>1、什么是缓存 [ Cache ]？</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul><p>2、为什么使用缓存？</p><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ul><p>3、什么样的数据能使用缓存？</p><ul><li>经常查询并且不经常改变的数据。</li></ul><h2 id="2-Mybatis缓存"><a href="#2-Mybatis缓存" class="headerlink" title="2. Mybatis缓存"></a>2. Mybatis缓存</h2><ul><li>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</li><li>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong><ul><li><code>默认情况下，只有一级缓存开启。（SqlSession级别的缓存，也称为本地缓存）</code></li><li>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</li><li>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</li></ul></li></ul><p>Cache接口源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.ibatis.cache;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReadWriteLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Cache</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">getObject</span><span class="params">(Object var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">removeObject</span><span class="params">(Object var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ReadWriteLock <span class="title">getReadWriteLock</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-环境准备"><a href="#3-环境准备" class="headerlink" title="3. 环境准备"></a>3. 环境准备</h2><p><strong>文件目录结构：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128164525.png" alt="image-20201128164525090"></p><h2 id="4-一级缓存"><a href="#4-一级缓存" class="headerlink" title="4. 一级缓存"></a>4. 一级缓存</h2><h3 id="4-1-一级缓存示例"><a href="#4-1-一级缓存示例" class="headerlink" title="4.1 一级缓存示例"></a>4.1 一级缓存示例</h3><p>1、mybatis核心配置文件设置日志，方便测试结果</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.bithachi.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/bithachi/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写UserMapper接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据id查询用户</span></span><br><span class="line"><span class="function">User <span class="title">queryUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br></pre></td></tr></table></figure><p>3、UserMapper接口对应的Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">  select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128165051.png" alt="image-20201128165051248"></p><h3 id="4-2-一级缓存失效的四种情况"><a href="#4-2-一级缓存失效的四种情况" class="headerlink" title="4.2 一级缓存失效的四种情况"></a>4.2 一级缓存失效的四种情况</h3><p>一级缓存是SqlSession级别的缓存，是一直开启的，我们关闭不了它；</p><p>一级缓存失效情况：没有使用到当前的一级缓存，效果就是，还需要再向数据库中发起一次查询请求！</p><h4 id="4-2-1-sqlSession不同"><a href="#4-2-1-sqlSession不同" class="headerlink" title="4.2.1 sqlSession不同"></a>4.2.1 sqlSession不同</h4><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128172519.png" alt="image-20201128172519500"></p><p>结论：<strong>每个sqlSession中的缓存相互独立</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    SqlSession session2 = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    UserMapper mapper2 = session2.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    User user2 = mapper2.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">    session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128165438.png" alt="image-20201128165438284"></p><h4 id="4-2-2-sqlSession相同，查询条件不同"><a href="#4-2-2-sqlSession相同，查询条件不同" class="headerlink" title="4.2.2 sqlSession相同，查询条件不同"></a>4.2.2 sqlSession相同，查询条件不同</h4><p>结论：<strong>当前缓存中，不存在这个数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    UserMapper mapper2 = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    User user2 = mapper2.queryUserById(<span class="number">2</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">    User user11 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user11);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128165917.png" alt="image-20201128165917322"></p><h4 id="4-2-3-sqlSession相同，两次查询之间执行了增删改操作！"><a href="#4-2-3-sqlSession相同，两次查询之间执行了增删改操作！" class="headerlink" title="4.2.3  sqlSession相同，两次查询之间执行了增删改操作！"></a>4.2.3  sqlSession相同，两次查询之间执行了增删改操作！</h4><p>结论：<strong>因为增删改操作可能会对当前数据产生影响，所以重新刷新缓存！</strong></p><p>UserMapper接口修改：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改用户</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><p>UserMapper.xml修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    update user set name = #&#123;name&#125; where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    map.put(<span class="string">"name"</span>,<span class="string">"阿萨德"</span>);</span><br><span class="line">    map.put(<span class="string">"id"</span>,<span class="number">4</span>);</span><br><span class="line">    mapper.updateUser(map);</span><br><span class="line">    User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128170045.png" alt="image-20201128170045327"></p><h4 id="4-2-4-sqlSession相同，手动清除一级缓存"><a href="#4-2-4-sqlSession相同，手动清除一级缓存" class="headerlink" title="4.2.4  sqlSession相同，手动清除一级缓存"></a>4.2.4  sqlSession相同，手动清除一级缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    session.clearCache();<span class="comment">//手动清除缓存</span></span><br><span class="line">    User user2 = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128170317.png" alt="image-20201128170317147"></p><h2 id="5-二级缓存"><a href="#5-二级缓存" class="headerlink" title="5. 二级缓存"></a>5. 二级缓存</h2><ul><li><p><code>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</code></p></li><li><p>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</p></li><li><p>工作机制</p></li><li><ul><li>一个sqlsession会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ul></li></ul><p><strong>使用步骤:</strong></p><h3 id="5-1-开启全局缓存-【mybatis-config-xml】"><a href="#5-1-开启全局缓存-【mybatis-config-xml】" class="headerlink" title="5.1 开启全局缓存 【mybatis-config.xml】"></a>5.1 开启全局缓存 【mybatis-config.xml】</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-每个XXXmapper-xml中配置使用二级缓存"><a href="#5-2-每个XXXmapper-xml中配置使用二级缓存" class="headerlink" title="5.2 每个XXXmapper.xml中配置使用二级缓存"></a>5.2 每个XXXmapper.xml中配置使用二级缓存</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.bithachi.dao.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    这个更高级的配置创建了一个 FIFO 缓存，每隔 60 秒刷新，</span></span><br><span class="line"><span class="comment">    最多可以存储结果对象或列表的 512 个引用，而且返回的对象被认为是只读的，</span></span><br><span class="line"><span class="comment">    因此对它们进行修改可能会在不同线程中的调用者产生冲突。--&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--    </span></span><br><span class="line"><span class="comment">&lt;cache</span></span><br><span class="line"><span class="comment">        eviction="FIFO"</span></span><br><span class="line"><span class="comment">        flushInterval="60000"</span></span><br><span class="line"><span class="comment">        size="512"</span></span><br><span class="line"><span class="comment">        readOnly="true"/&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">cache</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--也可以直接这样使用，但是这样使用实体类就必须序列化，及实体类User实现implements Serializable接口</span></span><br><span class="line"><span class="comment">否则会报错：</span></span><br><span class="line"><span class="comment">org.apache.ibatis.cache.CacheException: Error serializing object.  Cause: java.io.NotSerializableException: cn.bithachi.pojo.User</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">&lt;!-- 设置是否使用缓存 useCache="true"--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryUserById"</span> <span class="attr">resultType</span>=<span class="string">"user"</span> <span class="attr">useCache</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">        update user set name = #&#123;name&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>User实体类序列化：<code>public class User  implements Serializable</code></p><h3 id="5-3-测试"><a href="#5-3-测试" class="headerlink" title="5.3 测试"></a>5.3 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUserById6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    SqlSession session2 = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    UserMapper mapper2 = session2.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    User user = mapper.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    session.close();</span><br><span class="line">    User user2 = mapper2.queryUserById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user==user2);</span><br><span class="line">    session2.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128173537.png" alt="image-20201128173536528"></p><h3 id="5-3-结论"><a href="#5-3-结论" class="headerlink" title="5.3 结论"></a>5.3 结论</h3><ul><li>只要开启了二级缓存，我们在同一个Mapper中的查询，可以在二级缓存中拿到数据</li><li>查出的数据都会被默认先放在一级缓存中</li><li>只有会话提交或者关闭以后，一级缓存中的数据才会转到二级缓存中</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis动态SQL（if-where-set-choose-foreach）</title>
      <link href="/posts/be0cab15.html"/>
      <url>/posts/be0cab15.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是动态SQL？"><a href="#1-什么是动态SQL？" class="headerlink" title="1. 什么是动态SQL？"></a>1. 什么是动态SQL？</h2><p><strong>动态SQL指的是根据不同的查询条件 , 生成不同的Sql语句.</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">官网描述：</span><br><span class="line">MyBatis 的强大特性之一便是它的动态 SQL。如果你有使用 JDBC 或其它类似框架的经验，你就能体会到根据不同条件拼接 SQL 语句的痛苦。例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL 这一特性可以彻底摆脱这种痛苦。</span><br><span class="line">虽然在以前使用动态 SQL 并非一件易事，但正是 MyBatis 提供了可以被用在任意 SQL 映射语句中的强大的动态 SQL 语言得以改进这种情形。</span><br><span class="line">动态 SQL 元素和 JSTL 或基于类似 XML 的文本处理器相似。在 MyBatis 之前的版本中，有很多元素需要花时间了解。MyBatis 3 大大精简了元素种类，现在只需学习原来一半的元素便可。MyBatis 采用功能强大的基于 OGNL 的表达式来淘汰其它大部分元素。</span><br><span class="line"></span><br><span class="line">  -------------------------------</span><br><span class="line">  - if</span><br><span class="line">  - choose (when, otherwise)</span><br><span class="line">  - trim (where, set)</span><br><span class="line">  - foreach</span><br><span class="line">  -------------------------------</span><br></pre></td></tr></table></figure><p>我们之前写的 SQL 语句都比较简单，如果有比较复杂的业务，我们需要写复杂的 SQL 语句，往往需要拼接，而拼接 SQL ，稍微不注意，由于引号，空格等缺失可能都会导致错误。</p><p>那么怎么去解决这个问题呢？这就要使用 mybatis 动态SQL，通过 if, choose, when, otherwise, trim, where, set, foreach等标签，可组合成非常灵活的SQL语句，从而在提高 SQL 语句的准确性的同时，也大大提高了开发人员的效率。</p><h2 id="2-环境搭建"><a href="#2-环境搭建" class="headerlink" title="2. 环境搭建"></a>2. 环境搭建</h2><p><strong>文件目录结构：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128095848.png" alt="image-20201128095848339"></p><h3 id="2-1-建Blog表"><a href="#2-1-建Blog表" class="headerlink" title="2.1  建Blog表"></a>2.1  建Blog表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`blog`</span> (</span><br><span class="line">                        <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'博客id'</span>,</span><br><span class="line">                        <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'博客标题'</span>,</span><br><span class="line">                        <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'博客作者'</span>,</span><br><span class="line">                        <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'创建时间'</span>,</span><br><span class="line">                        <span class="string">`views`</span> <span class="built_in">int</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'浏览量'</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure><h3 id="2-2-Blog实体类"><a href="#2-2-Blog实体类" class="headerlink" title="2.2 Blog实体类"></a>2.2 Blog实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blog</span> </span>&#123;</span><br><span class="line">    <span class="comment">//博客ID</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="comment">//标题</span></span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="comment">//作者</span></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="comment">//发布时间</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="comment">//访问量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> views;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blog</span><span class="params">(String id, String title, String author, Date createTime, <span class="keyword">int</span> views)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">        <span class="keyword">this</span>.views = views;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Blog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getTitle</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTitle</span><span class="params">(String title)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getCreateTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCreateTime</span><span class="params">(Date createTime)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.createTime = createTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViews</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> views;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setViews</span><span class="params">(<span class="keyword">int</span> views)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.views = views;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Blog&#123;"</span> +</span><br><span class="line">                <span class="string">"id='"</span> + id + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", title='"</span> + title + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", author='"</span> + author + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", createTime="</span> + createTime +</span><br><span class="line">                <span class="string">", views="</span> + views +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-3-工具类"><a href="#2-3-工具类" class="headerlink" title="2.3  工具类"></a>2.3  工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回一个随机的ID值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 随机字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> UUID.randomUUID().toString().replaceAll(<span class="string">"-"</span>,<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取SqlSession连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);<span class="comment">//事务自动提交</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-数据库配置文件db-properties"><a href="#2-4-数据库配置文件db-properties" class="headerlink" title="2.4 数据库配置文件db.properties"></a>2.4 数据库配置文件db.properties</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/forstudy?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h3 id="2-5-Mybatis核心配置文件"><a href="#2-5-Mybatis核心配置文件" class="headerlink" title="2.5 Mybatis核心配置文件"></a>2.5 Mybatis核心配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启驼峰命名转化：开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.bithachi.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/bithachi/dao/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-BlogMapper接口"><a href="#2-6-BlogMapper接口" class="headerlink" title="2.6 BlogMapper接口"></a>2.6 BlogMapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//新增一个博客</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBlog</span><span class="params">(Blog blog)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-7-BlogMapper映射SQL文件xml"><a href="#2-7-BlogMapper映射SQL文件xml" class="headerlink" title="2.7 BlogMapper映射SQL文件xml"></a>2.7 BlogMapper映射SQL文件xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span>    <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.bithachi.dao.BlogMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--插入一行数据--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addBlog"</span> <span class="attr">parameterType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">        insert into blog (id, title, author, create_time, views)</span><br><span class="line">        values (#&#123;id&#125;,#&#123;title&#125;,#&#123;author&#125;,#&#123;createTime&#125;,#&#123;views&#125;);</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-8测试"><a href="#2-8测试" class="headerlink" title="2.8测试"></a>2.8测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.bithachi.dao.BlogMapper;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Blog;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.utils.IDUtil;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"all"</span>)<span class="comment">//一直警告</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInitBlog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        Blog blog = <span class="keyword">new</span> Blog();</span><br><span class="line">        blog.setId(IDUtil.getId());</span><br><span class="line">        blog.setTitle(<span class="string">"Mybatis入门"</span>);</span><br><span class="line">        blog.setAuthor(<span class="string">"BitHachi"</span>);</span><br><span class="line">        blog.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        blog.setViews(<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line">        mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        blog.setId(IDUtil.getId());</span><br><span class="line">        blog.setTitle(<span class="string">"Java入门"</span>);</span><br><span class="line">        mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        blog.setId(IDUtil.getId());</span><br><span class="line">        blog.setTitle(<span class="string">"Spring入门"</span>);</span><br><span class="line">        mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        blog.setId(IDUtil.getId());</span><br><span class="line">        blog.setTitle(<span class="string">"微服务入门"</span>);</span><br><span class="line">        mapper.addBlog(blog);</span><br><span class="line"></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128100606.png" alt="image-20201128100606277"></p><h2 id="3-if"><a href="#3-if" class="headerlink" title="3. if"></a>3. if</h2><p><strong>需求1：根据作者名字和博客名字来查询博客！如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</strong></p><p><strong>1、BlogMapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Blog;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//新增一个博客</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addBlog</span><span class="params">(Blog blog)</span></span>;</span><br><span class="line">    <span class="comment">//需求1</span></span><br><span class="line">    <span class="function">List&lt;Blog&gt; <span class="title">queryBlogIf</span><span class="params">(Map map)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、BlogMapper映射SQL文件xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--需求1：</span></span><br><span class="line"><span class="comment">    根据作者名字和博客名字来查询博客！</span></span><br><span class="line"><span class="comment">    如果作者名字为空，那么只根据博客名字查询，反之，则根据作者名来查询</span></span><br><span class="line"><span class="comment">    select * from blog where title = #&#123;title&#125; and author = #&#123;author&#125;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog where</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">        title = #&#123;title&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">        and author = #&#123;author&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBlogIf</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="comment">//当我们没有title参数时，查询语句为 select * from user where and author=#&#123;author&#125;，会报错</span></span><br><span class="line"><span class="comment">//        map.put("title","Mybatis入门");</span></span><br><span class="line">        map.put(<span class="string">"author"</span>,<span class="string">"BitHachi"</span>);</span><br><span class="line">        List&lt;Blog&gt; blogs = mapper.queryBlogIf(map);</span><br><span class="line"></span><br><span class="line">        System.out.println(blogs);</span><br><span class="line"></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128101935.png" alt="image-20201128101934684"></p><h2 id="4-where"><a href="#4-where" class="headerlink" title="4. where"></a>4. where</h2><p>为了解决上面if出现的问题：<code>select * from user where and author=#{author}</code></p><p>这个“where”标签会知道如果它包含的标签中有返回值的话，它就插入一个‘where’。此外，如果标签返回的内容是以AND 或OR 开头的，则它会剔除掉。</p><p>修改BlogMapper映射SQL配置文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog </span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            and author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> &lt;trim prefix="WHERE" prefixOverrides="AND"&gt;</span></span><br><span class="line"><span class="comment">            &lt;if test="title != null"&gt;</span></span><br><span class="line"><span class="comment">                title like #&#123;title&#125;</span></span><br><span class="line"><span class="comment">            &lt;/if&gt;</span></span><br><span class="line"><span class="comment">            &lt;if test="author!=null"&gt;</span></span><br><span class="line"><span class="comment">                AND author like #&#123;author&#125;</span></span><br><span class="line"><span class="comment">            &lt;/if&gt;</span></span><br><span class="line"><span class="comment">        &lt;/trim&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次测试，成功！</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128103729.png" alt="image-20201128103728691"></p><h2 id="5-choose、when、otherwise"><a href="#5-choose、when、otherwise" class="headerlink" title="5. choose、when、otherwise"></a>5. choose、when、otherwise</h2><p><strong>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</strong></p><p><strong>1、BlogMapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogChoose</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>2、BlogMapper映射SQL文件xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogChoose"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">                title = #&#123;title&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">                and author = #&#123;author&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                and views = #&#123;views&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBlogChoose</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    <span class="comment">//map.put("title","Java入门");</span></span><br><span class="line">    <span class="comment">//map.put("author","BitHachi");</span></span><br><span class="line">    map.put(<span class="string">"views"</span>,<span class="number">9999</span>);</span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogChoose(map);</span><br><span class="line"></span><br><span class="line">    System.out.println(blogs);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128104516.png" alt="image-20201128104515703"></p><h2 id="6-set"><a href="#6-set" class="headerlink" title="6. set"></a>6. set</h2><p><strong><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号（这些逗号是在使用条件语句给列赋值时引入的）。</strong></p><p><strong>1、BlogMapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">updateBlog</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>2、BlogMapper映射SQL文件xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--注意set是用的逗号隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateBlog"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    update blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">            title = #&#123;title&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">            author = #&#123;author&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateBlog</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    map.put(<span class="string">"title"</span>,<span class="string">"动态SQL"</span>);</span><br><span class="line">    <span class="comment">//map.put("author","BitHachi");</span></span><br><span class="line">    map.put(<span class="string">"id"</span>,<span class="string">"f0be35a325bd48c4bd71f554095a971b"</span>);</span><br><span class="line"></span><br><span class="line">    mapper.updateBlog(map);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128105447.png" alt="image-20201128105447153"></p><h2 id="7-SQL片段"><a href="#7-SQL片段" class="headerlink" title="7. SQL片段"></a>7. SQL片段</h2><p><strong>有时候可能某个 sql 语句我们用的特别多，为了增加代码的重用性，简化代码，我们需要将这些代码抽取出来，然后使用时直接调用。</strong></p><p><strong>注意：</strong></p><ol><li>最好基于 单表来定义 sql 片段，提高片段的可重用性</li><li>在 sql 片段中不要包括 where</li></ol><p><strong>提取SQL片段：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">"if-title-author"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"title != null"</span>&gt;</span></span><br><span class="line">      title = #&#123;title&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"author != null"</span>&gt;</span></span><br><span class="line">      and author = #&#123;author&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>引用SQL片段：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogIf"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">  select * from blog</span><br><span class="line">   <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 引用 sql 片段，如果refid 指定的不在本文件中，那么需要在前面加上 namespace --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">"if-title-author"</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 在这里还可以引用其他的 sql 片段 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128111806.png" alt="image-20201128111805955"></p><h2 id="8-foreach"><a href="#8-foreach" class="headerlink" title="8. foreach"></a>8. foreach</h2><p><strong>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128112310.png" alt="image-20201128112310103"></p><p><strong>将数据库中前三个数据的id修改为1,2,3；</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128112413.png" alt="image-20201128112413239"></p><p><strong>需求：我们需要查询 blog 表中 id 分别为1,2,3的博客信息</strong></p><p><strong>1、BlogMapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">List&lt;Blog&gt; <span class="title">queryBlogForeach</span><span class="params">(Map map)</span></span>;</span><br></pre></td></tr></table></figure><p><strong>2、BlogMapper映射SQL文件xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"queryBlogForeach"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"blog"</span>&gt;</span></span><br><span class="line">    select * from blog</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        collection:指定输入对象中的集合属性</span></span><br><span class="line"><span class="comment">        item:每次遍历生成的对象</span></span><br><span class="line"><span class="comment">        open:开始遍历时的拼接字符串</span></span><br><span class="line"><span class="comment">        close:结束时拼接的字符串</span></span><br><span class="line"><span class="comment">        separator:遍历对象之间需要拼接的字符串</span></span><br><span class="line"><span class="comment">        select * from blog  and (id=1 or id=2 or id=3)</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">"ids"</span>  <span class="attr">item</span>=<span class="string">"id"</span> <span class="attr">open</span>=<span class="string">"("</span> <span class="attr">close</span>=<span class="string">")"</span> <span class="attr">separator</span>=<span class="string">"or"</span>&gt;</span></span><br><span class="line">            id=#&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBlogForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    BlogMapper mapper = session.getMapper(BlogMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    HashMap map = <span class="keyword">new</span> HashMap();</span><br><span class="line">    List&lt;Integer&gt; ids = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">    ids.add(<span class="number">1</span>);</span><br><span class="line">    ids.add(<span class="number">2</span>);</span><br><span class="line">    ids.add(<span class="number">3</span>);</span><br><span class="line">    map.put(<span class="string">"ids"</span>,ids);</span><br><span class="line"></span><br><span class="line">    List&lt;Blog&gt; blogs = mapper.queryBlogForeach(map);</span><br><span class="line"></span><br><span class="line">    System.out.println(blogs);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201128113127.png" alt="image-20201128113126750"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 动态SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis一对多和多对一的处理(采用嵌套查询和连接查询)</title>
      <link href="/posts/949ac18.html"/>
      <url>/posts/949ac18.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>这里采用学生和老师两个实体来学习Mybatis的一对多和多对一的查询方式</p><ul><li>多个学生对应一个老师</li><li>一个老师对应多个学生</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201127111932.png" alt="image-20201127111932846"></p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p><strong>总文件结构目录：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201126172243.png" alt="image-20201126172242414"></p><h3 id="1-1-创建student表和teacher表"><a href="#1-1-创建student表和teacher表" class="headerlink" title="1.1 创建student表和teacher表"></a>1.1 创建student表和teacher表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`teacher`</span> (</span><br><span class="line">                           <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> teacher(<span class="string">`id`</span>, <span class="string">`name`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'王老师'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`student`</span> (</span><br><span class="line">                           <span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           <span class="string">`tid`</span> <span class="built_in">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">                           PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>),</span><br><span class="line">                           <span class="keyword">KEY</span> <span class="string">`fktid`</span> (<span class="string">`tid`</span>),</span><br><span class="line">                           <span class="keyword">CONSTRAINT</span> <span class="string">`fktid`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`tid`</span>) <span class="keyword">REFERENCES</span> <span class="string">`teacher`</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'1'</span>, <span class="string">'小明'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'2'</span>, <span class="string">'小红'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'3'</span>, <span class="string">'小张'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'4'</span>, <span class="string">'小李'</span>, <span class="string">'1'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`student`</span> (<span class="string">`id`</span>, <span class="string">`name`</span>, <span class="string">`tid`</span>) <span class="keyword">VALUES</span> (<span class="string">'5'</span>, <span class="string">'小王'</span>, <span class="string">'1'</span>);</span><br></pre></td></tr></table></figure><h3 id="1-2-新建实体类Student和Teacher"><a href="#1-2-新建实体类Student和Teacher" class="headerlink" title="1.2 新建实体类Student和Teacher"></a>1.2 新建实体类Student和Teacher</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  Teacher  teacher;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name, Teacher teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTeacher</span><span class="params">(Teacher teacher)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.teacher = teacher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", teacher="</span> + teacher +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Teacher&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-建立-Mapper接口"><a href="#1-3-建立-Mapper接口" class="headerlink" title="1.3 建立*Mapper接口"></a>1.3 建立*Mapper接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Teacher;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from teacher where id =#&#123;tid&#125;;"</span>)</span><br><span class="line">    <span class="function">Teacher <span class="title">getTeacher</span><span class="params">(@Param(<span class="string">"tid"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-建立-Mapper-xml-SQL映射文件"><a href="#1-4-建立-Mapper-xml-SQL映射文件" class="headerlink" title="1.4 建立*Mapper.xml (SQL映射文件)"></a>1.4 建立*Mapper.xml (SQL映射文件)</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.bithachi.dao.StudentMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.bithachi.dao.TeacherMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-5-核心配置文件配置（mybatis-config-xml）"><a href="#1-5-核心配置文件配置（mybatis-config-xml）" class="headerlink" title="1.5 核心配置文件配置（mybatis-config.xml）"></a>1.5 核心配置文件配置（mybatis-config.xml）</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type="cn.bithachi.pojo.User" alias="User"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.bithachi.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/bithachi/dao/StudentMapper.xml"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/bithachi/dao/TeacherMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-6-数据库配置文件-（db-properties）"><a href="#1-6-数据库配置文件-（db-properties）" class="headerlink" title="1.6  数据库配置文件 （db.properties）"></a>1.6  数据库配置文件 （db.properties）</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/forstudy?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h3 id="1-7MybatisUtils工具类"><a href="#1-7MybatisUtils工具类" class="headerlink" title="1.7MybatisUtils工具类"></a>1.7MybatisUtils工具类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取SqlSession连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);<span class="comment">//事务自动提交</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-测试"><a href="#1-8-测试" class="headerlink" title="1.8 测试"></a>1.8 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.bithachi.dao.TeacherMapper;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Teacher;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        SqlSession sqlSession= MybatisUtils.getSession();</span><br><span class="line">        TeacherMapper mapper = sqlSession.getMapper(TeacherMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        Teacher teacher = mapper.getTeacher(<span class="number">1</span>);</span><br><span class="line">        System.out.println(teacher);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201126172310.png" alt="image-20201126172310045"></p><h2 id="2-嵌套查询与连接查询"><a href="#2-嵌套查询与连接查询" class="headerlink" title="2. 嵌套查询与连接查询"></a>2. 嵌套查询与连接查询</h2><p>这里温习一下<strong>嵌套查询和连接查询</strong>的区别：</p><p>图片来源：<a href="https://blog.csdn.net/qq_44692189/article/details/105431242" target="_blank" rel="noopener">https://blog.csdn.net/qq_44692189/article/details/105431242</a></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201127113420.png" alt="image-20201127113420162"></p><p>详情见：<a href="https://blog.csdn.net/weixin_43914604/article/details/105171740" target="_blank" rel="noopener">《数据库系统概论》之数据查询—SELECT（单表查询、连接查询、嵌套查询、集合查询、多表查询）</a>,文章部分目录截图如下：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201127113452.png" alt="image-20201127113452026"></p><p>本文章用的例子，<strong>嵌套查询和连接查询</strong>，采用SQL编写的语句：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201127122234.png" alt="image-20201127122234189"></p><h2 id="3-多对一的处理"><a href="#3-多对一的处理" class="headerlink" title="3. 多对一的处理"></a>3. 多对一的处理</h2><p><strong>多个学生对应一个老师的查询方式。</strong></p><p>这里温习一下<strong>嵌套查询和连接查询</strong>的区别：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201127113420.png" alt="image-20201127113420162"></p><p>详情见：<a href="https://blog.csdn.net/weixin_43914604/article/details/105171740" target="_blank" rel="noopener">《数据库系统概论》之数据查询—SELECT（单表查询、连接查询、嵌套查询、集合查询、多表查询）</a>,文章部分目录截图如下：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201127113452.png" alt="image-20201127113452026"></p><h3 id="3-1-采用嵌套查询方式"><a href="#3-1-采用嵌套查询方式" class="headerlink" title="3.1 采用嵌套查询方式"></a>3.1 采用嵌套查询方式</h3><p><strong>1、StudentMapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取所有学生及对应老师的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、StudentMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.bithachi.dao.StudentMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    需求：获取所有学生及对应老师的信息</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">        1. 获取所有学生的信息</span></span><br><span class="line"><span class="comment">        2. 根据获取的学生信息的老师ID-&gt;获取该老师的信息</span></span><br><span class="line"><span class="comment">        3. 思考问题，这样学生的结果集中应该包含老师，该如何处理呢，数据库中我们一般使用关联查询？</span></span><br><span class="line"><span class="comment">            1. 做一个结果集映射：StudentTeacher</span></span><br><span class="line"><span class="comment">            2. StudentTeacher结果集的类型为 Student</span></span><br><span class="line"><span class="comment">            3. 学生中老师的属性为teacher，对应数据库中为tid。</span></span><br><span class="line"><span class="comment">               多个 [1,...）学生关联一个老师=&gt; 一对一，一对多</span></span><br><span class="line"><span class="comment">            4. 查看官网找到：association – 一个复杂类型的关联；使用它来处理关联查询</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudents"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher"</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--association关联属性 property属性名 javaType属性类型 column在多的一方的表中的列名--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span>  <span class="attr">column</span>=<span class="string">"tid"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span> <span class="attr">select</span>=<span class="string">"getTeacher"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    这里传递过来的tid，只有一个属性的时候，下面可以写任何值,只是一个占位符</span></span><br><span class="line"><span class="comment">    association中column多参数配置：</span></span><br><span class="line"><span class="comment">        column="&#123;key=value,key=value&#125;"</span></span><br><span class="line"><span class="comment">        其实就是键值对的形式，key是传给下个sql的取值名称，value是片段一中sql查询的字段名。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">      select * from teacher where id = #&#123;tid&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetStudents</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    StudentMapper mapper = session.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; students = mapper.getStudents();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Student student : students)&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生名:"</span>+ student.getName()+<span class="string">"\t老师:"</span>+student.getTeacher().getName());</span><br><span class="line">    &#125;</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201127112358.png" alt="image-20201127112357791"></p><h3 id="3-2-采用连接查询方式"><a href="#3-2-采用连接查询方式" class="headerlink" title="3.2 采用连接查询方式"></a>3.2 采用连接查询方式</h3><p><strong>1、StudentMapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取所有学生及对应老师的信息</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudents2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、StudentMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.bithachi.dao.StudentMapper"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    按查询结果嵌套处理</span></span><br><span class="line"><span class="comment">    思路：</span></span><br><span class="line"><span class="comment">       1. 直接查询出结果，进行结果集的映射</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudents2"</span> <span class="attr">resultMap</span>=<span class="string">"StudentTeacher2"</span> &gt;</span></span><br><span class="line">        select s.id sid, s.name sname , t.name tname</span><br><span class="line">        from student s,teacher t</span><br><span class="line">        where s.tid = t.id;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"StudentTeacher2"</span> <span class="attr">type</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--关联对象property 关联对象在Student实体类中的属性--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"teacher"</span> <span class="attr">javaType</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetStudents2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    StudentMapper mapper = session.getMapper(StudentMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; students = mapper.getStudents2();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Student student : students)&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生名:"</span>+ student.getName()+<span class="string">"\t老师:"</span>+student.getTeacher().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201127113638.png" alt="image-20201127113637754"></p><h2 id="4-一对多的处理"><a href="#4-一对多的处理" class="headerlink" title="4. 一对多的处理"></a>4. 一对多的处理</h2><p><strong>一个老师对应多个学生的查询方式。</strong></p><h3 id="4-1-采用连接查询方式"><a href="#4-1-采用连接查询方式" class="headerlink" title="4.1 采用连接查询方式"></a>4.1 采用连接查询方式</h3><p><strong>1、对Student和Teacher实体类进行修改</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span>  tid;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> tid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTid</span><span class="params">(<span class="keyword">int</span> tid)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tid = tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", tid="</span> + tid +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//一个老师多个学生</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Teacher</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">getStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStudents</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.students = students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Teacher&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、TeacherMapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取指定老师，及老师下的所有学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、TeacherMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.bithachi.dao.TeacherMapper"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      思路:</span></span><br><span class="line"><span class="comment">          1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span></span><br><span class="line"><span class="comment">          2. 对查询出来的操作做结果集映射</span></span><br><span class="line"><span class="comment">              1. 集合的话，使用collection！</span></span><br><span class="line"><span class="comment">                  JavaType和ofType都是用来指定对象类型的</span></span><br><span class="line"><span class="comment">                  JavaType是用来指定pojo中属性的类型</span></span><br><span class="line"><span class="comment">                  ofType指定的是映射到list集合属性中pojo的类型。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent"</span>&gt;</span></span><br><span class="line">        select s.id sid, s.name sname , t.name tname, t.id tid</span><br><span class="line">        from student s,teacher t</span><br><span class="line">        where s.tid = t.id and t.id=#&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span>  <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"tname"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"sid"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"name"</span> <span class="attr">column</span>=<span class="string">"sname"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"tid"</span> <span class="attr">column</span>=<span class="string">"tid"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>4、测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetTeacher</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    TeacherMapper mapper = session.getMapper(TeacherMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="comment">//获取指定老师</span></span><br><span class="line">    Teacher teacher = mapper.getTeacher(<span class="number">1</span>);</span><br><span class="line">    System.out.println(teacher);</span><br><span class="line">    System.out.println(teacher.getStudents());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201127115623.png" alt="image-20201127115622479"></p><h3 id="4-2-采用嵌套查询方式"><a href="#4-2-采用嵌套查询方式" class="headerlink" title="4.2 采用嵌套查询方式"></a>4.2 采用嵌套查询方式</h3><p><strong>1、TeacherMapper接口</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.Teacher;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TeacherMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//获取指定老师，及老师下的所有学生</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Teacher <span class="title">getTeacher2</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>2、TeacherMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getTeacher2"</span> <span class="attr">resultMap</span>=<span class="string">"TeacherStudent2"</span>&gt;</span></span><br><span class="line">    select * from teacher where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"TeacherStudent2"</span> <span class="attr">type</span>=<span class="string">"Teacher"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      思路:</span></span><br><span class="line"><span class="comment">          1. 从学生表和老师表中查出学生id，学生姓名，老师姓名</span></span><br><span class="line"><span class="comment">          2. 对查询出来的操作做结果集映射</span></span><br><span class="line"><span class="comment">              1. 集合的话，使用collection！</span></span><br><span class="line"><span class="comment">                  JavaType和ofType都是用来指定对象类型的</span></span><br><span class="line"><span class="comment">                  JavaType是用来指定pojo中属性的类型</span></span><br><span class="line"><span class="comment">                  ofType指定的是映射到list集合属性中pojo的类型。</span></span><br><span class="line"><span class="comment">      --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--column是一对多的外键 , 写的是一的主键的列名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"students"</span> <span class="attr">javaType</span>=<span class="string">"ArrayList"</span> <span class="attr">ofType</span>=<span class="string">"Student"</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">select</span>=<span class="string">"getStudentByTeacherId"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getStudentByTeacherId"</span> <span class="attr">resultType</span>=<span class="string">"Student"</span>&gt;</span></span><br><span class="line">    select * from student where tid = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>3、测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetTeacher2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession session = MybatisUtils.getSession();</span><br><span class="line">    TeacherMapper mapper = session.getMapper(TeacherMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    Teacher teacher = mapper.getTeacher2(<span class="number">1</span>);</span><br><span class="line">    System.out.println(teacher);</span><br><span class="line">    System.out.println(teacher.getStudents());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201127120002.png" alt="image-20201127120001774"></p><h2 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a>5. 小结</h2><p>1、关联-association</p><p>2、集合-collection</p><p>3、所以association是用于一对一和多对一，而collection是用于一对多的关系</p><p>4、JavaType和ofType都是用来指定对象类型的</p><ul><li>JavaType是用来指定pojo中属性的类型 </li><li>ofType指定的是映射到list集合属性中pojo的类型。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis使用注解进行CRUD（${}-#{}-@Param）</title>
      <link href="/posts/43b5a68.html"/>
      <url>/posts/43b5a68.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-文件目录结构"><a href="#0-文件目录结构" class="headerlink" title="0 .文件目录结构"></a>0 .文件目录结构</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201125143227.png" alt="image-20201125143225868"></p><h2 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1. 准备工作"></a>1. 准备工作</h2><p>因为增删改需要事务提交，所以我们在Mybatis工具类中设置如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取SqlSession连接</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession(<span class="keyword">true</span>);<span class="comment">//事务自动提交</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-CRUD"><a href="#2-CRUD" class="headerlink" title="2. CRUD"></a>2. CRUD</h2><h3 id="2-1-配置UserMapper接口的注解"><a href="#2-1-配置UserMapper接口的注解" class="headerlink" title="2.1 配置UserMapper接口的注解"></a>2.1 配置UserMapper接口的注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select id,name,pwd password from user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function">User <span class="title">selectUserById</span><span class="params">(@Param(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加一个用户</span></span><br><span class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;name&#125;,#&#123;password&#125;)"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改一个用户</span></span><br><span class="line">    <span class="meta">@Update</span>(<span class="string">"update user set name=#&#123;name&#125;,pwd=#&#123;password&#125; where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id删除用</span></span><br><span class="line">    <span class="meta">@Delete</span>(<span class="string">"delete from user where id = #&#123;id&#125;"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(@Param(<span class="string">"id"</span>)</span><span class="keyword">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-配置Mybatis核心配置文件"><a href="#2-2-配置Mybatis核心配置文件" class="headerlink" title="2.2 配置Mybatis核心配置文件"></a>2.2 配置Mybatis核心配置文件</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;typeAlias type="cn.bithachi.pojo.User" alias="User"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.bithachi.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--使用class绑定接口--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.dao.UserMapper"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3编写测试类UserMapperTest"><a href="#2-3编写测试类UserMapperTest" class="headerlink" title="2.3编写测试类UserMapperTest"></a>2.3编写测试类UserMapperTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetAllUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        <span class="comment">//本质上利用了jvm的动态代理机制</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; users = mapper.getAllUser();</span><br><span class="line">        <span class="keyword">for</span> (User user : users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line"></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">8</span>, <span class="string">"李四"</span>, <span class="string">"123456"</span>);</span><br><span class="line">        mapper.addUser(user);</span><br><span class="line"></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">8</span>, <span class="string">"王五"</span>, <span class="string">"wdasda"</span>);</span><br><span class="line">        mapper.updateUser(user);</span><br><span class="line"></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        mapper.deleteUser(<span class="number">8</span>);</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Param注解"><a href="#3-Param注解" class="headerlink" title="3. @Param注解"></a>3. @Param注解</h2><p>@Param注解用于给方法参数起一个名字。以下是总结的使用原则：</p><ul><li>在方法只接受一个参数的情况下，可以不使用@Param。</li><li>在方法接受多个参数的情况下，建议一定要使用@Param注解给参数命名。</li><li>如果参数是 JavaBean ， 则不能使用@Param。</li><li>不使用@Param注解时，参数只能有一个，并且是Javabean。</li></ul><h2 id="4-和-区别"><a href="#4-和-区别" class="headerlink" title="4.#{}和${}区别"></a>4.#{}和${}区别</h2><p><strong>#{}</strong> 是预编译处理，像传进来的数据会加个” “（#将传入的数据都当成一个字符串，会对自动传入的数据加一个双引号）</p><p><strong>${}</strong> 就是字符串替换。直接替换掉占位符。$方式一般用于传入数据库对象，例如传入表名.</p><p>使用 ${} 的话会导致 sql 注入。什么是 SQL 注入呢？比如 select * from user where id = ${value}</p><p>value 应该是一个数值吧。然后如果对方传过来的是 001  and name = tom。这样不就相当于多加了一个条件嘛？把SQL语句直接写进来了。如果是攻击性的语句呢？001；drop table user，直接把表给删了</p><p>所以为了防止 SQL 注入，能用 #{} 的不要去用 ${}</p><p>如果非要用 ${} 的话，那要注意防止 SQL 注入问题，可以手动判定传入的变量，进行过滤，一般 SQL 注入会输入很长的一条 SQL 语句</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis实现分页（limit&amp;RowBounds）</title>
      <link href="/posts/c80ce2a4.html"/>
      <url>/posts/c80ce2a4.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么需要分页？"><a href="#1-为什么需要分页？" class="headerlink" title="1. 为什么需要分页？"></a>1. 为什么需要分页？</h2><p>在学习mybatis等持久层框架的时候，会经常对数据进行增删改查操作，使用最多的是对数据库进行查询操作，如果查询大量数据的时候，我们往往使用分页进行查询，也就是每次处理小部分数据，这样对数据库压力就在可控范围内。</p><h2 id="2-Limit实现分页"><a href="#2-Limit实现分页" class="headerlink" title="2.  Limit实现分页"></a>2.  Limit实现分页</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#语法</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">LIMIT</span> stratIndex，pageSize</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">LIMIT</span> <span class="number">5</span>,<span class="number">10</span>; // 检索记录行 6-15  </span><br><span class="line"></span><br><span class="line"><span class="comment">#如果只给定一个参数，它表示返回最大的记录行数目：   </span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">table</span> <span class="keyword">LIMIT</span> <span class="number">5</span>; //检索前 5 个记录行  </span><br><span class="line"></span><br><span class="line"><span class="comment">#换句话说，LIMIT n 等价于 LIMIT 0,n。</span></span><br></pre></td></tr></table></figure><p><strong>步骤：</strong></p><p>1、修改Mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">  select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、Mapper接口，参数为map</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择全部用户实现分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p>3、在测试类中传入参数测试</p><ul><li>推断：起始位置 =  （当前页面 - 1 ） * 页面大小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分页查询 , 两个参数startIndex , pageSize</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> currentPage = <span class="number">1</span>;  <span class="comment">//第几页</span></span><br><span class="line">   <span class="keyword">int</span> pageSize = <span class="number">2</span>;  <span class="comment">//每页显示几个</span></span><br><span class="line">   Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;String,Integer&gt;();</span><br><span class="line">   map.put(<span class="string">"startIndex"</span>,(currentPage-<span class="number">1</span>)*pageSize);</span><br><span class="line">   map.put(<span class="string">"pageSize"</span>,pageSize);</span><br><span class="line"></span><br><span class="line">   List&lt;User&gt; users = mapper.selectUser(map);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">       System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201124195759.png" alt="image-20201124195754997"></p><h2 id="3-RowBounds实现分页"><a href="#3-RowBounds实现分页" class="headerlink" title="3. RowBounds实现分页"></a>3. RowBounds实现分页</h2><p>我们除了使用Limit在SQL层面实现分页，也可以使用RowBounds在Java代码层面实现分页，当然此种方式作为了解即可。我们来看下如何实现的！</p><p><strong>步骤：</strong></p><p>1、mapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//选择全部用户RowBounds实现分页</span></span><br><span class="line"><span class="function">List&lt;User&gt; <span class="title">getUserByRowBounds</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>2、mapper文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getUserByRowBounds"</span> <span class="attr">resultType</span>=<span class="string">"user"</span>&gt;</span></span><br><span class="line">select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、测试类</p><p>在这里，我们需要使用RowBounds类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUserByRowBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> currentPage = <span class="number">1</span>;  <span class="comment">//第几页</span></span><br><span class="line">   <span class="keyword">int</span> pageSize = <span class="number">2</span>;  <span class="comment">//每页显示几个</span></span><br><span class="line">   RowBounds rowBounds = <span class="keyword">new</span> RowBounds((currentPage-<span class="number">1</span>)*pageSize,pageSize);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//通过session.**方法进行传递rowBounds，[此种方式现在已经不推荐使用了]</span></span><br><span class="line">   List&lt;User&gt; users = session.selectList(<span class="string">"cn.bithachi.dao.UserMapper.getUserByRowBounds"</span>, <span class="keyword">null</span>, rowBounds);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">       System.out.println(user);</span><br><span class="line">  &#125;</span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.ibatis.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RowBounds</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NO_ROW_OFFSET = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NO_ROW_LIMIT = <span class="number">2147483647</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> RowBounds DEFAULT = <span class="keyword">new</span> RowBounds();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> offset;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> limit;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RowBounds</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offset = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>.limit = <span class="number">2147483647</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RowBounds</span><span class="params">(<span class="keyword">int</span> offset, <span class="keyword">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.offset = offset;</span><br><span class="line">        <span class="keyword">this</span>.limit = limit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOffset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.offset;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.limit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201124202606.png" alt="image-20201124202605669"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> limit </tag>
            
            <tag> RowBounds </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis配置日志（Log4j）</title>
      <link href="/posts/1cc59e94.html"/>
      <url>/posts/1cc59e94.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么使用日志"><a href="#1-为什么使用日志" class="headerlink" title="1. 为什么使用日志?"></a>1. 为什么使用日志?</h2><p>我们在测试SQL的时候，要是能够在控制台输出 SQL 的话，是不是就能够有更快的排错效率？</p><p>如果一个 数据库相关的操作出现了问题，我们可以根据输出的SQL语句快速排查问题。</p><p>对于以往的开发过程，我们会经常使用到debug模式来调节，跟踪我们的代码执行过程。但是现在使用Mybatis是基于接口，配置文件的源代码执行过程。因此，我们必须选择日志工具来作为我们开发，调节程序的工具。</p><p>Mybatis内置的日志工厂提供日志功能，具体的日志实现有以下几种工具：</p><ul><li>SLF4J</li><li>Apache Commons Logging</li><li>Log4j 2</li><li>Log4j</li><li>JDK logging</li></ul><p>具体选择哪个日志实现工具由MyBatis的内置日志工厂确定。它会使用最先找到的（按上文列举的顺序查找）。如果一个都未找到，日志功能就会被禁用。</p><h2 id="2-标准日志实现—STDOUT-LOGGING"><a href="#2-标准日志实现—STDOUT-LOGGING" class="headerlink" title="2. 标准日志实现—STDOUT_LOGGING"></a>2. 标准日志实现—STDOUT_LOGGING</h2><p>指定 MyBatis 应该使用哪个日志记录实现。如果此设置不存在，则会自动发现日志记录实现。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"STDOUT_LOGGING"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试，可以看到控制台有大量的输出！我们可以通过这些输出来判断程序到底哪里出了Bug</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201124175500.png" alt="image-20201124175458427"></p><h2 id="3-Log4j"><a href="#3-Log4j" class="headerlink" title="3. Log4j"></a>3. Log4j</h2><p><strong>简介：</strong></p><ul><li>Log4j是Apache的一个开源项目</li><li>通过使用Log4j，我们可以控制日志信息输送的目的地：控制台，文本，GUI组件….</li><li>我们也可以控制每一条日志的输出格式；</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程。最令人感兴趣的就是，这些可以通过一个配置文件来灵活地进行配置，而不需要修改应用的代码。</li></ul><p>目录结构图：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201124175739.png" alt="image-20201124175738918"></p><h3 id="3-1-导入log4j的包"><a href="#3-1-导入log4j的包" class="headerlink" title="3.1 导入log4j的包"></a>3.1 导入log4j的包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-2-配置文件编写"><a href="#3-2-配置文件编写" class="headerlink" title="3.2  配置文件编写"></a>3.2  配置文件编写</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span></span><br><span class="line"><span class="meta">log4j.rootLogger</span>=<span class="string">DEBUG,console,file</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#控制台输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.console</span> = <span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="meta">log4j.appender.console.Target</span> = <span class="string">System.out</span></span><br><span class="line"><span class="meta">log4j.appender.console.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout</span> = <span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.console.layout.ConversionPattern</span>=<span class="string">[%c]-%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#文件输出的相关设置</span></span><br><span class="line"><span class="meta">log4j.appender.file</span> = <span class="string">org.apache.log4j.RollingFileAppender</span></span><br><span class="line"><span class="meta">log4j.appender.file.File</span>=<span class="string">./log/mylog.log</span></span><br><span class="line"><span class="meta">log4j.appender.file.MaxFileSize</span>=<span class="string">10mb</span></span><br><span class="line"><span class="meta">log4j.appender.file.Threshold</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="meta">log4j.appender.file.layout.ConversionPattern</span>=<span class="string">[%p][%d&#123;yyyy-MM-dd&#125;][%c]%m%n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志输出级别</span></span><br><span class="line"><span class="meta">log4j.logger.org.mybatis</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.Statement</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.ResultSet</span>=<span class="string">DEBUG</span></span><br><span class="line"><span class="meta">log4j.logger.java.sql.PreparedStatement</span>=<span class="string">DEBUG</span></span><br></pre></td></tr></table></figure><h3 id="3-3-setting设置日志实现"><a href="#3-3-setting设置日志实现" class="headerlink" title="3.3 setting设置日志实现"></a>3.3 setting设置日志实现</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"logImpl"</span> <span class="attr">value</span>=<span class="string">"LOG4J"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-在程序中使用Log4j进行输出！"><a href="#3-4-在程序中使用Log4j进行输出！" class="headerlink" title="3.4 在程序中使用Log4j进行输出！"></a>3.4 在程序中使用Log4j进行输出！</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.log4j.Logger;<span class="comment">//注意导包：org.apache.log4j.Logger</span></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>  Logger logger= Logger.getLogger(UserMapperTest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"info：进入testSelectUserById方法"</span>);</span><br><span class="line">        logger.debug(<span class="string">"debug：进入testSelectUserById方法"</span>);</span><br><span class="line">        logger.error(<span class="string">"error: 进入testSelectUserById方法"</span>);</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();  <span class="comment">//获取SqlSession连接</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = mapper.selectUserById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、测试，看控制台输出！</p><ul><li>使用Log4j 输出日志</li><li>可以看到还生成了一个日志的文件 【需要修改file的日志级别】</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201124175945.png" alt="image-20201124175944963"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Log4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个简单的Mybatis数据表列名与pojo实体类属性不一致的解决方法</title>
      <link href="/posts/cf368424.html"/>
      <url>/posts/cf368424.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>当我们的数据表字段和实体类属性名不一致时，我们需要使用结果集映射将两者联系起来，否则可能出现查到的数据为null或不可预知的错误。</p><p> <img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201124123505.png" alt="image-20201124123504757"></p><h2 id="2-一个错误案例"><a href="#2-一个错误案例" class="headerlink" title="2. 一个错误案例"></a>2. 一个错误案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Alias</span>(<span class="string">"User"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String password;   <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getpassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setpassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", password='"</span> + password + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、mapper映射文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--根据ID查询信息--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   SqlSession session = MybatisUtils.getSession();  <span class="comment">//获取SqlSession连接</span></span><br><span class="line">   UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">   User user = mapper.selectUserById(<span class="number">2</span>);</span><br><span class="line">   System.out.println(user);</span><br><span class="line">   session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>结果:</strong></p><ul><li>User{id=2, name=’BitHachi’, password=’null’}</li><li>查询出来发现 password 为空 . 说明出现了问题！</li></ul><p><strong>分析：</strong></p><ul><li><p>select * from user where id = #{id} 可以看做</p><p>select  id,name,pwd  from user where id = #{id}</p></li><li><p>mybatis会根据这些查询的列名(会将列名转化为小写,数据库不区分大小写) , 去对应的实体类中查找相应列名的set方法设值 , 由于找不到setPwd() , 所以password返回null ; 【自动映射】</p></li></ul><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h2><h3 id="3-1-两种方案"><a href="#3-1-两种方案" class="headerlink" title="3.1 两种方案"></a>3.1 两种方案</h3><p>方案一：为列名指定别名 , 别名和java实体类的属性名一致 .</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultType</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">  select id , name , pwd as password from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方案二：使用结果集映射-&gt;ResultMap</strong> 【推荐】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">  select id , name , pwd from user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>ResultMap:</strong></p><h3 id="3-2-自动映射—resultType-”万能map”"><a href="#3-2-自动映射—resultType-”万能map”" class="headerlink" title="3.2 自动映射—resultType=”万能map”"></a>3.2 自动映射—resultType=”万能map”</h3><blockquote><p>万能Map,详情见：<a href="https://www.bithachi.cn/posts/b22f99f0.html">https://www.bithachi.cn/posts/b22f99f0.html</a></p></blockquote><ul><li><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。它可以让你从 90% 的 JDBC <code>ResultSets</code> 数据提取代码中解放出来。</li><li>实际上，在为一些比如连接的复杂语句编写映射代码的时候，一份 <code>resultMap</code> 能够代替实现同等功能的长达数千行的代码。</li><li>ResultMap 的设计思想是，对于简单的语句根本不需要配置显式的结果映射，而对于复杂一点的语句只需要描述它们的关系就行了。</li></ul><p>你已经见过简单映射语句的示例了，但并没有显式指定 <code>resultMap</code>。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">select id , name , pwd</span><br><span class="line">  from user</span><br><span class="line">  where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述语句只是简单地将所有的列映射到 <code>HashMap</code> 的键上，这由 <code>resultType</code> 属性指定。虽然在大部分情况下都够用，但是 HashMap 不是一个很好的模型。你的程序更可能会使用 JavaBean 或 POJO（Plain Old Java Objects，普通老式 Java 对象）作为模型。</p><p><code>ResultMap</code> 最优秀的地方在于，虽然你已经对它相当了解了，但是根本就不需要显式地用到他们。</p><h3 id="3-3-手动映射—resultMap-”UserMap”"><a href="#3-3-手动映射—resultMap-”UserMap”" class="headerlink" title="3.3 手动映射—resultMap=”UserMap”"></a>3.3 手动映射—resultMap=”UserMap”</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.bithachi.dao.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"UserMap"</span> <span class="attr">type</span>=<span class="string">"User"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- id为主键 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- column是数据库表的列名 , property是对应实体类的属性名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"pwd"</span> <span class="attr">property</span>=<span class="string">"password"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--根据ID查询信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUserById"</span> <span class="attr">resultMap</span>=<span class="string">"UserMap"</span>&gt;</span></span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis核心xml配置文件</title>
      <link href="/posts/515b2392.html"/>
      <url>/posts/515b2392.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0.前言"></a>0.前言</h2><p>本文章的内容是在这一篇文章代码的基础上进行的：详情见-&gt;<a href="https://www.bithachi.cn/posts/a80c3e83.html">https://www.bithachi.cn/posts/a80c3e83.html</a></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122232436.png" alt="image-20201122232434823"></p><h2 id="1-Mybatis核心xml配置文件结构"><a href="#1-Mybatis核心xml配置文件结构" class="headerlink" title="1. Mybatis核心xml配置文件结构"></a>1. Mybatis核心xml配置文件结构</h2><p>MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</p><p>进行配置文件编写时，标签顺序必须按照如下的从上到下的顺序编写</p><ul><li>configuration（配置）<ul><li>properties（属性） </li><li>settings（设置） </li><li>typeAliases（类型别名） </li><li>typeHandlers（类型处理器） </li><li>objectFactory（对象工厂） </li><li>plugins（插件） </li><li>environments（环境配置）<ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li>databaseIdProvider（数据库厂商标识）</li><li>mappers（映射器）</li></ul></li></ul><p>下面记录一些常用的配置和代码结果图，以供参考，欢迎交流。</p><h2 id="2-environments（环境配置）"><a href="#2-environments（环境配置）" class="headerlink" title="2. environments（环境配置）"></a>2. environments（环境配置）</h2><p>可以为MyBatis配置多套运行环境，将SQL映射到多个不同的数据库上，必须指定其中一个为默认运行环境（通过default指定）</p><ul><li><p>子元素节点：<strong>environment</strong></p></li><li><ul><li><strong>(1)</strong> dataSource `元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。</li><li>数据源是必须配置的。</li><li>有三种内建的<code>dataSource</code> 数据源类型 —-<code>type=&quot;[UNPOOLED|POOLED|JNDI]&quot;）</code></li><li>UNPOOLED：这个数据源的实现只是<code>每次被请求时打开和关闭连接</code>。</li><li>POOLED：这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来 , 这是一种使得<code>并发 Web 应用快速响应请求</code>的流行处理方式。</li><li>JNDI：这个数据源的实现是<code>为了能在如 Spring 或应用服务器这类容器中使用</code>，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。</li><li>数据源也有很多第三方的实现，比如dbcp，c3p0，druid等等….</li></ul></li></ul><ul><li><ul><li><p><strong>(2 )</strong>在 MyBatis 中有两种类型的事务管理器<code>transactionManager</code>（也就是<code>type=&quot;[JDBC|MANAGED]&quot;</code>）：</p></li><li><p>JDBC – 这个配置<code>直接使用了 JDBC 的提交和回滚设施</code>，它依赖从数据源获得的连接来管理事务作用域。</p></li><li><p>MANAGED – 这个配置<code>几乎没做什么</code>。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。 默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。例如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"MANAGED"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"closeConnection"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多详情见官方文档：<a href="https://mybatis.org/mybatis-3/zh/configuration.html#environments" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/configuration.html#environments</a></p></li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/forstudy?useSSL=true<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf8"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123456"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;environment id="test"&gt;</span></span><br><span class="line"><span class="comment">            &lt;transactionManager type="JDBC"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;dataSource type="POOLED"&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name="driver" value="$&#123;driver&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name="url" value="$&#123;url&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name="username" value="$&#123;username&#125;"/&gt;</span></span><br><span class="line"><span class="comment">                &lt;property name="password" value="$&#123;password&#125;"/&gt;</span></span><br><span class="line"><span class="comment">            &lt;/dataSource&gt;</span></span><br><span class="line"><span class="comment">        &lt;/environment&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/bithachi/dao/userMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-mappers（映射器）"><a href="#3-mappers（映射器）" class="headerlink" title="3. mappers（映射器）"></a>3. mappers（映射器）</h2><p>映射器可以使pojo类、Dao接口、sql与xml文件联系起来</p><p><strong>引入资源方式</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用相对于类路径的资源引用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span>  <span class="attr">resource</span>=<span class="string">"cn/bithachi/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用完全限定资源定位符（URL） --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/mappers/AuthorMapper.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--使用映射器接口实现类的完全限定类名需要配置文件名称和接口名称一致，并且位于同一目录下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"cn.bithachi.dao.UserMapper"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--将包内的映射器接口实现全部注册为映射器但是需要配置文件名称和接口名称一致，并且位于同一目录下--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.bithachi.dao"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Mapper文件</strong></p><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">       <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.kuang.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--查询所有信息--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"cn.bithachi.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>UserMapper接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>namespace中文意思：命名空间，作用如下：<ul><li>namespace的命名必须跟某个接口同名</li><li>接口中的方法与映射文件中sql语句id应该一一对应</li></ul></li><li>namespace和子元素的id联合保证唯一  , 区别不同的mapper<ol start="2"><li>绑定DAO接口</li><li>namespace命名规则 : 包名+类名</li></ol></li></ul><h2 id="4-Properties（属性）"><a href="#4-Properties（属性）" class="headerlink" title="4. Properties（属性）"></a>4. Properties（属性）</h2><p>数据库的属性都是可外部配置且可动态替换的，既可以在典型的 Java 属性文件中配置，亦可通过 properties 元素的子元素来传递。</p><p>我们来优化我们的配置文件</p><p>第一步 ; 在资源目录下新建一个db.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/forstudy?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>第二步 : 将文件导入properties 配置文件</p><p>如果我们在xml文件中配置了与外部配置文件properties相同名字的值，外部配置文件优先级最高。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mapper class="cn.bithachi.dao.UserMapper"/&gt;--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/bithachi/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201124105033.png" alt="image-20201124105032957"></p><h2 id="5-typeAliases-别名"><a href="#5-typeAliases-别名" class="headerlink" title="5. typeAliases (别名)"></a>5. typeAliases (别名)</h2><p><strong>(1)</strong> 类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">"cn.bithachi.pojo.User"</span> <span class="attr">alias</span>=<span class="string">"User"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当这样配置时，<code>User</code>可以用在任何使用<code>cn.bithachi.pojo.User</code>的地方。</p><p><strong>(2)</strong> 也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入properties文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">"db.properties"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"BitHachi"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置别名,注意顺序--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type="cn.bithachi.pojo.User" alias="User"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"cn.bithachi.pojo"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--事务管理--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;mapper class="cn.bithachi.dao.UserMapper"/&gt;--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"cn/bithachi/dao/UserMapper.xml"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每一个在包 <code>com.bithachi.pojo</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。</p><p>若有注解，则别名为其注解值。见下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.type.Alias;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Alias</span>(<span class="string">"User"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是一些为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table><thead><tr><th align="left">别名</th><th align="left">映射的类型</th></tr></thead><tbody><tr><td align="left">_byte</td><td align="left">byte</td></tr><tr><td align="left">_long</td><td align="left">long</td></tr><tr><td align="left">_short</td><td align="left">short</td></tr><tr><td align="left">_int</td><td align="left">int</td></tr><tr><td align="left">_integer</td><td align="left">int</td></tr><tr><td align="left">_double</td><td align="left">double</td></tr><tr><td align="left">_float</td><td align="left">float</td></tr><tr><td align="left">_boolean</td><td align="left">boolean</td></tr><tr><td align="left">string</td><td align="left">String</td></tr><tr><td align="left">byte</td><td align="left">Byte</td></tr><tr><td align="left">long</td><td align="left">Long</td></tr><tr><td align="left">short</td><td align="left">Short</td></tr><tr><td align="left">int</td><td align="left">Integer</td></tr><tr><td align="left">integer</td><td align="left">Integer</td></tr><tr><td align="left">double</td><td align="left">Double</td></tr><tr><td align="left">float</td><td align="left">Float</td></tr><tr><td align="left">boolean</td><td align="left">Boolean</td></tr><tr><td align="left">date</td><td align="left">Date</td></tr><tr><td align="left">decimal</td><td align="left">BigDecimal</td></tr><tr><td align="left">bigdecimal</td><td align="left">BigDecimal</td></tr><tr><td align="left">object</td><td align="left">Object</td></tr><tr><td align="left">map</td><td align="left">Map</td></tr><tr><td align="left">hashmap</td><td align="left">HashMap</td></tr><tr><td align="left">list</td><td align="left">List</td></tr><tr><td align="left">arraylist</td><td align="left">ArrayList</td></tr><tr><td align="left">collection</td><td align="left">Collection</td></tr><tr><td align="left">iterator</td><td align="left">Iterator</td></tr></tbody></table><p>测试结果图：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201124110247.png" alt="image-20201124110246474"></p><h2 id="6-settings（设置）"><a href="#6-settings（设置）" class="headerlink" title="6. settings（设置）"></a>6. settings（设置）</h2><p>这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。 下表描述了设置中各项设置的含义、默认值等。</p><table><thead><tr><th align="left">设置名</th><th align="left">描述</th><th align="left">有效值</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">cacheEnabled</td><td align="left">全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">lazyLoadingEnabled</td><td align="left">延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">aggressiveLazyLoading</td><td align="left">开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td><td align="left">true | false</td><td align="left">false （在 3.4.1 及之前的版本中默认为 true）</td></tr><tr><td align="left">multipleResultSetsEnabled</td><td align="left">是否允许单个语句返回多结果集（需要数据库驱动支持）。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">useColumnLabel</td><td align="left">使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">useGeneratedKeys</td><td align="left">允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">autoMappingBehavior</td><td align="left">指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td><td align="left">NONE, PARTIAL, FULL</td><td align="left">PARTIAL</td></tr><tr><td align="left">autoMappingUnknownColumnBehavior</td><td align="left">指定发现自动映射目标未知列（或未知属性类型）的行为。<code>NONE</code>: 不做任何反应<code>WARNING</code>: 输出警告日志（<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code> 的日志等级必须设置为 <code>WARN</code>）<code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td><td align="left">NONE, WARNING, FAILING</td><td align="left">NONE</td></tr><tr><td align="left">defaultExecutorType</td><td align="left">配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）； BATCH 执行器不仅重用语句还会执行批量更新。</td><td align="left">SIMPLE REUSE BATCH</td><td align="left">SIMPLE</td></tr><tr><td align="left">defaultStatementTimeout</td><td align="left">设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td><td align="left">任意正整数</td><td align="left">未设置 (null)</td></tr><tr><td align="left">defaultFetchSize</td><td align="left">为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td><td align="left">任意正整数</td><td align="left">未设置 (null)</td></tr><tr><td align="left">defaultResultSetType</td><td align="left">指定语句默认的滚动策略。（新增于 3.5.2）</td><td align="left">FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）</td><td align="left">未设置 (null)</td></tr><tr><td align="left">safeRowBoundsEnabled</td><td align="left">是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">safeResultHandlerEnabled</td><td align="left">是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td><td align="left">true | false</td><td align="left">True</td></tr><tr><td align="left">mapUnderscoreToCamelCase</td><td align="left">是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td align="left">true | false</td><td align="left">False</td></tr><tr><td align="left">localCacheScope</td><td align="left">MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td><td align="left">SESSION | STATEMENT</td><td align="left">SESSION</td></tr><tr><td align="left">jdbcTypeForNull</td><td align="left">当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td><td align="left">JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td><td align="left">OTHER</td></tr><tr><td align="left">lazyLoadTriggerMethods</td><td align="left">指定对象的哪些方法触发一次延迟加载。</td><td align="left">用逗号分隔的方法列表。</td><td align="left">equals,clone,hashCode,toString</td></tr><tr><td align="left">defaultScriptingLanguage</td><td align="left">指定动态 SQL 生成使用的默认脚本语言。</td><td align="left">一个类型别名或全限定类名。</td><td align="left">org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td></tr><tr><td align="left">defaultEnumTypeHandler</td><td align="left">指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td><td align="left">一个类型别名或全限定类名。</td><td align="left">org.apache.ibatis.type.EnumTypeHandler</td></tr><tr><td align="left">callSettersOnNulls</td><td align="left">指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">returnInstanceForEmptyRow</td><td align="left">当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">logPrefix</td><td align="left">指定 MyBatis 增加到日志名称的前缀。</td><td align="left">任何字符串</td><td align="left">未设置</td></tr><tr><td align="left">logImpl</td><td align="left">指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td align="left">SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td align="left">未设置</td></tr><tr><td align="left">proxyFactory</td><td align="left">指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td><td align="left">CGLIB | JAVASSIST</td><td align="left">JAVASSIST （MyBatis 3.3 以上）</td></tr><tr><td align="left">vfsImpl</td><td align="left">指定 VFS 的实现</td><td align="left">自定义 VFS 的实现的类全限定名，以逗号分隔。</td><td align="left">未设置</td></tr><tr><td align="left">useActualParamName</td><td align="left">允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td><td align="left">true | false</td><td align="left">true</td></tr><tr><td align="left">configurationFactory</td><td align="left">指定一个提供 <code>Configuration</code> 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td><td align="left">一个类型别名或完全限定类名。</td><td align="left">未设置</td></tr><tr><td align="left">shrinkWhitespacesInSql</td><td align="left">从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 (新增于 3.5.5)</td><td align="left">true | false</td><td align="left">false</td></tr><tr><td align="left">defaultSqlProviderType</td><td align="left">Specifies an sql provider class that holds provider method (Since 3.5.6). This class apply to the <code>type</code>(or <code>value</code>) attribute on sql provider annotation(e.g. <code>@SelectProvider</code>), when these attribute was omitted.</td><td align="left">A type alias or fully qualified class name</td><td align="left">Not set</td></tr></tbody></table><p>一个配置完整的 settings 元素的示例如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"cacheEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadingEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"multipleResultSetsEnabled"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useColumnLabel"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"useGeneratedKeys"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingBehavior"</span> <span class="attr">value</span>=<span class="string">"PARTIAL"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"autoMappingUnknownColumnBehavior"</span> <span class="attr">value</span>=<span class="string">"WARNING"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultExecutorType"</span> <span class="attr">value</span>=<span class="string">"SIMPLE"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultStatementTimeout"</span> <span class="attr">value</span>=<span class="string">"25"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"defaultFetchSize"</span> <span class="attr">value</span>=<span class="string">"100"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"safeRowBoundsEnabled"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"localCacheScope"</span> <span class="attr">value</span>=<span class="string">"SESSION"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"jdbcTypeForNull"</span> <span class="attr">value</span>=<span class="string">"OTHER"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"lazyLoadTriggerMethods"</span> <span class="attr">value</span>=<span class="string">"equals,clone,hashCode,toString"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis实现CRUD与万能Map</title>
      <link href="/posts/b22f99f0.html"/>
      <url>/posts/b22f99f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>本文章的内容是在这一篇文章代码的基础上进行的：详情见-&gt;<a href="https://www.bithachi.cn/posts/a80c3e83.html">https://www.bithachi.cn/posts/a80c3e83.html</a></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122232436.png" alt="image-20201122232434823"></p><h2 id="2-UserMapper映射接口"><a href="#2-UserMapper映射接口" class="headerlink" title="2. UserMapper映射接口"></a>2. UserMapper映射接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">selectUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//添加一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//修改一个用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="comment">//根据id删除用户</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-UserMapper-xml映射配置文件"><a href="#3-UserMapper-xml映射配置文件" class="headerlink" title="3.  UserMapper.xml映射配置文件"></a>3.  UserMapper.xml映射配置文件</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">"cn.bithachi.mapper.UserMapper"</span>&gt;</span><br><span class="line">    &lt;!--查询所有信息--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectUser"</span> resultType=<span class="string">"cn.bithachi.pojo.User"</span>&gt;</span><br><span class="line">        select * from user;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--根据ID查询信息--&gt;</span><br><span class="line">    &lt;select id=<span class="string">"selectUserById"</span> resultType=<span class="string">"cn.bithachi.pojo.User"</span>&gt;</span><br><span class="line">    select * from user where id = #&#123;id&#125;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;!--添加一个用户--&gt;</span><br><span class="line">    &lt;insert id=<span class="string">"addUser"</span> parameterType=<span class="string">"cn.bithachi.pojo.User"</span>&gt;</span><br><span class="line">    <span class="function">insert into <span class="title">user</span> <span class="params">(id,name,pwd)</span> <span class="title">values</span> <span class="params">(#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;)</span></span></span><br><span class="line"><span class="function">    &lt;/insert&gt;</span></span><br><span class="line"><span class="function">    &lt;!--修改一个用户--&gt;</span></span><br><span class="line"><span class="function">    &lt;update id</span>=<span class="string">"updateUser"</span> parameterType=<span class="string">"cn.bithachi.pojo.User"</span>&gt;</span><br><span class="line">      update user set name=#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br><span class="line">    &lt;delete id=<span class="string">"deleteUser"</span> parameterType=<span class="string">"int"</span>&gt;</span><br><span class="line">      delete from user where id = #&#123;id&#125;</span><br><span class="line">    &lt;/delete&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><h2 id="4-UserMapperTest测试类"><a href="#4-UserMapperTest测试类" class="headerlink" title="4. UserMapperTest测试类"></a>4. UserMapperTest测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        <span class="comment">//方法一:直接包名限定类方法</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; users = session.selectList("cn.bithachi.mapper.UserMapper.selectUser");</span></span><br><span class="line">        <span class="comment">//方法二:通过反射</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tsetSelectUserById</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();  <span class="comment">//获取SqlSession连接</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加一个用户</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAddUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">5</span>,<span class="string">"王五"</span>,<span class="string">"zxcvbn"</span>);</span><br><span class="line">        <span class="keyword">int</span> i = mapper.addUser(user);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        session.commit(); <span class="comment">//提交事务,重点!不写的话不会提交到数据库</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改一个用户</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        User user = mapper.selectUserById(<span class="number">1</span>);</span><br><span class="line">        user.setPwd(<span class="string">"asdfgh"</span>);</span><br><span class="line">        <span class="keyword">int</span> i = mapper.updateUser(user);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        session.commit(); <span class="comment">//提交事务,重点!不写的话不会提交到数据库</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id删除用户</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">int</span> i = mapper.deleteUser(<span class="number">5</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        session.commit(); <span class="comment">//提交事务,重点!不写的话不会提交到数据库</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-万能Map"><a href="#5-万能Map" class="headerlink" title="5. 万能Map"></a>5. 万能Map</h2><p>当实体类或者数据库中的表，字段或者参数过多，我们应当考虑使用HashMap！</p><p>public interface UserMapper</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//万能的map进行添加一行数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">addUser1</span><span class="params">(Map&lt;String, Object&gt; map)</span></span>;</span><br></pre></td></tr></table></figure><p>userMapper.xml中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--完成的Map插入一行数据--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--用map类型，对象的属性可以直接取出来，传递map的key，values后面可自定义名字，无需完全匹配数据库,但是测试的时候，字段要和values后面的一样--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"addUser1"</span> <span class="attr">parameterType</span>=<span class="string">"map"</span>&gt;</span></span><br><span class="line">    insert into user (id,name,pwd) values (#&#123;id&#125;,#&#123;username&#125;,#&#123;password&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>UserMapperTest测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试万能Map插入数据</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addUser1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    SqlSession sqlSession = MybatisUtils.getSession();</span><br><span class="line">    UserMapper mapper = sqlSession.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">    map.put(<span class="string">"id"</span>, <span class="number">7</span>);</span><br><span class="line">    map.put(<span class="string">"username"</span>, <span class="string">"BitHachi"</span>);</span><br><span class="line">    map.put(<span class="string">"password"</span>, <span class="string">"123456"</span>);</span><br><span class="line">    mapper.addUser1(map);</span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：</p><p>Map传递参数，直接在xml配置文件的sql中取出key即可。【parameterType=“map”】</p><p>对象传递参数，直接在sql中取对象的属性即可【parameterType=“Object”】</p><p>只有一个基本类型参数的情况下，可以直接在sql中取到。</p><p>对个参数用Map，或者用注解。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> CRUD </tag>
            
            <tag> HashMap </tag>
            
            <tag> Map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>转载|一篇文章了解与回顾JDBC核心知识点</title>
      <link href="/posts/1b6c446e.html"/>
      <url>/posts/1b6c446e.html</url>
      
        <content type="html"><![CDATA[<h2 id="第1章：JDBC概述"><a href="#第1章：JDBC概述" class="headerlink" title="第1章：JDBC概述"></a>第1章：JDBC概述</h2><h3 id="1-1-数据的持久化"><a href="#1-1-数据的持久化" class="headerlink" title="1.1 数据的持久化"></a>1.1 数据的持久化</h3><ul><li><p>持久化(persistence)：<strong>把数据保存到可掉电式存储设备中以供之后使用</strong>。大多数情况下，特别是企业级应用，<strong>数据持久化意味着将内存中的数据保存到硬盘</strong>上加以”固化”<strong>，而持久化的实现过程大多通过各种关系数据库来完成</strong>。</p></li><li><p>持久化的主要应用是将内存中的数据存储在关系型数据库中，当然也可以存储在磁盘文件、XML数据文件中。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221222.png" alt="1566741430592"></p></li></ul><h3 id="1-2-Java中的数据存储技术"><a href="#1-2-Java中的数据存储技术" class="headerlink" title="1.2 Java中的数据存储技术"></a>1.2 Java中的数据存储技术</h3><ul><li><p>在Java中，数据库存取技术可分为如下几类：</p><ul><li><p><strong>JDBC</strong>直接访问数据库</p></li><li><p>JDO (Java Data Object )技术</p></li><li><p><strong>第三方O/R工具</strong>，如Hibernate, Mybatis 等</p></li></ul></li><li><p>JDBC是java访问数据库的基石，JDO、Hibernate、MyBatis等只是更好的封装了JDBC。</p></li></ul><h3 id="1-3-JDBC介绍"><a href="#1-3-JDBC介绍" class="headerlink" title="1.3 JDBC介绍"></a>1.3 JDBC介绍</h3><ul><li>JDBC(Java Database Connectivity)是一个<strong>独立于特定数据库管理系统、通用的SQL数据库存取和操作的公共接口</strong>（一组API），定义了用来访问数据库的标准Java类库，（<strong>java.sql,javax.sql</strong>）使用这些类库可以以一种<strong>标准</strong>的方法、方便地访问数据库资源。</li><li>JDBC为访问不同的数据库提供了一种<strong>统一的途径</strong>，为开发者屏蔽了一些细节问题。</li><li>JDBC的目标是使Java程序员使用JDBC可以连接任何<strong>提供了JDBC驱动程序</strong>的数据库系统，这样就使得程序员无需对特定的数据库系统的特点有过多的了解，从而大大简化和加快了开发过程。</li><li>如果没有JDBC，那么Java程序访问数据库时是这样的：</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221241.png" alt="image-20201122221241831"></p><hr><ul><li>有了JDBC，Java程序访问数据库时是这样的：</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221252.png" alt="image-20201122221252275"></p><hr><ul><li>总结如下：</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221319.png" alt="image-20201122221319835"></p><h3 id="1-4-JDBC体系结构"><a href="#1-4-JDBC体系结构" class="headerlink" title="1.4 JDBC体系结构"></a>1.4 JDBC体系结构</h3><ul><li>JDBC接口（API）包括两个层次：<ul><li><strong>面向应用的API</strong>：Java API，抽象接口，供应用程序开发人员使用（连接数据库，执行SQL语句，获得结果）。</li><li><strong>面向数据库的API</strong>：Java Driver API，供开发商开发数据库驱动程序用。</li></ul></li></ul><blockquote><p><strong>JDBC是sun公司提供一套用于数据库操作的接口，java程序员只需要面向这套接口编程即可。</strong></p><p><strong>不同的数据库厂商，需要针对这套接口，提供不同实现。不同的实现的集合，即为不同数据库的驱动。                                                                                                                                                   ————面向接口编程</strong></p></blockquote><h3 id="1-5-JDBC程序编写步骤"><a href="#1-5-JDBC程序编写步骤" class="headerlink" title="1.5 JDBC程序编写步骤"></a>1.5 JDBC程序编写步骤</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221332.png" alt="image-20201122221332179"></p><blockquote><p>补充：ODBC(<strong>Open Database Connectivity</strong>，开放式数据库连接)，是微软在Windows平台下推出的。使用者在程序中只需要调用ODBC API，由 ODBC 驱动程序将调用转换成为对特定的数据库的调用请求。</p></blockquote><h2 id="第2章：获取数据库连接"><a href="#第2章：获取数据库连接" class="headerlink" title="第2章：获取数据库连接"></a>第2章：获取数据库连接</h2><h3 id="2-1-要素一：Driver接口实现类"><a href="#2-1-要素一：Driver接口实现类" class="headerlink" title="2.1 要素一：Driver接口实现类"></a>2.1 要素一：Driver接口实现类</h3><h4 id="2-1-1-Driver接口介绍"><a href="#2-1-1-Driver接口介绍" class="headerlink" title="2.1.1 Driver接口介绍"></a>2.1.1 Driver接口介绍</h4><ul><li><p>java.sql.Driver 接口是所有 JDBC 驱动程序需要实现的接口。这个接口是提供给数据库厂商使用的，不同数据库厂商提供不同的实现。</p></li><li><p>在程序中不需要直接去访问实现了 Driver 接口的类，而是由驱动程序管理器类(java.sql.DriverManager)去调用这些Driver实现。</p><ul><li>Oracle的驱动：<strong>oracle.jdbc.driver.OracleDriver</strong></li><li>mySql的驱动： <strong>com.mysql.jdbc.Driver</strong></li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221357.png" alt="image-20201122221357390"></p><ul><li>将上述jar包拷贝到Java工程的一个目录中，习惯上新建一个lib文件夹。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221422.png" alt="image-20201122221422716"></p><p>注意：如果是Dynamic Web Project（动态的web项目）话，则是把驱动jar放到WebContent（有的开发工具叫WebRoot）目录中的WEB-INF目录中的lib目录下即可</p><p> <img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221444.png" alt="image-20201122221444111"></p><h4 id="2-1-2-加载与注册JDBC驱动"><a href="#2-1-2-加载与注册JDBC驱动" class="headerlink" title="2.1.2 加载与注册JDBC驱动"></a>2.1.2 加载与注册JDBC驱动</h4><ul><li><p>加载驱动：加载 JDBC 驱动需调用 Class 类的静态方法 forName()，向其传递要加载的 JDBC 驱动的类名</p><ul><li><strong>Class.forName(“com.mysql.jdbc.Driver”);</strong></li></ul></li><li><p>注册驱动：DriverManager 类是驱动程序管理器类，负责管理驱动程序</p><ul><li><p><strong>使用DriverManager.registerDriver(com.mysql.jdbc.Driver)来注册驱动</strong></p></li><li><p>通常不用显式调用 DriverManager 类的 registerDriver() 方法来注册驱动程序类的实例，因为 Driver 接口的驱动程序类<strong>都</strong>包含了静态代码块，在这个静态代码块中，会调用 DriverManager.registerDriver() 方法来注册自身的一个实例。下图是MySQL的Driver实现类的源码：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221458.png" alt="image-20201122221458273"></p></li></ul></li></ul><h3 id="2-2-要素二：URL"><a href="#2-2-要素二：URL" class="headerlink" title="2.2 要素二：URL"></a>2.2 要素二：URL</h3><ul><li><p>JDBC URL 用于标识一个被注册的驱动程序，驱动程序管理器通过这个 URL 选择正确的驱动程序，从而建立到数据库的连接。</p></li><li><p>JDBC URL的标准由三部分组成，各部分间用冒号分隔。 </p><ul><li><strong>jdbc:子协议:子名称</strong></li><li><strong>协议</strong>：JDBC URL中的协议总是jdbc </li><li><strong>子协议</strong>：子协议用于标识一个数据库驱动程序</li><li><strong>子名称</strong>：一种标识数据库的方法。子名称可以依不同的子协议而变化，用子名称的目的是为了<strong>定位数据库</strong>提供足够的信息。包含<strong>主机名</strong>(对应服务端的ip地址)<strong>，端口号，数据库名</strong></li></ul></li><li><p>举例：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221508.png" alt="image-20201122221508463"></p></li><li><p><strong>几种常用数据库的 JDBC URL</strong></p><ul><li><p>MySQL的连接URL编写方式：</p><ul><li>jdbc:mysql://主机名称:mysql服务端口号/数据库名称?参数=值&amp;参数=值</li><li>jdbc:mysql://localhost:3306/study</li><li>jdbc:mysql://localhost:3306/study<strong>?useUnicode=true&amp;characterEncoding=utf8</strong>（如果JDBC程序与服务器端的字符集不一致，会导致乱码，那么可以通过参数指定服务器端的字符集）</li><li>jdbc:mysql://localhost:3306/study?user=root&amp;password=123456</li></ul></li><li><p>Oracle 9i的连接URL编写方式：</p><ul><li>jdbc:oracle:thin:@主机名称:oracle服务端口号:数据库名称</li><li>jdbc:oracle:thin:@localhost:1521:study</li></ul></li><li><p>SQLServer的连接URL编写方式：</p><ul><li><p>jdbc:sqlserver://主机名称:sqlserver服务端口号:DatabaseName=数据库名称</p></li><li><p>jdbc:sqlserver://localhost:1433:DatabaseName=study</p></li></ul></li></ul></li></ul><h3 id="2-3-要素三：用户名和密码"><a href="#2-3-要素三：用户名和密码" class="headerlink" title="2.3 要素三：用户名和密码"></a>2.3 要素三：用户名和密码</h3><ul><li>user,password可以用“属性名=属性值”方式告诉数据库</li><li>可以调用 DriverManager 类的 getConnection() 方法建立到数据库的连接</li></ul><h3 id="2-4-数据库连接方式举例"><a href="#2-4-数据库连接方式举例" class="headerlink" title="2.4 数据库连接方式举例"></a>2.4 数据库连接方式举例</h3><h4 id="2-4-1-连接方式一"><a href="#2-4-1-连接方式一" class="headerlink" title="2.4.1 连接方式一"></a>2.4.1 连接方式一</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.提供java.sql.Driver接口实现类的对象</span></span><br><span class="line">           Driver driver = <span class="keyword">null</span>;</span><br><span class="line">           driver = <span class="keyword">new</span> com.mysql.jdbc.Driver();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">           info.setProperty(<span class="string">"user"</span>, <span class="string">"root"</span>);</span><br><span class="line">           info.setProperty(<span class="string">"password"</span>, <span class="string">"abc123"</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           Connection conn = driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：上述代码中显式出现了第三方数据库的API</p></blockquote><h4 id="2-4-2-连接方式二"><a href="#2-4-2-连接方式二" class="headerlink" title="2.4.2 连接方式二"></a>2.4.2 连接方式二</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.实例化Driver</span></span><br><span class="line">           String className = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">           Class clazz = Class.forName(className);</span><br><span class="line">           Driver driver = (Driver) clazz.newInstance();</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.提供url，指明具体操作的数据</span></span><br><span class="line">           String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.提供Properties的对象，指明用户名和密码</span></span><br><span class="line">           Properties info = <span class="keyword">new</span> Properties();</span><br><span class="line">           info.setProperty(<span class="string">"user"</span>, <span class="string">"root"</span>);</span><br><span class="line">           info.setProperty(<span class="string">"password"</span>, <span class="string">"abc123"</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//4.调用driver的connect()，获取连接</span></span><br><span class="line">           Connection conn = driver.connect(url, info);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：相较于方式一，这里使用反射实例化Driver，不在代码中体现第三方数据库的API。体现了面向接口编程思想。</p></blockquote><h4 id="2-4-3-连接方式三"><a href="#2-4-3-连接方式三" class="headerlink" title="2.4.3 连接方式三"></a>2.4.3 连接方式三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">           String user = <span class="string">"root"</span>;</span><br><span class="line">           String password = <span class="string">"abc123"</span>;</span><br><span class="line">           String driverName = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.实例化Driver</span></span><br><span class="line">           Class clazz = Class.forName(driverName);</span><br><span class="line">           Driver driver = (Driver) clazz.newInstance();</span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           DriverManager.registerDriver(driver);</span><br><span class="line">           <span class="comment">//4.获取连接</span></span><br><span class="line">           Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：使用DriverManager实现数据库的连接。体会获取连接必要的4个基本要素。</p></blockquote><h4 id="2-4-4-连接方式四"><a href="#2-4-4-连接方式四" class="headerlink" title="2.4.4 连接方式四"></a>2.4.4 连接方式四</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testConnection4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="comment">//1.数据库连接的4个基本要素：</span></span><br><span class="line">           String url = <span class="string">"jdbc:mysql://localhost:3306/test"</span>;</span><br><span class="line">           String user = <span class="string">"root"</span>;</span><br><span class="line">           String password = <span class="string">"abc123"</span>;</span><br><span class="line">           String driverName = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line"></span><br><span class="line">           <span class="comment">//2.加载驱动 （①实例化Driver ②注册驱动）</span></span><br><span class="line">           Class.forName(driverName);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//Driver driver = (Driver) clazz.newInstance();</span></span><br><span class="line">           <span class="comment">//3.注册驱动</span></span><br><span class="line">           <span class="comment">//DriverManager.registerDriver(driver);</span></span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">           可以注释掉上述代码的原因，是因为在mysql的Driver类中声明有：</span></span><br><span class="line"><span class="comment">           static &#123;</span></span><br><span class="line"><span class="comment">               try &#123;</span></span><br><span class="line"><span class="comment">                   DriverManager.registerDriver(new Driver());</span></span><br><span class="line"><span class="comment">               &#125; catch (SQLException var1) &#123;</span></span><br><span class="line"><span class="comment">                   throw new RuntimeException("Can't register driver!");</span></span><br><span class="line"><span class="comment">               &#125;</span></span><br><span class="line"><span class="comment">           &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">           <span class="comment">//3.获取连接</span></span><br><span class="line">           Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line">           System.out.println(conn);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：不必显式的注册驱动了。因为在DriverManager的源码中已经存在静态代码块，实现了驱动的注册。</p></blockquote><h4 id="2-4-5-连接方式五-最终版"><a href="#2-4-5-连接方式五-最终版" class="headerlink" title="2.4.5 连接方式五(最终版)"></a>2.4.5 连接方式五(最终版)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">testConnection5</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">   <span class="comment">//1.加载配置文件</span></span><br><span class="line">       InputStream is = ConnectionTest.class.getClassLoader().getResourceAsStream("jdbc.properties");</span><br><span class="line">       Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">       pros.load(is);</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//2.读取配置信息</span></span><br><span class="line">       String user = pros.getProperty(<span class="string">"user"</span>);</span><br><span class="line">       String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line">       String url = pros.getProperty(<span class="string">"url"</span>);</span><br><span class="line">       String driverClass = pros.getProperty(<span class="string">"driverClass"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//3.加载驱动</span></span><br><span class="line">       Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//4.获取连接</span></span><br><span class="line">       Connection conn = DriverManager.getConnection(url,user,password);</span><br><span class="line">       System.out.println(conn);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>其中，配置文件声明在工程的src目录下：【jdbc.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">abc123</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">driverClass</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><blockquote><p>说明：使用配置文件的方式保存配置信息，在代码中加载配置文件</p><p><strong>使用配置文件的好处：</strong></p><p>①实现了代码和数据的分离，如果需要修改配置信息，直接在配置文件中修改，不需要深入代码<br>②如果修改了配置信息，省去重新编译的过程。</p></blockquote><h2 id="第3章：使用PreparedStatement实现CRUD操作"><a href="#第3章：使用PreparedStatement实现CRUD操作" class="headerlink" title="第3章：使用PreparedStatement实现CRUD操作"></a>第3章：使用PreparedStatement实现CRUD操作</h2><h3 id="3-1-操作和访问数据库"><a href="#3-1-操作和访问数据库" class="headerlink" title="3.1 操作和访问数据库"></a>3.1 操作和访问数据库</h3><ul><li><p>数据库连接被用于向数据库服务器发送命令和 SQL 语句，并接受数据库服务器返回的结果。其实一个数据库连接就是一个Socket连接。</p></li><li><p>在 java.sql 包中有 3 个接口分别定义了对数据库的调用的不同方式：</p><ul><li>Statement：用于执行静态 SQL 语句并返回它所生成结果的对象。 </li><li>PrepatedStatement：SQL 语句被预编译并存储在此对象中，可以使用此对象多次高效地执行该语句。</li><li>CallableStatement：用于执行 SQL 存储过程</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221757.png" alt="image-20201122221757854"></p></li></ul><h3 id="3-2-使用Statement操作数据表的弊端"><a href="#3-2-使用Statement操作数据表的弊端" class="headerlink" title="3.2 使用Statement操作数据表的弊端"></a>3.2 使用Statement操作数据表的弊端</h3><ul><li><p>通过调用 Connection 对象的 createStatement() 方法创建该对象。该对象用于执行静态的 SQL 语句，并且返回执行结果。</p></li><li><p>Statement 接口中定义了下列方法用于执行 SQL 语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int excuteUpdate(String sql)：执行更新操作<span class="keyword">INSERT</span>、<span class="keyword">UPDATE</span>、<span class="keyword">DELETE</span></span><br><span class="line">ResultSet executeQuery(<span class="keyword">String</span> <span class="keyword">sql</span>)：执行查询操作<span class="keyword">SELECT</span></span><br></pre></td></tr></table></figure></li><li><p>但是使用Statement操作数据表存在弊端：</p><ul><li><strong>问题一：存在拼串操作，繁琐</strong></li><li><strong>问题二：存在SQL注入问题</strong></li></ul></li><li><p>SQL 注入是利用某些系统没有对用户输入的数据进行充分的检查，而在用户输入数据中注入非法的 SQL 语句段或命令(如：SELECT user, password FROM user_table WHERE user=’a’ OR 1 = ‘ AND password = ‘ OR ‘1’ = ‘1’) ，从而利用系统的 SQL 引擎完成恶意行为的做法。</p></li><li><p>对于 Java 而言，要防范 SQL 注入，只要用 PreparedStatement(从Statement扩展而来) 取代 Statement 就可以了。</p></li><li><p>代码演示：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StatementTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Statement的弊端：需要拼写sql语句，并且存在SQL注入的问题</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLogin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Scanner scan = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">System.out.print(<span class="string">"用户名："</span>);</span><br><span class="line">String userName = scan.nextLine();</span><br><span class="line">System.out.print(<span class="string">"密   码："</span>);</span><br><span class="line">String password = scan.nextLine();</span><br><span class="line"></span><br><span class="line"><span class="comment">// SELECT user,password FROM user_table WHERE USER = '1' or ' AND PASSWORD = '='1' or '1' = '1';</span></span><br><span class="line">String sql = <span class="string">"SELECT user,password FROM user_table WHERE USER = '"</span> + userName + <span class="string">"' AND PASSWORD = '"</span> + password</span><br><span class="line">+ <span class="string">"'"</span>;</span><br><span class="line">User user = get(sql, User<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">if</span> (user != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"登陆成功!"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">System.out.println(<span class="string">"用户名或密码错误！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Statement实现对数据表的查询操作</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">get</span><span class="params">(String sql, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">Statement st = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.加载配置文件</span></span><br><span class="line">InputStream is = StatementTest.class.getClassLoader().getResourceAsStream("jdbc.properties");</span><br><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">pros.load(is);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.读取配置信息</span></span><br><span class="line">String user = pros.getProperty(<span class="string">"user"</span>);</span><br><span class="line">String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line">String url = pros.getProperty(<span class="string">"url"</span>);</span><br><span class="line">String driverClass = pros.getProperty(<span class="string">"driverClass"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.加载驱动</span></span><br><span class="line">Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.获取连接</span></span><br><span class="line">conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">st = conn.createStatement();</span><br><span class="line"></span><br><span class="line">rs = st.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果集的元数据</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取结果集的列数</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line"></span><br><span class="line">t = clazz.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line"><span class="comment">// //1. 获取列的名称</span></span><br><span class="line"><span class="comment">// String columnName = rsmd.getColumnName(i+1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 获取列的别名</span></span><br><span class="line">String columnName = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 根据列名获取对应数据表中的数据</span></span><br><span class="line">Object columnVal = rs.getObject(columnName);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 将数据表中得到的数据，封装进对象</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnName);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 关闭资源</span></span><br><span class="line"><span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">st.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>综上：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221818.png" alt="image-20201122221818508"></p><h3 id="3-3-PreparedStatement的使用"><a href="#3-3-PreparedStatement的使用" class="headerlink" title="3.3 PreparedStatement的使用"></a>3.3 PreparedStatement的使用</h3><h4 id="3-3-1-PreparedStatement介绍"><a href="#3-3-1-PreparedStatement介绍" class="headerlink" title="3.3.1 PreparedStatement介绍"></a>3.3.1 PreparedStatement介绍</h4><ul><li><p>可以通过调用 Connection 对象的 <strong>preparedStatement(String sql)</strong> 方法获取 PreparedStatement 对象</p></li><li><p><strong>PreparedStatement 接口是 Statement 的子接口，它表示一条预编译过的 SQL 语句</strong></p></li><li><p>PreparedStatement 对象所代表的 SQL 语句中的参数用问号(?)来表示，调用 PreparedStatement 对象的 setXxx() 方法来设置这些参数. setXxx() 方法有两个参数，第一个参数是要设置的 SQL 语句中的参数的索引(从 1 开始)，第二个是设置的 SQL 语句中的参数的值</p></li></ul><h4 id="3-3-2-PreparedStatement-vs-Statement"><a href="#3-3-2-PreparedStatement-vs-Statement" class="headerlink" title="3.3.2 PreparedStatement vs Statement"></a>3.3.2 PreparedStatement vs Statement</h4><ul><li><p>代码的可读性和可维护性。</p></li><li><p><strong>PreparedStatement 能最大可能提高性能：</strong></p><ul><li>DBServer会对<strong>预编译</strong>语句提供性能优化。因为预编译语句有可能被重复调用，所以<u>语句在被DBServer的编译器编译后的执行代码被缓存下来，那么下次调用时只要是相同的预编译语句就不需要编译，只要将参数直接传入编译过的语句执行代码中就会得到执行。</u></li><li>在statement语句中,即使是相同操作但因为数据内容不一样,所以整个语句本身不能匹配,没有缓存语句的意义.事实是没有数据库会对普通语句编译后的执行代码缓存。这样<u>每执行一次都要对传入的语句编译一次。</u></li><li>(语法检查，语义检查，翻译成二进制命令，缓存)</li></ul></li><li><p>PreparedStatement 可以防止 SQL 注入 </p></li></ul><h4 id="3-3-3-Java与SQL对应数据类型转换表"><a href="#3-3-3-Java与SQL对应数据类型转换表" class="headerlink" title="3.3.3 Java与SQL对应数据类型转换表"></a>3.3.3 Java与SQL对应数据类型转换表</h4><table><thead><tr><th>Java类型</th><th>SQL类型</th></tr></thead><tbody><tr><td>boolean</td><td>BIT</td></tr><tr><td>byte</td><td>TINYINT</td></tr><tr><td>short</td><td>SMALLINT</td></tr><tr><td>int</td><td>INTEGER</td></tr><tr><td>long</td><td>BIGINT</td></tr><tr><td>String</td><td>CHAR,VARCHAR,LONGVARCHAR</td></tr><tr><td>byte   array</td><td>BINARY  ,    VAR BINARY</td></tr><tr><td>java.sql.Date</td><td>DATE</td></tr><tr><td>java.sql.Time</td><td>TIME</td></tr><tr><td>java.sql.Timestamp</td><td>TIMESTAMP</td></tr></tbody></table><h4 id="3-3-4-使用PreparedStatement实现增、删、改操作"><a href="#3-3-4-使用PreparedStatement实现增、删、改操作" class="headerlink" title="3.3.4 使用PreparedStatement实现增、删、改操作"></a>3.3.4 使用PreparedStatement实现增、删、改操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCommonUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//String sql = "delete from customers where id = ?";</span></span><br><span class="line"><span class="comment">//update(sql,3);</span></span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"update `order` set order_name = ? where order_id = ?"</span>;</span><br><span class="line">update(sql,<span class="string">"DD"</span>,<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//通用的增、删、改操作（体现一：增、删、改 ； 体现二：针对于不同的表）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String sql,Object ... args)</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取数据库的连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; args.length;i++)&#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//5.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//一般的增删改操作</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取数据库的连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">//2.预编译sql语句，返回PreparedStatement的实例</span></span><br><span class="line">String sql = <span class="string">"update customers set name = ? where id = ?"</span>;</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">//3.填充占位符</span></span><br><span class="line">ps.setObject(<span class="number">1</span>,<span class="string">"莫扎特"</span>);</span><br><span class="line">ps.setObject(<span class="number">2</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">//4.执行</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//5.资源的关闭</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-5-JDBCUtils—操作数据库的工具类"><a href="#3-3-5-JDBCUtils—操作数据库的工具类" class="headerlink" title="3.3.5  JDBCUtils—操作数据库的工具类"></a>3.3.5  JDBCUtils—操作数据库的工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 操作数据库的工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JDBCUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 获取数据库的连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">// 1.读取配置文件中的4个基本信息</span></span><br><span class="line">InputStream is = ClassLoader.getSystemClassLoader().getResourceAsStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line"></span><br><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">pros.load(is);</span><br><span class="line"></span><br><span class="line">String user = pros.getProperty(<span class="string">"user"</span>);</span><br><span class="line">String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line">String url = pros.getProperty(<span class="string">"url"</span>);</span><br><span class="line">String driverClass = pros.getProperty(<span class="string">"driverClass"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.加载驱动</span></span><br><span class="line">Class.forName(driverClass);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.获取连接</span></span><br><span class="line">Connection conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 关闭连接和Statement的操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> shkstart</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 上午9:12:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ps</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn,Statement ps)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(ps != <span class="keyword">null</span>)</span><br><span class="line">ps.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>)</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span> 关闭资源操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> conn</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> ps</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(Connection conn,Statement ps,ResultSet rs)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(ps != <span class="keyword">null</span>)</span><br><span class="line">ps.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(conn != <span class="keyword">null</span>)</span><br><span class="line">conn.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="keyword">null</span>)</span><br><span class="line">rs.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3-6-使用PreparedStatement实现查询操作"><a href="#3-3-6-使用PreparedStatement实现查询操作" class="headerlink" title="3.3.6 使用PreparedStatement实现查询操作"></a>3.3.6 使用PreparedStatement实现查询操作</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">String sql = <span class="string">"select id,name,email from customers where id = ?"</span>;</span><br><span class="line">Customer customer = getInstance(Customer<span class="class">.<span class="keyword">class</span>,<span class="title">sql</span>,12)</span>;</span><br><span class="line">System.out.println(customer);</span><br><span class="line"></span><br><span class="line">String sql1 = <span class="string">"select order_id orderId,order_name orderName from `order` where order_id = ?"</span>;</span><br><span class="line">Order order = getInstance(Order<span class="class">.<span class="keyword">class</span>, <span class="title">sql1</span>, 1)</span>;</span><br><span class="line">System.out.println(order);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">运行结果：</span><br><span class="line">Customer [id=<span class="number">12</span>, name=黎明, email=LiM@<span class="number">126</span>.com, birth=<span class="keyword">null</span>]</span><br><span class="line">Order [orderId=<span class="number">1</span>, orderName=AA, orderDate=<span class="keyword">null</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * 针对于表的字段名与类的属性名不相同的情况：</span></span><br><span class="line"><span class="comment"> * 1. 必须声明sql时，使用类的属性名来命名字段的别名</span></span><br><span class="line"><span class="comment"> * 2. 使用ResultSetMetaData时，需要使用getColumnLabel()来替换getColumnName(),获取列的别名。</span></span><br><span class="line"><span class="comment"> *  说明：如果sql中没有给字段其别名，getColumnLabel()获取的就是列名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 通用的针对于不同表的查询:返回一个对象 (version 1.0)</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; clazz, String sql, Object... args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.预编译sql语句，得到PreparedStatement对象</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.执行executeQuery(),得到结果集：ResultSet</span></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.得到结果集的元数据：ResultSetMetaData</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.1通过ResultSetMetaData得到columnCount,columnLabel；通过ResultSet得到列值</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">T t = clazz.newInstance();<span class="comment">//利用反射调用类的无参构造方法创建一个对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;<span class="comment">// 遍历每一个列</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取列值</span></span><br><span class="line">Object columnVal = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 获取列的别名:列的别名，使用类的属性名充当</span></span><br><span class="line">String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"><span class="comment">// 6.2使用反射，给对象的相应属性赋值</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(t, columnVal);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 7.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ORM编程思想  （object relational mapping）</span></span><br><span class="line"><span class="comment"> * 一个数据表对应一个java类</span></span><br><span class="line"><span class="comment"> * 表中的一条记录对应java类的一个对象</span></span><br><span class="line"><span class="comment"> * 表中的一个字段对应java类的一个属性</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> Date birth;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(<span class="keyword">int</span> id, String name, String email, Date birth)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line"><span class="keyword">this</span>.birth = birth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getBirth</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> birth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBirth</span><span class="params">(Date birth)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.birth = birth;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Customer [id="</span> + id + <span class="string">", name="</span> + name + <span class="string">", email="</span> + email + <span class="string">", birth="</span> + birth + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> orderId;</span><br><span class="line"><span class="keyword">private</span> String orderName;</span><br><span class="line"><span class="keyword">private</span> Date orderDate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(<span class="keyword">int</span> orderId, String orderName, Date orderDate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.orderId = orderId;</span><br><span class="line"><span class="keyword">this</span>.orderName = orderName;</span><br><span class="line"><span class="keyword">this</span>.orderDate = orderDate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(<span class="keyword">int</span> orderId)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getOrderName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderName</span><span class="params">(String orderName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> Date <span class="title">getOrderDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> orderDate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderDate</span><span class="params">(Date orderDate)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.orderDate = orderDate;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Order [orderId="</span> + orderId + <span class="string">", orderName="</span> + orderName + <span class="string">", orderDate="</span> + orderDate + <span class="string">"]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>说明：使用PreparedStatement实现的查询操作可以替换Statement实现的查询操作，解决Statement拼串和SQL注入问题。</p></blockquote><p><strong>查询多行记录，赋值给一个集合，例如：ArrayList</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGetForList</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select id,name,email from customers where id &lt; ?"</span>;</span><br><span class="line">List&lt;Customer&gt; list = getForList(Customer<span class="class">.<span class="keyword">class</span>,<span class="title">sql</span>,12)</span>;</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">String sql1 = <span class="string">"select order_id orderId,order_name orderName from `order`"</span>;</span><br><span class="line">List&lt;Order&gt; orderList = getForList(Order<span class="class">.<span class="keyword">class</span>, <span class="title">sql1</span>)</span>;</span><br><span class="line">orderList.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getForList</span><span class="params">(Class&lt;T&gt; clazz,String sql, Object... args)</span></span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"><span class="comment">// 获取结果集的元数据 :ResultSetMetaData</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"><span class="comment">// 通过ResultSetMetaData获取结果集中的列数</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"><span class="comment">//创建集合对象</span></span><br><span class="line">ArrayList&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</span><br><span class="line"><span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">T t = clazz.newInstance();</span><br><span class="line"><span class="comment">// 处理结果集一行数据中的每一个列:给t对象指定的属性赋值</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line"><span class="comment">// 获取列值</span></span><br><span class="line">Object columValue = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取每个列的列名</span></span><br><span class="line"><span class="comment">// String columnName = rsmd.getColumnName(i + 1);</span></span><br><span class="line">String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给t对象指定的columnName属性，赋值为columValue：通过反射</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(t, columValue);</span><br><span class="line">&#125;</span><br><span class="line">list.add(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Customer [id=<span class="number">1</span>, name=汪峰, email=wf@<span class="number">126</span>.com, birth=null]</span><br><span class="line">Customer [id=<span class="number">2</span>, name=王菲, email=wangf@<span class="number">163</span>.com, birth=null]</span><br><span class="line">Customer [id=<span class="number">3</span>, name=林志玲, email=linzl@gmail.com, birth=null]</span><br><span class="line">Customer [id=<span class="number">4</span>, name=汤唯, email=tangw@sina.com, birth=null]</span><br><span class="line">Customer [id=<span class="number">5</span>, name=成龙, email=Jackey@gmai.com, birth=null]</span><br><span class="line">Customer [id=<span class="number">6</span>, name=迪丽热巴, email=reba@<span class="number">163</span>.com, birth=null]</span><br><span class="line">Customer [id=<span class="number">7</span>, name=刘亦菲, email=liuyifei@qq.com, birth=null]</span><br><span class="line">Customer [id=<span class="number">8</span>, name=陈道明, email=bdf@<span class="number">126</span>.com, birth=null]</span><br><span class="line">Customer [id=<span class="number">10</span>, name=周杰伦, email=zhoujl@sina.com, birth=null]</span><br><span class="line">Order [orderId=<span class="number">1</span>, orderName=AA, orderDate=null]</span><br><span class="line">Order [orderId=<span class="number">2</span>, orderName=DD, orderDate=null]</span><br><span class="line">Order [orderId=<span class="number">4</span>, orderName=GG, orderDate=null]</span><br></pre></td></tr></table></figure><h3 id="3-4-ResultSet与ResultSetMetaData"><a href="#3-4-ResultSet与ResultSetMetaData" class="headerlink" title="3.4 ResultSet与ResultSetMetaData"></a>3.4 ResultSet与ResultSetMetaData</h3><h4 id="3-4-1-ResultSet"><a href="#3-4-1-ResultSet" class="headerlink" title="3.4.1 ResultSet"></a>3.4.1 ResultSet</h4><ul><li><p>查询需要调用PreparedStatement 的 executeQuery() 方法，查询结果是一个ResultSet 对象</p></li><li><p>ResultSet 对象以逻辑表格的形式封装了执行数据库操作的结果集，ResultSet 接口由数据库厂商提供实现</p></li><li><p>ResultSet 返回的实际上就是一张数据表。有一个指针指向数据表的第一条记录的前面。</p></li><li><p>ResultSet 对象维护了一个指向当前数据行的<strong>游标</strong>，初始的时候，游标在第一行之前，可以通过 ResultSet 对象的 next() 方法移动到下一行。调用 next()方法检测下一行是否有效。若有效，该方法返回 true，且指针下移。相当于Iterator对象的 hasNext() 和 next() 方法的结合体。</p></li><li><p>当指针指向一行时, 可以通过调用 getXxx(int index) 或 getXxx(int columnName) 获取每一列的值。</p><ul><li>例如: getInt(1), getString(“name”)</li><li><strong>注意：Java与数据库交互涉及到的相关Java API中的索引都从1开始。</strong></li></ul></li><li><p>ResultSet 接口的常用方法：</p><ul><li><p>boolean next()</p></li><li><p>getString()</p></li><li><p>…</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221852.png" alt="image-20201122221852453"></p></li></ul><h4 id="3-4-2-ResultSetMetaData"><a href="#3-4-2-ResultSetMetaData" class="headerlink" title="3.4.2 ResultSetMetaData"></a>3.4.2 ResultSetMetaData</h4><ul><li><p>可用于获取关于 ResultSet 对象中列的类型和属性信息的对象</p></li><li><p>ResultSetMetaData meta = rs.getMetaData();</p><ul><li><p><strong>getColumnName</strong>(int column)：获取指定列的名称</p></li><li><p><strong>getColumnLabel</strong>(int column)：获取指定列的别名</p></li><li><p><strong>getColumnCount</strong>()：返回当前 ResultSet 对象中的列数。 </p></li><li><p>getColumnTypeName(int column)：检索指定列的数据库特定的类型名称。 </p></li><li><p>getColumnDisplaySize(int column)：指示指定列的最大标准宽度，以字符为单位。 </p></li><li><p><strong>isNullable</strong>(int column)：指示指定列中的值是否可以为 null。 </p></li><li><p>isAutoIncrement(int column)：指示是否自动为指定列进行编号，这样这些列仍然是只读的。 </p></li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221901.png" alt="image-20201122221901404"></p><p><strong>问题1：得到结果集后, 如何知道该结果集中有哪些列 ？ 列名是什么？</strong></p><p>​     需要使用一个描述 ResultSet 的对象， 即 ResultSetMetaData</p><p><strong>问题2：关于ResultSetMetaData</strong></p><ol><li><strong>如何获取 ResultSetMetaData</strong>： 调用 ResultSet 的 getMetaData() 方法即可</li><li><strong>获取 ResultSet 中有多少列</strong>：调用 ResultSetMetaData 的 getColumnCount() 方法</li><li><strong>获取 ResultSet 每一列的列的别名是什么</strong>：调用 ResultSetMetaData 的getColumnLabel() 方法</li></ol><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221911.png" alt="image-20201122221911557"></p><h3 id="3-5-资源的释放"><a href="#3-5-资源的释放" class="headerlink" title="3.5 资源的释放"></a>3.5 资源的释放</h3><ul><li>释放ResultSet, Statement,Connection。</li><li>数据库连接（Connection）是非常稀有的资源，用完后必须马上释放，如果Connection不能及时正确的关闭将导致系统宕机。Connection的使用原则是<strong>尽量晚创建，尽量早的释放。</strong></li><li>可以在finally中关闭，保证及时其他代码出现异常，资源也一定能被关闭。</li></ul><h3 id="3-6-JDBC-API小结"><a href="#3-6-JDBC-API小结" class="headerlink" title="3.6 JDBC API小结"></a>3.6 JDBC API小结</h3><ul><li><p>两种思想</p><ul><li><p>面向接口编程的思想</p></li><li><p>ORM思想(object relational mapping)</p><ul><li>一个数据表对应一个java类</li><li>表中的一条记录对应java类的一个对象</li><li>表中的一个字段对应java类的一个属性</li></ul></li></ul><blockquote><p>sql是需要结合列名和表的属性名来写。注意起别名。</p></blockquote></li><li><p>两种技术</p><ul><li>JDBC结果集的元数据：ResultSetMetaData<ul><li>获取列数：getColumnCount()</li><li>获取列的别名：getColumnLabel()</li><li>获取列的值：getObject();</li></ul></li><li>通过反射，创建指定类的对象，获取指定的属性并赋值</li></ul></li><li><p>除了解决Statement的拼串、sql问题之外，PreparedStatement还有哪些好处呢？ </p><p>1.PreparedStatement操作Blob的数据，而Statement做不到。<br>2.PreparedStatement可以实现更高效的批量操作。</p></li></ul><hr><h2 id="章节练习"><a href="#章节练习" class="headerlink" title="章节练习"></a>章节练习</h2><p><strong>练习题1：从控制台向数据库的表customers中插入一条数据，表结构如下：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122221921.png" alt="image-20201122221921266"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Random_name.sgm.myjdbc.jdbc11.study3.util.JDBCUtils;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exer1Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"请输入用户名："</span>);</span><br><span class="line">String name = scanner.next();</span><br><span class="line">System.out.print(<span class="string">"请输入邮箱："</span>);</span><br><span class="line">String email = scanner.next();</span><br><span class="line">System.out.print(<span class="string">"请输入生日："</span>);</span><br><span class="line">String birthday = scanner.next();<span class="comment">//'1992-09-08'</span></span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into customers(name,email,birth)values(?,?,?)"</span>;</span><br><span class="line"><span class="keyword">int</span> insertCount = update(sql,name,email,birthday);</span><br><span class="line"><span class="keyword">if</span>(insertCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"添加成功"</span>);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"添加失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通用的增删改操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql, Object... args)</span> </span>&#123;<span class="comment">// sql中占位符的个数与可变形参的长度相同！</span></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库的连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">// 2.预编译sql语句，返回PreparedStatement的实例</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);<span class="comment">// 小心参数声明错误！！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.执行</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ps.execute():</span></span><br><span class="line"><span class="comment"> * 如果执行的是查询操作，有返回结果，则此方法返回true;</span></span><br><span class="line"><span class="comment"> * 如果执行的是增、删、改操作，没有返回结果，则此方法返回false.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//return ps.execute();</span></span><br><span class="line"><span class="comment">//方式二：</span></span><br><span class="line"><span class="keyword">return</span> ps.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 5.资源的关闭</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>练习题2：创立数据库表 examstudent，表结构如下：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122222005.png" alt="image-20201122222005267"></p><p><strong>代码实现1：插入一个新的student 信息</strong></p><p>请输入考生的详细信息</p><p>Type:<br>IDCard:<br>ExamCard:<br>StudentName:<br>Location:<br>Grade:</p><p>信息录入成功!</p><p><strong>代码实现2：在 eclipse中建立 java 程序：输入身份证号或准考证号可以查询到学生的基本信息。结果如下：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122222030.png" alt="image-20201122222029965"></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSetMetaData;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exer2Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 问题1：向examstudent表中添加一条记录</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *  Type: </span></span><br><span class="line"><span class="comment">IDCard:</span></span><br><span class="line"><span class="comment">ExamCard:</span></span><br><span class="line"><span class="comment">StudentName:</span></span><br><span class="line"><span class="comment">Location:</span></span><br><span class="line"><span class="comment">Grade:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span></span>&#123;</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.print(<span class="string">"四级/六级："</span>);</span><br><span class="line"><span class="keyword">int</span> type = scanner.nextInt();</span><br><span class="line">System.out.print(<span class="string">"身份证号："</span>);</span><br><span class="line">String IDCard = scanner.next();</span><br><span class="line">System.out.print(<span class="string">"准考证号："</span>);</span><br><span class="line">String examCard = scanner.next();</span><br><span class="line">System.out.print(<span class="string">"学生姓名："</span>);</span><br><span class="line">String studentName = scanner.next();</span><br><span class="line">System.out.print(<span class="string">"所在城市："</span>);</span><br><span class="line">String location = scanner.next();</span><br><span class="line">System.out.print(<span class="string">"考试成绩："</span>);</span><br><span class="line"><span class="keyword">int</span> grade = scanner.nextInt();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into examstudent(type,IDCard,examCard,studentName,location,grade)values(?,?,?,?,?,?)"</span>;</span><br><span class="line"><span class="keyword">int</span> insertCount = update(sql,type,IDCard,examCard,studentName,location,grade);</span><br><span class="line"><span class="keyword">if</span>(insertCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"添加成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"添加失败"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通用的增删改操作</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(String sql, Object... args)</span> </span>&#123;<span class="comment">// sql中占位符的个数与可变形参的长度相同！</span></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库的连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">// 2.预编译sql语句，返回PreparedStatement的实例</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 3.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);<span class="comment">// 小心参数声明错误！！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.执行</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ps.execute(): </span></span><br><span class="line"><span class="comment"> * 如果执行的是查询操作，有返回结果，则此方法返回true;</span></span><br><span class="line"><span class="comment"> * 如果执行的是增、删、改操作，没有返回结果，则此方法返回false.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 方式一：</span></span><br><span class="line"><span class="comment">// return ps.execute();</span></span><br><span class="line"><span class="comment">// 方式二：</span></span><br><span class="line"><span class="keyword">return</span> ps.executeUpdate();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 5.资源的关闭</span></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//问题2：根据身份证号或者准考证号查询学生成绩信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryWithIDCardOrExamCard</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"请选择您要输入的类型："</span>);</span><br><span class="line">System.out.println(<span class="string">"a.准考证号"</span>);</span><br><span class="line">System.out.println(<span class="string">"b.身份证号"</span>);</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String selection = scanner.next();</span><br><span class="line"><span class="comment">//忽略大小写</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">"a"</span>.equalsIgnoreCase(selection))&#123;<span class="comment">// if(selection.equalsIgnoreCase("a"))&#123;</span></span><br><span class="line">System.out.println(<span class="string">"请输入准考证号："</span>);</span><br><span class="line">String examCard = scanner.next();</span><br><span class="line">String sql = <span class="string">"select FlowID flowID,Type type,IDCard,ExamCard examCard,StudentName name,Location location,Grade grade from examstudent where examCard = ?"</span>;</span><br><span class="line">Student student = getInstance(Student<span class="class">.<span class="keyword">class</span>,<span class="title">sql</span>,<span class="title">examCard</span>)</span>;</span><br><span class="line"><span class="keyword">if</span>(student != <span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(student);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"输入的准考证号有误！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"b"</span>.equalsIgnoreCase(selection))&#123;</span><br><span class="line">System.out.println(<span class="string">"请输入身份证号："</span>);</span><br><span class="line">String IDCard = scanner.next();</span><br><span class="line">String sql = <span class="string">"select FlowID flowID,Type type,IDCard,ExamCard examCard,StudentName name,Location location,Grade grade from examstudent where IDCard = ?"</span>;</span><br><span class="line"></span><br><span class="line">Student student = getInstance(Student<span class="class">.<span class="keyword">class</span>,<span class="title">sql</span>,<span class="title">IDCard</span>)</span>;</span><br><span class="line"><span class="keyword">if</span>(student != <span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(student);</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"输入的身份证号有误！"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"您的输入有误，请重新进入程序。"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getInstance</span><span class="params">(Class&lt;T&gt; clazz,String sql, Object... args)</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"><span class="comment">// 获取结果集的元数据 :ResultSetMetaData</span></span><br><span class="line">ResultSetMetaData rsmd = rs.getMetaData();</span><br><span class="line"><span class="comment">// 通过ResultSetMetaData获取结果集中的列数</span></span><br><span class="line"><span class="keyword">int</span> columnCount = rsmd.getColumnCount();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">T t = clazz.newInstance();</span><br><span class="line"><span class="comment">// 处理结果集一行数据中的每一个列</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; columnCount; i++) &#123;</span><br><span class="line"><span class="comment">// 获取列值</span></span><br><span class="line">Object columValue = rs.getObject(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取每个列的列名</span></span><br><span class="line"><span class="comment">// String columnName = rsmd.getColumnName(i + 1);</span></span><br><span class="line">String columnLabel = rsmd.getColumnLabel(i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给t对象指定的columnName属性，赋值为columValue：通过反射</span></span><br><span class="line">Field field = clazz.getDeclaredField(columnLabel);</span><br><span class="line">field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">field.set(t, columValue);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//问题3：删除指定的学生信息</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByExamCard</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"请输入学生的考号："</span>);</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String examCard = scanner.next();</span><br><span class="line"><span class="comment">//查询指定准考证号的学生</span></span><br><span class="line">String sql = <span class="string">"select FlowID flowID,Type type,IDCard,ExamCard examCard,StudentName name,Location location,Grade grade from examstudent where examCard = ?"</span>;</span><br><span class="line">Student student = getInstance(Student<span class="class">.<span class="keyword">class</span>,<span class="title">sql</span>,<span class="title">examCard</span>)</span>;</span><br><span class="line"><span class="keyword">if</span>(student == <span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"查无此人，请重新输入"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">String sql1 = <span class="string">"delete from examstudent where examCard = ?"</span>;</span><br><span class="line"><span class="keyword">int</span> deleteCount = update(sql1, examCard);</span><br><span class="line"><span class="keyword">if</span>(deleteCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//优化以后的操作：</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByExamCard1</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"请输入学生的考号："</span>);</span><br><span class="line">Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">String examCard = scanner.next();</span><br><span class="line">String sql = <span class="string">"delete from examstudent where examCard = ?"</span>;</span><br><span class="line"><span class="keyword">int</span> deleteCount = update(sql, examCard);</span><br><span class="line"><span class="keyword">if</span>(deleteCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"删除成功"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"查无此人，请重新输入"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> flowID;<span class="comment">//流水号</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> type;<span class="comment">//考试类型</span></span><br><span class="line"><span class="keyword">private</span> String IDCard;<span class="comment">//身份证号</span></span><br><span class="line"><span class="keyword">private</span> String examCard;<span class="comment">//准考证号</span></span><br><span class="line"><span class="keyword">private</span> String name;<span class="comment">//学生姓名</span></span><br><span class="line"><span class="keyword">private</span> String location;<span class="comment">//所在城市</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> grade;<span class="comment">//成绩</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(<span class="keyword">int</span> flowID, <span class="keyword">int</span> type, String iDCard, String examCard, String name, String location, <span class="keyword">int</span> grade)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.flowID = flowID;</span><br><span class="line"><span class="keyword">this</span>.type = type;</span><br><span class="line">IDCard = iDCard;</span><br><span class="line"><span class="keyword">this</span>.examCard = examCard;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.location = location;</span><br><span class="line"><span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.type = type;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIDCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> IDCard;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIDCard</span><span class="params">(String iDCard)</span> </span>&#123;</span><br><span class="line">IDCard = iDCard;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getExamCard</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> examCard;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setExamCard</span><span class="params">(String examCard)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.examCard = examCard;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getLocation</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> location;&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLocation</span><span class="params">(String location)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.location = location;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGrade</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGrade</span><span class="params">(<span class="keyword">int</span> grade)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFlowID</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> flowID;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"=========查询结果==========="</span>);</span><br><span class="line"><span class="keyword">return</span> info();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">info</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"流水号："</span> + flowID + <span class="string">"\n四级/六级："</span> + type + <span class="string">"\n身份证号："</span> + IDCard + <span class="string">"\n准考证号："</span> + examCard +</span><br><span class="line"><span class="string">"\n学生姓名："</span> + name + <span class="string">"\n区域："</span> + location + <span class="string">"\n成绩："</span> + grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第4章-操作BLOB类型字段"><a href="#第4章-操作BLOB类型字段" class="headerlink" title="第4章 操作BLOB类型字段"></a>第4章 操作BLOB类型字段</h2><h3 id="4-1-MySQL-BLOB类型"><a href="#4-1-MySQL-BLOB类型" class="headerlink" title="4.1 MySQL BLOB类型"></a>4.1 MySQL BLOB类型</h3><ul><li><p>MySQL中，BLOB是一个二进制大型对象，是一个可以存储大量数据的容器，它能容纳不同大小的数据。</p></li><li><p>插入BLOB类型的数据必须使用PreparedStatement，因为BLOB类型的数据无法使用字符串拼接写的。</p></li><li><p>MySQL的四种BLOB类型(除了在存储的最大信息量上不同外，他们是等同的)</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122222115.png" alt="image-20201122222115210"></p><ul><li>实际使用中根据需要存入的数据大小定义不同的BLOB类型。</li><li>需要注意的是：如果存储的文件过大，数据库的性能会下降。</li><li>如果在指定了相关的Blob类型以后，还报错：xxx too large，那么在mysql的安装目录下，找my.ini文件加上如下的配置参数： <strong>max_allowed_packet=16M</strong>。同时注意：修改了my.ini文件之后，需要重新启动mysql服务。</li></ul><h3 id="4-2-向数据表中插入大数据类型"><a href="#4-2-向数据表中插入大数据类型" class="headerlink" title="4.2 向数据表中插入大数据类型"></a>4.2 向数据表中插入大数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取连接</span></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into customers(name,email,birth,photo)values(?,?,?,?)"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"徐海强"</span>);</span><br><span class="line">ps.setString(<span class="number">2</span>, <span class="string">"xhq@126.com"</span>);</span><br><span class="line">ps.setDate(<span class="number">3</span>, <span class="keyword">new</span> Date(<span class="keyword">new</span> java.util.Date().getTime()));</span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"xhq.png"</span>);</span><br><span class="line">ps.setBlob(<span class="number">4</span>, fis);</span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></figure><h3 id="4-3-修改数据表中的Blob类型字段"><a href="#4-3-修改数据表中的Blob类型字段" class="headerlink" title="4.3 修改数据表中的Blob类型字段"></a>4.3 修改数据表中的Blob类型字段</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">String sql = <span class="string">"update customers set photo = ? where id = ?"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 填充占位符</span></span><br><span class="line"><span class="comment">// 操作Blob类型的变量</span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"coffee.png"</span>);</span><br><span class="line">ps.setBlob(<span class="number">1</span>, fis);</span><br><span class="line">ps.setInt(<span class="number">2</span>, <span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">ps.execute();</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></figure><h3 id="4-4-从数据表中读取大数据类型"><a href="#4-4-从数据表中读取大数据类型" class="headerlink" title="4.4 从数据表中读取大数据类型"></a>4.4 从数据表中读取大数据类型</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">String sql = <span class="string">"SELECT id, name, email, birth, photo FROM customer WHERE id = ?"</span>;</span><br><span class="line">conn = getConnection();</span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line">ps.setInt(<span class="number">1</span>, <span class="number">8</span>);</span><br><span class="line">rs = ps.executeQuery();</span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line">Integer id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">    String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">String email = rs.getString(<span class="number">3</span>);</span><br><span class="line">    Date birth = rs.getDate(<span class="number">4</span>);</span><br><span class="line">Customer cust = <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">    System.out.println(cust); </span><br><span class="line">    <span class="comment">//读取Blob类型的字段</span></span><br><span class="line">Blob photo = rs.getBlob(<span class="number">5</span>);</span><br><span class="line">InputStream is = photo.getBinaryStream();</span><br><span class="line">OutputStream os = <span class="keyword">new</span> FileOutputStream(<span class="string">"c.jpg"</span>);</span><br><span class="line"><span class="keyword">byte</span> [] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">&#125;</span><br><span class="line">    JDBCUtils.closeResource(conn, ps, rs);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">is.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(os !=  <span class="keyword">null</span>)&#123;</span><br><span class="line">os.close();</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第5章-批量插入"><a href="#第5章-批量插入" class="headerlink" title="第5章 批量插入"></a>第5章 批量插入</h2><h3 id="5-1-批量执行SQL语句"><a href="#5-1-批量执行SQL语句" class="headerlink" title="5.1 批量执行SQL语句"></a>5.1 批量执行SQL语句</h3><p>当需要成批插入或者更新记录时，可以采用Java的批量<strong>更新</strong>机制，这一机制允许多条语句一次性提交给数据库批量处理。通常情况下比单独提交处理更有效率</p><p>JDBC的批量处理语句包括下面三个方法：</p><ul><li><strong>addBatch(String)：添加需要批量处理的SQL语句或是参数；</strong></li><li><strong>executeBatch()：执行批量处理语句；</strong></li><li><strong>clearBatch():清空缓存的数据</strong></li></ul><p>通常我们会遇到两种批量执行SQL语句的情况：</p><ul><li>多条SQL语句的批量处理；</li><li>一个SQL语句的批量传参；</li></ul><h3 id="5-2-高效的批量插入"><a href="#5-2-高效的批量插入" class="headerlink" title="5.2 高效的批量插入"></a>5.2 高效的批量插入</h3><p>举例：向数据表中插入20000条数据</p><ul><li>数据库中提供一个goods表。创建如下：</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> goods(</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">INT</span> PRIMARY <span class="keyword">KEY</span> AUTO_INCREMENT,</span><br><span class="line"><span class="keyword">NAME</span> <span class="built_in">VARCHAR</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="5-2-1-实现层次一：使用Statement"><a href="#5-2-1-实现层次一：使用Statement" class="headerlink" title="5.2.1 实现层次一：使用Statement"></a>5.2.1 实现层次一：使用Statement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++)&#123;</span><br><span class="line">String sql = <span class="string">"insert into goods(name) values('name_' + "</span>+ i +<span class="string">")"</span>;</span><br><span class="line">st.executeUpdate(sql);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-2-实现层次二：使用PreparedStatement"><a href="#5-2-2-实现层次二：使用PreparedStatement" class="headerlink" title="5.2.2 实现层次二：使用PreparedStatement"></a>5.2.2 实现层次二：使用PreparedStatement</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into goods(name)values(?)"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">20000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"name_"</span> + i);</span><br><span class="line">ps.executeUpdate();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"花费的时间为："</span> + (end - start));<span class="comment">//82340</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br></pre></td></tr></table></figure><h4 id="5-2-3-实现层次三"><a href="#5-2-3-实现层次三" class="headerlink" title="5.2.3 实现层次三"></a>5.2.3 实现层次三</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 修改1： 使用 addBatch() / executeBatch() / clearBatch()</span></span><br><span class="line"><span class="comment"> * 修改2：mysql服务器默认是关闭批处理的，我们需要通过一个参数，让mysql开启批处理的支持。</span></span><br><span class="line"><span class="comment"> *  ?rewriteBatchedStatements=true 写在配置文件的url后面</span></span><br><span class="line"><span class="comment"> * 修改3：使用更新的mysql 驱动：mysql-connector-java-5.1.37-bin.jar</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into goods(name)values(?)"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"name_"</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"花费的时间为："</span> + (end - start));<span class="comment">//20000条：625                                                                         //1000000条:14733  </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2-4-实现层次四"><a href="#5-2-4-实现层次四" class="headerlink" title="5.2.4 实现层次四"></a>5.2.4 实现层次四</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 层次四：在层次三的基础上操作</span></span><br><span class="line"><span class="comment">* 使用Connection 的 setAutoCommit(false)  /  commit()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert2</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.设置为不自动提交数据</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"insert into goods(name)values(?)"</span>;</span><br><span class="line">PreparedStatement ps = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= <span class="number">1000000</span>;i++)&#123;</span><br><span class="line">ps.setString(<span class="number">1</span>, <span class="string">"name_"</span> + i);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.“攒”sql</span></span><br><span class="line">ps.addBatch();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(i % <span class="number">500</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="comment">//2.执行</span></span><br><span class="line">ps.executeBatch();</span><br><span class="line"><span class="comment">//3.清空</span></span><br><span class="line">ps.clearBatch();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">System.out.println(<span class="string">"花费的时间为："</span> + (end - start));<span class="comment">//1000000条:4978 </span></span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, ps);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第6章：-数据库事务"><a href="#第6章：-数据库事务" class="headerlink" title="第6章： 数据库事务"></a>第6章： 数据库事务</h2><h3 id="6-1-数据库事务介绍"><a href="#6-1-数据库事务介绍" class="headerlink" title="6.1 数据库事务介绍"></a>6.1 数据库事务介绍</h3><ul><li><p><strong>事务：一组逻辑操作单元,使数据从一种状态变换到另一种状态。</strong></p></li><li><p><strong>事务处理（事务操作）：</strong>保证所有事务都作为一个工作单元来执行，即使出现了故障，都不能改变这种执行方式。当在一个事务中执行多个操作时，要么所有的事务都<strong>被提交(commit)</strong>，那么这些修改就永久地保存下来；要么数据库管理系统将放弃所作的所有修改，整个事务<strong>回滚(rollback)</strong>到最初状态。</p></li><li><p>为确保数据库中数据的<strong>一致性</strong>，数据的操纵应当是离散的成组的逻辑单元：当它全部完成时，数据的一致性可以保持，而当这个单元中的一部分操作失败，整个事务应全部视为错误，所有从起始点以后的操作应全部回退到开始状态。 </p></li></ul><h3 id="6-2-JDBC事务处理"><a href="#6-2-JDBC事务处理" class="headerlink" title="6.2 JDBC事务处理"></a>6.2 JDBC事务处理</h3><ul><li><p>数据一旦提交，就不可回滚。</p></li><li><p>数据什么时候意味着提交？</p><ul><li><strong>当一个连接对象被创建时，默认情况下是自动提交事务</strong>：每次执行一个 SQL 语句时，如果执行成功，就会向数据库自动提交，而不能回滚。</li><li><strong>关闭数据库连接，数据就会自动的提交。</strong>如果多个操作，每个操作使用的是自己单独的连接，则无法保证事务。即同一个事务的多个操作必须在同一个连接下。</li></ul></li><li><p><strong>JDBC程序中为了让多个 SQL 语句作为一个事务执行：</strong></p><ul><li>调用 Connection 对象的 <strong>setAutoCommit(false);</strong> 以取消自动提交事务</li><li>在所有的 SQL 语句都成功执行后，调用 <strong>commit();</strong> 方法提交事务</li><li>在出现异常时，调用 <strong>rollback();</strong> 方法回滚事务</li></ul><blockquote><p>若此时 Connection 没有被关闭，还可能被重复使用，则需要恢复其自动提交状态 setAutoCommit(true)。尤其是在使用数据库连接池技术时，执行close()方法前，建议恢复自动提交状态。</p></blockquote></li></ul><p>【案例：用户AA向用户BB转账100】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testJDBCTransaction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取数据库连接</span></span><br><span class="line">conn = JDBCUtils.getConnection();</span><br><span class="line"><span class="comment">// 2.开启事务</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"><span class="comment">// 3.进行数据库操作</span></span><br><span class="line">String sql1 = <span class="string">"update user_table set balance = balance - 100 where user = ?"</span>;</span><br><span class="line">update(conn, sql1, <span class="string">"AA"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟网络异常</span></span><br><span class="line"><span class="comment">//System.out.println(10 / 0);</span></span><br><span class="line"></span><br><span class="line">String sql2 = <span class="string">"update user_table set balance = balance + 100 where user = ?"</span>;</span><br><span class="line">update(conn, sql2, <span class="string">"BB"</span>);</span><br><span class="line"><span class="comment">// 4.若没有异常，则提交事务</span></span><br><span class="line">conn.commit();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="comment">// 5.若有异常，则回滚事务</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//6.恢复每次DML操作的自动提交功能</span></span><br><span class="line">conn.setAutoCommit(<span class="keyword">true</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//7.关闭连接</span></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>, <span class="keyword">null</span>); </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，对数据库操作的方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用事务以后的通用的增删改操作（version 2.0）</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Connection conn ,String sql, Object... args)</span> </span>&#123;</span><br><span class="line">PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 1.获取PreparedStatement的实例 (或：预编译sql语句)</span></span><br><span class="line">ps = conn.prepareStatement(sql);</span><br><span class="line"><span class="comment">// 2.填充占位符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">ps.setObject(i + <span class="number">1</span>, args[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3.执行sql语句</span></span><br><span class="line">ps.execute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="comment">// 4.关闭资源</span></span><br><span class="line">JDBCUtils.closeResource(<span class="keyword">null</span>, ps);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-事务的ACID属性"><a href="#6-3-事务的ACID属性" class="headerlink" title="6.3 事务的ACID属性"></a>6.3 事务的ACID属性</h3><ol><li><p><strong>原子性（Atomicity）</strong><br> 原子性是指事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生。 </p></li><li><p><strong>一致性（Consistency）</strong><br> 事务必须使数据库从一个一致性状态变换到另外一个一致性状态。</p></li><li><p><strong>隔离性（Isolation）</strong><br> 事务的隔离性是指一个事务的执行不能被其他事务干扰，即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</p></li><li><p><strong>持久性（Durability）</strong><br> 持久性是指一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响。</p></li></ol><h4 id="6-3-1-数据库的并发问题"><a href="#6-3-1-数据库的并发问题" class="headerlink" title="6.3.1 数据库的并发问题"></a>6.3.1 数据库的并发问题</h4><ul><li><p>对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题:</p><ul><li><strong>脏读</strong>: 对于两个事务 T1, T2, T1 读取了已经被 T2 更新但还<strong>没有被提交</strong>的字段。之后, 若 T2 回滚, T1读取的内容就是临时且无效的。</li><li><strong>不可重复读</strong>: 对于两个事务T1, T2, T1 读取了一个字段, 然后 T2 <strong>更新</strong>了该字段。之后, T1再次读取同一个字段, 值就不同了。</li><li><strong>幻读</strong>: 对于两个事务T1, T2, T1 从一个表中读取了一个字段, 然后 T2 在该表中<strong>插入</strong>了一些新的行。之后, 如果 T1 再次读取同一个表, 就会多出几行。</li></ul></li><li><p><strong>数据库事务的隔离性</strong>: 数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。</p></li><li><p>一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别, 不同隔离级别对应不同的干扰程度, <strong>隔离级别越高, 数据一致性就越好, 但并发性越弱。</strong></p></li></ul><h4 id="6-3-2-四种隔离级别"><a href="#6-3-2-四种隔离级别" class="headerlink" title="6.3.2 四种隔离级别"></a>6.3.2 四种隔离级别</h4><ul><li><p>数据库提供的4种事务隔离级别：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122222129.png" alt="image-20201122222129063"></p></li><li><p>Oracle 支持的 2 种事务隔离级别：<strong>READ COMMITED</strong>, SERIALIZABLE。 Oracle 默认的事务隔离级别为: <strong>READ COMMITED</strong> 。</p></li></ul><ul><li>Mysql 支持 4 种事务隔离级别。Mysql 默认的事务隔离级别为: <strong>REPEATABLE READ。</strong></li></ul><h4 id="6-3-3-在MySql中设置隔离级别"><a href="#6-3-3-在MySql中设置隔离级别" class="headerlink" title="6.3.3 在MySql中设置隔离级别"></a>6.3.3 在MySql中设置隔离级别</h4><ul><li><p>每启动一个 mysql 程序, 就会获得一个单独的数据库连接. 每个数据库连接都有一个全局变量 @@tx_isolation, 表示当前的事务隔离级别。</p></li><li><p>查看当前的隔离级别: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@tx_isolation;</span><br></pre></td></tr></table></figure></li><li><p>设置当前 mySQL 连接的隔离级别:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set  transaction isolation level read committed;</span><br></pre></td></tr></table></figure></li><li><p>设置数据库系统的全局的隔离级别:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global transaction isolation level read committed;</span><br></pre></td></tr></table></figure></li><li><p>补充操作：</p><ul><li><p>创建mysql数据库用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user tom identified by &#39;abc123&#39;;</span><br></pre></td></tr></table></figure></li><li><p>授予权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#授予通过网络方式登录的tom用户，对所有库所有表的全部权限，密码设为abc123.</span><br><span class="line">grant all privileges on *.* to tom@&#39;%&#39;  identified by &#39;abc123&#39;; </span><br><span class="line"></span><br><span class="line"> #给tom用户使用本地命令行方式，授予studydb这个库下的所有表的插删改查的权限。</span><br><span class="line">grant select,insert,delete,update on studydb.* to tom@localhost identified by &#39;abc123&#39;;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="第7章：DAO及相关实现类"><a href="#第7章：DAO及相关实现类" class="headerlink" title="第7章：DAO及相关实现类"></a>第7章：DAO及相关实现类</h2><ul><li>DAO：Data Access Object访问数据信息的类和接口，包括了对数据的CRUD（Create、Retrival、Update、Delete），而不包含任何业务相关的信息。有时也称作：BaseDAO</li><li>作用：为了实现功能的模块化，更有利于代码的维护和升级。</li><li>下面是某书城项目中DAO使用的体现：</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122222156.png" alt="image-20201122222156415"></p><h3 id="【BaseDAO-java】"><a href="#【BaseDAO-java】" class="headerlink" title="【BaseDAO.java】"></a>【BaseDAO.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.ParameterizedType;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Type;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.QueryRunner;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.BeanListHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.dbutils.handlers.ScalarHandler;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义一个用来被继承的对数据库进行基本操作的Dao</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> HanYanBing</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> QueryRunner queryRunner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"><span class="comment">// 定义一个变量来接收泛型的类型</span></span><br><span class="line"><span class="keyword">private</span> Class&lt;T&gt; type;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取T的Class对象，获取泛型的类型，泛型是在被子类继承时才确定</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BaseDao</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取子类的类型</span></span><br><span class="line">Class clazz = <span class="keyword">this</span>.getClass();</span><br><span class="line"><span class="comment">// 获取父类的类型</span></span><br><span class="line"><span class="comment">// getGenericSuperclass()用来获取当前类的父类的类型</span></span><br><span class="line"><span class="comment">// ParameterizedType表示的是带泛型的类型</span></span><br><span class="line">ParameterizedType parameterizedType = (ParameterizedType) clazz.getGenericSuperclass();</span><br><span class="line"><span class="comment">// 获取具体的泛型类型 getActualTypeArguments获取具体的泛型的类型</span></span><br><span class="line"><span class="comment">// 这个方法会返回一个Type的数组</span></span><br><span class="line">Type[] types = parameterizedType.getActualTypeArguments();</span><br><span class="line"><span class="comment">// 获取具体的泛型的类型·</span></span><br><span class="line"><span class="keyword">this</span>.type = (Class&lt;T&gt;) types[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用的增删改操作</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">count = queryRunner.update(conn, sql, params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getBean</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">T t = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">t = queryRunner.query(conn, sql, <span class="keyword">new</span> BeanHandler&lt;T&gt;(type), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取所有对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getBeanList</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">List&lt;T&gt; list = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">list = queryRunner.query(conn, sql, <span class="keyword">new</span> BeanListHandler&lt;T&gt;(type), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取一个但一值得方法，专门用来执行像 select count(*)...这样的sql语句</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">getValue</span><span class="params">(Connection conn,String sql, Object... params)</span> </span>&#123;</span><br><span class="line">Object count = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 调用queryRunner的query方法获取一个单一的值</span></span><br><span class="line">count = queryRunner.query(conn, sql, <span class="keyword">new</span> ScalarHandler&lt;&gt;(), params);</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【BookDAO-java】"><a href="#【BookDAO-java】" class="headerlink" title="【BookDAO.java】"></a>【BookDAO.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.study.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.study.bookstore.beans.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中查询出所有的记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">List&lt;Book&gt; <span class="title">getBooks</span><span class="params">(Connection conn)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveBook</span><span class="params">(Connection conn,Book book)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 从数据库中根据图书的id删除一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Connection conn,String bookId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中查询出一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> bookId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Book <span class="title">getBookById</span><span class="params">(Connection conn,String bookId)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据图书的id从数据库中更新一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Connection conn,Book book)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Book&gt; <span class="title">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取带分页和价格范围的图书信息</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> page：是只包含了用户输入的pageNo属性的page对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回的Page对象是包含了所有属性的Page对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">Page&lt;Book&gt; <span class="title">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="keyword">double</span> minPrice, <span class="keyword">double</span> maxPrice)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【UserDAO-java】"><a href="#【UserDAO-java】" class="headerlink" title="【UserDAO.java】"></a>【UserDAO.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.bookstore.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.study.bookstore.beans.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名和密码从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> User 数据库中有记录 null 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">User <span class="title">getUser</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据User对象中的用户名从数据库中获取一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> true 数据库中有记录 false 数据库中无此记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向数据库中插入User对象</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> user</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Connection conn,User user)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【BookDaoImpl-java】"><a href="#【BookDaoImpl-java】" class="headerlink" title="【BookDaoImpl.java】"></a>【BookDaoImpl.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.study.bookstore.beans.Book;</span><br><span class="line"><span class="keyword">import</span> com.study.bookstore.beans.Page;</span><br><span class="line"><span class="keyword">import</span> com.study.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.study.bookstore.dao.BookDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">Book</span>&gt; <span class="keyword">implements</span> <span class="title">BookDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBooks</span><span class="params">(Connection conn)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中得到一个List的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books"</span>;</span><br><span class="line">beanList = getBeanList(conn,sql);</span><br><span class="line"><span class="keyword">return</span> beanList;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveBook</span><span class="params">(Connection conn,Book book)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"insert into books(title,author,price,sales,stock,img_path) values(?,?,?,?,?,?)"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(),book.getImgPath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBookById</span><span class="params">(Connection conn,String bookId)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"DELETE FROM books WHERE id = ?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用增删改的方法</span></span><br><span class="line">update(conn,sql, bookId);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Book <span class="title">getBookById</span><span class="params">(Connection conn,String bookId)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">Book book = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books where id = ?"</span>;</span><br><span class="line">book = getBean(conn,sql, bookId);</span><br><span class="line"><span class="keyword">return</span> book;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBook</span><span class="params">(Connection conn,Book book)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"update books set title = ? , author = ? , price = ? , sales = ? , stock = ? where id = ?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, book.getTitle(), book.getAuthor(), book.getPrice(), book.getSales(), book.getStock(), book.getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getPageBooks</span><span class="params">(Connection conn,Page&lt;Book&gt; page)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line">String sql = <span class="string">"select count(*) from books"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="keyword">long</span> totalRecord = (<span class="keyword">long</span>) getValue(conn,sql);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="keyword">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line">String sql2 = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books limit ?,?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Book&gt; <span class="title">getPageBooksByPrice</span><span class="params">(Connection conn,Page&lt;Book&gt; page, <span class="keyword">double</span> minPrice, <span class="keyword">double</span> maxPrice)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取数据库中图书的总记录数</span></span><br><span class="line">String sql = <span class="string">"select count(*) from books where price between ? and ?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个单一值的方法</span></span><br><span class="line"><span class="keyword">long</span> totalRecord = (<span class="keyword">long</span>) getValue(conn,sql,minPrice,maxPrice);</span><br><span class="line"><span class="comment">// 将总记录数设置都page对象中</span></span><br><span class="line">page.setTotalRecord((<span class="keyword">int</span>) totalRecord);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前页中的记录存放的List</span></span><br><span class="line">String sql2 = <span class="string">"select id,title,author,price,sales,stock,img_path imgPath from books where price between ? and ? limit ?,?"</span>;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个集合的方法</span></span><br><span class="line">List&lt;Book&gt; beanList = getBeanList(conn,sql2, minPrice , maxPrice , (page.getPageNo() - <span class="number">1</span>) * Page.PAGE_SIZE, Page.PAGE_SIZE);</span><br><span class="line"><span class="comment">// 将这个List设置到page对象中</span></span><br><span class="line">page.setList(beanList);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> page;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【UserDaoImpl-java】"><a href="#【UserDaoImpl-java】" class="headerlink" title="【UserDaoImpl.java】"></a>【UserDaoImpl.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.bookstore.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.study.bookstore.beans.User;</span><br><span class="line"><span class="keyword">import</span> com.study.bookstore.dao.BaseDao;</span><br><span class="line"><span class="keyword">import</span> com.study.bookstore.dao.UserDao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span>&lt;<span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">User bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,username,password,email from users where username = ? and password = ?"</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername(), user.getPassword());</span><br><span class="line"><span class="keyword">return</span> bean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkUsername</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 调用BaseDao中获取一个对象的方法</span></span><br><span class="line">User bean = <span class="keyword">null</span>;</span><br><span class="line"><span class="comment">// 写sql语句</span></span><br><span class="line">String sql = <span class="string">"select id,username,password,email from users where username = ?"</span>;</span><br><span class="line">bean = getBean(conn,sql, user.getUsername());</span><br><span class="line"><span class="keyword">return</span> bean != <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(Connection conn,User user)</span> </span>&#123;</span><br><span class="line"><span class="comment">//写sql语句</span></span><br><span class="line">String sql = <span class="string">"insert into users(username,password,email) values(?,?,?)"</span>;</span><br><span class="line"><span class="comment">//调用BaseDao中通用的增删改的方法</span></span><br><span class="line">update(conn,sql, user.getUsername(),user.getPassword(),user.getEmail());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【Book-java】"><a href="#【Book-java】" class="headerlink" title="【Book.java】"></a>【Book.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.bookstore.beans;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 图书类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String title; <span class="comment">// 书名</span></span><br><span class="line"><span class="keyword">private</span> String author; <span class="comment">// 作者</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> price; <span class="comment">// 价格</span></span><br><span class="line"><span class="keyword">private</span> Integer sales; <span class="comment">// 销量</span></span><br><span class="line"><span class="keyword">private</span> Integer stock; <span class="comment">// 库存</span></span><br><span class="line"><span class="keyword">private</span> String imgPath = <span class="string">"static/img/default.jpg"</span>; <span class="comment">// 封面图片的路径</span></span><br><span class="line"><span class="comment">//构造器，get()，set()，toString()方法略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="【Page-java】"><a href="#【Page-java】" class="headerlink" title="【Page.java】"></a>【Page.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.bookstore.beans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 页码类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;T&gt; list; <span class="comment">// 每页查到的记录存放的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">4</span>; <span class="comment">// 每页显示的记录数</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pageNo; <span class="comment">// 当前页</span></span><br><span class="line"><span class="comment">//private int totalPageNo; // 总页数，通过计算得到</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> totalRecord; <span class="comment">// 总记录数，通过查询数据库得到</span></span><br></pre></td></tr></table></figure><h3 id="【User-java】"><a href="#【User-java】" class="headerlink" title="【User.java】"></a>【User.java】</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.bookstore.beans;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure><h2 id="第8章：数据库连接池"><a href="#第8章：数据库连接池" class="headerlink" title="第8章：数据库连接池"></a>第8章：数据库连接池</h2><h3 id="8-1-JDBC数据库连接池的必要性"><a href="#8-1-JDBC数据库连接池的必要性" class="headerlink" title="8.1 JDBC数据库连接池的必要性"></a>8.1 JDBC数据库连接池的必要性</h3><ul><li><p>在使用开发基于数据库的web程序时，传统的模式基本是按以下步骤：　　</p><ul><li><strong>在主程序（如servlet、beans）中建立数据库连接</strong></li><li><strong>进行sql操作</strong></li><li><strong>断开数据库连接</strong></li></ul></li><li><p>这种模式开发，存在的问题:</p><ul><li>普通的JDBC数据库连接使用 DriverManager 来获取，每次向数据库建立连接的时候都要将 Connection 加载到内存中，再验证用户名和密码(得花费0.05s～1s的时间)。需要数据库连接的时候，就向数据库要求一个，执行完成后再断开连接。这样的方式将会消耗大量的资源和时间。<strong>数据库的连接资源并没有得到很好的重复利用。</strong>若同时有几百人甚至几千人在线，频繁的进行数据库连接操作将占用很多的系统资源，严重的甚至会造成服务器的崩溃。</li><li><strong>对于每一次数据库连接，使用完后都得断开。</strong>否则，如果程序出现异常而未能关闭，将会导致数据库系统中的内存泄漏，最终将导致重启数据库。（回忆：何为Java的内存泄漏？）</li><li><strong>这种开发不能控制被创建的连接对象数</strong>，系统资源会被毫无顾及的分配出去，如连接过多，也可能导致内存泄漏，服务器崩溃。 </li></ul></li></ul><h3 id="8-2-数据库连接池技术"><a href="#8-2-数据库连接池技术" class="headerlink" title="8.2 数据库连接池技术"></a>8.2 数据库连接池技术</h3><ul><li><p>为解决传统开发中的数据库连接问题，可以采用数据库连接池技术。</p></li><li><p><strong>数据库连接池的基本思想</strong>：就是为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。</p></li><li><p><strong>数据库连接池</strong>负责分配、管理和释放数据库连接，它<strong>允许应用程序重复使用一个现有的数据库连接，而不是重新建立一个</strong>。</p></li><li><p>数据库连接池在初始化时将创建一定数量的数据库连接放到连接池中，这些数据库连接的数量是由<strong>最小数据库连接数来设定</strong>的。无论这些数据库连接是否被使用，连接池都将一直保证至少拥有这么多的连接数量。连接池的<strong>最大数据库连接数量</strong>限定了这个连接池能占有的最大连接数，当应用程序向连接池请求的连接数超过最大连接数量时，这些请求将被加入到等待队列中。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122222402.png" alt="image-20201122222402187"></p><ul><li><p><strong>数据库连接池技术的优点</strong></p><p><strong>1. 资源重用</strong></p><p>由于数据库连接得以重用，避免了频繁创建，释放连接引起的大量性能开销。在减少系统消耗的基础上，另一方面也增加了系统运行环境的平稳性。</p><p><strong>2. 更快的系统反应速度</strong></p><p>数据库连接池在初始化过程中，往往已经创建了若干数据库连接置于连接池中备用。此时连接的初始化工作均已完成。对于业务请求处理而言，直接利用现有可用连接，避免了数据库连接初始化和释放过程的时间开销，从而减少了系统的响应时间</p><p><strong>3. 新的资源分配手段</strong></p><p>对于多应用共享同一数据库的系统而言，可在应用层通过数据库连接池的配置，实现某一应用最大可用数据库连接数的限制，避免某一应用独占所有的数据库资源</p><p><strong>4. 统一的连接管理，避免数据库连接泄漏</strong></p><p>在较为完善的数据库连接池实现中，可根据预先的占用超时设定，强制回收被占用连接，从而避免了常规数据库连接操作中可能出现的资源泄露</p></li></ul><h3 id="8-3-多种开源的数据库连接池"><a href="#8-3-多种开源的数据库连接池" class="headerlink" title="8.3 多种开源的数据库连接池"></a>8.3 多种开源的数据库连接池</h3><ul><li>JDBC 的数据库连接池使用 javax.sql.DataSource 来表示，DataSource 只是一个接口，该接口通常由服务器(Weblogic, WebSphere, Tomcat)提供实现，也有一些开源组织提供实现：<ul><li><strong>DBCP</strong> 是Apache提供的数据库连接池。tomcat 服务器自带dbcp数据库连接池。<strong>速度相对c3p0较快</strong>，但因自身存在BUG，Hibernate3已不再提供支持。</li><li><strong>C3P0</strong> 是一个开源组织提供的一个数据库连接池，<strong>速度相对较慢，稳定性还可以。</strong>hibernate官方推荐使用</li><li><strong>Proxool</strong> 是sourceforge下的一个开源项目数据库连接池，有监控连接池状态的功能，<strong>稳定性较c3p0差一点</strong></li><li><strong>BoneCP</strong> 是一个开源组织提供的数据库连接池，速度快</li><li><strong>Druid</strong> 是阿里提供的数据库连接池，据说是集DBCP 、C3P0 、Proxool 优点于一身的数据库连接池，但是速度不确定是否有BoneCP快</li></ul></li><li>DataSource 通常被称为数据源，它包含连接池和连接池管理两个部分，习惯上也经常把 DataSource 称为连接池</li><li><strong>DataSource用来取代DriverManager来获取Connection，获取速度快，同时可以大幅度提高数据库访问速度。</strong></li><li>特别注意：<ul><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此<strong>整个应用只需要一个数据源即可。</strong></li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但conn.close()并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li></ul></li></ul><h4 id="8-3-1-C3P0数据库连接池"><a href="#8-3-1-C3P0数据库连接池" class="headerlink" title="8.3.1 C3P0数据库连接池"></a>8.3.1 C3P0数据库连接池</h4><ul><li>获取连接方式一</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的方式，获取数据库的连接：不推荐</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">ComboPooledDataSource cpds = <span class="keyword">new</span> ComboPooledDataSource();</span><br><span class="line">cpds.setDriverClass(<span class="string">"com.mysql.jdbc.Driver"</span>); </span><br><span class="line">cpds.setJdbcUrl(<span class="string">"jdbc:mysql://localhost:3306/test"</span>);</span><br><span class="line">cpds.setUser(<span class="string">"root"</span>);</span><br><span class="line">cpds.setPassword(<span class="string">"abc123"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//cpds.setMaxPoolSize(100);</span></span><br><span class="line"></span><br><span class="line">Connection conn = cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取连接方式二</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用C3P0数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource cpds = <span class="keyword">new</span> ComboPooledDataSource(<span class="string">"helloc3p0"</span>);</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException</span>&#123;</span><br><span class="line">Connection conn = cpds.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，src下的配置文件为：【c3p0-config.xml】</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">c3p0-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">named-config</span> <span class="attr">name</span>=<span class="string">"helloc3p0"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 获取连接的4个基本信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span>&gt;</span>root<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span>abc123<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span>&gt;</span>jdbc:mysql:///test<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 涉及到数据库连接池的管理的相关属性的设置 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 若数据库中连接数不足时, 一次向数据库服务器申请多少个连接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 初始化数据库连接池时连接的数量 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最小的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 数据库连接池中的最大的数据库连接数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- C3P0 数据库连接池可以维护的 Statement 的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每个连接同时可以使用的 Statement 对象的个数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatementsPerConnection"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">named-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">c3p0-config</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-3-2-DBCP数据库连接池"><a href="#8-3-2-DBCP数据库连接池" class="headerlink" title="8.3.2 DBCP数据库连接池"></a>8.3.2 DBCP数据库连接池</h4><ul><li>DBCP 是 Apache 软件基金组织下的开源连接池实现，该连接池依赖该组织下的另一个开源系统：Common-pool。如需使用该连接池实现，应在系统中增加如下两个 jar 文件：<ul><li>Commons-dbcp.jar：连接池的实现</li><li>Commons-pool.jar：连接池实现的依赖库</li></ul></li><li><strong>Tomcat 的连接池正是采用该连接池来实现的。</strong>该数据库连接池既可以与应用服务器整合使用，也可由应用程序独立使用。</li><li>数据源和数据库连接不同，数据源无需创建多个，它是产生数据库连接的工厂，因此整个应用只需要一个数据源即可。</li><li>当数据库访问结束后，程序还是像以前一样关闭数据库连接：conn.close(); 但上面的代码并没有关闭数据库的物理连接，它仅仅把数据库连接释放，归还给了数据库连接池。</li><li>配置属性说明</li></ul><table><thead><tr><th>属性</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>连接池启动时创建的初始化连接数量</td></tr><tr><td>maxActive</td><td>8</td><td>连接池中可同时连接的最大的连接数</td></tr><tr><td>maxIdle</td><td>8</td><td>连接池中最大的空闲的连接数，超过的空闲连接将被释放，如果设置为负数表示不限制</td></tr><tr><td>minIdle</td><td>0</td><td>连接池中最小的空闲的连接数，低于这个数量会被创建新的连接。该参数越接近maxIdle，性能越好，因为连接的创建和销毁，都是需要消耗资源的；但是不能太大。</td></tr><tr><td>maxWait</td><td>无限制</td><td>最大等待时间，当没有可用连接时，连接池等待连接释放的最大时间，超过该时间限制会抛出异常，如果设置-1表示无限等待</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>开启池的Statement是否prepared</td></tr><tr><td>maxOpenPreparedStatements</td><td>无限制</td><td>开启池的prepared 后的同时最大连接数</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接池中连接，在时间段内一直空闲， 被逐出连接池的时间</td></tr><tr><td>removeAbandonedTimeout</td><td>300</td><td>超过时间限制，回收没有用(废弃)的连接</td></tr><tr><td>removeAbandoned</td><td>false</td><td>超过removeAbandonedTimeout时间后，是否进 行没用连接（废弃）的回收</td></tr></tbody></table><ul><li>获取连接方式一：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection3</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">BasicDataSource source = <span class="keyword">new</span> BasicDataSource();</span><br><span class="line"></span><br><span class="line">source.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">source.setUrl(<span class="string">"jdbc:mysql:///test"</span>);</span><br><span class="line">source.setUsername(<span class="string">"root"</span>);</span><br><span class="line">source.setPassword(<span class="string">"abc123"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">source.setInitialSize(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">Connection conn = source.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取连接方式二：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用dbcp数据库连接池的配置文件方式，获取数据库的连接：推荐</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> DataSource source = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">InputStream is = DBCPTest.class.getClassLoader().getResourceAsStream("dbcp.properties");</span><br><span class="line"></span><br><span class="line">pros.load(is);</span><br><span class="line"><span class="comment">//根据提供的BasicDataSourceFactory创建对应的DataSource对象</span></span><br><span class="line">source = BasicDataSourceFactory.createDataSource(pros);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection4</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn = source.getConnection();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，src下的配置文件为：【dbcp.properties】</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">url</span>=<span class="string">jdbc:mysql://localhost:3306/test?rewriteBatchedStatements=true&amp;useServerPrepStmts=false</span></span><br><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">abc123</span></span><br><span class="line"></span><br><span class="line"><span class="attr">initialSize</span>=<span class="string">10</span></span><br><span class="line"><span class="comment">#...</span></span><br></pre></td></tr></table></figure><h4 id="8-3-3-Druid（德鲁伊）数据库连接池"><a href="#8-3-3-Druid（德鲁伊）数据库连接池" class="headerlink" title="8.3.3 Druid（德鲁伊）数据库连接池"></a>8.3.3 Druid（德鲁伊）数据库连接池</h4><p>Druid是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、Proxool等DB池的优点，同时加入了日志监控，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，<strong>可以说是目前最好的连接池之一。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.study.druid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSourceFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDruid</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">Properties pro = new Properties(); pro.load(TestDruid.class.getClassLoader().getResourceAsStream("druid.properties"));</span><br><span class="line">DataSource ds = DruidDataSourceFactory.createDataSource(pro);</span><br><span class="line">Connection conn = ds.getConnection();</span><br><span class="line">System.out.println(conn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，src下的配置文件为：【druid.properties】</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306/test?rewriteBatchedStatements=true</span></span><br><span class="line">username=root</span><br><span class="line">password=<span class="number">123456</span></span><br><span class="line">driverClassName=com.mysql.jdbc.Driver</span><br><span class="line"></span><br><span class="line">initialSize=<span class="number">10</span></span><br><span class="line">maxActive=<span class="number">20</span></span><br><span class="line">maxWait=<span class="number">1000</span></span><br><span class="line">filters=wall</span><br></pre></td></tr></table></figure><ul><li>详细配置参数：</li></ul><table><thead><tr><th><strong>配置</strong></th><th><strong>缺省</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>name</td><td></td><td>配置这个属性的意义在于，如果存在多个数据源，监控的时候可以通过名字来区分开来。   如果没有配置，将会生成一个名字，格式是：”DataSource-” +   System.identityHashCode(this)</td></tr><tr><td>url</td><td></td><td>连接数据库的url，不同数据库不一样。例如：mysql :   jdbc:mysql://10.20.153.104:3306/druid2      oracle :   jdbc:oracle:thin:@10.20.149.85:1521:ocnauto</td></tr><tr><td>username</td><td></td><td>连接数据库的用户名</td></tr><tr><td>password</td><td></td><td>连接数据库的密码。如果你不希望密码直接写在配置文件中，可以使用ConfigFilter。详细看这里：<a href="https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter" target="_blank" rel="noopener">https://github.com/alibaba/druid/wiki/%E4%BD%BF%E7%94%A8ConfigFilter</a></td></tr><tr><td>driverClassName</td><td></td><td>根据url自动识别   这一项可配可不配，如果不配置druid会根据url自动识别dbType，然后选择相应的driverClassName(建议配置下)</td></tr><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显示调用init方法，或者第一次getConnection时</td></tr><tr><td>maxActive</td><td>8</td><td>最大连接池数量</td></tr><tr><td>maxIdle</td><td>8</td><td>已经不再使用，配置了也没效果</td></tr><tr><td>minIdle</td><td></td><td>最小连接池数量</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁。</td></tr><tr><td>poolPreparedStatements</td><td>false</td><td>是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</td></tr><tr><td>maxOpenPreparedStatements</td><td>-1</td><td>要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。</td></tr><tr><td>testOnBorrow</td><td>true</td><td>申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>false</td><td>归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>false</td><td>建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>有两个含义： 1)Destroy线程会检测连接的间隔时间2)testWhileIdle的判断依据，详细看testWhileIdle属性的说明</td></tr><tr><td>numTestsPerEvictionRun</td><td></td><td>不再使用，一个DruidDataSource只支持一个EvictionRun</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td></td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>exceptionSorter</td><td></td><td>根据dbType自动识别   当数据库抛出一些不可恢复的异常时，抛弃连接</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：   监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><h2 id="第9章：Apache-DBUtils实现CRUD操作"><a href="#第9章：Apache-DBUtils实现CRUD操作" class="headerlink" title="第9章：Apache-DBUtils实现CRUD操作"></a>第9章：Apache-DBUtils实现CRUD操作</h2><h3 id="9-1-Apache-DBUtils简介"><a href="#9-1-Apache-DBUtils简介" class="headerlink" title="9.1 Apache-DBUtils简介"></a>9.1 Apache-DBUtils简介</h3><ul><li><p>commons-dbutils 是 Apache 组织提供的一个开源 JDBC工具类库，它是对JDBC的简单封装，学习成本极低，并且使用dbutils能极大简化jdbc编码的工作量，同时也不会影响程序的性能。</p></li><li><p>API介绍：</p><ul><li>org.apache.commons.dbutils.QueryRunner</li><li>org.apache.commons.dbutils.ResultSetHandler</li><li>工具类：org.apache.commons.dbutils.DbUtils   </li></ul></li><li><p>API包说明：</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122222422.png" alt="image-20201122222422655"></p><h3 id="9-2-主要API的使用"><a href="#9-2-主要API的使用" class="headerlink" title="9.2 主要API的使用"></a>9.2 主要API的使用</h3><h4 id="9-2-1-DbUtils"><a href="#9-2-1-DbUtils" class="headerlink" title="9.2.1 DbUtils"></a>9.2.1 DbUtils</h4><ul><li>DbUtils ：提供如关闭连接、装载JDBC驱动程序等常规工作的工具类，里面的所有方法都是静态的。主要方法如下：<ul><li><strong>public static void close(…) throws java.sql.SQLException</strong>：　DbUtils类提供了三个重载的关闭方法。这些方法检查所提供的参数是不是NULL，如果不是的话，它们就关闭Connection、Statement和ResultSet。</li><li>public static void closeQuietly(…): 这一类方法不仅能在Connection、Statement和ResultSet为NULL情况下避免关闭，还能隐藏一些在程序中抛出的SQLEeception。</li><li>public static void commitAndClose(Connection conn)throws SQLException： 用来提交连接的事务，然后关闭连接</li><li>public static void commitAndCloseQuietly(Connection conn)： 用来提交连接，然后关闭连接，并且在关闭连接时不抛出SQL异常。 </li><li>public static void rollback(Connection conn)throws SQLException：允许conn为null，因为方法内部做了判断</li><li>public static void rollbackAndClose(Connection conn)throws SQLException</li><li>rollbackAndCloseQuietly(Connection)</li><li>public static boolean loadDriver(java.lang.String driverClassName)：这一方装载并注册JDBC驱动程序，如果成功就返回true。使用该方法，你不需要捕捉这个异常ClassNotFoundException。</li></ul></li></ul><h4 id="9-2-2-QueryRunner类"><a href="#9-2-2-QueryRunner类" class="headerlink" title="9.2.2 QueryRunner类"></a>9.2.2 QueryRunner类</h4><ul><li><p><strong>该类简单化了SQL查询，它与ResultSetHandler组合在一起使用可以完成大部分的数据库操作，能够大大减少编码量。</strong></p></li><li><p>QueryRunner类提供了两个构造器：</p><ul><li>默认的构造器</li><li>需要一个 javax.sql.DataSource 来作参数的构造器</li></ul></li><li><p>QueryRunner类的主要方法：</p><ul><li><strong>更新</strong><ul><li>public int update(Connection conn, String sql, Object… params) throws SQLException:用来执行一个更新（插入、更新或删除）操作。</li><li>……</li></ul></li><li><strong>插入</strong><ul><li>public <T> T insert(Connection conn,String sql,ResultSetHandler<T> rsh, Object… params) throws SQLException：只支持INSERT语句，其中 rsh - The handler used to create the result object from the ResultSet of auto-generated keys.  返回值: An object generated by the handler.即自动生成的键值</li><li>….</li></ul></li><li><strong>批处理</strong><ul><li>public int[] batch(Connection conn,String sql,Object[][] params)throws SQLException： INSERT, UPDATE, or DELETE语句</li><li>public <T> T insertBatch(Connection conn,String sql,ResultSetHandler<T> rsh,Object[][] params)throws SQLException：只支持INSERT语句</li><li>…..</li></ul></li><li><strong>查询</strong><ul><li>public Object query(Connection conn, String sql, ResultSetHandler rsh,Object… params) throws SQLException：执行一个查询操作，在这个查询中，对象数组中的每个元素值被用来作为查询语句的置换参数。该方法会自行处理 PreparedStatement 和 ResultSet 的创建和关闭。</li><li>…… </li></ul></li></ul></li><li><p>测试</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试添加</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsert</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line">String sql = <span class="string">"insert into customers(name,email,birth)values(?,?,?)"</span>;</span><br><span class="line"><span class="keyword">int</span> count = runner.update(conn, sql, <span class="string">"何成飞"</span>, <span class="string">"he@qq.com"</span>, <span class="string">"1992-09-08"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"添加了"</span> + count + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试删除</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDelete</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line">String sql = <span class="string">"delete from customers where id &lt; ?"</span>;</span><br><span class="line"><span class="keyword">int</span> count = runner.update(conn, sql,<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"删除了"</span> + count + <span class="string">"条记录"</span>);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-2-3-ResultSetHandler接口及实现类"><a href="#9-2-3-ResultSetHandler接口及实现类" class="headerlink" title="9.2.3 ResultSetHandler接口及实现类"></a>9.2.3 ResultSetHandler接口及实现类</h4><ul><li><p>该接口用于处理 java.sql.ResultSet，将数据按要求转换为另一种形式。</p></li><li><p>ResultSetHandler 接口提供了一个单独的方法：Object handle (java.sql.ResultSet .rs)。</p></li><li><p>接口的主要实现类：</p><ul><li>ArrayHandler：把结果集中的第一行数据转成对象数组。</li><li>ArrayListHandler：把结果集中的每一行数据都转成一个数组，再存放到List中。</li><li><strong>BeanHandler：</strong>将结果集中的第一行数据封装到一个对应的JavaBean实例中。</li><li><strong>BeanListHandler：</strong>将结果集中的每一行数据都封装到一个对应的JavaBean实例中，存放到List里。</li><li>ColumnListHandler：将结果集中某一列的数据存放到List中。</li><li>KeyedHandler(name)：将结果集中的每一行数据都封装到一个Map里，再把这些map再存到一个map里，其key为指定的key。</li><li><strong>MapHandler：</strong>将结果集中的第一行数据封装到一个Map里，key是列名，value就是对应的值。</li><li><strong>MapListHandler：</strong>将结果集中的每一行数据都封装到一个Map里，然后再存放到List</li><li><strong>ScalarHandler：</strong>查询单个值对象</li></ul></li></ul><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询一条记录</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select id,name,email,birth from customers where id = ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanHandler&lt;&gt;(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">Customer customer = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">System.out.println(customer);</span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 测试查询:查询多条记录构成的集合</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 使用ResultSetHandler的实现类：BeanListHandler</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryList</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select id,name,email,birth from customers where id &lt; ?"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">BeanListHandler&lt;Customer&gt; handler = <span class="keyword">new</span> BeanListHandler&lt;&gt;(Customer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">List&lt;Customer&gt; list = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line">list.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 自定义ResultSetHandler的实现类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryInstance1</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">"select id,name,email,birth from customers where id = ?"</span>;</span><br><span class="line"></span><br><span class="line">ResultSetHandler&lt;Customer&gt; handler = <span class="keyword">new</span> ResultSetHandler&lt;Customer&gt;() &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Customer <span class="title">handle</span><span class="params">(ResultSet rs)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"handle"</span>);</span><br><span class="line"><span class="comment">//return new Customer(1,"Tom","tom@126.com",new Date(123323432L));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(rs.next())&#123;</span><br><span class="line"><span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);</span><br><span class="line">String name = rs.getString(<span class="string">"name"</span>);</span><br><span class="line">String email = rs.getString(<span class="string">"email"</span>);</span><br><span class="line">Date birth = rs.getDate(<span class="string">"birth"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Customer(id, name, email, birth);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Customer customer = runner.query(conn, sql, handler, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(customer);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如何查询类似于最大的，最小的，平均的，总和，个数相关的数据，</span></span><br><span class="line"><span class="comment"> * 使用ScalarHandler</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryValue</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">QueryRunner runner = <span class="keyword">new</span> QueryRunner();</span><br><span class="line"></span><br><span class="line">Connection conn = JDBCUtils.getConnection3();</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试一：</span></span><br><span class="line"><span class="comment">//String sql = "select count(*) from customers where id &lt; ?";</span></span><br><span class="line"><span class="comment">//ScalarHandler handler = new ScalarHandler();</span></span><br><span class="line"><span class="comment">//long count = (long) runner.query(conn, sql, handler, 20);</span></span><br><span class="line"><span class="comment">//System.out.println(count);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试二：</span></span><br><span class="line">String sql = <span class="string">"select max(birth) from customers"</span>;</span><br><span class="line">ScalarHandler handler = <span class="keyword">new</span> ScalarHandler();</span><br><span class="line">Date birth = (Date) runner.query(conn, sql, handler);</span><br><span class="line">System.out.println(birth);</span><br><span class="line"></span><br><span class="line">JDBCUtils.closeResource(conn, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC总结"><a href="#JDBC总结" class="headerlink" title="JDBC总结"></a>JDBC总结</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">总结</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateWithTx</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Connection conn = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//1.获取连接的操作（</span></span><br><span class="line"><span class="comment">//① 手写的连接：JDBCUtils.getConnection();</span></span><br><span class="line"><span class="comment">//② 使用数据库连接池：C3P0;DBCP;Druid</span></span><br><span class="line"><span class="comment">//2.对数据表进行一系列CRUD操作</span></span><br><span class="line"><span class="comment">//① 使用PreparedStatement实现通用的增删改、查询操作（version 1.0 \ version 2.0)</span></span><br><span class="line"><span class="comment">//version2.0的增删改public void update(Connection conn,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//version2.0的查询 public &lt;T&gt; T getInstance(Connection conn,Class&lt;T&gt; clazz,String sql,Object ... args)&#123;&#125;</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的QueryRunner类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提交数据</span></span><br><span class="line">conn.commit();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">//回滚数据</span></span><br><span class="line">conn.rollback();</span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e1) &#123;</span><br><span class="line">e1.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"><span class="comment">//3.关闭连接等操作</span></span><br><span class="line"><span class="comment">//① JDBCUtils.closeResource();</span></span><br><span class="line"><span class="comment">//② 使用dbutils提供的jar包中提供的DbUtils类提供了关闭的相关操作</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JDBC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRUD </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis简介及框架原理+一个经典的Mybatis入门案例</title>
      <link href="/posts/a80c3e83.html"/>
      <url>/posts/a80c3e83.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Mybatis简介and一些概念"><a href="#1-Mybatis简介and一些概念" class="headerlink" title="1.Mybatis简介and一些概念"></a>1.Mybatis简介and一些概念</h2><h3 id="1-1-Mybatis简介及特点"><a href="#1-1-Mybatis简介及特点" class="headerlink" title="1.1  Mybatis简介及特点"></a>1.1  Mybatis简介及特点</h3><p>MyBatis 是一款优秀的<code>持久层框架</code>，它支持<code>自定义 SQL、存储过程以及高级映射</code>。</p><p>MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</p><p>MyBatis 可以通过简单的 <code>XML</code> 或<code>注解</code>来<code>配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录</code>。</p><p>MyBatis 本是apache的一个<a href="https://baike.baidu.com/item/开源项目/3406069" target="_blank" rel="noopener">开源项目</a>iBatis, 2010年这个<a href="https://baike.baidu.com/item/项目/477803" target="_blank" rel="noopener">项目</a>由apache software foundation 迁移到了[google code](<a href="https://baike.baidu.com/item/google" target="_blank" rel="noopener">https://baike.baidu.com/item/google</a> code/2346604)，并且改名为MyBatis 。2013年11月迁移到<a href="https://baike.baidu.com/item/Github/10145341" target="_blank" rel="noopener">Github</a>。</p><p>iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的<a href="https://baike.baidu.com/item/持久层/3584971" target="_blank" rel="noopener">持久层</a>框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAOs）</p><p>Mybatis特点：</p><ul><li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li><li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql语句可以满足操作数据库的所有需求。</li><li>解除sql与程序代码的耦合：通过提供DAO层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li><li>提供映射标签，支持对象与数据库的orm字段关系映射</li><li>提供对象关系映射标签，支持对象关系组建维护</li><li>提供xml标签，支持编写动态sql。</li><li>可以使用简单的 XML  或注解用于配置和原始映射，利用接口（映射成 SQL 语句）将 Java 的 POJO（Plain Old Java Objects，普通 Java 对象）映射成数据库中的记录。 </li></ul><p><strong>接下来是一些关于学习此框架的一些重要概念。</strong></p><h3 id="1-2-DAL"><a href="#1-2-DAL" class="headerlink" title="1.2  DAL"></a>1.2  DAL</h3><p><strong>数据访问层(Data access layer)：</strong><code>数据访问层</code>又称为<code>DAL</code>层，有时候也称为是<a href="https://baike.baidu.com/item/持久层/3584971" target="_blank" rel="noopener"><code>持久层</code></a>，其功能主要是负责<a href="https://baike.baidu.com/item/数据库/103728" target="_blank" rel="noopener">数据库</a>的访问。</p><p>简单的说法就是实现对数据表的Select（查询），Insert（插入），Update（更新），Delete（删除）等操作。</p><p>如果要加入ORM的元素，那么就会包括对象和数据表之间的mapping，以及对象实体的持久化。</p><h3 id="1-3-ORM"><a href="#1-3-ORM" class="headerlink" title="1.3 ORM"></a>1.3 ORM</h3><p>ORM（Object Relational Mapping）框架采用<a href="https://baike.baidu.com/item/元数据/1946090" target="_blank" rel="noopener">元数据</a>来<code>描述对象与关系映射的细节</code>，元数据一般采用XML格式，并且存放在专门的对象一映射文件中。简单理解为一种框架的格式。</p><p><strong>元数据：</strong>是<code>描述其它数据的数据</code>（data about other data），或者说是用于提供某种资源的有关信息的结构数据（structured data）。 </p><h3 id="1-4-DAO"><a href="#1-4-DAO" class="headerlink" title="1.4 DAO"></a>1.4 DAO</h3><p>DAO(Data Access Object)是一个<code>数据访问接口</code>，数据访问：顾名思义就是与数据库打交道。夹在<a href="https://baike.baidu.com/item/业务逻辑" target="_blank" rel="noopener">业务逻辑</a>与数据库资源中间。</p><p>在核心<a href="https://baike.baidu.com/item/J2EE" target="_blank" rel="noopener">J2EE</a>模式中是这样介绍DAO模式的：为了建立一个健壮的J2EE应用，应该将所有对<a href="https://baike.baidu.com/item/数据源" target="_blank" rel="noopener">数据源</a>的访问操作抽象封装在一个公共<a href="https://baike.baidu.com/item/API/10154" target="_blank" rel="noopener">API</a>中。用程序设计的语言来说，就是建立一个接口，接口中定义了此应用程序中将会用到的所有<a href="https://baike.baidu.com/item/事务" target="_blank" rel="noopener">事务</a>方法。在这个应用程序中，当需要和数据源进行交互的时候则使用这个接口，并且编写一个单独的类来实现这个接口在逻辑上对应这个特定的数据存储。</p><p>J2EE开发人员使用<a href="https://baike.baidu.com/item/数据/5947370" target="_blank" rel="noopener">数据</a>访问对象（DAO）设计模式把<code>底层的数据访问逻辑</code>和<code>高层的业务逻辑</code>分开.实现<code>DAO</code>模式能够<code>更加专注于编写数据访问代码</code>.</p><p>DAO模式是标准的J2EE设计模式之一.开发人员使用这个模式把底层的数据访问操作和上层的商务逻辑分开.<code>一个典型的DAO实现有下列几个组件</code>：</p><ol><li><p>一个DAO工厂类；</p></li><li><p>一个DAO接口；</p></li><li><p>一个实现DAO接口的具体类；</p></li><li><p>数据传递对象（有些时候叫做值对象）.</p></li></ol><p>具体的DAO类包含了从特定的数据源访问数据的逻辑。</p><h3 id="1-5-持久化"><a href="#1-5-持久化" class="headerlink" title="1.5  持久化"></a>1.5  持久化</h3><p>持久化（Persistence），即<code>把数据（如内存中的对象）保存到可永久保存的存储设备中（如磁盘）</code>。</p><p>持久化的主要应用是将内存中的对象存储在数据库中，或者存储在磁盘文件中、XML数据文件中等等。</p><p><code>持久化是将程序数据在持久状态和瞬时状态间转换的机制。</code></p><p>JDBC就是一种持久化机制。文件IO也是一种持久化机制。</p><h3 id="1-6-数据持久化"><a href="#1-6-数据持久化" class="headerlink" title="1.6 数据持久化"></a>1.6 数据持久化</h3><p>数据持久化就是将内存中的数据模型转换为存储模型,以及将存储模型转换为内存中的数据模型的统称. 数据模型可以是任何数据结构或对象模型,存储模型可以是关系模型、XML、二进制流等。</p><p>使用数据持久化有以下好处：</p><p>1、程序代码重用性强，即使更换数据库，只需要更改配置文件，不必重写程序代码。</p><p>2、业务逻辑代码可读性强，在代码中不会有大量的SQL语言，提高程序的可读性。</p><p>3、持久化技术可以自动优化，以减少对数据库的访问量，提高程序运行效率。</p><p>数据持久化对象的基本操作有：保存、更新、删除、查询等。</p><p>数据持久化机制：</p><p>在业务程序与数据库之间，Hibernate框架使用Session会话，来完成数据的提交、更新、删除、查询等等。</p><p>1、向数据库提交数据</p><p>在程序中保存对象时，会把数据保存到Session会话中，然后根据框架的配置文件，自动或手动决定什么时候把这种保存提交到数据库。</p><p>2、从数据库中查询数据</p><p>在查询数据之前，需要清理缓存（手动清理，或者通过配置文件框架自动清理）清理缓存的目的是为了使Session会话中的数据与数据库中的数据保持一致。然后程序只需要查询Session会话中的数据即可。</p><p>总之，数据持久化是解决程序与数据库之间交互访问的问题，使程序不直接访问数据库，而是直接访问Session会话，然后由Session会话与数据库“打交道”。只要确保，程序每次访问Session中的数据时，与数据库中的数据保持一致，就不会出现错误。</p><h3 id="1-7-POJO"><a href="#1-7-POJO" class="headerlink" title="1.7 POJO"></a>1.7 POJO</h3><p>“Plain Ordinary Java Object”，简单普通的java对象。它不包含业务逻辑或持久逻辑等，它不是JavaBean、EntityBean等，不具有任何特殊角色和不继承或不实现任何其它Java框架的类或接口。</p><p>一般在web应用程序中建立一个数据库的映射对象时，我们只能称它为POJO。</p><p>POJO的一个简单的定义:</p><ul><li><p>有一些private的参数作为对象的属性</p></li><li><p>针对每一个参数定义get和set方法访问的接口。</p></li><li><p>没有从任何类继承、也没有实现任何接口，更没有实现任何其它Java框架的类或接口。</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicInfoVo</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String orderId;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Integer uid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getOrderId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> orderId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderId</span><span class="params">(String orderId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getUid</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> uid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUid</span><span class="params">(Integer uid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.uid = uid;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="1-8-JavaBean"><a href="#1-8-JavaBean" class="headerlink" title="1.8 JavaBean"></a>1.8 JavaBean</h3><p>JavaBean 是一种JAVA语言写成的<code>可重用组件</code>。</p><p><strong>JavaBean的特征：</strong></p><ol><li>类修饰为public公有类</li><li>有一个无参public构造方法</li><li>属性使用private修饰</li><li>有一系列setXXX()和getXXX()的方法得到JavaBean里的私有属性XXX数值</li><li>实现 Serializable 接口</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentsBean</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String firstName = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">private</span> String lastName = <span class="keyword">null</span>;</span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">StudentsBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span></span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-Mybatis框架原理"><a href="#2-Mybatis框架原理" class="headerlink" title="2. Mybatis框架原理"></a>2. Mybatis框架原理</h2><h3 id="2-1-三层架构"><a href="#2-1-三层架构" class="headerlink" title="2.1 三层架构"></a>2.1 三层架构</h3><p>MyBatis 的整体架构分为三层， 分别是基础支持层、核心处理层和接口层：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20190605125833157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3RpYW5rb25nXzEyMzQ1,size_16,color_FFFFFF,t_70" alt="img"></p><h4 id="2-1-1-基础支持层-各个模块的功能"><a href="#2-1-1-基础支持层-各个模块的功能" class="headerlink" title="2.1.1 基础支持层(各个模块的功能)"></a>2.1.1 基础支持层(各个模块的功能)</h4><table><thead><tr><th>反射模块</th><th>该模块对Java 原生的反射进行了良好的封装，提供了更加简洁易用的API ，方便上层使调用，并且对反射操作进行了一系列优化，例如缓存了类的元数据，提高了反射操作的性能。</th></tr></thead><tbody><tr><td>类型转换模块</td><td>别名机制， 该机制是类型转换模块的主要功能之一。实现JDBC 类型与Java 类型之间的转换，该功能在为SQL 语句绑定实参以及映射查询结果集时都会涉及。</td></tr><tr><td>日志模块</td><td>提供详细的日志输出信息;能够集成多种日志框架，其日志模块的一个主要功能就是集成第三方日志框架。</td></tr><tr><td>资源加载模块</td><td>对类加载器进行封装，确定类加载器的使用顺序，并提供了加载类文件以及其他资源文件的功能。</td></tr><tr><td>解析器模块</td><td>对XPath 进行封装，为MyBatis 初始化时解析mybatis-config.xml 配置文件以及映射配置文件提供支持;为处理动态SQL 语句中的占位符提供支持。</td></tr><tr><td>数据源模块</td><td>自身提供了相应的数据源实现;提供了与第三方数据源集成的接口.</td></tr><tr><td>事务管理</td><td>MyBatis 对数据库中的事务进行了抽象,其自身提供了相应的事务接口和简单实现。</td></tr><tr><td>缓存模块</td><td>My Batis 中提供了一级缓存和二级缓存，而这两级缓存都是依赖于基础支持层中的缓存模块实现的。MyBatis 中自带的这两级缓存与MyBatis 以及整个应用是运行在同一个JVM中的，共享同一块堆内存。如果这两级缓存中的数据量较大， 则可能影响系统中其他功能的运行，所以当需要缓存大量数据时，优先考虑 使用Redis 、Memcache 等缓存产品。</td></tr><tr><td>Binding 模块</td><td>MyBatis 通过Binding 模块将用户自定义的Mapper 接口与映射配置文件关联起来，系统可以通过调用自定义Mapper 接口中的方法执行相应的SQL 语句完成数据库操作，尽早发现拼写错误。开发人员无须编写自定义Mapper 接口的实现， MyBatis 会自动为其创建动态代理对象。</td></tr></tbody></table><h4 id="2-1-2-核心处理层"><a href="#2-1-2-核心处理层" class="headerlink" title="2.1.2 核心处理层"></a>2.1.2 核心处理层</h4><table><thead><tr><th>配置解析</th><th>在MyBatis 初始化过程中，会加载mybatis-config.xml 配置文件、映射配置文件以及Mapper 接口中的注解信息，解析后的配置信息会形成相应的对象并保存到Configuration 对象中。之后，利用该Configuration 对象创建SqlSessionFactory 对象。待MyBatis 初始化之后，开发人员可以通过初始化得到SqlSessionFactory 创建SqlSession 对象并完成数据库操作。</th></tr></thead><tbody><tr><td>SOL 解析与scripting 模块</td><td>MyBatis 实现动态SQL 语句的功能，提供了多种动态SQL 语句对应的节点，例如，＜ where＞节点、＜ if&gt;节点、＜ foreach＞节点等。通过这些节点的组合使用， 开发人员可以写出几乎满足所有需求的动态SQL 语句。My Batis 中的scripting 模块会根据用户传入的实参，解析映射文件中定义的动态SQL节点，并形成数据库可执行的SQL 语句。之后会处理SQL 语句中的占位符，绑定用户传入的实参。</td></tr><tr><td>SOL 执行</td><td>SQL 语句的执行涉及多个组件，其中比较重要的是Executor 、StatementHandler 、ParameterHandler 和ResultSetHandler。Executor 主要负责维护一级缓存和二级缓存，并提供事务管理的相关操作，它会将数据库相关操作委托给StatementHandler 完成。StatementHandler 首先通过ParameterHandler 完成SQL 语句的实参绑定；然后通过java.sql.Statement 对象执行SQL 语句并得到结果集；最后通过ResultSetHandler 完成结果集的映射，得到结果对象并返回。（看图）</td></tr><tr><td>插件</td><td>通过添加用户自定义插件的方式对MyBatis 进行扩展。</td></tr></tbody></table><h4 id="2-1-3-接口层"><a href="#2-1-3-接口层" class="headerlink" title="2.1.3 接口层"></a>2.1.3 接口层</h4><p>核心是SqlSession 接口，该接口中定义了MyBatis 暴露给应用程序调用的API ，也就是上层应用与MyBatis 交互的桥梁。接口层在接收到调用请求时，会调用核心处理层的相应模块来完成具体的数据库操作。</p><h3 id="2-2-运行原理"><a href="#2-2-运行原理" class="headerlink" title="2.2 运行原理"></a>2.2 运行原理</h3><p>每一个 MyBatis 应用都以一个 <code>SqlSessionFactory</code>实例为中心，SqlSessionFactory 的生命周期应存在于整个 MyBatis 应用，与 MyBatis 应用共存亡。</p><p>SqlSessionFactory 的作用是创建 SqlSession 接口对象。 SqlSessionFactory 实例可以通过 SqlSessionFactoryBuilder类的<code>build</code>方法来获得。</p><p>在 SqlSessionFactoryBuilder 类的 build 方法中，是通过解析 XML 配置文件或者只使用代码（本质上都是先构建 Configuration 对象），来构建SqlSessionFactory 实例的，这里使用了<code>建造者模式</code>（Builder Pattern）。</p><p>创建了SqlSessionFactory会话工厂 ，然后由会话工厂SqlSessionFactory的<code>openSession</code>方法创建SqlSession对象，该对象中包含了执行SQL语句的所有方法。可以通过SqlSession对象实现事务的控制、数据查询、关闭SqlSession等。</p><p>Mybatis的执行流程如下图：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201118205231.png" alt="image-20201118205227381"></p><h3 id="2-3-核心组件的生命周期"><a href="#2-3-核心组件的生命周期" class="headerlink" title="2.3 核心组件的生命周期"></a>2.3 核心组件的生命周期</h3><h4 id="2-3-1-SqlSessionFactoryBuilder"><a href="#2-3-1-SqlSessionFactoryBuilder" class="headerlink" title="2.3.1 SqlSessionFactoryBuilder"></a>2.3.1 SqlSessionFactoryBuilder</h4><p>一旦通过 SqlSessionFactoryBuilder 创建了 SqlSessionFactory 后，SqlSessionFactoryBuilder 就不需要存在了。</p><p>因此 SqlSessionFactoryBuilder 实例的最佳生命周期是只存在于创建 SqlSessionFactory 方法中（也就是<code>本地方法变量</code>）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.ibatis.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.builder.xml.XMLConfigBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.exceptions.ExceptionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.ErrorContext;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.defaults.DefaultSqlSessionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SqlSessionFactoryBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SqlSessionFactoryBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Reader reader)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.build((Reader)reader, (String)<span class="keyword">null</span>, (Properties)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Reader reader, String environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.build((Reader)reader, environment, (Properties)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Reader reader, Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.build((Reader)reader, (String)<span class="keyword">null</span>, properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Reader reader, String environment, Properties properties)</span> </span>&#123;</span><br><span class="line">        SqlSessionFactory var5;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(reader, environment, properties);</span><br><span class="line">            var5 = <span class="keyword">this</span>.build(parser.parse());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var14) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error building SqlSession."</span>, var14);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.build((InputStream)inputStream, (String)<span class="keyword">null</span>, (Properties)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, String environment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.build((InputStream)inputStream, environment, (Properties)<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, Properties properties)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.build((InputStream)inputStream, (String)<span class="keyword">null</span>, properties);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(InputStream inputStream, String environment, Properties properties)</span> </span>&#123;</span><br><span class="line">        SqlSessionFactory var5;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            XMLConfigBuilder parser = <span class="keyword">new</span> XMLConfigBuilder(inputStream, environment, properties);</span><br><span class="line">            var5 = <span class="keyword">this</span>.build(parser.parse());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var14) &#123;</span><br><span class="line">            <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error building SqlSession."</span>, var14);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            ErrorContext.instance().reset();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException var13) &#123;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> var5;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">build</span><span class="params">(Configuration config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSessionFactory(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-2-SqlSessionFactory"><a href="#2-3-2-SqlSessionFactory" class="headerlink" title="2.3.2 SqlSessionFactory"></a>2.3.2 SqlSessionFactory</h4><p>SqlSessionFactory 实例一旦被创建，应该在你的应用程序执行期间都存在。如果在此 MyBatis 应用中销毁又重新创建它，那是没有理由的。</p><p>倘若 SqlSessionFactory 实例在应用程序运行期间被重复创建多次，这样的代码会被嗅出“腐化软件的气味”。关于 SqlSessionFactory 实例的创建，可以考虑使用单例模式、静态单例模式或者依赖注入。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.ibatis.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSessionFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">(<span class="keyword">boolean</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">(Connection var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">(TransactionIsolationLevel var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType var1, <span class="keyword">boolean</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType var1, TransactionIsolationLevel var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">SqlSession <span class="title">openSession</span><span class="params">(ExecutorType var1, Connection var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Configuration <span class="title">getConfiguration</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-3-SqlSession"><a href="#2-3-3-SqlSession" class="headerlink" title="2.3.3 SqlSession"></a>2.3.3 SqlSession</h4><p>SqlSession 是一个会话，<code>相当于 JDBC 的一个 Connection 对象</code>，它的生命周期应该是在请求数据库处理事务的过程中。每个线程都应该有它自己的 SqlSession 实例。</p><p>SqlSession 的实例不能共享使用，它也是<code>线程不安全</code>的。</p><p>因此最佳的存在范围是请求或方法范围。绝对不能将 SqlSession 实例的引用放在一个类的静态字段甚至是实例字段中。也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。 </p><p>如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。 换句话说，<code>每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。</code> 这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个<code>关闭操作放到 finally</code>块中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> org.apache.ibatis.session;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Closeable;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.cursor.Cursor;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.executor.BatchResult;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlSession</span> <span class="keyword">extends</span> <span class="title">Closeable</span> </span>&#123;</span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">selectOne</span><span class="params">(String var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">selectList</span><span class="params">(String var1, Object var2, RowBounds var3)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">selectMap</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">selectMap</span><span class="params">(String var1, Object var2, String var3)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;K, V&gt; <span class="function">Map&lt;K, V&gt; <span class="title">selectMap</span><span class="params">(String var1, Object var2, String var3, RowBounds var4)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">Cursor&lt;T&gt; <span class="title">selectCursor</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">Cursor&lt;T&gt; <span class="title">selectCursor</span><span class="params">(String var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">Cursor&lt;T&gt; <span class="title">selectCursor</span><span class="params">(String var1, Object var2, RowBounds var3)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(String var1, Object var2, ResultHandler var3)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(String var1, ResultHandler var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">(String var1, Object var2, RowBounds var3, ResultHandler var4)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">insert</span><span class="params">(String var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(String var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">(String var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">commit</span><span class="params">(<span class="keyword">boolean</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">rollback</span><span class="params">(<span class="keyword">boolean</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;BatchResult&gt; <span class="title">flushStatements</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">clearCache</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Configuration <span class="title">getConfiguration</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getMapper</span><span class="params">(Class&lt;T&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Connection <span class="title">getConnection</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-4-Mapper-Instances-映射器实例"><a href="#2-3-4-Mapper-Instances-映射器实例" class="headerlink" title="2.3.4 Mapper Instances (映射器实例)"></a>2.3.4 Mapper Instances (映射器实例)</h4><p>映射器是你创建的用来绑定映射语句的<code>接口</code>。</p><p>映射器接口对象可以从 SqlSession 中获得。那么从技术上来说，当被请求时，任意映射器对象的生存最大范围与 SqlSession 对象是相同的。</p><p>不管怎样，映射器对象的生存最佳范围是方法范围。也就是说，<code>它们应该在使用它们的方法中被请求，然后就抛弃掉</code>。</p><h2 id="3-第一个Mybatis案例"><a href="#3-第一个Mybatis案例" class="headerlink" title="3. 第一个Mybatis案例"></a>3. 第一个Mybatis案例</h2><p>此案例演示了利用Mybatis和xml配置文件访问数据库的数据</p><h3 id="3-1-最终的文件结构图"><a href="#3-1-最终的文件结构图" class="headerlink" title="3.1 最终的文件结构图"></a>3.1 最终的文件结构图</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201120204328.png" alt="image-20201120204325729"></p><h3 id="3-2-创建User表"><a href="#3-2-创建User表" class="headerlink" title="3.2  创建User表"></a>3.2  创建User表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">User</span>(</span><br><span class="line"><span class="string">`id`</span> <span class="built_in">int</span> primary <span class="keyword">key</span> AUTO_INCREMENT,</span><br><span class="line"><span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line"><span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">default</span> <span class="literal">null</span></span><br><span class="line">)<span class="keyword">engine</span>=<span class="keyword">INNODB</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201120205901.png" alt="image-20201120205901397"></p><h3 id="3-3-编写pojo类User"><a href="#3-3-编写pojo类User" class="headerlink" title="3.3 编写pojo类User"></a>3.3 编写pojo类User</h3><p>pojo类映射表中的一行记录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;  <span class="comment">//id</span></span><br><span class="line">    <span class="keyword">private</span> String name;   <span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> String pwd;   <span class="comment">//密码</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", pwd='"</span> + pwd + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-配置父pom-xml和子pom-xml安装依赖"><a href="#3-4-配置父pom-xml和子pom-xml安装依赖" class="headerlink" title="3.4 配置父pom.xml和子pom.xml安装依赖"></a>3.4 配置父pom.xml和子pom.xml安装依赖</h3><p>父pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--父工程--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.bithachi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis_study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包含的子工程--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>mybatis01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--各种依赖包--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mybatis --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql-driver--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--声明父POM--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis_study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.bithachi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201120204959.png" alt="image-20201120204959534"></p><h3 id="3-5-创建Mapper映射接口UserMapper"><a href="#3-5-创建Mapper映射接口UserMapper" class="headerlink" title="3.5 创建Mapper映射接口UserMapper"></a>3.5 创建Mapper映射接口UserMapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">selectUser</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-创建SQL映射xml文件userMapper-xml"><a href="#3-6-创建SQL映射xml文件userMapper-xml" class="headerlink" title="3.6 创建SQL映射xml文件userMapper.xml"></a>3.6 创建SQL映射xml文件userMapper.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span> <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace绑定一个对应的Mapper/UserMapper接口--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--id对应namespace定义的包中接口中的方法名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--resultType对应sql返回的数据类型--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"cn.bithachi.mapper.UserMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUser"</span> <span class="attr">resultType</span>=<span class="string">"cn.bithachi.pojo.User"</span>&gt;</span></span><br><span class="line">        select * from user;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-7-配置Mybatis核心配置文件mybatis-config-xml"><a href="#3-7-配置Mybatis核心配置文件mybatis-config-xml" class="headerlink" title="3.7 配置Mybatis核心配置文件mybatis-config.xml"></a>3.7 配置Mybatis核心配置文件mybatis-config.xml</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE configuration PUBLIC <span class="string">"-//mybatis.org//DTD Config 3.0//EN"</span> <span class="string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--核心配置文件--&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;environments <span class="keyword">default</span>=<span class="string">"development"</span>&gt;</span><br><span class="line">        &lt;environment id=<span class="string">"development"</span>&gt;</span><br><span class="line">            &lt;!--事务管理--&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">"JDBC"</span>/&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"jdbc:mysql://localhost:3306/forstudy?useSSL=true&amp;amp;useUnicode=true&amp;amp;characterEncoding=utf8"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"root"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"123456"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;</span><br><span class="line">       &lt;!-- &lt;environment id=<span class="string">"test"</span>&gt;</span><br><span class="line">            &lt;transactionManager type=<span class="string">"JDBC"</span>/&gt;</span><br><span class="line">            &lt;dataSource type=<span class="string">"POOLED"</span>&gt;</span><br><span class="line">                &lt;property name=<span class="string">"driver"</span> value=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"url"</span> value=<span class="string">"$&#123;url&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"username"</span> value=<span class="string">"$&#123;username&#125;"</span>/&gt;</span><br><span class="line">                &lt;property name=<span class="string">"password"</span> value=<span class="string">"$&#123;password&#125;"</span>/&gt;</span><br><span class="line">            &lt;/dataSource&gt;</span><br><span class="line">        &lt;/environment&gt;--&gt;</span><br><span class="line">    &lt;/environments&gt;</span><br><span class="line">    &lt;mappers&gt;</span><br><span class="line">        &lt;mapper resource=<span class="string">"cn/bithachi/mapper/userMapper.xml"</span>/&gt;</span><br><span class="line">    &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h3 id="3-8-编写测试类UserMapperTest"><a href="#3-8-编写测试类UserMapperTest" class="headerlink" title="3.8  编写测试类UserMapperTest"></a>3.8  编写测试类UserMapperTest</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.bithachi.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.bithachi.pojo.User;</span><br><span class="line"><span class="keyword">import</span> cn.bithachi.utils.MybatisUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserMapperTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">selectUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        SqlSession session = MybatisUtils.getSession();</span><br><span class="line">        <span class="comment">//方法一:直接包名限定类方法</span></span><br><span class="line">        <span class="comment">//List&lt;User&gt; users = session.selectList("com.bithachi.mapper.UserMapper.selectUser");</span></span><br><span class="line">        <span class="comment">//方法二:通过反射</span></span><br><span class="line">        UserMapper mapper = session.getMapper(UserMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; users = mapper.selectUser();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (User user: users)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-9-测试结果"><a href="#3-9-测试结果" class="headerlink" title="3.9 测试结果"></a>3.9 测试结果</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201120210016.png" alt="image-20201120210016118"></p><h3 id="3-10-可能出现的资源无法编译的异常"><a href="#3-10-可能出现的资源无法编译的异常" class="headerlink" title="3.10 可能出现的资源无法编译的异常"></a>3.10 可能出现的资源无法编译的异常</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201120210216.png" alt="image-20201120210216828"></p><p>比如在src/main/java/cn/bithachi/mapper/userMaper.xml可能IDEA无法自动编译它，那么需要在pom文件中加入一些配置，<code>父pom与子pom</code>都试试。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    可能出现问题说明：Maven静态资源过滤问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>加入了以上代码到<code>父pom</code>中，点击Maven的compile编译，再点击运行</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201123115350.png" alt="image-20201123115348397"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> DAL </tag>
            
            <tag> ORM </tag>
            
            <tag> DAO </tag>
            
            <tag> 持久化 </tag>
            
            <tag> 数据持久化 </tag>
            
            <tag> POJO </tag>
            
            <tag> JavaBean </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Filter过滤器与Listener监听器</title>
      <link href="/posts/98d10afd.html"/>
      <url>/posts/98d10afd.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-导言"><a href="#1-导言" class="headerlink" title="1.导言"></a>1.导言</h2><p><code>Filter</code> 不能处理用户请求，也不能对客户端生成响应。<br><code>Filter</code>主要用于对 HttpServletRequest  进行预处理，也可以对 HttpServletResponse  进行后处理，是个典型的处理链。</p><p><code>Listener</code> 可以监听由于 Web 应用中状态改变而引起的 Servlet 容器产生的相应事件，并对这些事件作出反应和处理。</p><h2 id="2-Servlet-过滤器"><a href="#2-Servlet-过滤器" class="headerlink" title="2. Servlet 过滤器"></a>2. Servlet 过滤器</h2><p><code>Filter</code> 是拦截 Request 请求的对象，在用户的请求访问资源前处理 ServletRequest 以及 ServletResponse ，它可用于日志记录、加解密、Session 检查、验证用户访问权限、对请求进行重新编码和压缩响应信息等。</p><p>通过 Filter 可以拦截处理某个资源或者某些资源。</p><h3 id="2-1-Filter-工作原理"><a href="#2-1-Filter-工作原理" class="headerlink" title="2.1 Filter 工作原理"></a>2.1 Filter 工作原理</h3><p>当客户端发出 Web 资源的请求时，Web 服务器根据应用程序配置文件设置的过滤规则进行检查。<br>若客户请求满足过滤规则，则对客户请求/响应进行拦截，对请求头和请求数据进行检查或改动，并依次通过过滤器链，最后把请求/响应交给请求的Web资源处理。</p><p>请求信息在过滤器链中可以被修改，也可以根据条件让请求不发往资源处理器，并直接向客户机发回一个响应。当资源处理器完成了对资源的处理后，响应信息将逐级逆向返回。同样在这个过程中，用户可以修改响应信息，从而完成一定的任务。</p><h3 id="2-2-Filter-核心接口"><a href="#2-2-Filter-核心接口" class="headerlink" title="2.2 Filter 核心接口"></a>2.2 Filter 核心接口</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110101504.png" alt="image-20201110101502614"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110101517.png" alt="image-20201110101517279"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110101528.png" alt="image-20201110101528248"></p><h3 id="2-3-Filter-生命周期"><a href="#2-3-Filter-生命周期" class="headerlink" title="2.3 Filter 生命周期"></a>2.3 Filter 生命周期</h3><p>过滤器的生命周期分为四个阶段：<br><code>加载和实例化 → 初始化 → 执行doFilter()方法 → 销毁</code></p><h3 id="2-4-Filter-配置"><a href="#2-4-Filter-配置" class="headerlink" title="2.4 Filter 配置"></a>2.4 Filter 配置</h3><p>（1）使用 <code>@WebFilter</code>标注配置 Filter，该名称为 TestFilter，描述了两个初始化参数，且<code>适用于所有资源</code>。其代码如下：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110101613.png" alt="image-20201110101612961"></p><p>（2）如果在web.xml 配置，则其代码如下：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110102358.png" alt="image-20201110102358133"></p><h3 id="2-5-Filter-应用案例"><a href="#2-5-Filter-应用案例" class="headerlink" title="2.5 Filter 应用案例"></a>2.5 Filter 应用案例</h3><h4 id="2-5-1-日志-Filter"><a href="#2-5-1-日志-Filter" class="headerlink" title="2.5.1 日志 Filter"></a>2.5.1 日志 Filter</h4><p>“日志Filter”示例实现功能：<br>把 Request 请求的 URL 记录到日志文件mylog.txt中。</p><p>依次访问：<code>test.jsp、a.jsp、HelloServlet、TestServlet</code></p><p>LogFilter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch6.fiterdemo.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> PrintWriter logger;</span><br><span class="line"><span class="keyword">private</span> String prefix;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LogFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">prefix = fConfig.getInitParameter(<span class="string">"prefix"</span>);</span><br><span class="line">System.out.println(<span class="string">"prefix: "</span>+prefix);</span><br><span class="line">String logFileName = fConfig.getInitParameter(<span class="string">"logFileName"</span>);</span><br><span class="line">System.out.println(<span class="string">"logFileName: "</span>+logFileName);</span><br><span class="line">String appPath = fConfig.getServletContext().getRealPath(<span class="string">"/"</span>);</span><br><span class="line">System.out.println( fConfig.getServletContext());</span><br><span class="line">System.out.println(<span class="string">"appPath: "</span>+appPath);</span><br><span class="line"><span class="comment">// without path info in logFileName, the log file will be</span></span><br><span class="line"><span class="comment">// created in $TOMCAT_HOME/bin</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"logFileName:"</span> + logFileName);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">logger = <span class="keyword">new</span> PrintWriter(<span class="keyword">new</span> File(appPath, logFileName));</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> ServletException(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"LogFilter.doFilter"</span>);</span><br><span class="line">HttpServletRequest httpServletRequest = (HttpServletRequest) request;</span><br><span class="line">logger.println(<span class="keyword">new</span> Date() + <span class="string">" "</span> + prefix + httpServletRequest.getRequestURI());</span><br><span class="line">logger.flush();</span><br><span class="line">filterChain.doFilter(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"destroying filter"</span>);</span><br><span class="line"><span class="keyword">if</span> (logger != <span class="keyword">null</span>) &#123;</span><br><span class="line">logger.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"</span></span></span><br><span class="line"><span class="tag"> <span class="attr">id</span>=<span class="string">"WebApp_ID"</span> <span class="attr">version</span>=<span class="string">"3.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>FilterDemo<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>book.ch6.fiterdemo.filter.LogFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>logFileName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>mylog.txt<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>prefix<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>URI:<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>LogFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p> test.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;test&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">This is test.jsp!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>a.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;a&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">This is a.jsp!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>HelloServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch6.fiterdemo.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/HelloServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();       </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">PrintWriter out = resp.getWriter();  <span class="comment">//得到PrintWriter对象</span></span><br><span class="line">        out.println(<span class="string">"Hello Servlet"</span>);  <span class="comment">//向客户端发送字符数据</span></span><br><span class="line">        out.close(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestServlet.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch6.fiterdemo.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/TestServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">PrintWriter out = resp.getWriter();  <span class="comment">//得到PrintWriter对象</span></span><br><span class="line">        out.println(<span class="string">"Test Servlet"</span>);  <span class="comment">//向客户端发送字符数据</span></span><br><span class="line">        out.close(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110154150.png" alt="image-20201110154148436"><br><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110154217.png" alt="image-20201110154217647"><br><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110154240.png" alt="image-20201110154240352"><br><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110154302.png" alt="image-20201110154302680"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110154410.png" alt="image-20201110154409104"></p><h4 id="2-5-2-控制用户访问权限-Filter"><a href="#2-5-2-控制用户访问权限-Filter" class="headerlink" title="2.5.2 控制用户访问权限 Filter"></a>2.5.2 控制用户访问权限 Filter</h4><p>“控制用户访问权限 Filter”示例实现功能：<br>欲访问信息页面 info.jsp，通过过滤器对会话对象 Session 进行检查，以控制用户访问权限。<br>这里是直接访问 info.jsp，因会话中无用户名，故限制其访问，跳转至 login.jsp。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110173637.png" alt="image-20201110173635765"></p><p>SessionCheckFilter.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch6.FiterDemo2.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"SessionCheckFilter"</span>, urlPatterns = &#123; <span class="string">"/*"</span> &#125;, initParams = &#123;</span><br><span class="line"><span class="meta">@WebInitParam</span>(name = <span class="string">"loginPage"</span>, value = <span class="string">"/page/ch6/login.jsp"</span>),</span><br><span class="line"><span class="meta">@WebInitParam</span>(name = <span class="string">"loginServlet"</span>, value = <span class="string">"/LoginProcessServlet"</span>) &#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionCheckFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line"><span class="comment">// 用于获取初始化参数</span></span><br><span class="line"><span class="keyword">private</span> FilterConfig config;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">SessionCheckFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig fConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.config = fConfig;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"><span class="comment">// 获取初始化参数</span></span><br><span class="line">String loginPage = config.getInitParameter(<span class="string">"loginPage"</span>);</span><br><span class="line">String loginServlet = config.getInitParameter(<span class="string">"loginServlet"</span>);</span><br><span class="line"><span class="comment">// 获取会话对象</span></span><br><span class="line">HttpSession session = ((HttpServletRequest) request).getSession();</span><br><span class="line"><span class="comment">// 获取请求资源路径（不包含请求参数）</span></span><br><span class="line">String requestPath = ((HttpServletRequest) request).getServletPath();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (session.getAttribute(<span class="string">"user"</span>) != <span class="keyword">null</span> || requestPath.endsWith(loginPage)|| requestPath.endsWith(loginServlet)) &#123;</span><br><span class="line"><span class="comment">// 如果用户会话域属性user存在，并且请求资源为登录页面和登录处理的Servlet，则“放行”请求</span></span><br><span class="line">chain.doFilter(request, response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 对请求进行拦截，返回登录页面</span></span><br><span class="line">request.setAttribute(<span class="string">"tip"</span>, <span class="string">"您还未登录，请先登录！"</span>);</span><br><span class="line">request.getRequestDispatcher(loginPage).forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.config = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>info.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;信息页面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">这是信息页面！</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>login.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;用户登录&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;&lt;font color="red"&gt;$&#123;tip&#125;&lt;/font&gt;&lt;/p&gt;</span><br><span class="line">&lt;form action=<span class="string">"/LoginProcessServlet"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;p&gt;用户名：&lt;input type="text" name="username"&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;密&amp;nbsp&amp;nbsp&amp;nbsp&amp;nbsp码：&lt;input type="password" name="userpass"&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;input type="submit" value="登录"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110174710.png" alt="image-20201110174710476"></p><h2 id="3-Servlet-监听器"><a href="#3-Servlet-监听器" class="headerlink" title="3. Servlet 监听器"></a>3. Servlet 监听器</h2><p>当 Web 应用在 Web 容器中运行时，Web 应用内部会不断发生各种事件：如 <code>Web 应用被启动、Web 应用被停止，用户 session 开始、用户 session 结束、用户请求到达</code>等。通常来说，这些 Web 事件对开发者是透明的。</p><p>Servlet API 提供了大量监听器接口来帮助开发者实现对 Web 应用内特定事件进行监听，常用的 Web 事件监听器接口可分为如下3类：</p><ul><li>监听 Servlet context events</li><li>监听 HTTP session events</li><li>监听 Servletrequest events。</li></ul><p>一般来说，监听器的实现通过以下两个步骤来完成。<br>（1）定义监听器实现类，实现监听器接口的所有方法；<br>（2）通过Annotation或在web.xml文件中注册（或配置）Listener。</p><h3 id="3-1-ServletContext-上下文监听"><a href="#3-1-ServletContext-上下文监听" class="headerlink" title="3.1 ServletContext 上下文监听"></a>3.1 ServletContext 上下文监听</h3><p><code>（1）ServletContextListener</code><br>ServletContextListener 接口用于监听 Web 应用的 ServletContext 对象的创建和销毁事件。每个 Web 应用对应一个 ServletContext 对象，在 Web 容器启动时创建，在容器关闭时销毁。<br>当 Web 应用程序中声明了一个实现 ServletContextListener 接口的事件监听器后，Web 容器在创建或销毁此此对象时就会产生一个ServletContextEvent 事件对象，然后再执行监听器中的相应事件处理方法，并将 ServletContextEvent 事件对象传递给这些方法。</p><p> <img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110175219.png" alt="image-20201110175219730"></p><p><code>（2）ServletContextAttributeListener</code><br>当一个ServletContext 范围的属性被添加、删除或替换时，ServletContextAttributeListener 接口的实现类会接收到消息。<br>这个接口定义了如下三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletContextAttributeListener</span> <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletContextAttributeEvent scae)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletContextAttributeEvent scae)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletContextAttributeEvent scae)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>（3）“Web应用访问计数器”示例</code></p><p>监听器AppListener初始化读取count.txt文件，初始化count的值，访问CountServlet，CountServlet读取和更改count的值，最后退出时，AppListener将CountServlet变化的count值重新写入count.txt文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch6.ListenerDemo.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Application Lifecycle Listener implementation class AppListener</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AppListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Web应用初始化时，容器调用此方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取 ServletContext 对象</span></span><br><span class="line">ServletContext context = sce.getServletContext();</span><br><span class="line"><span class="comment">// 输出应用初始化日志信息</span></span><br><span class="line">context.log(context.getServletContextName() + <span class="string">"应用开始初始化。"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 从文件中读取计数器的数值</span></span><br><span class="line">BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(context.getResourceAsStream(<span class="string">"/count.txt"</span>)));</span><br><span class="line">String strcount = reader.readLine();</span><br><span class="line"><span class="keyword">if</span> (strcount == <span class="keyword">null</span> || <span class="string">""</span>.equals(strcount)) &#123;</span><br><span class="line">                strcount = <span class="string">"0"</span>;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="keyword">int</span> count = Integer.parseInt(strcount);</span><br><span class="line">reader.close();</span><br><span class="line"><span class="comment">// 把计数器对象保存到 Web 应用范围</span></span><br><span class="line">context.setAttribute(<span class="string">"count"</span>, count);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Web应用停止时，容器调用此方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 获取 ServletContext 对象</span></span><br><span class="line">ServletContext context = sce.getServletContext();</span><br><span class="line"><span class="comment">// 输出应用停止日志信息</span></span><br><span class="line">context.log(context.getServletContextName() + <span class="string">"应用停止。"</span>);</span><br><span class="line"><span class="comment">// 从 Web 应用范围获得计数器对象</span></span><br><span class="line">Integer counter = (Integer) context.getAttribute(<span class="string">"count"</span>);</span><br><span class="line"><span class="keyword">if</span> (counter != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 把计数器的数值写到发布根目录下的count.txt 文件中</span></span><br><span class="line">String filepath = context.getRealPath(<span class="string">"/"</span>) + <span class="string">"/count.txt"</span>;</span><br><span class="line">PrintWriter pw = <span class="keyword">new</span> PrintWriter(filepath);</span><br><span class="line">pw.println(counter.intValue());</span><br><span class="line">pw.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch6.ListenerDemo.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/CountServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CountServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CountServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 设置响应到客户端MIME类型和字符编码方式</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 获取ServletContext对象</span></span><br><span class="line">ServletContext context = <span class="keyword">super</span>.getServletContext();</span><br><span class="line"><span class="comment">// 从ServletContext对象获取count属性存放的计数值</span></span><br><span class="line">Integer count = (Integer) context.getAttribute(<span class="string">"count"</span>);</span><br><span class="line"><span class="keyword">if</span> (count == <span class="keyword">null</span>) &#123;</span><br><span class="line">count = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">count = count + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将更新后的数值存放到ServletContext对象的count属性中</span></span><br><span class="line">context.setAttribute(<span class="string">"count"</span>, count);</span><br><span class="line"><span class="comment">// 获取输出流</span></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line"><span class="comment">// 输出计数信息</span></span><br><span class="line">out.println(<span class="string">"&lt;p&gt;本网站目前访问人数是： "</span> + count + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110181937.png" alt="image-20201110181936226"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110182012.png" alt="image-20201110182012288"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110182900.png" alt="image-20201110182859501"></p><h3 id="3-2-HttpSession-会话监听"><a href="#3-2-HttpSession-会话监听" class="headerlink" title="3.2  HttpSession 会话监听"></a>3.2  HttpSession 会话监听</h3><p><code>（1）HttpSessionListener</code><br>当一个 HttpSession 创建或销毁时，容器都会通知所有的 HttpSessionListener 监听器。<br>HttpSessionListener 接口有如下两个方法：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpSessionListener</span> <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这两个方法都可以接收到一个继承于 java.util.EventObject 的 HttpSessionEvent 对象。<br>可以通过调用 HttpSessionEvent 对象的 getSession 方法来获取当前的 HttpSession。</p><p>以下两种情况下就会发生 sessionDestoryed（会话销毁）事件：<br>① 执行 HttpSession 对象的  invalidate()  方法时，将发生会话销毁。<br>② 如果用户长时间没有访问服务器，超过了会话最大超时时间，服务器就会自动销毁超时的会话。<code>会话超时时间可以在 web.xml 中进行设置，时间单位默认是分钟，并且只能是整数，如果是零或负数，那么会话就永远不会超时。</code></p><p><code>（2）HttpSessionAttributeListener</code><br>HttpSessionAttributeListener 接口和 ServletContextAttributeListener 接口类似，它响应的是 HttpSession 范围属性的添加、删除和替换。<br>HttpSessionAttributeListener 接口有以下方法：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpSessionAttributeListener</span> <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(HttpSessionBindingEvent se)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(HttpSessionBindingEvent se)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(HttpSessionBindingEvent se)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>（3）HttpSessionActivationListener</code><br>当 HttpSession 对象持久化到一个存储设备时，如果绑定到该 HttpSession 对象的对象实例对应的类<code>实现了 HttpSessionActivationListener 接口</code>，Web容器将调用该接口的 <code>sessionWillPassivate</code>方法。</p><p>如果 HttpSession 对象从存储设置中恢复到<code>内存</code>中，Web 容器会调用该接口的<code>sessionDidActivate</code>方法。这两个方法都接收一个 HttpSessionEvent 类型的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpSessionActivationListener</span> <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sessionWillPassivate</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sessionDidActivate</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>（4）HttpSessionBindingListener</code><br>当有属性<code>绑定或者解绑</code>到 HttpSession 上时，HttpSessionBindingListener  监听器会被调用。</p><p>HttpSessionBindingListener 接口中共定义了两个方法 <code>valueBound() 和valueUnbound()</code> ，分别对应<code>数据绑定，和取消绑定</code>两个事件。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpSessionBindingListener</span> <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">valueBound</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">valueUnbound</span><span class="params">(HttpSessionBindingEvent event)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>（5） “统计在线用户信息”示例</code></p><p>AppSessionListener监听用户数，访问<a href="http://localhost:8080/page/ch6/usersOnline.jsp，可以查看在写的用户数。" target="_blank" rel="noopener">http://localhost:8080/page/ch6/usersOnline.jsp，可以查看在写的用户数。</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch6.ListenerDemo2.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppSessionListener</span> <span class="keyword">implements</span> <span class="title">HttpSessionListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AppSessionListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当用户与服务器之间开始 session 时触发该方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">HttpSession session = se.getSession();</span><br><span class="line">ServletContext application = session.getServletContext();</span><br><span class="line"><span class="comment">// 获取session ID</span></span><br><span class="line">String sessionId = session.getId();</span><br><span class="line"><span class="comment">// 如果是一次新的会话</span></span><br><span class="line"><span class="keyword">if</span> (session.isNew()) &#123;</span><br><span class="line">String user = (String) session.getAttribute(<span class="string">"user"</span>);</span><br><span class="line"><span class="comment">// 未登录用户当游客处理</span></span><br><span class="line">user = (user == <span class="keyword">null</span>) ? <span class="string">"未登录游客"</span> : user;</span><br><span class="line">Map&lt;String, String&gt; users = (Map&lt;String, String&gt;) application.getAttribute(<span class="string">"online"</span>);</span><br><span class="line"><span class="keyword">if</span> (users == <span class="keyword">null</span>) &#123;</span><br><span class="line">users = <span class="keyword">new</span> Hashtable&lt;String, String&gt;();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将用户在线信息放入Map中</span></span><br><span class="line">users.put(sessionId, user);</span><br><span class="line">application.setAttribute(<span class="string">"online"</span>, users);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当用户与服务器之间 session 断开时触发该方法</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> </span>&#123;</span><br><span class="line">HttpSession session = se.getSession();</span><br><span class="line">ServletContext application = session.getServletContext();</span><br><span class="line">String sessionId = session.getId();</span><br><span class="line">Map&lt;String, String&gt; users = (Map&lt;String, String&gt;) application.getAttribute(<span class="string">"online"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"---sessionDestroyed1111--- "</span>+users.size());</span><br><span class="line"><span class="keyword">for</span> (String EsessionId : users.keySet()) &#123;</span><br><span class="line">System.out.println(EsessionId+<span class="string">"---"</span>+users.get(EsessionId));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (users != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// 删除该用户的在线信息</span></span><br><span class="line">users.remove(sessionId);</span><br><span class="line">&#125;</span><br><span class="line">application.setAttribute(<span class="string">"online"</span>, users);</span><br><span class="line">System.out.println(<span class="string">"after_remove: "</span>+users.size());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>usersOnline.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;在线用户&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;center&gt;&lt;h2&gt;在线用户信息&lt;/h2&gt;&lt;/center&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;table border=<span class="number">1</span> align=<span class="string">"center"</span> width=<span class="number">50</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">Map&lt;String, String&gt; users = (Map&lt;String, String&gt;) application.getAttribute(<span class="string">"online"</span>);</span><br><span class="line"><span class="keyword">for</span> (String sessionId : users.keySet()) &#123;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;&lt;%=sessionId%&gt;&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;%=users.get(sessionId)%&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;%</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href = "/page/ch6/logout.jsp"&gt;安全退出&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>logout.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;用户退出&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;% session.invalidate(); %&gt;</span><br><span class="line">&lt;p&gt;您已经退出本系统！&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110192535.png" alt="image-20201110192534346"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110192543.png" alt="image-20201110192543859"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110192608.png" alt="image-20201110192607834"></p><h3 id="3-3-Servlet-请求监听"><a href="#3-3-Servlet-请求监听" class="headerlink" title="3.3 Servlet 请求监听"></a>3.3 Servlet 请求监听</h3><p><code>（1）ServletRequestListener</code><br>ServletRequestListener  监听器会对 ServletRequest 的创建和销毁事件进行响应。<br>ServletRequestListener  接口有以下两个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletRequestListener</span> <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>（2）ServletRequestAttributeListener</code><br>当一个 ServletRequest 范围的属性被添加、删除或替换时， ServletRequestAttributeListener 接口会被调用。 ServletRequestAttributeListener 接口提供了如下三个方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletRequestAttributeListener</span> <span class="keyword">extends</span> <span class="title">EventListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attributeAdded</span><span class="params">(ServletRequestAttributeEvent srae)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent srae)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent srae)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>（3）“计算  Servlet Request Lifecycle  时间”示例</code></p><p>testRequest.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;request_lifeCycle&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10000</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">;</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line">This is a request_lifeCycle test!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch6.ListenerDemo3.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Application Lifecycle Listener implementation class RequestStateListener</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestStateListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RequestStateListener</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span>  </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"call requestInitialized() method! "</span>);</span><br><span class="line">ServletRequest servletRequest = sre.getServletRequest();</span><br><span class="line">        servletRequest.setAttribute(<span class="string">"start"</span>, System.nanoTime());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span>  </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"call requestDestroyed() method! "</span>);</span><br><span class="line">    ServletRequest servletRequest = sre.getServletRequest();</span><br><span class="line">        Long start = (Long) servletRequest.getAttribute(<span class="string">"start"</span>);</span><br><span class="line">        Long end = System.nanoTime();</span><br><span class="line">        HttpServletRequest httpServletRequest =</span><br><span class="line">                (HttpServletRequest) servletRequest;</span><br><span class="line">        String uri = httpServletRequest.getRequestURI();</span><br><span class="line">        System.out.println(<span class="string">"time taken to execute "</span> + uri + <span class="string">":"</span>  + ((end - start) / <span class="number">1000</span>) + <span class="string">" microseconds !"</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110194051.png" alt="image-20201110194051053"><br><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110194100.png" alt="image-20201110194100507"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Filter </tag>
            
            <tag> Listener </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EL与JSTL</title>
      <link href="/posts/387025f0.html"/>
      <url>/posts/387025f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-导言"><a href="#1-导言" class="headerlink" title="1.导言"></a>1.导言</h2><ul><li>表达式语言 <code>EL</code>（Expression Language）是 <code>JSP 2.0 的重要特性</code>。 EL 设计成可以轻松地编写免脚本的 JSP 页面，也就是说，页面不使用任何 JSP 声明、表达式或者 scriptlets 。</li><li><code>JSTL</code>（JavaServer Pages Standard Tag Library，<code>JSP 标准标签库</code>）主要提供给 Java Web 开发人员一个标准通用的标签函数库，<code>标签库同时支持 EL 用于获取数据</code>，Web开发人员能够用此标签库取代直接在页面中嵌入 Java 程序的做法，以提高程序的可读性和易维护性。</li></ul><h2 id="2-EL-简介"><a href="#2-EL-简介" class="headerlink" title="2. EL 简介"></a>2. EL 简介</h2><p>EL表达式以<code>&#39;${&#39;开头，并以&#39;}&#39;</code>结束。<br>语法格式为：${expression} 。<br>EL表达式中的常量包括布尔常量、整型常量、字符串常量和NULL常量。</p><p>（1）EL中的标识符<br>EL 的标识符可以由任意的大小写字母、数字和下划线组成。但 EL 的标识符：① 不能以数字开头；② 不能是EL 中的保留字；③ 不能是隐式对象；④ 不能包含单引号、双引号、减号和正斜杠等特殊字符。</p><p>（2）变量与保留关键字<br>EL 表达式中的变量须从 JSP 四大作用域范围中依序进行查找。（ page、request、session 和 application ）<br>以下是 EL 中的保留关键字，不能用作标识符。<br>and、or、not、eq、ne、lt、gt、le、ge、true、false、null、instanceof、empty、div、mod 。</p><p>（3） [ ] 和 . 运算符<br>通过 EL 提供的“[ ]”和“.”运算符可以访问数据。<br>①“.”运算符：EL 表达式可使用点操作符来访问对象的属性。例如 ${object.propertyname} 。<br>②“[ ]”运算符：与点操作符类似，也用于访问对象的属性，属性名须用双引号括起来。<br>③“[ ]”运算符可以访问 Map 对象的 key 关键字的值，例如${map[ “key”]}。</p><h3 id="2-1-EL-的运算符和优先级"><a href="#2-1-EL-的运算符和优先级" class="headerlink" title="2.1 EL 的运算符和优先级"></a>2.1 EL 的运算符和优先级</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108190545.png" alt="image-20201108190545194"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108190552.png" alt="image-20201108190552757"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108190558.png" alt="image-20201108190558314"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108190613.png" alt="image-20201108190613695"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108190631.png" alt="image-20201108190631460"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108190636.png" alt="image-20201108190636818"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108190640.png" alt="image-20201108190640343"></p><h3 id="2-2-EL-隐式对象"><a href="#2-2-EL-隐式对象" class="headerlink" title="2.2 EL 隐式对象"></a>2.2 EL 隐式对象</h3><p>EL为了能够获得Web 应用程序中的相关数据，<code>EL 提供了11个隐式对象，类似于JSP的内置对象</code>。</p><p>在EL的隐式对象中，除 <code>PageContext</code>  是<code>JavaBean</code>对象，对应于<code>javax.servlet.jsp.PageContext</code>类型外，其他的隐式对象都对应于<code>java.util.Map</code>类型。</p><p>这些隐式对象可分为<code>页面上下文对象、访问作用域范围的隐式对象和访问环境信息的隐式对象 3 种</code>。如表 5-5 所示。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108203735.png" alt="image-20201108203735125"></p><h4 id="2-2-1-PageContext对象"><a href="#2-2-1-PageContext对象" class="headerlink" title="2.2.1 PageContext对象"></a>2.2.1 PageContext对象</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;PageContext隐式对象的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">PageContext隐式对象的使用&lt;br&gt;&lt;hr&gt;</span><br><span class="line">获取请求URI：$&#123;pageContext.request.requestURI &#125;&lt;br&gt;</span><br><span class="line">获取请求URL：$&#123;pageContext.request.requestURL &#125;&lt;br&gt;</span><br><span class="line">获取响应的内容类型：$&#123;pageContext.response.contentType &#125;&lt;br&gt;</span><br><span class="line">获取服务器信息：$&#123;pageContext.servletContext.serverInfo &#125;&lt;br&gt;</span><br><span class="line">获取Servlet注册名：$&#123;pageContext.servletConfig.servletName &#125;&lt;br&gt;</span><br><span class="line">获取session创建时间：$&#123;pageContext.session.creationTime &#125;&lt;br&gt;</span><br><span class="line">获取session会话最长空闲时间：$&#123;pageContext.session.maxInactiveInterval &#125;&lt;br&gt;</span><br><span class="line">获取session会话的id：$&#123;pageContext.session.id &#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108201601.png" alt="image-20201108201600835"></p><h4 id="2-2-2-作用域范围隐式对象（pageScope—requestScope—sessionScope—applicationScope）"><a href="#2-2-2-作用域范围隐式对象（pageScope—requestScope—sessionScope—applicationScope）" class="headerlink" title="2.2.2 作用域范围隐式对象（pageScope—requestScope—sessionScope—applicationScope）"></a>2.2.2 作用域范围隐式对象（pageScope—requestScope—sessionScope—applicationScope）</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;作用域范围隐式对象的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;% pageContext.setAttribute(<span class="string">"cityName"</span>, <span class="string">"Soochow"</span>); %&gt; </span><br><span class="line">&lt;% request.setAttribute(<span class="string">"university"</span>, <span class="string">"华东师范大学"</span>); %&gt;</span><br><span class="line">&lt;% session.setAttribute(<span class="string">"bookName"</span>, <span class="string">"《Android应用开发实践教程》"</span>); %&gt;</span><br><span class="line">&lt;% application.setAttribute(<span class="string">"cityName"</span>, <span class="string">"New York"</span>); %&gt;</span><br><span class="line">&lt;p&gt;pageScope隐式对象中key为"cityName"的值：$&#123;pageScope.cityName &#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;requestScope隐式对象中key为"university"的值：$&#123;requestScope.university &#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;session隐式对象中key为"bookName"的值：$&#123;sessionScope.bookName &#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;applicationScope隐式对象中key为"cityName"的值：$&#123;applicationScope.cityName &#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;表达式\$&#123;cityName&#125;的值：$&#123;pageScope.cityName&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108202139.png" alt="image-20201108202139352"></p><h4 id="2-2-3-param和paramValues对象"><a href="#2-2-3-param和paramValues对象" class="headerlink" title="2.2.3 param和paramValues对象"></a>2.2.3 param和paramValues对象</h4><p>访问param.jsp，提交到param_result.jsp</p><p>param.jsp：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;param和paramValues隐式对象的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;个人信息&lt;/h2&gt;</span><br><span class="line">&lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/page/ch5/param_result.jsp"</span>&gt;</span><br><span class="line">&lt;p&gt;姓名:&lt;input type="text" name="user" /&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;爱好:&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"swim"</span>&gt;游泳</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"pingpang"</span>&gt;乒乓球</span><br><span class="line">&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobby"</span> value=<span class="string">"music"</span>&gt;音乐</span><br><span class="line">&lt;input type="checkbox" name="hobby" value="Go"&gt;围棋&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;input type="submit" value="提交"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>param_result.jsp：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;个人信息&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;姓名:$&#123;param.user&#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;爱好:$&#123;paramValues.hobby[0]&#125;&amp;nbsp;$&#123;paramValues.hobby[1]&#125;&amp;nbsp;$&#123;paramValues.hobby[2]&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108202347.png" alt="image-20201108202347320"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108202648.png" alt="image-20201108202648939"></p><h4 id="2-2-4-Cookie对象"><a href="#2-2-4-Cookie对象" class="headerlink" title="2.2.4 Cookie对象"></a>2.2.4 Cookie对象</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Cookie隐式对象的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;Cookie隐式对象的使用&lt;/h3&gt;</span><br><span class="line">&lt;p&gt;获取名为JSESSIONID的Cookie对象：$&#123;cookie.JSESSIONID &#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;获取名为JSESSIONID的Cookie对象的名称：$&#123;cookie.JSESSIONID.name &#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;获取名为JSESSIONID的Cookie对象的值：$&#123;cookie.JSESSIONID.value &#125;&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%</span><br><span class="line">Cookie cookie2 = <span class="keyword">new</span> Cookie(<span class="string">"username"</span>, <span class="string">"admin"</span>);</span><br><span class="line">response.addCookie(cookie2);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;p&gt;获取名为username的Cookie对象：$&#123;cookie.username &#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;获取名为username的Cookie对象的名称：$&#123;cookie.username.name &#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;获取名为username的Cookie对象的值：$&#123;cookie.username.value &#125;&lt;/p&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;%</span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="keyword">if</span> (cookies != <span class="keyword">null</span>)</span><br><span class="line"><span class="keyword">for</span> (Cookie c : cookies) &#123;</span><br><span class="line">out.println(c);</span><br><span class="line">out.println(c.getName());</span><br><span class="line">out.println(c.getValue());</span><br><span class="line">out.println(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><blockquote><p>设置Cookie请看：<a href="https://www.bithachi.cn/posts/f768f9d3.html">https://www.bithachi.cn/posts/f768f9d3.html</a></p></blockquote><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108203041.png" alt="image-20201108203041348"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108202927.png" alt="image-20201108202927192"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108203207.png" alt="image-20201108203207829"></p><h4 id="2-2-5-header对象"><a href="#2-2-5-header对象" class="headerlink" title="2.2.5  header对象"></a>2.2.5  header对象</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;header隐式对象的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;header隐式对象的使用&lt;/h3&gt;</span><br><span class="line">&lt;p&gt;获取请求头Host的值：$&#123;header.host &#125;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;获取请求头的connection属性（是否需要持久连接）：$&#123;header.connection &#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108203339.png" alt="image-20201108203339081"></p><h4 id="2-2-6-initParam对象"><a href="#2-2-6-initParam对象" class="headerlink" title="2.2..6 initParam对象"></a>2.2..6 initParam对象</h4><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>driverClassName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>com.mysql.jdbc.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;initParam隐式对象的使用&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;initParam隐式对象的使用&lt;/h3&gt;</span><br><span class="line">&lt;p&gt;driverClassName的值：$&#123;initParam.driverClassName &#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108205006.png" alt="image-20201108205006614"></p><h3 id="2-3-定义和使用-EL-函数"><a href="#2-3-定义和使用-EL-函数" class="headerlink" title="2.3. 定义和使用 EL 函数"></a>2.3. 定义和使用 EL 函数</h3><p>EL 自定义函数就是提供一种语法允许在 EL 中调用某个Java类的静态方法。<br>EL自定义函数的开发与应用包括以下3个步骤：<br>（1）编写一个Java类，并在该类中编写公用的静态方法，用于实现自定义EL函数的具体功能。<br>（2）编写标签库描述文件（扩展名为*.tld），对函数进行声明，保存到Web应用的WEB-INF文件夹下。<br>（3）在JSP页面中引用标签库，并调用定义的EL函数，实现相应的功能。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108210544.png" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"</span></span></span><br><span class="line"><span class="tag"><span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">short-name</span>&gt;</span>customEL<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uri</span>&gt;</span>http://book.ch5.CustomEL/cFilter<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>HTML过滤<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>cfilter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function-class</span>&gt;</span>book.ch5.CustomEL<span class="tag">&lt;/<span class="name">function-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">function-signature</span>&gt;</span>java.lang.String cFilter( java.lang.String )<span class="tag">&lt;/<span class="name">function-signature</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch5;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomEL</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">cFilter</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (message == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">char</span> content[] = <span class="keyword">new</span> <span class="keyword">char</span>[message.length()];</span><br><span class="line">        message.getChars(<span class="number">0</span>, message.length(), content, <span class="number">0</span>);</span><br><span class="line">        StringBuilder result = <span class="keyword">new</span> StringBuilder(content.length + <span class="number">50</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; content.length; i++) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (content[i]) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&lt;'</span>:</span><br><span class="line">                    result.append(<span class="string">"&amp;lt;"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&gt;'</span>:</span><br><span class="line">                    result.append(<span class="string">"&amp;gt;"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'&amp;'</span>:</span><br><span class="line">                    result.append(<span class="string">"&amp;amp;"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">'"'</span>:</span><br><span class="line">                    result.append(<span class="string">"&amp;quot;"</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                    result.append(content[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">"mlab"</span> uri=<span class="string">"http://book.ch5.CustomEL/cFilter"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;EL自定义函数示例&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;白日依山尽，黄河入海流&lt;/h3&gt;</span><br><span class="line">$&#123;mlab:cfilter(<span class="string">"&lt;h3&gt;白日依山尽，黄河入海流&lt;/h3&gt;"</span>) &#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108210630.png" alt="image-20201108210630803"></p><h2 id="3-JSTL-简介"><a href="#3-JSTL-简介" class="headerlink" title="3. JSTL 简介"></a>3. JSTL 简介</h2><p>JSP 标准标签库（JSTL）是一个 JSP 标签集合，它<code>封装了 JSP 应用的通用核心功能</code>。<br>JSTL 支持通用的、结构化的任务，比如迭代，条件判断，XML 文档操作，国际化标签，SQL 标签。<br>除了这些，它还提供了一个框架来使用集成JSTL的自定义标签。</p><p>根据JSTL标签所提供的功能，可以将其分为5个类别。</p><ul><li><p>核心标签</p></li><li><p>格式化标签</p></li><li><p>SQL标签</p></li><li><p>XML标签</p></li><li><p>JSTL函数</p></li></ul><h3 id="3-1-核心标签库"><a href="#3-1-核心标签库" class="headerlink" title="3.1 核心标签库"></a>3.1 核心标签库</h3><p>JSTL 核心标签库包含 Web 应用中最常使用的标签，是 JSTL 中比较重要的标签库。核心标签库的标签按功能可分为4类：<code>表达式标签、条件标签、迭代标签、URL相关标签。</code><br>如表 5-6 所示。引用核心标签库的语法如下：<br><code>&lt;%@ taglib prefix=&quot;c&quot;  uri=&quot;http://java.sun.com/jsp/jstl/core&quot; %&gt;</code></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108211418.png" alt="image-20201108211418888"></p><blockquote><p>更多用法：<a href="https://www.runoob.com/jsp/jsp-jstl.html" target="_blank" rel="noopener">https://www.runoob.com/jsp/jsp-jstl.html</a></p></blockquote><h3 id="3-2-lt-c-out-gt-输出标签、-lt-c-set-gt-变量设置标签、-lt-c-remove-gt-变量移除标签"><a href="#3-2-lt-c-out-gt-输出标签、-lt-c-set-gt-变量设置标签、-lt-c-remove-gt-变量移除标签" class="headerlink" title="3.2 &lt;c:out&gt;输出标签、&lt;c:set&gt;变量设置标签、&lt;c:remove&gt;变量移除标签"></a>3.2 &lt;c:out&gt;输出标签、&lt;c:set&gt;变量设置标签、&lt;c:remove&gt;变量移除标签</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Hello,JSTL&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;c:set var="mystr" value="Hello，我们开始学习JSTL！"&gt;&lt;/c:set&gt;</span><br><span class="line">&lt;c:out value="$&#123;mystr&#125;"&gt;&lt;/c:out&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108223655.png" alt="image-20201108223655828"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;使用 &amp;lt;c:remove&amp;gt; 标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"user"</span> value=<span class="string">"一剑冲天"</span> scope=<span class="string">"session"</span> /&gt;</span><br><span class="line">session中的user：&lt;c:out value=<span class="string">"$&#123;user&#125;"</span> /&gt;</span><br><span class="line">&lt;br&gt;&lt;hr&gt;</span><br><span class="line">&lt;c:remove <span class="keyword">var</span>=<span class="string">"user"</span> scope=<span class="string">"session"</span> /&gt;</span><br><span class="line">从session中移除user再访问：&lt;c:out value=<span class="string">"$&#123;user&#125;"</span> /&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108223821.png" alt="image-20201108223821153"></p><h3 id="3-3-lt-c-catch-gt-捕获异常标签"><a href="#3-3-lt-c-catch-gt-捕获异常标签" class="headerlink" title="3.3 &lt;c:catch&gt; 捕获异常标签"></a>3.3 &lt;c:catch&gt; 捕获异常标签</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;使用 &amp;lt;c:catch&amp;gt; 标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:catch var="exception1"&gt;&lt;%=169/0%&gt;&lt;/c:catch&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;exception1&#125;"</span> /&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;exception1.message&#125;"</span> /&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108224113.png" alt="image-20201108224113127"></p><h3 id="3-4-lt-c-if-gt-、-lt-c-choose-gt-、-lt-c-when-gt-、-lt-c-otherwise-gt"><a href="#3-4-lt-c-if-gt-、-lt-c-choose-gt-、-lt-c-when-gt-、-lt-c-otherwise-gt" class="headerlink" title="3.4 &lt;c:if&gt;、 &lt;c:choose&gt;、 &lt;c:when&gt;、 &lt;c:otherwise&gt;"></a>3.4 &lt;c:if&gt;、 &lt;c:choose&gt;、 &lt;c:when&gt;、 &lt;c:otherwise&gt;</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;使用 &amp;lt;c:choose&amp;gt; 标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"user1"</span> value=<span class="string">"一剑冲天"</span> scope=<span class="string">"session"</span> /&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;not empty sessionScope.user1&#125;"</span>&gt;</span><br><span class="line">您好，$&#123;sessionScope.user1&#125;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"user"</span> value=<span class="string">"admin222"</span> scope=<span class="string">"session"</span> /&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"actor1"</span> value=<span class="string">"admin1"</span> scope=<span class="string">"session"</span> /&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"actor2"</span> value=<span class="string">"admin2"</span> scope=<span class="string">"session"</span> /&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">&lt;c:when test="$&#123;sessionScope.user eq sessionScope.actor1&#125;"&gt;欢迎您，一级管理员！&lt;/c:when&gt;</span><br><span class="line">&lt;c:when test="$&#123;sessionScope.user eq sessionScope.actor2&#125;"&gt;欢迎您，二级管理员！&lt;/c:when&gt;</span><br><span class="line">&lt;c:otherwise&gt;对不起，您只是游客，无权访问该资源！&lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108224602.png" alt="image-20201108224601966"></p><h3 id="3-5-lt-c-forEach-gt-迭代标签"><a href="#3-5-lt-c-forEach-gt-迭代标签" class="headerlink" title="3.5  &lt;c:forEach&gt;迭代标签"></a>3.5  &lt;c:forEach&gt;迭代标签</h3><p>&lt;c:forEach&gt;迭代标签标签有如下属性：</p><table><thead><tr><th align="left"><strong>属性</strong></th><th align="left"><strong>描述</strong></th><th align="left"><strong>是否必要</strong></th><th align="left"><strong>默认值</strong></th></tr></thead><tbody><tr><td align="left">items</td><td align="left">要被循环的信息</td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left">begin</td><td align="left">开始的元素（0=第一个元素，1=第二个元素）</td><td align="left">否</td><td align="left">0</td></tr><tr><td align="left">end</td><td align="left">最后一个元素（0=第一个元素，1=第二个元素）</td><td align="left">否</td><td align="left">Last element</td></tr><tr><td align="left">step</td><td align="left">每一次迭代的步长</td><td align="left">否</td><td align="left">1</td></tr><tr><td align="left">var</td><td align="left">代表当前条目的变量名称</td><td align="left">否</td><td align="left">无</td></tr><tr><td align="left">varStatus</td><td align="left">代表循环状态的变量名称</td><td align="left">否</td><td align="left">无</td></tr></tbody></table><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"java.util.*"</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;使用 &amp;lt;c:forEach&amp;gt; 标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    List&lt;String&gt; bookList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">bookList.add(<span class="string">"《Android应用开发实践教程》"</span>);</span><br><span class="line">bookList.add(<span class="string">"《Web应用开发》"</span>);</span><br><span class="line">bookList.add(<span class="string">"《软件项目管理》"</span>);</span><br><span class="line">bookList.add(<span class="string">"《iOS程序设计》"</span>);</span><br><span class="line">session.setAttribute(<span class="string">"bookList"</span>, bookList);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">"$&#123;sessionScope.bookList&#125;"</span> <span class="keyword">var</span>=<span class="string">"book"</span> varStatus=<span class="string">"bookvst"</span>&gt;</span><br><span class="line">&lt;p&gt;图书序号：$&#123;bookvst.index+1&#125;，图书名称：$&#123;book&#125;&lt;/p&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108224913.png" alt="image-20201108224912996"></p><h3 id="3-6-lt-c-import-gt"><a href="#3-6-lt-c-import-gt" class="headerlink" title="3.6 &lt;c:import&gt;"></a>3.6 &lt;c:import&gt;</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;使用 &amp;lt;c:import&amp;gt; 标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:<span class="keyword">import</span> url=<span class="string">"navigation.jsp"</span> /&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%--navigation.jsp--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;电影天堂&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;font color="blue"&gt;&lt;b&gt;最新影片   | 经典影片  | 国内电影   | 欧美电影   | 欧美电视   | 最新综艺&lt;/b&gt;&lt;/font&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108225136.png" alt="image-20201108225136503"></p><h3 id="3-7-lt-c-url-gt-、-lt-c-set-gt-、-lt-c-remove-gt"><a href="#3-7-lt-c-url-gt-、-lt-c-set-gt-、-lt-c-remove-gt" class="headerlink" title="3.7 &lt;c:url&gt;、 &lt;c:set&gt;、 &lt;c:remove&gt;"></a>3.7 &lt;c:url&gt;、 &lt;c:set&gt;、 &lt;c:remove&gt;</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- url_test.jsp --%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;使用 &amp;lt;c:url&amp;gt; 标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:url <span class="keyword">var</span>=<span class="string">"path"</span> value=<span class="string">"navigation.jsp"</span> scope=<span class="string">"page"</span> /&gt;</span><br><span class="line">&lt;a href="$&#123;pageScope.path&#125;"&gt;电影天堂首页&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108225450.png" alt="image-20201108225450128"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- redirect_test.jsp --%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;使用 &amp;lt;c:redirect&amp;gt; 标签&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:redirect url=<span class="string">"main.jsp"</span>&gt;</span><br><span class="line">&lt;c:param name=<span class="string">"user"</span> value=<span class="string">"诗仙李白"</span> /&gt;</span><br><span class="line">&lt;/c:redirect&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;%-- main.jsp --%&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;重定向页面并传递参数&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;原来你是$&#123;param.user&#125;&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108225751.png" alt="image-20201108225751618"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
            <tag> EL </tag>
            
            <tag> JSTL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jsp入门篇</title>
      <link href="/posts/7a8cb09f.html"/>
      <url>/posts/7a8cb09f.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-JSP简介"><a href="#1-JSP简介" class="headerlink" title="1. JSP简介"></a>1. JSP简介</h2><p>JSP 是 Servlet的扩展，其目的是简化建立和管理动态页面的工作。JSP 和 Servlet 在本质上是同一种技术，Servlet 是 JSP 的早期版本，JSP 是 Servlet 的另外一种表现形式。</p><p>JSP（Java Server Pages），是一种<code>动态页面开发技术</code>，其根本是一个<code>简化的 Servlet 设计</code>，它是由 Sun 公司倡导（ Sun 公司已被甲骨文收购）、许多公司参与一起建立的一种动态网页技术标准。<code>JSP 技术是在传统的网页 HTML 文件中插入 Java 程序段（ Scriptlet ）和 JSP 标记（tag），从而形成 JSP 文件。</code></p><p>JSP 的主要目的是将表示逻辑从 Servlet 中分离出来。<code>Java Servlet 是 JSP 的技术基础</code>，而且大型的 Web 应用程序的开发需要Java Servlet 和 JSP 配合才能完成。用 JSP 开发的 Web 应用是跨平台的，既能在Linux下运行，也能在其他操作系统上运行。</p><h2 id="2-JSP生命周期"><a href="#2-JSP生命周期" class="headerlink" title="2. JSP生命周期"></a>2. JSP生命周期</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108162915.png" alt="image-20201108162915852"></p><p>JSP生命周期就是从创建到销毁的整个过程，类似于servlet生命周期，区别在于JSP生命周期还包括将JSP文件编译成servlet。</p><p>以下是JSP生命周期中所走过的几个阶段：</p><ul><li><p><strong>编译阶段：</strong></p><p>servlet容器编译servlet源文件，生成servlet类</p></li><li><p><strong>初始化阶段：</strong></p><p>加载与JSP对应的servlet类，创建其实例，并调用它的初始化方法</p></li><li><p><strong>执行阶段：</strong></p><p>调用与JSP对应的servlet实例的服务方法</p></li><li><p><strong>销毁阶段：</strong></p><p>调用与JSP对应的servlet实例的销毁方法，然后销毁servlet实例</p></li></ul><p>很明显，JSP生命周期的四个主要阶段和servlet生命周期非常相似，下面给出图示：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108163029.png" alt="image-20201108163029221"></p><h3 id="2-1-JSP编译"><a href="#2-1-JSP编译" class="headerlink" title="2.1 JSP编译"></a>2.1 JSP编译</h3><p>当浏览器请求JSP页面时，JSP引擎会首先去检查是否需要编译这个文件。如果这个文件没有被编译过，或者在上次编译后被更改过，则编译这个JSP文件。</p><p>编译的过程包括三个步骤：</p><ul><li>解析JSP文件。</li><li>将JSP文件转为servlet。</li><li>编译servlet。</li></ul><h3 id="2-2-JSP初始化"><a href="#2-2-JSP初始化" class="headerlink" title="2.2 JSP初始化"></a>2.2 JSP初始化</h3><p>容器载入JSP文件后，它会在为请求提供任何服务前调用jspInit()方法。如果您需要执行自定义的JSP初始化任务，复写jspInit()方法就行了，就像下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.jsp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JspPage</span> <span class="keyword">extends</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jspInit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jspDestroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般来讲程序只初始化一次，servlet也是如此。通常情况下您可以在jspInit()方法中初始化数据库连接、打开文件和创建查询表。</p><h3 id="2-3-JSP执行"><a href="#2-3-JSP执行" class="headerlink" title="2.3  JSP执行"></a>2.3  JSP执行</h3><p>这一阶段描述了JSP生命周期中一切与请求相关的交互行为，直到被销毁。</p><p>当JSP网页完成初始化后，JSP引擎将会调用_jspService()方法。</p><p>_jspService()方法需要一个HttpServletRequest对象和一个HttpServletResponse对象作为它的参数，就像下面这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.jsp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpJspPage</span> <span class="keyword">extends</span> <span class="title">JspPage</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>_jspService()方法在每个request中被调用一次并且负责产生与之相对应的response，并且它还负责产生所有7个HTTP方法的回应，比如GET、POST、DELETE等等。</p><h3 id="2-4-JSP清理"><a href="#2-4-JSP清理" class="headerlink" title="2.4 JSP清理"></a>2.4 JSP清理</h3><p>JSP生命周期的销毁阶段描述了当一个JSP网页从容器中被移除时所发生的一切。</p><p>jspDestroy()方法在JSP中等价于servlet中的销毁方法。当您需要执行任何清理工作时复写jspDestroy()方法，比如释放数据库连接或者关闭文件夹等等。</p><p>jspDestroy()方法的格式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.jsp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.Servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JspPage</span> <span class="keyword">extends</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jspInit</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">jspDestroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-生命周期简单案例"><a href="#2-5-生命周期简单案例" class="headerlink" title="2.5 生命周期简单案例"></a>2.5 生命周期简单案例</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;life.jsp&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> initVar=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> serviceVar=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> destroyVar=<span class="number">0</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jspInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        initVar++;</span><br><span class="line">        System.out.println(<span class="string">"jspInit(): JSP被初始化了"</span>+initVar+<span class="string">"次"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jspDestroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        destroyVar++;</span><br><span class="line">        System.out.println(<span class="string">"jspDestroy(): JSP被销毁了"</span>+destroyVar+<span class="string">"次"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    serviceVar++;</span><br><span class="line">    System.out.println(<span class="string">"_jspService(): JSP共响应了"</span>+serviceVar+<span class="string">"次请求"</span>);</span><br><span class="line"></span><br><span class="line">    String content1=<span class="string">"初始化次数 : "</span>+initVar;</span><br><span class="line">    String content2=<span class="string">"响应客户请求次数 : "</span>+serviceVar;</span><br><span class="line">    String content3=<span class="string">"销毁次数 : "</span>+destroyVar;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;h1&gt;JSP 测试实例&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;%=content1 %&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;%=content2 %&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;%=content3 %&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108164048.png" alt="image-20201108164048215"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108164231.png" alt="image-20201108164231293"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108164302.png" alt="image-20201108164302057"></p><h2 id="3-JSP-指令"><a href="#3-JSP-指令" class="headerlink" title="3. JSP 指令"></a>3. JSP 指令</h2><p><code>JSP 指令用来设置整个 JSP 页面相关的属性，如网页的编码方式和脚本语言。</code></p><p>JSP指令是被服务器解释并执行的，不会产生任何内容输出到网页中。也就是说，指令标识对于客户端浏览器是不可见的。<br>语法格式如下：<code>&lt;%@  指令名 attribute1=&quot;value1&quot;  attribute2=&quot;value2&quot;……%&gt;</code></p><p>指令可以有很多个属性，它们以键值对的形式存在，并用逗号隔开。例如：<br><code>&lt;%@ page language=“java&quot;  contentType=&quot;text/html; charset=UTF-8&quot;   pageEncoding=&quot;UTF-8&quot; %&gt;</code></p><p><code>指令名：用于指定指令名称，在JSP中包含page、include和taglib 3条指令。</code></p><p><code>属性：在一个指令中，可以设置多个属性。</code></p><p> JSP中的三种指令标签：</p><table><thead><tr><th align="left"><strong>指令</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">&lt;%@ page … %&gt;</td><td align="left">定义网页依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><tr><td align="left">&lt;%@ include … %&gt;</td><td align="left">包含其他文件</td></tr><tr><td align="left">&lt;%@ taglib … %&gt;</td><td align="left">引入标签库的定义</td></tr></tbody></table><h3 id="3-1-page指令"><a href="#3-1-page指令" class="headerlink" title="3.1 page指令"></a>3.1 page指令</h3><p>下表列出与Page指令相关的属性：</p><table><thead><tr><th align="left"><strong>属性</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">buffer</td><td align="left">指定out对象使用缓冲区的大小</td></tr><tr><td align="left">autoFlush</td><td align="left">控制out对象的 缓存区</td></tr><tr><td align="left">contentType</td><td align="left">指定当前JSP页面的MIME类型和字符编码</td></tr><tr><td align="left">errorPage</td><td align="left">指定当JSP页面发生异常时需要转向的错误处理页面</td></tr><tr><td align="left">isErrorPage</td><td align="left">指定当前页面是否可以作为另一个JSP页面的错误处理页面</td></tr><tr><td align="left">extends</td><td align="left">指定servlet从哪一个类继承</td></tr><tr><td align="left">import</td><td align="left">导入要使用的Java类</td></tr><tr><td align="left">info</td><td align="left">定义JSP页面的描述信息</td></tr><tr><td align="left">isThreadSafe</td><td align="left">指定对JSP页面的访问是否为线程安全</td></tr><tr><td align="left">language</td><td align="left">定义JSP页面所用的脚本语言，默认是Java</td></tr><tr><td align="left">session</td><td align="left">指定JSP页面是否使用session</td></tr><tr><td align="left">isELIgnored</td><td align="left">指定是否执行EL表达式</td></tr><tr><td align="left">isScriptingEnabled</td><td align="left">确定脚本元素能否被使用</td></tr></tbody></table><h3 id="3-2-Include指令"><a href="#3-2-Include指令" class="headerlink" title="3.2 Include指令"></a>3.2 Include指令</h3><p>JSP可以通过include指令来包含其他文件。被包含的文件可以是JSP文件、HTML文件或文本文件。包含的文件就好像是该JSP文件的一部分，会被同时编译执行。</p><p>Include指令的语法格式如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ include file=<span class="string">"文件相对 url 地址"</span> %&gt;</span><br></pre></td></tr></table></figure><p><strong>include</strong> 指令中的文件名实际上是一个相对的 URL 地址。</p><p>如果您没有给文件关联一个路径，JSP编译器默认在当前路径下寻找。</p><p>等价的XML语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:directive.include</span> <span class="attr">file</span>=<span class="string">"文件相对 url 地址"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-Taglib指令"><a href="#3-3-Taglib指令" class="headerlink" title="3.3  Taglib指令"></a>3.3  Taglib指令</h3><p>JSP API允许用户自定义标签，一个自定义标签库就是自定义标签的集合。</p><p>Taglib指令引入一个自定义标签集合的定义，包括库路径、自定义标签。</p><p>Taglib指令的语法：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">"uri"</span> prefix=<span class="string">"prefixOfTag"</span> %&gt;</span><br></pre></td></tr></table></figure><p>uri属性确定标签库的位置，prefix属性指定标签库的前缀。</p><p>等价的XML语法：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">jsp:directive.taglib</span> <span class="attr">uri</span>=<span class="string">"uri"</span> <span class="attr">prefix</span>=<span class="string">"prefixOfTag"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h2 id="4-JSP脚本"><a href="#4-JSP脚本" class="headerlink" title="4. JSP脚本"></a>4. JSP脚本</h2><p>JSP脚本元素是指嵌套在&lt;%和%&gt;之中的一条或多条Java程序代码。<br>JSP脚本元素可以将Java代码嵌入到HTML页面中。<br>JSP脚本元素主要包含如下3种类型：<code>JSP程序段（JSP Scriplets）、JSP表达式和JSP声明。</code></p><h3 id="4-1-JSP程序段（JSP-Scriplets）"><a href="#4-1-JSP程序段（JSP-Scriplets）" class="headerlink" title="4.1  JSP程序段（JSP Scriplets）"></a>4.1  JSP程序段（JSP Scriplets）</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108165330.png" alt="image-20201108165330178"></p><h3 id="4-2-JSP表达式"><a href="#4-2-JSP表达式" class="headerlink" title="4.2 JSP表达式"></a>4.2 JSP表达式</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108165401.png" alt="image-20201108165401448"></p><h3 id="4-3-JSP声明"><a href="#4-3-JSP声明" class="headerlink" title="4.3 JSP声明"></a>4.3 JSP声明</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108165421.png" alt="image-20201108165421707"></p><h3 id="4-4-JSP-注释"><a href="#4-4-JSP-注释" class="headerlink" title="4.4 JSP 注释"></a>4.4 JSP 注释</h3><p>JSP注释的语法格式为：<code>&lt;%-- 注释信息 --%&gt;</code><br>服务器在将JSP页面编译成Servlet程序时，会忽略JSP页面中被注释的内容，不会将注释信息发送到客户端。</p><h2 id="5-JSP-动作元素"><a href="#5-JSP-动作元素" class="headerlink" title="5. JSP 动作元素"></a>5. JSP 动作元素</h2><p>JSP 标准动作（Standard Action）元素是 <code>JSP 规范所定义的一种XML标签，用来运行特定动作</code>。<br>使用JSP标准动作元素的优点是：<code>可以减少JSP所包含的Java程序代码。</code></p><p>动作元素基本上都是预定义的函数，JSP规范定义了一系列的标准动作，它用JSP作为前缀，可用的标准动作元素如下：</p><table><thead><tr><th align="left">语法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">jsp:include</td><td align="left">在页面被请求的时候引入一个文件。</td></tr><tr><td align="left">jsp:useBean</td><td align="left">寻找或者实例化一个JavaBean。</td></tr><tr><td align="left">jsp:setProperty</td><td align="left">设置JavaBean的属性。</td></tr><tr><td align="left">jsp:getProperty</td><td align="left">输出某个JavaBean的属性。</td></tr><tr><td align="left">jsp:forward</td><td align="left">把请求转到一个新的页面。</td></tr><tr><td align="left">jsp:plugin</td><td align="left">根据浏览器类型为Java插件生成OBJECT或EMBED标记。</td></tr><tr><td align="left">jsp:element</td><td align="left">定义动态XML元素</td></tr><tr><td align="left">jsp:attribute</td><td align="left">设置动态定义的XML元素属性。</td></tr><tr><td align="left">jsp:body</td><td align="left">设置动态定义的XML元素内容。</td></tr><tr><td align="left">jsp:text</td><td align="left">在JSP页面和文档中使用写入文本的模板</td></tr></tbody></table><h3 id="5-1-常见的属性"><a href="#5-1-常见的属性" class="headerlink" title="5.1 常见的属性"></a>5.1 常见的属性</h3><p>所有的动作要素都有两个属性：id属性和scope属性。</p><ul><li><p><strong>id属性：</strong></p><p>id属性是动作元素的唯一标识，可以在JSP页面中引用。动作元素创建的id值可以通过PageContext来调用。</p></li></ul><ul><li><p><strong>scope属性：</strong></p><p>该属性用于识别动作元素的生命周期。 id属性和scope属性有直接关系，scope属性定义了相关联id对象的寿命。</p><p> scope属性有四个可能的值：<code>(a) page, (b)request, (c)session,  (d) application。</code></p></li></ul><h3 id="5-2-简单案例"><a href="#5-2-简单案例" class="headerlink" title="5.2 简单案例"></a>5.2 简单案例</h3><h4 id="5-2-1-jsp-include动作元素"><a href="#5-2-1-jsp-include动作元素" class="headerlink" title="5.2.1 jsp:include动作元素"></a>5.2.1 <a href="jsp:include">jsp:include</a>动作元素</h4><p><a href="jsp:include">jsp:include</a>动作元素用来包含静态和动态的文件。该动作把指定文件插入正在生成的页面。语法格式如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">"相对 URL 地址"</span> flush=<span class="string">"true"</span> /&gt;</span><br></pre></td></tr></table></figure><p>　前面已经介绍过include指令，它是在JSP文件被转换成Servlet的时候引入文件，而这里的jsp:include动作不同，插入文件的时间是在页面被请求的时候。</p><p>以下是include动作相关的属性列表。</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">page</td><td align="left">包含在页面中的相对URL地址。</td></tr><tr><td align="left">flush</td><td align="left">布尔属性，定义在包含资源前是否刷新缓存区。</td></tr></tbody></table><p>  <strong>实例:</strong></p><p>以下我们定义了两个文件 <strong>date.jsp</strong> 和 <strong>main.jsp</strong>，代码如下所示：</p><p>date.jsp文件代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">   今天的日期是: &lt;%= (<span class="keyword">new</span> java.util.Date()).toLocaleString()%&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>main.jsp文件代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;WWW.bithachi.cn&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;include 动作实例&lt;/h2&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"date.jsp"</span> flush=<span class="string">"true"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108171619.png" alt="image-20201108171619093"></p><h4 id="5-2-2-jsp-useBean动作元素"><a href="#5-2-2-jsp-useBean动作元素" class="headerlink" title="5.2.2 jsp:useBean动作元素"></a>5.2.2 <a href="jsp:useBean">jsp:useBean</a>动作元素</h4><p><strong>jsp:useBean</strong> 动作用来<code>加载一个将在JSP页面中使用的JavaBean</code>。</p><p>这个功能非常有用，因为它使得我们可以发挥 Java 组件复用的优势。</p><p>jsp:useBean动作最简单的语法为：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"name"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"package.class"</span> /&gt;</span><br></pre></td></tr></table></figure><p>在类载入后，我们既可以通过 jsp:setProperty 和 jsp:getProperty 动作来修改和检索bean的属性。</p><p>以下是useBean动作相关的属性列表。</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">class</td><td align="left">指定Bean的完整包名。</td></tr><tr><td align="left">type</td><td align="left">指定将引用该对象变量的类型。</td></tr><tr><td align="left">beanName</td><td align="left">通过 java.beans.Beans 的 instantiate() 方法指定Bean的名字。</td></tr></tbody></table><p>在给出具体实例前，让我们先来看下 jsp:setProperty 和 jsp:getProperty 动作元素：    </p><h4 id="5-2-3-jsp-setProperty动作元素"><a href="#5-2-3-jsp-setProperty动作元素" class="headerlink" title="5.2.3 jsp:setProperty动作元素"></a>5.2.3 <a href="jsp:setProperty">jsp:setProperty</a>动作元素</h4><p>jsp:setProperty用来<code>设置已经实例化的Bean对象的属性</code>，有两种用法。首先，你可以在jsp:useBean元素的外面（后面）使用jsp:setProperty，如下所示：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"myName"</span> ... /&gt;</span><br><span class="line">...</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">"myName"</span> property=<span class="string">"someProperty"</span> .../&gt;</span><br></pre></td></tr></table></figure><p>此时，不管jsp:useBean是找到了一个现有的Bean，还是新创建了一个Bean实例，jsp:setProperty都会执行。第二种用法是把jsp:setProperty放入jsp:useBean元素的内部，如下所示：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"myName"</span> ... &gt;</span><br><span class="line">...</span><br><span class="line">   &lt;jsp:setProperty name=<span class="string">"myName"</span> property=<span class="string">"someProperty"</span> .../&gt;</span><br><span class="line">&lt;/jsp:useBean&gt;</span><br></pre></td></tr></table></figure><p>此时，jsp:setProperty只有在新建Bean实例时才会执行，如果是使用现有实例则不执行jsp:setProperty。</p><p>jsp:setProperty动作有下面四个属性,如下表：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">name属性是必需的。它<code>表示要设置属性的是哪个Bean。</code></td></tr><tr><td align="left">property</td><td align="left">property属性是必需的。它表示要设置哪个属性。有一个特殊用法：如果property的值是<code>&quot;*&quot;</code>，表示所有名字和Bean属性名字匹配的请求参数都将被传递给相应的属性set方法。</td></tr><tr><td align="left">value</td><td align="left">value 属性是可选的。该属性用来指定Bean属性的值。字符串数据会在目标类中通过标准的valueOf方法自动转换成数字、boolean、Boolean、 byte、Byte、char、Character。例如，boolean和Boolean类型的属性值（比如”true”）通过 Boolean.valueOf转换，int和Integer类型的属性值（比如”42”）通过Integer.valueOf转换。 　　value和param不能同时使用，但可以使用其中任意一个。</td></tr><tr><td align="left">param</td><td align="left">param 是可选的。它指定用哪个请求参数作为Bean属性的值。如果当前请求没有参数，则什么事情也不做，系统不会把null传递给Bean属性的set方法。因此，你可以让Bean自己提供默认属性值，只有当请求参数明确指定了新值时才修改默认属性值。</td></tr></tbody></table><hr><h4 id="5-2-4-jsp-getProperty动作元素"><a href="#5-2-4-jsp-getProperty动作元素" class="headerlink" title="5.2.4 jsp:getProperty动作元素"></a>5.2.4 <a href="jsp:getProperty">jsp:getProperty</a>动作元素</h4><p>jsp:getProperty动作<code>提取指定Bean属性的值，转换成字符串，然后输出</code>。语法格式如下：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"myName"</span> ... /&gt;</span><br><span class="line">...</span><br><span class="line">&lt;jsp:getProperty name=<span class="string">"myName"</span> property=<span class="string">"someProperty"</span> .../&gt;</span><br></pre></td></tr></table></figure><p>下表是与getProperty相关联的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">name</td><td align="left">要检索的Bean属性名称。Bean必须已定义。</td></tr><tr><td align="left">property</td><td align="left">表示要提取Bean属性的值</td></tr></tbody></table><p><strong>实例:</strong></p><p>以下实例我们使用了Bean:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBean</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String message = <span class="string">"菜鸟教程"</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span>(message);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.message = message;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108172149.png" alt="image-20201108172149586"></p><p>下面是一个很简单的例子，它的功能是装载一个Bean，然后设置/读取它的message属性。</p><p>现在让我们在main.jsp文件中调用该Bean:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">         pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;www.bithachi.cn&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;Jsp 使用 JavaBean 实例&lt;/h2&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">"test"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"book.ch3.TestBean"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:setProperty name=<span class="string">"test"</span>  property=<span class="string">"message"</span>  value=<span class="string">"BitHachi..."</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;输出信息....&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:getProperty name=<span class="string">"test"</span> property=<span class="string">"message"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108172349.png" alt="image-20201108172349143"></p><h4 id="5-2-5-jsp-forward-动作元素"><a href="#5-2-5-jsp-forward-动作元素" class="headerlink" title="5.2.5 jsp:forward 动作元素"></a>5.2.5 <a href="jsp:forward">jsp:forward</a> 动作元素</h4><p>　jsp:forward动作<code>把请求转到另外的页面。</code>jsp:forward标记只有一个属性page。语法格式如下所示：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">"相对 URL 地址"</span> /&gt;</span><br></pre></td></tr></table></figure><p>以下是forward相关联的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">page</td><td align="left">page属性包含的是一个相对URL。page的值既可以直接给出，也可以在请求的时候动态计算，<code>可以是一个JSP页面或者一个 Java Servlet.</code></td></tr></tbody></table><p><strong>实例：</strong></p><p>以下实例我们使用了两个文件，分别是：<code>date.jsp 和 main.jsp。</code></p><p>date.jsp 文件代码如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">   今天的日期是: &lt;%= (<span class="keyword">new</span> java.util.Date()).toLocaleString()%&gt;</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure><p>main.jsp文件代码：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h2&gt;forward 动作实例&lt;/h2&gt;</span><br><span class="line">&lt;jsp:forward page=<span class="string">"date.jsp"</span> /&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108172744.png" alt="image-20201108172744557"></p><h4 id="5-2-6-jsp-plugin动作元素"><a href="#5-2-6-jsp-plugin动作元素" class="headerlink" title="5.2.6 jsp:plugin动作元素"></a>5.2.6 <a href="jsp:plugin">jsp:plugin</a>动作元素</h4><p>jsp:plugin动作用来<code>根据浏览器的类型，插入通过Java插件 运行Java Applet所必需的OBJECT或EMBED元素。</code></p><p>如果需要的插件不存在，它会下载插件，然后执行Java组件。 Java组件可以是一个applet或一个JavaBean。</p><p>plugin动作有多个对应HTML元素的属性用于格式化Java 组件。param元素可用于向Applet 或 Bean 传递参数。</p><p>以下是使用plugin 动作元素的典型实例:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:plugin type=<span class="string">"applet"</span> codebase=<span class="string">"dirname"</span> code=<span class="string">"MyApplet.class"</span></span><br><span class="line">                           width=<span class="string">"60"</span> height=<span class="string">"80"</span>&gt;</span><br><span class="line">   &lt;jsp:param name=<span class="string">"fontcolor"</span> value=<span class="string">"red"</span> /&gt;</span><br><span class="line">   &lt;jsp:param name=<span class="string">"background"</span> value=<span class="string">"black"</span> /&gt;</span><br><span class="line"> </span><br><span class="line">   &lt;jsp:fallback&gt;</span><br><span class="line">      Unable to initialize Java Plugin</span><br><span class="line">   &lt;/jsp:fallback&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/jsp:plugin&gt;</span><br></pre></td></tr></table></figure><p>如果你有兴趣可以尝试使用applet来测试jsp:plugin动作元素，<fallback>元素是一个新元素，在组件出现故障的错误时发送给用户错误信息。</p><h4 id="5-2-7-jsp-element-、-jsp-attribute、-jsp-body动作元素"><a href="#5-2-7-jsp-element-、-jsp-attribute、-jsp-body动作元素" class="headerlink" title="5.2.7 jsp:element 、 jsp:attribute、 jsp:body动作元素"></a>5.2.7 <a href="jsp:element">jsp:element</a> 、 <a href="jsp:attribute">jsp:attribute</a>、 <a href="jsp:body">jsp:body</a>动作元素</h4><p><a href="jsp:element">jsp:element</a> 、 <a href="jsp:attribute">jsp:attribute</a>、 <a href="jsp:body">jsp:body</a>动作元素<code>动态定义XML元素</code>。动态是非常重要的，这就意味着XML元素在编译时是动态生成的而非静态。</p><p>以下实例动态定义了XML元素：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">&lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;jsp:element name=<span class="string">"xmlElement"</span>&gt;</span><br><span class="line">&lt;jsp:attribute name=<span class="string">"xmlElementAttr"</span>&gt;</span><br><span class="line">   属性值</span><br><span class="line">&lt;/jsp:attribute&gt;</span><br><span class="line">&lt;jsp:body&gt;</span><br><span class="line">   XML 元素的主体</span><br><span class="line">&lt;/jsp:body&gt;</span><br><span class="line">&lt;/jsp:element&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108173245.png" alt="image-20201108173245357"></p><h4 id="5-2-8-jsp-text动作元素"><a href="#5-2-8-jsp-text动作元素" class="headerlink" title="5.2.8 jsp:text动作元素"></a>5.2.8 <a href="jsp:text">jsp:text</a>动作元素</h4><p><a href="jsp:text">jsp:text</a>动作元素<code>允许在JSP页面和文档中使用写入文本的模板</code>，语法格式如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:text&gt;模板数据&lt;/jsp:text&gt;</span><br></pre></td></tr></table></figure><p>以上文本模板不能包含重复元素，只能包含文本和EL表达式（注：EL表达式将在后续章节中介绍）。请注意，在XML文件中，您不能使用表达式如 ${whatever &gt; 0}，因为&gt;符号是非法的。 你可以使用 ${whatever gt 0}表达式或者嵌入在一个CDATA部分的值。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:text&gt;&lt;![CDATA[&lt;br&gt;]]&gt;&lt;/jsp:text&gt;</span><br></pre></td></tr></table></figure><p>如果你需要在 XHTML 中声明 DOCTYPE,必须使用到<a href="jsp:text">jsp:text</a>动作元素，实例如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:text&gt;&lt;![CDATA[&lt;!DOCTYPE html</span><br><span class="line">PUBLIC <span class="string">"-//W3C//DTD XHTML 1.0 Strict//EN"</span></span><br><span class="line"><span class="string">"DTD/xhtml1-strict.dtd"</span>&gt;]]&gt;</span><br><span class="line">&lt;/jsp:text&gt;</span><br><span class="line">&lt;head&gt;&lt;title&gt;jsp:text action&lt;/title&gt;&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;books&gt;&lt;book&gt;&lt;jsp:text&gt;  </span><br><span class="line">    Welcome to JSP Programming</span><br><span class="line">&lt;/jsp:text&gt;&lt;/book&gt;&lt;/books&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>你可以对以上实例尝试使用<a href="jsp:text">jsp:text</a>及不使用该动作元素执行结果的区别。</p><h2 id="6-JSP-隐式对象"><a href="#6-JSP-隐式对象" class="headerlink" title="6. JSP 隐式对象"></a>6. JSP 隐式对象</h2><p>JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。</p><p>JSP所支持的九大隐式对象：</p><table><thead><tr><th align="left"><strong>对象</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">request</td><td align="left"><strong>HttpServletRequest</strong> 接口的实例</td></tr><tr><td align="left">response</td><td align="left"><strong>HttpServletResponse</strong> 接口的实例</td></tr><tr><td align="left">out</td><td align="left"><strong>JspWriter</strong>类的实例，用于把结果输出至网页上</td></tr><tr><td align="left">session</td><td align="left"><strong>HttpSession</strong>类的实例</td></tr><tr><td align="left">application</td><td align="left"><strong>ServletContext</strong>类的实例，与应用上下文有关</td></tr><tr><td align="left">config</td><td align="left"><strong>ServletConfig</strong>类的实例</td></tr><tr><td align="left">pageContext</td><td align="left"><strong>PageContext</strong>类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><tr><td align="left">page</td><td align="left">类似于Java类中的this关键字</td></tr><tr><td align="left">Exception</td><td align="left"><strong>Exception</strong>类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr></tbody></table><hr><blockquote><p>九大隐式对象举例：<a href="http://c.biancheng.net/view/1477.html" target="_blank" rel="noopener">http://c.biancheng.net/view/1477.html</a></p></blockquote><h3 id="6-1-request对象"><a href="#6-1-request对象" class="headerlink" title="6.1 request对象"></a>6.1 request对象</h3><p>request对象是javax.servlet.http.HttpServletRequest 类的实例。每当客户端请求一个JSP页面时，JSP引擎就会制造一个新的request对象来代表这个请求。</p><p>request对象提供了一系列方法来获取HTTP头信息，cookies，HTTP方法等等。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Object getAttribute(String name)</td><td>用于返回由 name 指定的属性值，如果指定的属性值不存在， 则返回一个 null 值</td></tr><tr><td>Enumeration getAttributeNames()</td><td>用于返回 request 对象的所有属性的名称集合</td></tr><tr><td>String getCharacterEncoding()</td><td>用于返回一个 String，它包含请求正文中所使用的字符编码</td></tr><tr><td>int getContentLength()</td><td>用于返回请求正文的长度（字节数），如果不确定，返回 -1</td></tr><tr><td>String getContenType()</td><td>得到请求体的 MIME 类型</td></tr><tr><td>ServletlnputStream getInputStream()</td><td>用于返回请求的输入流，用来显示请求中的数据</td></tr><tr><td>String getParameter(String name)</td><td>用于获取客户端传送给服务器端的参数。主要由 name 指定， 通常是表单中的参数</td></tr><tr><td>Enumeration getParameterNames()</td><td>用于获取客户端传送的所有参数的名字集合</td></tr><tr><td>String getParameterValues(String name)</td><td>用于获得指定参数的所有值，由 name 指定</td></tr><tr><td>String getProtocol()</td><td>用于返回客户端向服务器端传送数据所依据的协议名称</td></tr><tr><td>String getMethod()</td><td>用于获得客户端向服务器端传送数据的参数方法，主要有两个， 分别是 get() 和 post()</td></tr><tr><td>String getServerName()</td><td>用于获得服务器端的主机名字</td></tr><tr><td>int getServletPath()</td><td>用于获得 <a href="http://c.biancheng.net/jsp/" target="_blank" rel="noopener">JSP</a> 文件相对于根地址的地址</td></tr><tr><td>String getRemoteAddr()</td><td>用于获得客户端的网络地址</td></tr><tr><td>String getRemoteHost()</td><td>用于获取发送此请求的客户端主机名</td></tr><tr><td>String getRealPath(String path)</td><td>用于获取一虚拟路径的真实路径</td></tr><tr><td>cookie[] get Cookie()</td><td>用于获取所有的 Cookie 对象</td></tr><tr><td>void setAttribute(String key,Object obj)</td><td>设置属性的属性值</td></tr><tr><td>boolean isSecure()</td><td>返回布尔类型的值，用于确定这个请求是否使用了一个安全协 议，如 HTTP</td></tr><tr><td>boolean isRequestedSessionldPromCookie()</td><td>返回布尔类型的值，表示会话是否使用了一个 Cookie 来管理 会话 ID</td></tr><tr><td>boolean isRequestedSessionIdFromURL()</td><td>返回布尔类型的值，表示会话是否使用了一个URL来管理会话 ID</td></tr><tr><td>boolean isRequestedSessionldFromVoid()</td><td>检查请求的会话 ID 是否合法</td></tr></tbody></table><hr><h3 id="6-2-response对象"><a href="#6-2-response对象" class="headerlink" title="6.2 response对象"></a>6.2 response对象</h3><p>response对象是javax.servlet.http.HttpServletResponse类的实例。当服务器创建request对象时会同时创建用于响应这个客户端的response对象。</p><p>response对象也定义了处理HTTP头模块的接口。通过这个对象，开发者们可以添加新的cookies，时间戳，HTTP状态码等等。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void addCookie(Cookie cookie)</td><td>添加 Cookie 的方法</td></tr><tr><td>void addHeader(String name,String value)</td><td>添加 HTTP 文件指定的头信息</td></tr><tr><td>String encodeURL(String url)</td><td>将 URL 予以编码，回传包含 Session ID 的 URL</td></tr><tr><td>void flushBuffer()</td><td>强制把当前缓冲区内容发送到客户端</td></tr><tr><td>int getBufferSize()</td><td>返回响应所使用的实际缓冲区大小，如果没使用缓冲区， 则该方法返回 0</td></tr><tr><td>void set BufferSize(int size)</td><td>为响应的主体设置首选的缓冲区大小</td></tr><tr><td>boolean isCommitted()</td><td>一个 boolean，表示响应是否已经提交；提交的响应已经 写入状态码和报头</td></tr><tr><td>void reset()</td><td>清除缓冲区存在的任何数据，并清除状态码和报头</td></tr><tr><td>ServletOutputStream getOutputStream()</td><td>返回到客户端的输出流对象</td></tr><tr><td>void sendError(int xc[,String msg])</td><td>向客户端发送错误信息</td></tr><tr><td>void sengRedirect(java.lang.String location)</td><td>把响应发送到另一个位置进行处理</td></tr><tr><td>void setCotentType(String type)</td><td>设置响应的 MIME 类型</td></tr><tr><td>void setHeader(String name,String value)</td><td>设置指定名字的 HTTP 文件头信息</td></tr><tr><td>void setCotentLength(int len)</td><td>设置响应头的长度</td></tr></tbody></table><hr><h3 id="6-3-out对象"><a href="#6-3-out对象" class="headerlink" title="6.3 out对象"></a>6.3 out对象</h3><p>out对象是 javax.servlet.jsp.JspWriter 类的实例，用来在response对象中写入内容。</p><p>最初的JspWriter类对象根据页面是否有缓存来进行不同的实例化操作。可以在page指令中使用buffered=’false’属性来轻松关闭缓存。</p><p>JspWriter类包含了大部分java.io.PrintWriter类中的方法。不过，JspWriter新增了一些专为处理缓存而设计的方法。还有就是，JspWriter类会抛出IOExceptions异常，而PrintWriter不会。</p><p>下表列出了我们将会用来输出boolean，char，int，double，String，object等类型数据的重要方法：</p><table><thead><tr><th align="left"><strong>方法</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left"><strong>out.print(dataType dt)</strong></td><td align="left">输出Type类型的值</td></tr><tr><td align="left"><strong>out.println(dataType dt)</strong></td><td align="left">输出Type类型的值然后换行</td></tr><tr><td align="left"><strong>out.flush()</strong></td><td align="left">刷新输出流</td></tr></tbody></table><hr><h3 id="6-4-session对象"><a href="#6-4-session对象" class="headerlink" title="6.4 session对象"></a>6.4 session对象</h3><p>session对象是 javax.servlet.http.HttpSession 类的实例。和Java Servlets中的session对象有一样的行为。</p><p>session对象用来跟踪在各个客户端请求间的会话。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Object getAttribute(String name)</td><td>获取指定名字的属性</td></tr><tr><td>Enumeration getAttributeName()</td><td>获取 session 中全部属性的名字，一个枚举</td></tr><tr><td>long getCreationTime()</td><td>返回 session 的创建时间，单位：毫秒</td></tr><tr><td>public String getld()</td><td>返回创建 session 时 JSP 引擎为它设置的唯一 ID 号</td></tr><tr><td>long getLastAccessedTime()</td><td>返回此 session 中客户端最近一次请求的时间。由 1970-01-01 算起，单位是毫秒。使用这个方法，可以判断某个用户在站点上 一共停留了多长时间</td></tr><tr><td>int getMaxInactiveInterval()</td><td>返回两次请求间隔多长时间 session 被销毁(单位：秒）</td></tr><tr><td>void setMaxlnactivelnterval(int interval)</td><td>设置两次请求间隔多长时间 session 被销毁(单位：秒）</td></tr><tr><td>void invalidate()</td><td>销毁 session 对象</td></tr><tr><td>boolean isNew()</td><td>判断请求是否会产生新的 session 对象</td></tr><tr><td>void removeAttxibute(String name)</td><td>删除指定名字的属性</td></tr><tr><td>void setAttribute(String name,String value)</td><td>设定指定名字的属性值</td></tr></tbody></table><hr><h3 id="6-5-application对象"><a href="#6-5-application对象" class="headerlink" title="6.5 application对象"></a>6.5 application对象</h3><p>JSP application 对象用于保存应用程序的公用数据，服务器启动并自动创建 application 对象后，只要没有关闭服务器，application 对象就一直存在，所有用户共享 application 对象。</p><p>JSP application 对象是 javax.servlet.ServletContext 类的实例，这有助于查找有关 Servlet 引擎和 Servlet 环境的信息。它的生命周期从服务器启动到关闭。在此期间，对象将一直存在。这样，在用户的前后连接或不同用户之间的连接中，可以对此对象的同一属性进行操作。<code>在任何地方 对此对象属性的操作，都会影响到其他用户的访问。</code></p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>getAttribute( String arg)</td><td>获取 application 对象中含有关键字的对象</td></tr><tr><td>getAttributeNames()</td><td>获取 application 对象的所有参数名字</td></tr><tr><td>getMajorVersion()</td><td>获取服务器支持 Servlet 的主版本号</td></tr><tr><td>getMinorVersion()</td><td>获取服务器支持 Servlet 的从版本号</td></tr><tr><td>removeAttribute(java.lang.String name)</td><td>根据名字删除 application 对象的参数</td></tr><tr><td>setAttribute(String key,Object obj)</td><td>将参数 Object 指定的对象 obj 添加到 application 对象中，并 为添加的对象指定一个索引关键字</td></tr></tbody></table><hr><h3 id="6-6-config对象"><a href="#6-6-config对象" class="headerlink" title="6.6 config对象"></a>6.6 config对象</h3><p>config对象是 javax.servlet.ServletConfig 类的实例，直接包装了servlet的ServletConfig类的对象。</p><p>这个对象允许开发者访问Servlet或者JSP引擎的初始化参数，比如文件路径等。</p><p>以下是config对象的使用方法，不是很重要，所以不常用：</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config.getServletName();</span><br></pre></td></tr></table></figure><p>它返回包含在<servlet-name>元素中的servlet名字，注意，<servlet-name>元素在 WEB-INF\web.xml 文件中定义。</p><p>方法说明ServletContext getServletContext()返回所执行的 Servlet 的环境对象String getServletName()返回所执行的 Servlet 的名字String getInitParameter(String name)返回指定名字的初始参数值Enumeration getlnitParameterName()返回该 JSP 中所有初始参数名，一个枚举</p><hr><h3 id="6-7-pageContext-对象"><a href="#6-7-pageContext-对象" class="headerlink" title="6.7 pageContext 对象"></a>6.7 pageContext 对象</h3><p>pageContext对象是javax.servlet.jsp.PageContext 类的实例，用来代表整个JSP页面。</p><p>这个对象主要用来访问页面信息，同时过滤掉大部分实现细节。</p><p>这个对象存储了request对象和response对象的引用。application对象，config对象，session对象，out对象可以通过访问这个对象的属性来导出。</p><p>pageContext对象也包含了传给JSP页面的指令信息，包括缓存信息，ErrorPage URL,页面scope等。</p><p>PageContext类定义了一些字段，包括PAGE_SCOPE，REQUEST_SCOPE，SESSION_SCOPE， APPLICATION_SCOPE。它也提供了40余种方法，有一半继承自javax.servlet.jsp.JspContext 类。</p><p>其中一个重要的方法就是 removeAttribute()，它可接受一个或两个参数。比如，pageContext.removeAttribute(“attrName”) 移除四个scope中相关属性，但是下面这种方法只移除特定 scope 中的相关属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pageContext.removeAttribute(&quot;attrName&quot;, PAGE_SCOPE);</span><br></pre></td></tr></table></figure><hr><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void forward(String relativeUrlPath)</td><td>把页面转发到另一个页面或者 <a href="http://c.biancheng.net/servlet/" target="_blank" rel="noopener">Servlet</a> 组件上</td></tr><tr><td>Exception getException()</td><td>返回当前页的 Exception 对象</td></tr><tr><td>ServletRequest getRequest()</td><td>返回当前页的 request 对象</td></tr><tr><td>ServletResponse getResponse()</td><td>返回当前页的 response 对象</td></tr><tr><td>ServletConfig getServletConfig()</td><td>返回当前页的 ServletConfig 对象</td></tr><tr><td>HttpSession getSession()</td><td>返回当前页的 session 对象</td></tr><tr><td>Object getPage()</td><td>返回当前页的 page 对象</td></tr><tr><td>ServletContext getServletContext()</td><td>返回当前页的 <a href="http://c.biancheng.net/view/1465.html" target="_blank" rel="noopener">application 对象</a></td></tr><tr><td>public Object getAttribute(String name)</td><td>获取属性值</td></tr><tr><td>Object getAttribute(String name,int scope)</td><td>在指定的范围内获取属性值</td></tr><tr><td>void setAttribute(String name,Object attribute)</td><td>设置属性及属性值</td></tr><tr><td>void setAttribute(String name,Object obj,int scope)</td><td>在指定范围内设置属性及属性值</td></tr><tr><td>void removeAttribute(String name)</td><td>删除某属性</td></tr><tr><td>void removeAttribute(String name,int scope)</td><td>在指定范围内删除某属性</td></tr><tr><td>void invalidate()</td><td>返回 servletContext 对象，全部销毁</td></tr></tbody></table><h3 id="6-8-page-对象"><a href="#6-8-page-对象" class="headerlink" title="6.8 page 对象"></a>6.8 page 对象</h3><p>这个对象就是页面实例的引用。它可以被看做是整个JSP页面的代表。</p><p>page 对象就是this对象的同义词。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>class getClass()</td><td>返回当前 Object 的类</td></tr><tr><td>int hashCode</td><td>返回 Object 的 hash 代码</td></tr><tr><td>String toString</td><td>把 Object 对象转换成 String 类的对象</td></tr><tr><td>boolean equals(Object obj)</td><td>比较对象和指定的对象是否相等</td></tr><tr><td>void copy (Object obj)</td><td>把对象拷贝到指定的对象中</td></tr><tr><td>Object clone()</td><td>复制对象（克隆对象）</td></tr></tbody></table><hr><h3 id="6-9-exception-对象"><a href="#6-9-exception-对象" class="headerlink" title="6.9 exception 对象"></a>6.9 exception 对象</h3><p>exception 对象包装了从先前页面中抛出的异常信息。它通常被用来产生对出错条件的适当响应。</p><h3 id="6-10-综合示例（一个猜数字的小游戏）"><a href="#6-10-综合示例（一个猜数字的小游戏）" class="headerlink" title="6.10 综合示例（一个猜数字的小游戏）"></a>6.10 综合示例（一个猜数字的小游戏）</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span> pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">"book.ch3.NumberGuessBean"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;%--`加载一个将在JSP页面中使用的JavaBean`--%&gt;</span><br><span class="line">&lt;jsp:useBean id=<span class="string">"numguess"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"book.ch3.NumberGuessBean"</span> scope=<span class="string">"session"</span> /&gt;</span><br><span class="line">&lt;%--`设置已经实例化的Bean对象的属性`--%&gt;</span><br><span class="line">&lt;jsp:setProperty name=<span class="string">"numguess"</span> property=<span class="string">"*"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;猜数小游戏&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;font size=<span class="number">4</span>&gt;</span><br><span class="line">&lt;%--如果成功猜中--%&gt;</span><br><span class="line">    &lt;% <span class="keyword">if</span> (numguess.getSuccess()) &#123; %&gt;</span><br><span class="line">         Congratulations! You got it. And after just &lt;%=numguess.getNumGuesses()%&gt; tries.</span><br><span class="line">         &lt;p&gt; &lt;%numguess.reset();%&gt;</span><br><span class="line">         Care to &lt;a href="numguess.jsp"&gt;try again&lt;/a&gt;</span><br><span class="line">&lt;%--如果没猜中，且是第一次玩--%&gt;</span><br><span class="line">    &lt;% &#125; <span class="keyword">else</span> <span class="keyword">if</span> (numguess.getNumGuesses() == <span class="number">0</span>) &#123; %&gt;</span><br><span class="line">             Welcome to the Number Guess game.</span><br><span class="line">            &lt;p&gt;I<span class="string">'m thinking of a number between 1 and 100. &lt;p&gt;</span></span><br><span class="line"><span class="string">            &lt;form method=get&gt;</span></span><br><span class="line"><span class="string">                What'</span>s your guess?</span><br><span class="line">                &lt;input type=text name=guess&gt;</span><br><span class="line">                &lt;input type=submit value=<span class="string">"Submit"</span>&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">&lt;%--没猜中，已经有一次猜数，则提示范围--%&gt;</span><br><span class="line">    &lt;% &#125; <span class="keyword">else</span> &#123;%&gt;</span><br><span class="line">            Good guess, but nope. Try &lt;b&gt;&lt;%=numguess.getHint()%&gt;&lt;/b&gt;.</span><br><span class="line">            You have made &lt;%=numguess.getNumGuesses()%&gt; guesses.</span><br><span class="line">            &lt;p&gt;I<span class="string">'m thinking of a number between 1 and 100. &lt;p&gt;</span></span><br><span class="line"><span class="string">            &lt;form method=get&gt;</span></span><br><span class="line"><span class="string">                What'</span>s your guess?</span><br><span class="line">                &lt;input type=text name=guess&gt;</span><br><span class="line">                &lt;input type=submit value=<span class="string">"Submit"</span>&gt;</span><br><span class="line">            &lt;/form&gt;</span><br><span class="line">        &lt;% &#125; %&gt;</span><br><span class="line"></span><br><span class="line">&lt;/font&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberGuessBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> answer;</span><br><span class="line">    <span class="keyword">private</span> String hint;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> numGuesses;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> success;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumberGuessBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        reset();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAnswer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAnswer</span><span class="params">(<span class="keyword">int</span> answer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.answer = answer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span> + hint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHint</span><span class="params">(String hint)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.hint = hint;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNumGuesses</span><span class="params">(<span class="keyword">int</span> numGuesses)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.numGuesses = numGuesses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumGuesses</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> numGuesses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSuccess</span><span class="params">(<span class="keyword">boolean</span> success)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.success = success;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setGuess</span><span class="params">(String guess)</span> </span>&#123;</span><br><span class="line">        numGuesses++;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> g;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            g = Integer.parseInt(guess);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            g = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (g == answer) &#123;</span><br><span class="line">            success = <span class="keyword">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (g == -<span class="number">1</span>) &#123;</span><br><span class="line">            hint = <span class="string">"a number next time"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (g &lt; answer) &#123;</span><br><span class="line">            hint = <span class="string">"higher"</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (g &gt; answer) &#123;</span><br><span class="line">            hint = <span class="string">"lower"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reset</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        answer = Math.abs(random.nextInt() % <span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">        success = <span class="keyword">false</span>;</span><br><span class="line">        numGuesses = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108180929.png" alt="image-20201108180929898"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108181134.png" alt="image-20201108181134542"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108181228.png" alt="image-20201108181228166"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108181235.png" alt="image-20201108181235093"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JSP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>会话管理：Session与Cookie</title>
      <link href="/posts/f768f9d3.html"/>
      <url>/posts/f768f9d3.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-导言"><a href="#1-导言" class="headerlink" title="1. 导言"></a>1. 导言</h2><p>HTTP 是一种无状态协议，每次客户端访问Web页面时，客户端打开一个单独的浏览器窗口连接到Web服务器，由于服务器不会自动保存之前客户端请求的相关信息，所以无法识别一个HTTP请求是否为第一次访问。这意味着需要有相应的技术来维持Web客户端和服务器之间的会话，这就是会话跟踪。</p><h2 id="2-Cookie与Session简单架构图"><a href="#2-Cookie与Session简单架构图" class="headerlink" title="2. Cookie与Session简单架构图"></a>2. Cookie与Session简单架构图</h2><p>每一个客户端向服务器请求信息，服务器为每个客户端建立一个对话session，每个对话有一个唯一的sessionID，服务器将sessionID打包到cookie中，服务器将cookie发送给客户端。客户端保存cookie，等到下一次客户端请求服务器时，发送保存的cookie，服务器通过cookie里面的sessionID就能判别是哪一个客户端进行再次请求。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108110030.png" alt="image-20201108110030063"></p><h2 id="3-Cookies"><a href="#3-Cookies" class="headerlink" title="3.Cookies"></a>3.Cookies</h2><h3 id="3-1-Cookies简介"><a href="#3-1-Cookies简介" class="headerlink" title="3.1  Cookies简介"></a>3.1  Cookies简介</h3><p>Cookie 是<code>存储在客户端</code>计算机上的文本文件，并保留了各种跟踪信息。识别返回用户包括三个步骤：</p><p>（1）服务器脚本向浏览器发送一组 Cookie；</p><p>（2）浏览器将这些信息存储在本地计算机上，以备将来使用；</p><p>（3）当下一次浏览器向Web服务器发送任何请求时，浏览器会把这些Cookie信息发送到服务器，服务器将使用这些信息来识别用户。</p><h3 id="3-2-Servlet中操作Cookie"><a href="#3-2-Servlet中操作Cookie" class="headerlink" title="3.2 Servlet中操作Cookie"></a>3.2 Servlet中操作Cookie</h3><p>Cookie源代码：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108110657.png" alt="image-20201108110657145"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108110707.png" alt="image-20201108110707464"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108110713.png" alt="image-20201108110713597"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108110718.png" alt="image-20201108110718090"></p><h3 id="3-3-Cookie-API"><a href="#3-3-Cookie-API" class="headerlink" title="3.3 Cookie API"></a>3.3 Cookie API</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108110741.png" alt="image-20201108110741586"></p><p>Cookie源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.security.AccessController;</span><br><span class="line"><span class="keyword">import</span> java.security.PrivilegedAction;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cookie</span> <span class="keyword">implements</span> <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> CookieNameValidator validation;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String value;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> version = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> String comment;</span><br><span class="line">    <span class="keyword">private</span> String domain;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxAge = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> String path;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> secure;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> httpOnly;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Cookie</span><span class="params">(String name, String value)</span> </span>&#123;</span><br><span class="line">        validation.validate(name);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setComment</span><span class="params">(String purpose)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.comment = purpose;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.comment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDomain</span><span class="params">(String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.domain = pattern.toLowerCase(Locale.ENGLISH);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDomain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.domain;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMaxAge</span><span class="params">(<span class="keyword">int</span> expiry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxAge = expiry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.maxAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPath</span><span class="params">(String uri)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.path = uri;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPath</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.path;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSecure</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.secure = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">getSecure</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.secure;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(String newValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = newValue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getVersion</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVersion</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.version = v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">clone</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.clone();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CloneNotSupportedException var2) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHttpOnly</span><span class="params">(<span class="keyword">boolean</span> httpOnly)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.httpOnly = httpOnly;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isHttpOnly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.httpOnly;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> strictServletCompliance;</span><br><span class="line">        String propStrictNaming;</span><br><span class="line">        String propFwdSlashIsSeparator;</span><br><span class="line">        <span class="keyword">if</span> (System.getSecurityManager() == <span class="keyword">null</span>) &#123;</span><br><span class="line">            strictServletCompliance = Boolean.getBoolean(<span class="string">"org.apache.catalina.STRICT_SERVLET_COMPLIANCE"</span>);</span><br><span class="line">            propStrictNaming = System.getProperty(<span class="string">"org.apache.tomcat.util.http.ServerCookie.STRICT_NAMING"</span>);</span><br><span class="line">            propFwdSlashIsSeparator = System.getProperty(<span class="string">"org.apache.tomcat.util.http.ServerCookie.FWD_SLASH_IS_SEPARATOR"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            strictServletCompliance = (Boolean)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;Boolean&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> Boolean <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> Boolean.valueOf(System.getProperty(<span class="string">"org.apache.catalina.STRICT_SERVLET_COMPLIANCE"</span>));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            propStrictNaming = (String)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;String&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> System.getProperty(<span class="string">"org.apache.tomcat.util.http.ServerCookie.STRICT_NAMING"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            propFwdSlashIsSeparator = (String)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;String&gt;() &#123;</span><br><span class="line">                <span class="function"><span class="keyword">public</span> String <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> System.getProperty(<span class="string">"org.apache.tomcat.util.http.ServerCookie.FWD_SLASH_IS_SEPARATOR"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> strictNaming;</span><br><span class="line">        <span class="keyword">if</span> (propStrictNaming == <span class="keyword">null</span>) &#123;</span><br><span class="line">            strictNaming = strictServletCompliance;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            strictNaming = Boolean.parseBoolean(propStrictNaming);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> allowSlash;</span><br><span class="line">        <span class="keyword">if</span> (propFwdSlashIsSeparator == <span class="keyword">null</span>) &#123;</span><br><span class="line">            allowSlash = !strictServletCompliance;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            allowSlash = !Boolean.parseBoolean(propFwdSlashIsSeparator);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strictNaming) &#123;</span><br><span class="line">            validation = <span class="keyword">new</span> RFC2109Validator(allowSlash);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            validation = <span class="keyword">new</span> RFC6265Validator();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-简单案例"><a href="#3-4-简单案例" class="headerlink" title="3.4 简单案例"></a>3.4 简单案例</h3><p><strong>setCookie.html</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"utf-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;菜鸟教程(runoob.com)&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"/setCookie"</span> method=<span class="string">"GET"</span>&gt;</span><br><span class="line">    站点名 ：&lt;input type=<span class="string">"text"</span> name=<span class="string">"name"</span>&gt;</span><br><span class="line">    &lt;br /&gt;</span><br><span class="line">    站点 URL：&lt;input type=<span class="string">"text"</span> name=<span class="string">"url"</span> /&gt;&lt;br&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> webstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class HelloServlet</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/SetCookie"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetCookie</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SetCookie</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">// 为名字和姓氏创建 Cookie</span></span><br><span class="line">        Cookie name = <span class="keyword">new</span> Cookie(<span class="string">"name"</span>,URLEncoder.encode(request.getParameter(<span class="string">"name"</span>), <span class="string">"UTF-8"</span>)); <span class="comment">// 中文转码</span></span><br><span class="line">        Cookie url = <span class="keyword">new</span> Cookie(<span class="string">"url"</span>,request.getParameter(<span class="string">"url"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 为两个 Cookie 设置过期日期为 24 小时后</span></span><br><span class="line">        name.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br><span class="line">        url.setMaxAge(<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在响应头中添加两个 Cookie</span></span><br><span class="line">        response.addCookie(name);</span><br><span class="line">        response.addCookie(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"设置 Cookie 实例"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">                <span class="string">"&lt;html&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;h1 align=\"center\"&gt;"</span> + title + <span class="string">"&lt;/h1&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;ul&gt;\n"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;站点名：&lt;/b&gt;："</span></span><br><span class="line">                + request.getParameter(<span class="string">"name"</span>) + <span class="string">"\n&lt;/li&gt;"</span> +</span><br><span class="line">                <span class="string">"  &lt;li&gt;&lt;b&gt;站点 URL：&lt;/b&gt;："</span></span><br><span class="line">                + request.getParameter(<span class="string">"url"</span>) + <span class="string">"\n&lt;/li&gt;"</span> +</span><br><span class="line">                <span class="string">"&lt;/ul&gt;\n"</span> +</span><br><span class="line">                <span class="string">"&lt;/body&gt;&lt;/html&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> webstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URLDecoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class ReadCookies</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ReadCookies"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReadCookies</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ReadCookies</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Cookie cookie = <span class="keyword">null</span>;</span><br><span class="line">        Cookie[] cookies = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 获取与该域相关的 Cookie 的数组</span></span><br><span class="line">        cookies = request.getCookies();</span><br><span class="line">        System.out.println(Arrays.toString(cookies));</span><br><span class="line">        <span class="comment">// 设置响应内容类型</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        String title = <span class="string">"Delete Cookie Example"</span>;</span><br><span class="line">        String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">        out.println(docType +</span><br><span class="line">                <span class="string">"&lt;html&gt;\n"</span> + <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> + <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span> );</span><br><span class="line">        <span class="keyword">if</span>( cookies != <span class="keyword">null</span> )&#123;</span><br><span class="line">            out.println(<span class="string">"&lt;h2&gt;Cookie 名称和值&lt;/h2&gt;"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; cookies.length; i++)&#123;</span><br><span class="line">                cookie = cookies[i];</span><br><span class="line">                <span class="comment">//比较字符串的值是否相等，-1 0 1</span></span><br><span class="line">                <span class="keyword">if</span>((cookie.getName( )).compareTo(<span class="string">"name"</span>) == <span class="number">0</span> )&#123;</span><br><span class="line">                    cookie.setMaxAge(<span class="number">0</span>);<span class="comment">//设置过期</span></span><br><span class="line">                    response.addCookie(cookie);<span class="comment">//添加Cookie</span></span><br><span class="line">                    out.print(<span class="string">"已删除的 cookie："</span> + cookie.getName( ) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                out.print(<span class="string">"名称："</span> + cookie.getName( ) + <span class="string">"，"</span>);</span><br><span class="line">                out.print(<span class="string">"值："</span> +  URLDecoder.decode(cookie.getValue(), <span class="string">"utf-8"</span>) +<span class="string">" &lt;br/&gt;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            out.println( <span class="string">"&lt;h2 class=\"tutheader\"&gt;No Cookie founds&lt;/h2&gt;"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108112426.png" alt="image-20201108112426358"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108115603.png" alt="image-20201108115603174"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108120227.png" alt="image-20201108120227111"></p><h2 id="4-HttpSession-对象"><a href="#4-HttpSession-对象" class="headerlink" title="4. HttpSession 对象"></a>4. HttpSession 对象</h2><h3 id="4-1-Session-简介"><a href="#4-1-Session-简介" class="headerlink" title="4.1  Session 简介"></a>4.1  Session 简介</h3><p>为了让 Web 应用程序能够记住用户送出的不同请求，Servlet 规范内定义一个 HttpSession 接口，允许 Servlet 容器针对每个用户建立一个 HTTP 会话（即 HttpSession 对象），每个 HTTP 会话将被赋予惟一的“会话编号”（ <code>Session ID</code> ）。</p><p>HttpSession 对象会在用户第一次访问服务器时由容器创建（<code>只有访问 JSP、Servlet 等动态资源时才会创建</code>，访问 HTML 等静态资源并不会创建），当用户调用其失效方法（invalidate() 方法）或超过其最大不活动（超时，timeout ）时间时会失效。</p><p>Servlet 容器为每个 HttpSession 生成唯一的标识，并将该标识发送给浏览器，或创建一个名为 JSESSIONID 的 cookie ，或者在 URL 后附加一个名为 jsessionid 的参数。在后续的请求中，浏览器会将标识提交给服务端，这样服务器就可以识别该请求是由哪个用户发起的。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108121240.png" alt="image-20201108121240563"></p><h3 id="4-2-HttpSession-API"><a href="#4-2-HttpSession-API" class="headerlink" title="4.2 HttpSession API"></a>4.2 HttpSession API</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108121410.png" alt="image-20201108121410024"></p><p>HttpSession 源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpSession</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getCreationTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getLastAccessedTime</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setMaxInactiveInterval</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMaxInactiveInterval</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function">HttpSessionContext <span class="title">getSessionContext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">getAttribute</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function">Object <span class="title">getValue</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Enumeration&lt;String&gt; <span class="title">getAttributeNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    String[] getValueNames();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">putValue</span><span class="params">(String var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeValue</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">invalidate</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isNew</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-简单案例"><a href="#4-3-简单案例" class="headerlink" title="4.3 简单案例"></a>4.3 简单案例</h3><p>bookList.jsp页面显示图书购买列表，将表单数据提交给ProcessOneServlet.java处理，ProcessOneServlet.java将欲购买的图书数据放置在HttpSession中，并请求重定向到address.jsp页面，在address.jsp页面输入客户的用户名和邮寄地址，并提交给ProcessTwoServlet.java处理，ProcessTwoServlet.java将客户信息和邮寄地址数据放置在HttpSession中，并将请求重定向到ConfirmServlet.java，ConfirmServlet将购物信息从HttpSession中取出，进行显示，实现加入购物车的功能。</p><p><strong>bookList.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;选择购买书籍&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    </span><br><span class="line">&lt;h2&gt;选择购买书籍&lt;/h2&gt;</span><br><span class="line">&lt;form action=<span class="string">"/ProcessOne"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;table border=<span class="string">"1"</span> width=<span class="string">"68%"</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;th align="center"&gt;书名&lt;/td&gt;</span><br><span class="line">&lt;th align="center"&gt;购买&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Android Application Develoment Practice Tutorial&lt;/td&gt;</span><br><span class="line">&lt;td align=<span class="string">"center"</span>&gt;&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"buy"</span></span><br><span class="line">value="Android Application Develoment Practice Tutorial"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Software Project Management&lt;/td&gt;</span><br><span class="line">&lt;td align=<span class="string">"center"</span>&gt;&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"buy"</span></span><br><span class="line">value="Software Project Management"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Agile Software Development&lt;/td&gt;</span><br><span class="line">&lt;td align=<span class="string">"center"</span>&gt;&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"buy"</span></span><br><span class="line">value="Agile Software Development"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;Information Technology Project Management&lt;/td&gt;</span><br><span class="line">&lt;td align=<span class="string">"center"</span>&gt;&lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"buy"</span></span><br><span class="line">value="Information Technology Project Management"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;p&gt;&lt;input type="submit" value="下一步"&gt;&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"ProcessOneServlet"</span>, urlPatterns = &#123; <span class="string">"/ProcessOne"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessOneServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProcessOneServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line">String[] selectedBooks = request.getParameterValues(<span class="string">"buy"</span>);</span><br><span class="line">session.setAttribute(<span class="string">"choosed"</span>, selectedBooks);</span><br><span class="line">response.sendRedirect(request.getContextPath() + <span class="string">"/page/ch4/address.jsp"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>address.jsp</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html PUBLIC <span class="string">"-//W3C//DTD HTML 4.01 Transitional//EN"</span> <span class="string">"http://www.w3.org/TR/html4/loose.dtd"</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=<span class="string">"Content-Type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;邮寄地址&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;输入邮寄地址&lt;/h2&gt;</span><br><span class="line">&lt;form action=<span class="string">"/ProcessTwo"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">&lt;table border=<span class="string">"1"</span> width=<span class="string">"68%"</span>&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;姓名：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="customer" size="30"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td&gt;邮寄地址：&lt;/td&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="address" size="66"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">&lt;input type=<span class="string">"submit"</span> value=<span class="string">"下一步"</span>&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"ProcessTwoServlet"</span>, urlPatterns = &#123; <span class="string">"/ProcessTwo"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProcessTwoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ProcessTwoServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">//String customer = request.getParameter("customer");</span></span><br><span class="line">String customer = <span class="keyword">new</span> String(request.getParameter(<span class="string">"customer"</span>).getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"utf-8"</span>);</span><br><span class="line"><span class="comment">//String address = request.getParameter("address");</span></span><br><span class="line">String address = <span class="keyword">new</span> String(request.getParameter(<span class="string">"address"</span>).getBytes(<span class="string">"iso-8859-1"</span>), <span class="string">"utf-8"</span>);</span><br><span class="line">session.setAttribute(<span class="string">"A_customer"</span>, customer);</span><br><span class="line">session.setAttribute(<span class="string">"A_address"</span>, address);</span><br><span class="line">response.sendRedirect(<span class="string">"Confirm"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"/ConfirmServlet"</span>, urlPatterns = &#123; <span class="string">"/Confirm"</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfirmServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConfirmServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">HttpSession session = request.getSession(<span class="keyword">true</span>);</span><br><span class="line">String[] books = (String[]) session.getAttribute(<span class="string">"choosed"</span>);</span><br><span class="line">String customer = (String) session.getAttribute(<span class="string">"A_customer"</span>);</span><br><span class="line">String address = (String) session.getAttribute(<span class="string">"A_address"</span>);</span><br><span class="line"><span class="keyword">boolean</span> conditon = (books != <span class="keyword">null</span>) &amp;&amp; (customer != <span class="keyword">null</span>) &amp;&amp; (address != <span class="keyword">null</span>) &amp;&amp; (!customer.equals(<span class="string">""</span>)) </span><br><span class="line">&amp;&amp; (!address.equals(<span class="string">""</span>));</span><br><span class="line"><span class="keyword">if</span> (conditon) &#123;</span><br><span class="line">System.out.println(conditon);</span><br><span class="line">System.out.println(!address.equals(<span class="string">""</span>));</span><br><span class="line">System.out.println(<span class="string">"customer="</span> + customer);</span><br><span class="line">System.out.println(<span class="string">"address="</span> + address);</span><br><span class="line"></span><br><span class="line">out.println(<span class="string">"&lt;html&gt;&lt;body&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;h2&gt;订单确认&lt;/h2&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;table border=\"1\" width=\"68%\"&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;tr&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;td&gt;顾客姓名：&lt;/td&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;td&gt;"</span> + customer + <span class="string">"&lt;/td&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;tr&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;td&gt;地址：&lt;/td&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;td&gt;"</span> + address + <span class="string">"&lt;/td&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;tr&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;td&gt;订购书籍：&lt;/td&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;td&gt;"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; books.length; i++) &#123;</span><br><span class="line">out.println(books[i] + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">out.println(<span class="string">"&lt;/td&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/tr&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/table&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;&lt;input type=\"submit\" value=\"提交订单\"&gt;&lt;/p&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/html&gt;&lt;/body&gt;"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">out.println(<span class="string">"&lt;html&gt;&lt;body&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;h2&gt;无法从HTTP会话内取出所需信息！&lt;/h2&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/html&gt;&lt;/body&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108150940.png" alt="image-20201108150940806"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108151109.png" alt="image-20201108151109260"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108151115.png" alt="image-20201108151115601"></p><h2 id="5-URL-重写"><a href="#5-URL-重写" class="headerlink" title="5. URL 重写"></a>5. URL 重写</h2><p>在某些情况下，用户为了安全性可能会关闭 Web 浏览器的 Cookie 功能。这时候如果从用户端浏览器送出 HTTP 请求，并不会包含 Session ID，因此 Servlet 容器无法利用同一个 HTTP 会话来保存不同的 HTTP 请求内容。我们可以用URL重写解决这种情况。</p><h3 id="5-1-什么是URL重写"><a href="#5-1-什么是URL重写" class="headerlink" title="5.1 什么是URL重写"></a>5.1 什么是URL重写</h3><p>在URL重写中，我们将标记或标识符添加到下一个Servlet或下一个资源的URL。我们可以使用以下格式发送参数名称/值对：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url?name1=value1&amp;name2=value2</span><br></pre></td></tr></table></figure><p>名称和值使用等号分隔，参数名称/值对与另一个参数使用＆符号分隔。当用户单击超链接时，参数名称/值对将被传递到服务器。在Servlet中，我们可以使用<code>getParameter（）</code>方法获取参数值。</p><h3 id="5-2-URL重写的优势"><a href="#5-2-URL重写的优势" class="headerlink" title="5.2 URL重写的优势"></a>5.2 URL重写的优势</h3><ol><li>无论是否禁用Cookie（与浏览器无关），它将始终有效。</li><li>不需要在每个页面上提交额外的表单。</li></ol><h3 id="5-3-URL重写的缺点"><a href="#5-3-URL重写的缺点" class="headerlink" title="5.3 URL重写的缺点"></a>5.3 URL重写的缺点</h3><ol><li>它仅适用于URL链接。</li><li>它只能发送文本（字符串）信息。</li></ol><h3 id="5-4-URL重写的案例"><a href="#5-4-URL重写的案例" class="headerlink" title="5.4 URL重写的案例"></a>5.4 URL重写的案例</h3><p>在下面的示例中，我们使用URL链接维护用户的状态。为了实现此目的，我们将用户名附加在查询字符串（queryString）中，并从另一页面的查询字符串（queryString）中获取值。</p><p>URL 重写通过 <code>HttpServletResponse</code>的 <code>encodeURL()</code>方法和 <code>encodeRedirectURL()</code>方法实现，其中 encodeRedirectURL() 方法主要对使用 sendRedirect () 方法的URL进行重写。</p><h4 id="5-4-1-编写页面"><a href="#5-4-1-编写页面" class="headerlink" title="5.4.1 编写页面"></a>5.4.1 编写页面</h4><p>UrlRewrite.jsp:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>URL重写案例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/servlet1"</span>&gt;</span></span><br><span class="line">    用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"userName"</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-4-2-编写FirstServlet"><a href="#5-4-2-编写FirstServlet" class="headerlink" title="5.4.2 编写FirstServlet"></a>5.4.2 编写FirstServlet</h4><p>FirstServlet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse  response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">            PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">            String n=request.getParameter(<span class="string">"userName"</span>);</span><br><span class="line">            out.print(<span class="string">"欢迎 "</span>+n);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//把用户名追加到查询字符串后面</span></span><br><span class="line">            out.print(<span class="string">"&lt;a href='"</span>+request.getContextPath()+<span class="string">"/servlet2?uname="</span>+n+<span class="string">"'&gt;访问&lt;/a&gt;"</span>);</span><br><span class="line"></span><br><span class="line">            out.close();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-3-编写SecondServlet"><a href="#5-4-3-编写SecondServlet" class="headerlink" title="5.4.3 编写SecondServlet"></a>5.4.3 编写SecondServlet</h4><p>SecondServlet:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecondServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">            response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">            PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//从查询字符串获取用户名</span></span><br><span class="line">            String n=request.getParameter(<span class="string">"uname"</span>);</span><br><span class="line">            out.print(<span class="string">"你好 "</span>+n);</span><br><span class="line"></span><br><span class="line">            out.close();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-4-4-配置web-xml"><a href="#5-4-4-配置web-xml" class="headerlink" title="5.4.4 配置web.xml"></a>5.4.4 配置web.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>book.ch4.FirstServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>FirstServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SecondServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>book.ch4.SecondServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SecondServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108152911.png" alt="image-20201108152911626"><br><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108152920.png" alt="image-20201108152920910"><br><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108154628.png" alt="image-20201108154628947"></p><h3 id="5-5-隐藏表单域"><a href="#5-5-隐藏表单域" class="headerlink" title="5.5 隐藏表单域"></a>5.5 隐藏表单域</h3><p>一个 Web 服务器可以发送一个隐藏的 HTML 表单字段，以及一个唯一的 SESSION 会话 ID，如下所示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"session_id"</span> <span class="attr">value</span>=<span class="string">"123456789"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当表单被提交时，指定的名称和值会被自动包含在表单数据中。每次当用户端浏览器发送回请求时，session_id  值可以用于保持不同的用户端浏览器的跟踪。</p><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h2><ul><li>Cookie 分为<code>会话 Cookie</code> 和<code>持久 Cookie</code>。</li></ul><p><code>会话 Cookie</code>是指在不设定它的生命周期 expires 时的状态。<br>浏览器的开启到关闭就是一次会话，当关闭浏览器时，会话Cookie 就会跟随浏览器而销毁。<br>当关闭一个页面时，不影响会话 Cookie 的销毁。</p><p><code>持久 Cookie</code>则是设定了它的生命周期 expires，关闭浏览器之后，它不会销毁，直到设定的过期时间。<br>对于持久 Cookie，可以在同一个浏览器中传递数据，比如，你在打开一个淘宝页面登陆后，你在点开一个商品页面，依然是登录状态，即便你关闭了浏览器，再次开启浏览器，依然会是登录状态。这就是因为 Cookie 自动将数据传送到服务器端，在反馈回来的结果。</p><ul><li><p><code>Session 是通过 Cookie 技术实现的</code>，依赖于名为 JSESSIONID 的 Cookie，它将信息保存在服务器端。<br>Session 中能够存储复杂的 Java 对象。<br>Session 机制是一种服务器端的机制，服务器使用一种类似于散列表的结构（也可能就是使用散列表）来保存信息。</p></li><li><p>由于 Cookie 可以被人为的禁止，必须有其他机制以便在 Cookie 被禁止时仍然能够把 Session ID 传递回服务器。<br>于是我们可以采用<code>URL 重写</code>技术，就是把<code>Session ID 直接附加在 URL 路径的后面</code>。</p><p>URL 重写是一种很好的维持 HTTP 会话的方式，它在浏览器不支持 Cookie 时能够很好地工作，但是它的缺点是会动态生成每个 URL 来为页面分配一个 HTTP 会话 Session ID。为了在整个交互过程中始终保持状态，就必须在每个客户端可能请求的路径后面都包含这个 Session ID。</p></li><li><p><code>隐藏表单域技术</code>就是在表单域添加一个隐藏字段，以便在表单提交时能够把 Session ID 传递回服务器。<br>利用 Form 表单的隐藏表单域，可以在完全脱离浏览器对Cookie 的使用限制以及在用户无法从页面显示看到隐藏标识的情况下，将标识随请求一起传送给服务器处理，从而实现会话的跟踪。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Session </tag>
            
            <tag> Cookie </tag>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet入门篇[处理表单数据,重定向与转发,数据库访问,异常处理]</title>
      <link href="/posts/cc4f65f8.html"/>
      <url>/posts/cc4f65f8.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Servlet-简介"><a href="#1-Servlet-简介" class="headerlink" title="1.Servlet 简介"></a>1.Servlet 简介</h2><p><strong>Servlet 对请求的处理和响应过程可分为以下几个步骤：</strong><br>（1）客户端发送请求至服务器端；<br>（2）服务器将请求信息发送至  Servlet ；<br>（3）Servlet  生成响应内容并将其传给服务器。响应内容动态生成，通常取决于客户端的请求；<br>（4）服务器将响应返回给客户端。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201107181845.png" alt="image-20201107181845342"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201122220902.png" alt="image-20201122220900948"></p><p><strong>Servlet 执行以下主要任务：</strong></p><ul><li>读取客户端（浏览器）发送的显式的数据。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li><li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li><li>处理数据并生成结果。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li><li>发送显式的数据（即文档）到客户端（浏览器）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li><li>发送隐式的 HTTP 响应到客户端（浏览器）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li></ul><h2 id="2-Servlet基础"><a href="#2-Servlet基础" class="headerlink" title="2.Servlet基础"></a>2.Servlet基础</h2><h3 id="2-1-Servlet体系结构"><a href="#2-1-Servlet体系结构" class="headerlink" title="2.1 Servlet体系结构"></a>2.1 Servlet体系结构</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201107182628.png" alt="image-20201107182628460"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">abstract</span> <span class="title">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>, <span class="title">Serializable</span></span></span><br></pre></td></tr></table></figure><h3 id="2-2-Servlet-接口"><a href="#2-2-Servlet-接口" class="headerlink" title="2.2 Servlet 接口"></a>2.2 Servlet 接口</h3><p>Servlet 接口 定义了 Servlet  与 Servlet  容器之间的契约，Servlet  容器将 Servlet  类载入内存，并在 Servlet  实例上调用具体的方法。用户请求致使 Servlet  容器调用 Servlet  的Service 方法，并传入一个 ServletRequest  实例和一个 ServletResponse  实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Servlet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line">    <span class="function">ServletConfig <span class="title">getServletConfig</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line">    <span class="function">String <span class="title">getServletInfo</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>init()：在 Servlet 实例化后，Servlet 容器会调用该方法，初始化该对象。init() 方法有一个类型为 ServletConfig 的参数，Servlet 容器通过这个参数向 Servlet 传递配置信息。 Servlet 使用 ServletConfig 对象从 Web 应用程序的配置信息中获取以名-值对形式提供的初始化参数。</li><li>service()：容器调用 service() 方法来处理客户端的请求。</li><li>destroy()：Servlet 的销毁方法。容器在终止 Servlet 服务前调用此方法。</li><li>getServletConfig()：该方法返回容器调用 init() 方法时传递给 Servlet 对象的 ServletConfig 对象，ServletConfig 对象包含了 Servlet 的初始化参数。</li><li>getServletInfo()：返回一个 String 类型的字符串，其中包括了关于 Servlet 的信息。例如作者、描述信息等。</li></ol><h3 id="2-3-生命周期"><a href="#2-3-生命周期" class="headerlink" title="2.3 生命周期"></a>2.3 生命周期</h3><p>Servlet  生命周期可被定义为从创建直到毁灭的整个过程。以下是 Servlet 遵循的过程：</p><ul><li><p>Servlet 通过调用 init () 方法进行初始化。</p></li><li><p>Servlet 调用 service() 方法来处理客户端的请求。</p></li><li><p>Servlet 通过调用 destroy() 方法终止（结束）。</p></li><li><p>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</p></li></ul><p>一个简单的生命周期案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> webstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"/life"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LifeServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"构造方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化代码...</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"init方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"doGet方法执行"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        PrintWriter pw = response.getWriter();</span><br><span class="line">        pw.println(<span class="string">"&lt;h1&gt; hello first servlet!&lt;/h1&gt;"</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 终止化代码...</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getClass().getName()+<span class="string">"destory方法执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--********************* 生命周期，直接执行servlet程序 *********************--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LifeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>webstudy.LifeServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>LifeServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/life<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-Servlet-API-编程常用接口和类"><a href="#3-Servlet-API-编程常用接口和类" class="headerlink" title="3. Servlet API 编程常用接口和类"></a>3. Servlet API 编程常用接口和类</h2><ul><li><p>GenericServlet 类</p></li><li><p>HttpServlet 类</p></li><li><p>ServletConfig 接口</p></li><li><p>HttpServletRequest 接口</p></li><li><p>HttpServletResponse 接口</p></li><li><p>ServletConfig 接口</p></li></ul><h4 id="3-4-1-GenericServlet-类"><a href="#3-4-1-GenericServlet-类" class="headerlink" title="3.4.1 GenericServlet 类"></a>3.4.1 GenericServlet 类</h4><p>GenericServlet 类是一个抽象类，实现了 Servlet 和 ServletConfig 接口，其作用是：<br>（1）将 init 方法中的 ServletConfig 赋给一个类中成员（ServletConfig config），以便可以通过调用 getServletConfig 获取。<br>（2）<code>为 Servlet 接口中的所有方法提供默认的实现。</code><br>（3）可以通过覆盖没有参数的 init 方法来编写初始化代码，ServletConfig 则仍然由 GenericServlet 实例保存。<br>（4）开发者可以在不用获得 ServletConfig 对象情况下直接调用 ServletConfig 的方法，例如源代码中的 getServletContext() 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericServlet</span> <span class="keyword">implements</span> <span class="title">Servlet</span>, <span class="title">ServletConfig</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> ServletConfig config;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GenericServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInitParameter</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getServletConfig().getInitParameter(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getServletConfig().getInitParameterNames();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.config;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletContext <span class="title">getServletContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getServletConfig().getServletContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.config = config;</span><br><span class="line">        <span class="keyword">this</span>.init();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getServletContext().log(<span class="keyword">this</span>.getServletName() + <span class="string">": "</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">log</span><span class="params">(String message, Throwable t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getServletContext().log(<span class="keyword">this</span>.getServletName() + <span class="string">": "</span> + message, t);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest var1, ServletResponse var2)</span> <span class="keyword">throws</span> ServletException, IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.config.getServletName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单示例：获取初始化参数name:value</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebInitParam;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(name = <span class="string">"MyGenericServlet"</span>, urlPatterns = &#123; <span class="string">"/generic"</span> &#125;, initParams = &#123;</span><br><span class="line"><span class="meta">@WebInitParam</span>(name = <span class="string">"driverClassName"</span>, value = <span class="string">"org.postgresql.Driver"</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyGenericServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyGenericServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest request, ServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">ServletConfig servletConfig = getServletConfig();</span><br><span class="line">String driverClassName = servletConfig.getInitParameter(<span class="string">"driverClassName"</span>);</span><br><span class="line">String url = servletConfig.getInitParameter(<span class="string">"url"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">PrintWriter writer = response.getWriter();</span><br><span class="line">writer.print(<span class="string">"driverClassName:"</span> + driverClassName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    <img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108082434.png" alt="image-20201108082434209"></p><h4 id="3-4-2-HttpServlet-类"><a href="#3-4-2-HttpServlet-类" class="headerlink" title="3.4.2 HttpServlet 类"></a>3.4.2 HttpServlet 类</h4><p><code>HttpServlet 覆盖了 GenericServlet 中的 Service 方法，并添加了一个新 Service 方法。</code><br>新 Service 方法接受的参数是 HTTPServletRequest 和 HttpServletResponse ，而不是 ServletRequest 和 ServletResponse。<br>原始的 Service 方法将 Servlet 容器的 request 和 response 对象分别转换成 HTTPServletRequest 和 HttpServletResponse，并调用新的 Service 方法。</p><p>HTTPServlet 中的 Service 方法会检验用来发送请求的 HTTP 方法（通过调用 request.getMethod）并调用以下方法之一：<code>doGet、doPost、doHead、doPut、doTrace、doOptions 和  doDelete。</code>这 7 种方法中，doGet 和 doPost 是最常用的。所以，不再需要覆盖 Service 方法了，只须覆盖 doGet 或者 doPost 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.text.MessageFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.DispatcherType;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.GenericServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServlet</span> <span class="keyword">extends</span> <span class="title">GenericServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_DELETE = <span class="string">"DELETE"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_HEAD = <span class="string">"HEAD"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_GET = <span class="string">"GET"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_OPTIONS = <span class="string">"OPTIONS"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_POST = <span class="string">"POST"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_PUT = <span class="string">"PUT"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String METHOD_TRACE = <span class="string">"TRACE"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_IFMODSINCE = <span class="string">"If-Modified-Since"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEADER_LASTMOD = <span class="string">"Last-Modified"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LSTRING_FILE = <span class="string">"javax.servlet.http.LocalStrings"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ResourceBundle lStrings = ResourceBundle.getBundle(<span class="string">"javax.servlet.http.LocalStrings"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String msg = lStrings.getString(<span class="string">"http.method_get_not_supported"</span>);</span><br><span class="line">        <span class="keyword">this</span>.sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">getLastModified</span><span class="params">(HttpServletRequest req)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1L</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHead</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (DispatcherType.INCLUDE.equals(req.getDispatcherType())) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            NoBodyResponse response = <span class="keyword">new</span> NoBodyResponse(resp);</span><br><span class="line">            <span class="keyword">this</span>.doGet(req, response);</span><br><span class="line">            response.setContentLength();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String msg = lStrings.getString(<span class="string">"http.method_post_not_supported"</span>);</span><br><span class="line">        <span class="keyword">this</span>.sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPut</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String msg = lStrings.getString(<span class="string">"http.method_put_not_supported"</span>);</span><br><span class="line">        <span class="keyword">this</span>.sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDelete</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String msg = lStrings.getString(<span class="string">"http.method_delete_not_supported"</span>);</span><br><span class="line">        <span class="keyword">this</span>.sendMethodNotAllowed(req, resp, msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendMethodNotAllowed</span><span class="params">(HttpServletRequest req, HttpServletResponse resp, String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        String protocol = req.getProtocol();</span><br><span class="line">        <span class="keyword">if</span> (protocol.length() != <span class="number">0</span> &amp;&amp; !protocol.endsWith(<span class="string">"0.9"</span>) &amp;&amp; !protocol.endsWith(<span class="string">"1.0"</span>)) &#123;</span><br><span class="line">            resp.sendError(<span class="number">405</span>, msg);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            resp.sendError(<span class="number">400</span>, msg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method[] getAllDeclaredMethods(Class&lt;?&gt; c) &#123;</span><br><span class="line">        <span class="keyword">if</span> (c.equals(HttpServlet<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Method[] parentMethods = getAllDeclaredMethods(c.getSuperclass());</span><br><span class="line">            Method[] thisMethods = c.getDeclaredMethods();</span><br><span class="line">            <span class="keyword">if</span> (parentMethods != <span class="keyword">null</span> &amp;&amp; parentMethods.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                Method[] allMethods = <span class="keyword">new</span> Method[parentMethods.length + thisMethods.length];</span><br><span class="line">                System.arraycopy(parentMethods, <span class="number">0</span>, allMethods, <span class="number">0</span>, parentMethods.length);</span><br><span class="line">                System.arraycopy(thisMethods, <span class="number">0</span>, allMethods, parentMethods.length, thisMethods.length);</span><br><span class="line">                thisMethods = allMethods;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> thisMethods;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doOptions</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        Method[] methods = getAllDeclaredMethods(<span class="keyword">this</span>.getClass());</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_GET = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_HEAD = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_POST = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_PUT = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_DELETE = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_TRACE = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">boolean</span> ALLOW_OPTIONS = <span class="keyword">true</span>;</span><br><span class="line">        Class clazz = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            clazz = Class.forName(<span class="string">"org.apache.catalina.connector.RequestFacade"</span>);</span><br><span class="line">            Method getAllowTrace = clazz.getMethod(<span class="string">"getAllowTrace"</span>, (Class[])<span class="keyword">null</span>);</span><br><span class="line">            ALLOW_TRACE = (Boolean)getAllowTrace.invoke(req, (Object[])<span class="keyword">null</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException | InvocationTargetException | ClassNotFoundException var14) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; methods.length; ++i) &#123;</span><br><span class="line">            Method m = methods[i];</span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">"doGet"</span>)) &#123;</span><br><span class="line">                ALLOW_GET = <span class="keyword">true</span>;</span><br><span class="line">                ALLOW_HEAD = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">"doPost"</span>)) &#123;</span><br><span class="line">                ALLOW_POST = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">"doPut"</span>)) &#123;</span><br><span class="line">                ALLOW_PUT = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (m.getName().equals(<span class="string">"doDelete"</span>)) &#123;</span><br><span class="line">                ALLOW_DELETE = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String allow = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (ALLOW_GET) &#123;</span><br><span class="line">            allow = <span class="string">"GET"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_HEAD) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"HEAD"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", HEAD"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_POST) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"POST"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", POST"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_PUT) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"PUT"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", PUT"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_DELETE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"DELETE"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", DELETE"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_TRACE) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"TRACE"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", TRACE"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (ALLOW_OPTIONS) &#123;</span><br><span class="line">            <span class="keyword">if</span> (allow == <span class="keyword">null</span>) &#123;</span><br><span class="line">                allow = <span class="string">"OPTIONS"</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                allow = allow + <span class="string">", OPTIONS"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resp.setHeader(<span class="string">"Allow"</span>, allow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doTrace</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String CRLF = <span class="string">"\r\n"</span>;</span><br><span class="line">        StringBuilder buffer = (<span class="keyword">new</span> StringBuilder(<span class="string">"TRACE "</span>)).append(req.getRequestURI()).append(<span class="string">" "</span>).append(req.getProtocol());</span><br><span class="line">        Enumeration reqHeaderEnum = req.getHeaderNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(reqHeaderEnum.hasMoreElements()) &#123;</span><br><span class="line">            String headerName = (String)reqHeaderEnum.nextElement();</span><br><span class="line">            buffer.append(CRLF).append(headerName).append(<span class="string">": "</span>).append(req.getHeader(headerName));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        buffer.append(CRLF);</span><br><span class="line">        <span class="keyword">int</span> responseLength = buffer.length();</span><br><span class="line">        resp.setContentType(<span class="string">"message/http"</span>);</span><br><span class="line">        resp.setContentLength(responseLength);</span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line">        out.print(buffer.toString());</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        String method = req.getMethod();</span><br><span class="line">        <span class="keyword">long</span> lastModified;</span><br><span class="line">        <span class="keyword">if</span> (method.equals(<span class="string">"GET"</span>)) &#123;</span><br><span class="line">            lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">            <span class="keyword">if</span> (lastModified == -<span class="number">1L</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">long</span> ifModifiedSince;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ifModifiedSince = req.getDateHeader(<span class="string">"If-Modified-Since"</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IllegalArgumentException var9) &#123;</span><br><span class="line">                    ifModifiedSince = -<span class="number">1L</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (ifModifiedSince &lt; lastModified / <span class="number">1000L</span> * <span class="number">1000L</span>) &#123;</span><br><span class="line">                    <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">                    <span class="keyword">this</span>.doGet(req, resp);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resp.setStatus(<span class="number">304</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"HEAD"</span>)) &#123;</span><br><span class="line">            lastModified = <span class="keyword">this</span>.getLastModified(req);</span><br><span class="line">            <span class="keyword">this</span>.maybeSetLastModified(resp, lastModified);</span><br><span class="line">            <span class="keyword">this</span>.doHead(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doPost(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"PUT"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doPut(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"DELETE"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doDelete(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"OPTIONS"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doOptions(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equals(<span class="string">"TRACE"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.doTrace(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            String errMsg = lStrings.getString(<span class="string">"http.method_not_implemented"</span>);</span><br><span class="line">            Object[] errArgs = <span class="keyword">new</span> Object[]&#123;method&#125;;</span><br><span class="line">            errMsg = MessageFormat.format(errMsg, errArgs);</span><br><span class="line">            resp.sendError(<span class="number">501</span>, errMsg);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">maybeSetLastModified</span><span class="params">(HttpServletResponse resp, <span class="keyword">long</span> lastModified)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!resp.containsHeader(<span class="string">"Last-Modified"</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (lastModified &gt;= <span class="number">0L</span>) &#123;</span><br><span class="line">                resp.setDateHeader(<span class="string">"Last-Modified"</span>, lastModified);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">service</span><span class="params">(ServletRequest req, ServletResponse res)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        HttpServletRequest request;</span><br><span class="line">        HttpServletResponse response;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            request = (HttpServletRequest)req;</span><br><span class="line">            response = (HttpServletResponse)res;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassCastException var6) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(lStrings.getString(<span class="string">"http.non_http"</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.service(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-3-ServletConfig-接口"><a href="#3-4-3-ServletConfig-接口" class="headerlink" title="3.4.3 ServletConfig 接口"></a>3.4.3 ServletConfig 接口</h4><p>Tomcat 初始化一个 Servlet 时，会将该 Servlet 的<code>配置信息封装到一个 ServletConfig 对象中</code>，通过调用 init(ServletConfig config) 方法将 ServletConfig 对象传递给 Servlet。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201107185508.png" alt="image-20201107185508636"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletConfig</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">getServletName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ServletContext <span class="title">getServletContext</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getInitParameter</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个简单的示例：获取配置信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletConfig;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletConfigDemoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123; </span><br><span class="line"><span class="keyword">private</span> ServletConfig servletConfig;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ServletConfig config)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.servletConfig = config;</span><br><span class="line">    System.out.println(<span class="string">"-----------"</span> + servletConfig + <span class="string">"-----------"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletConfig <span class="title">getServletConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> servletConfig;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 使用ServletConfig对象获取初始化参数</span></span><br><span class="line">ServletConfig servletConfig = getServletConfig();</span><br><span class="line">System.out.println(<span class="string">"-----------"</span> + servletConfig + <span class="string">"-----------"</span>);</span><br><span class="line">String poet = servletConfig.getInitParameter(<span class="string">"poet"</span>);</span><br><span class="line">String poem = servletConfig.getInitParameter(<span class="string">"poem"</span>);</span><br><span class="line"><span class="comment">// 设置响应到客户端的文本类型为HTML</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 获取输出流</span></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">out.print(<span class="string">"&lt;p&gt;获取ServletConfigDenoServlet的初始化参数："</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/p&gt;&lt;p&gt;poet参数的值："</span> + poet);</span><br><span class="line">out.println(<span class="string">"&lt;/p&gt;&lt;p&gt;poem参数的值："</span> + poem + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.append(<span class="string">"Served at："</span>).append(request.getContextPath());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web.xml配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServletConfig<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>book.ch2.ServletConfigDemoServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>poet<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>纳兰容若<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>poem<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>我是人间惆怅客<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>myServletConfig<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/myServletConfig<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>输出结果：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108081852.png" alt="image-20201108081852418"></p><h4 id="3-4-4-HttpServletRequest-接口"><a href="#3-4-4-HttpServletRequest-接口" class="headerlink" title="3.4.4 HttpServletRequest 接口"></a>3.4.4 HttpServletRequest 接口</h4><p>HttpServletRequest 接口继承自 ServletRequest 接口，专门用来<code>封装 HTTP 请求消息</code>。</p><p>由于 HTTP 请求消息分为<code>请求行、请求消息头和请求消息体</code>3部分，故而在 HttpServletRequest 接口中定义了<code>获取请求行、请求消息头和请求消息体</code>的相关方法，以及存取请求域属性的方法。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110102119.png" alt="image-20201110102119650"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/RequestLineServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestLineServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RequestLineServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/******************* 获取请求行信息 *******************/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 设置响应到客户端MIME类型和字符编码方式</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 获取请求使用的HTTP方法</span></span><br><span class="line">String method = request.getMethod();</span><br><span class="line"><span class="comment">// 获取请求行中的资源名部分</span></span><br><span class="line">String uri = request.getRequestURI();</span><br><span class="line"><span class="comment">// 获取使用的协议及版本号</span></span><br><span class="line">String protocol = request.getProtocol();</span><br><span class="line"><span class="comment">// 获取请求URL后面的查询字符串</span></span><br><span class="line">String queryString = request.getQueryString();</span><br><span class="line"><span class="comment">// 获取Servlet所映射的路径</span></span><br><span class="line">String servletPath = request.getServletPath();</span><br><span class="line"><span class="comment">// 获取请求资源所属于的Web应用的路径</span></span><br><span class="line">String contextPath = request.getContextPath();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取输出流</span></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;请求使用的HTTP方法："</span> + method + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;请求行中的资源名部分："</span> + uri + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;请求使用的协议及版本号："</span> + protocol + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;请求URL后面的查询字符串："</span> + queryString + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;Servlet所映射的路径："</span> + servletPath + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;请求资源所属于的Web应用的路径："</span> + contextPath + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.append(<span class="string">"Served at："</span>).append(request.getContextPath());</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108082858.png" alt="image-20201108082858159"></p><h5 id="3-4-4-1-获取请求头信息"><a href="#3-4-4-1-获取请求头信息" class="headerlink" title="3.4.4.1 获取请求头信息"></a>3.4.4.1 获取请求头信息</h5><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201110102249.png" alt="image-20201110102249636"><br><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108080605.png" alt="image-20201108080605304"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/RequestHeadInfoServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestHeadInfoServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RequestHeadInfoServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************* 获取请求头信息 *******************/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">out.print(<span class="string">"&lt;h3&gt;请求头信息&lt;h3&gt;"</span>);</span><br><span class="line"><span class="comment">// 获取请求消息中所有头字段</span></span><br><span class="line">Enumeration headerNames = request.getHeaderNames();</span><br><span class="line"><span class="comment">// 使用循环遍历所有请求头，并通过getHeader()方法获取一个指定名称的头字段</span></span><br><span class="line"><span class="keyword">while</span> (headerNames.hasMoreElements()) &#123;</span><br><span class="line">String headerName = (String) headerNames.nextElement();</span><br><span class="line">out.print(headerName + <span class="string">" : "</span> + request.getHeader(headerName) + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108082923.png" alt="image-20201108082923551"></p><h5 id="3-4-4-2-获取请求参数"><a href="#3-4-4-2-获取请求参数" class="headerlink" title="3.4.4.2 获取请求参数"></a>3.4.4.2 获取请求参数</h5><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108080622.png" alt="image-20201108080622829"></p><p>获取请求参数：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/RequestParaServlet"</span> <span class="attr">method</span>=<span class="string">"GET"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>昵  <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"nickname"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>爱好：</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"swim"</span>&gt;</span>游泳</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"go"</span>&gt;</span>围棋</span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">value</span>=<span class="string">"music"</span>&gt;</span>音乐<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/RequestParaServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestParaServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RequestParaServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/******************* 获取请求参数 *******************/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置响应到客户端MIME类型和字符编码方式</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置request对象的解码方式</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">String nickname = request.getParameter(<span class="string">"nickname"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取输出流</span></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;用户名："</span> + username + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;昵 称："</span> + nickname + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;爱好："</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取参数名为“hobby”的值</span></span><br><span class="line">String[] hobbys = request.getParameterValues(<span class="string">"hobby"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hobbys.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i &lt; hobbys.length - <span class="number">1</span>)</span><br><span class="line">out.println(hobbys[i] + <span class="string">"，"</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">out.println(hobbys[i] + <span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">out.println(<span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108083621.png" alt="image-20201108083621397"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108083633.png" alt="image-20201108083633708"></p><h5 id="3-4-4-3-设置-获取-删除请求域属性"><a href="#3-4-4-3-设置-获取-删除请求域属性" class="headerlink" title="3.4.4.3 设置-获取-删除请求域属性"></a>3.4.4.3 设置-获取-删除请求域属性</h5><p>获取请求域属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mialab.servlet_demo.entity.Book;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/RequestScopeAttrServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestScopeAttrServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RequestScopeAttrServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">/******************* 获取请求域属性 *******************/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 设置响应的文本类型为HTML，字符编码为UTF-8</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 在request范围内设置名为book的Book对象属性</span></span><br><span class="line">request.setAttribute(<span class="string">"book"</span>, <span class="keyword">new</span> Book(<span class="number">9801</span>, <span class="string">"《Android应用开发实践教程》"</span>));</span><br><span class="line"><span class="comment">// 在request范围内设置名为singer的String对象属性</span></span><br><span class="line">request.setAttribute(<span class="string">"singer"</span>, <span class="string">"Jessie J，第32届全英音乐奖入围最佳女艺人，《歌手2018》总冠军"</span>);</span><br><span class="line"><span class="comment">// 在request范围内设置名为newdate的Date对象属性</span></span><br><span class="line">request.setAttribute(<span class="string">"newdate"</span>, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 从request范围内获取名为book的属性</span></span><br><span class="line">Book book = (Book) request.getAttribute(<span class="string">"book"</span>);</span><br><span class="line"><span class="comment">// 从request范围内获取名为singer的属性</span></span><br><span class="line">String singer = (String) request.getAttribute(<span class="string">"singer"</span>);</span><br><span class="line"><span class="comment">// 从request范围内获取名为newdate的属性</span></span><br><span class="line">Date date = (Date) request.getAttribute(<span class="string">"newdate"</span>);</span><br><span class="line"><span class="comment">// 获取输出流</span></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;request.getAttribute(\"book\")的值："</span> + book + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;request.getAttribute(\"singer\")的值："</span> + singer + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;request.getAttribute(\"newdate\")的值："</span> + date + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line"></span><br><span class="line">Enumeration&lt;String&gt; names = request.getAttributeNames();</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;request请求域中的属性有："</span>);</span><br><span class="line"><span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">out.println(names.nextElement() + <span class="string">"&amp;nbsp;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">out.println(<span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">request.removeAttribute(<span class="string">"book"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;p&gt;执行request.removeAttribute(\"book\")后request请求域中的属性有："</span>);</span><br><span class="line">names = request.getAttributeNames();</span><br><span class="line"><span class="keyword">while</span> (names.hasMoreElements()) &#123;</span><br><span class="line">out.println(names.nextElement() + <span class="string">"&amp;nbsp;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">out.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108084421.png" alt="image-20201108084421846"></p><p>HttpServletRequest源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.Principal;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpServletRequest</span> <span class="keyword">extends</span> <span class="title">ServletRequest</span> </span>&#123;</span><br><span class="line">    String BASIC_AUTH = <span class="string">"BASIC"</span>;</span><br><span class="line">    String FORM_AUTH = <span class="string">"FORM"</span>;</span><br><span class="line">    String CLIENT_CERT_AUTH = <span class="string">"CLIENT_CERT"</span>;</span><br><span class="line">    String DIGEST_AUTH = <span class="string">"DIGEST"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getAuthType</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    Cookie[] getCookies();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">getDateHeader</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getHeader</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Enumeration&lt;String&gt; <span class="title">getHeaders</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Enumeration&lt;String&gt; <span class="title">getHeaderNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getIntHeader</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> HttpServletMapping <span class="title">getHttpServletMapping</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpServletMapping() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getMatchValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getPattern</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getServletName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="keyword">public</span> MappingMatch <span class="title">getMappingMatch</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getMethod</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getPathInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getPathTranslated</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> PushBuilder <span class="title">newPushBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getContextPath</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getQueryString</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getRemoteUser</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isUserInRole</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Principal <span class="title">getUserPrincipal</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getRequestedSessionId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getRequestURI</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">StringBuffer <span class="title">getRequestURL</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getServletPath</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">HttpSession <span class="title">getSession</span><span class="params">(<span class="keyword">boolean</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">HttpSession <span class="title">getSession</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">changeSessionId</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRequestedSessionIdValid</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRequestedSessionIdFromCookie</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRequestedSessionIdFromURL</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isRequestedSessionIdFromUrl</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">authenticate</span><span class="params">(HttpServletResponse var1)</span> <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">login</span><span class="params">(String var1, String var2)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">logout</span><span class="params">()</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Collection&lt;Part&gt; <span class="title">getParts</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Part <span class="title">getPart</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T extends HttpUpgradeHandler&gt; <span class="function">T <span class="title">upgrade</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> IOException, ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Map&lt;String, String&gt; <span class="title">getTrailerFields</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.emptyMap();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">boolean</span> <span class="title">isTrailerFieldsReady</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-5-HttpServletResponse-接口"><a href="#3-4-5-HttpServletResponse-接口" class="headerlink" title="3.4.5 HttpServletResponse 接口"></a>3.4.5 HttpServletResponse 接口</h4><p>HttpServletResponse 接口继承自 ServletResponse 接口，<code>专门用来封装 HTTP 响应消息</code>。由于 HTTP 响应消息分为<code>状态行、响应消息头、消息体</code>三部分，于是在 HttpServletResponse 接口中也相应定义了<code>向客户端发送响应状态码、响应消息头、响应消息体</code>的方法。</p><p>HttpServletResponse 接口提供的设置状态码并生成响应状态行的方法有以下。<br>（1）setStatus(int status) 方法：用于设置 HTTP 响应消息的状态码，并生成响应状态行。正常情况下，Web 服务器会默认产生一个状态码为 200 的状态行。<br>（2）sendError(int sc) 方法和 sendError(int sc, String msg) 方法：第 1 个方法只是发送错误信息的状态码；而第 2 个方法除了发送状态码外，还可以增加一条用于提示说明的文本信息，该文本信息将出现在发送给客户端的正文内容中。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108080814.png" alt="image-20201108080814415"></p><h5 id="3-4-5-1-响应消息头"><a href="#3-4-5-1-响应消息头" class="headerlink" title="3.4.5.1 响应消息头"></a>3.4.5.1 响应消息头</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ResponseHeadServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseHeadServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ResponseHeadServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 5秒后刷新并跳转到我的博客的网站首页</span></span><br><span class="line">response.setHeader(<span class="string">"Refresh"</span>, <span class="string">"5;URL=http://www.bithachi.cn"</span>);</span><br><span class="line"><span class="comment">// 每隔2秒定时刷新当前页面</span></span><br><span class="line"><span class="comment">// response.setHeader("Refresh", "2");</span></span><br><span class="line">response.getWriter().println(<span class="keyword">new</span> java.util.Date());<span class="comment">// 输出当前时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108085322.png" alt="image-20201108085321937"><br><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108085342.png" alt="image-20201108085341580"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108080821.png" alt="image-20201108080821009"></p><h5 id="3-4-5-2-响应消息体"><a href="#3-4-5-2-响应消息体" class="headerlink" title="3.4.5.2 响应消息体"></a>3.4.5.2 响应消息体</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ResponsePicServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponsePicServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ResponsePicServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 设置响应消息头Content-Type</span></span><br><span class="line">response.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line"><span class="comment">// 获取ServletContext对象</span></span><br><span class="line">ServletContext context = <span class="keyword">super</span>.getServletContext();</span><br><span class="line"><span class="comment">// 获取读取服务器端文件的输入流</span></span><br><span class="line">InputStream is = context.getResourceAsStream(<span class="string">"/images/ch2/abc.jpeg"</span>);</span><br><span class="line"><span class="comment">// 获取ServletOutputStream输出流</span></span><br><span class="line">ServletOutputStream os = response.getOutputStream();</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((i = is.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">os.write(i);<span class="comment">// 向输出流中写入二进制数据</span></span><br><span class="line">&#125;</span><br><span class="line">is.close();</span><br><span class="line">os.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108085931.png" alt="image-20201108085930281"><br>HttpServletResponse源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet.http;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Supplier;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HttpServletResponse</span> <span class="keyword">extends</span> <span class="title">ServletResponse</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> SC_CONTINUE = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_SWITCHING_PROTOCOLS = <span class="number">101</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_OK = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_CREATED = <span class="number">201</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_ACCEPTED = <span class="number">202</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NON_AUTHORITATIVE_INFORMATION = <span class="number">203</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NO_CONTENT = <span class="number">204</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_RESET_CONTENT = <span class="number">205</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PARTIAL_CONTENT = <span class="number">206</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_MULTIPLE_CHOICES = <span class="number">300</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_MOVED_PERMANENTLY = <span class="number">301</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_MOVED_TEMPORARILY = <span class="number">302</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_FOUND = <span class="number">302</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_SEE_OTHER = <span class="number">303</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_MODIFIED = <span class="number">304</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_USE_PROXY = <span class="number">305</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_TEMPORARY_REDIRECT = <span class="number">307</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_BAD_REQUEST = <span class="number">400</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_UNAUTHORIZED = <span class="number">401</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PAYMENT_REQUIRED = <span class="number">402</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_FORBIDDEN = <span class="number">403</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_FOUND = <span class="number">404</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_METHOD_NOT_ALLOWED = <span class="number">405</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_ACCEPTABLE = <span class="number">406</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PROXY_AUTHENTICATION_REQUIRED = <span class="number">407</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUEST_TIMEOUT = <span class="number">408</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_CONFLICT = <span class="number">409</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_GONE = <span class="number">410</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_LENGTH_REQUIRED = <span class="number">411</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_PRECONDITION_FAILED = <span class="number">412</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUEST_ENTITY_TOO_LARGE = <span class="number">413</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUEST_URI_TOO_LONG = <span class="number">414</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_UNSUPPORTED_MEDIA_TYPE = <span class="number">415</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_REQUESTED_RANGE_NOT_SATISFIABLE = <span class="number">416</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_EXPECTATION_FAILED = <span class="number">417</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_INTERNAL_SERVER_ERROR = <span class="number">500</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_NOT_IMPLEMENTED = <span class="number">501</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_BAD_GATEWAY = <span class="number">502</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_SERVICE_UNAVAILABLE = <span class="number">503</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_GATEWAY_TIMEOUT = <span class="number">504</span>;</span><br><span class="line">    <span class="keyword">int</span> SC_HTTP_VERSION_NOT_SUPPORTED = <span class="number">505</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCookie</span><span class="params">(Cookie var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsHeader</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">encodeURL</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">encodeRedirectURL</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function">String <span class="title">encodeUrl</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function">String <span class="title">encodeRedirectUrl</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendError</span><span class="params">(<span class="keyword">int</span> var1, String var2)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendError</span><span class="params">(<span class="keyword">int</span> var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendRedirect</span><span class="params">(String var1)</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setStatus</span><span class="params">(<span class="keyword">int</span> var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getStatus</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getHeader</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Collection&lt;String&gt; <span class="title">getHeaders</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Collection&lt;String&gt; <span class="title">getHeaderNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">setTrailerFields</span><span class="params">(Supplier&lt;Map&lt;String, String&gt;&gt; supplier)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">default</span> Supplier&lt;Map&lt;String, String&gt;&gt; getTrailerFields() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-4-6-ServletContext-接口"><a href="#3-4-6-ServletContext-接口" class="headerlink" title="3.4.6 ServletContext 接口"></a>3.4.6 ServletContext 接口</h4><p>Servlet 容器在启动一个 Web 应用时，会为该应用创建一个<code>唯一的 ServletContext 对象</code>供该应用中的所有 Servlet 对象共享。Servlet 对象可以通过 ServletContext 对象来访问容器中的各种资源。</p><p>获得 ServletContext 对象可以通过以下两种方式：</p><ol><li>通过 ServletConfig 接口的 getServletContext() 方法获得  ServletContext 对象。</li><li>通过 GenericServlet 抽象类的 getServletContext() 方法获得 ServletContext 对象，实质上该方法也调用了 ServletConfig 的 getServletContext() 方法。</li></ol><p>ServletContext 接口中定义了获取 Web 应用范围的初始化参数的方法，有以下。<br>（1）方法声明：public String getInitParameter(String name) ;<br>作用：返回 Web 应用范围内指定的初始化参数值。在 web.xml 中使用 <context-param> 元素表示应用范围内的初始化参数。<br>（2）方法声明：public Enumeration<String> getInitParameterNames();<br>作用：返回一个包含所有初始化参数名称的 Enumeration 对象。</p><h5 id="3-4-6-1-获取WEB应用的初始化参数"><a href="#3-4-6-1-获取WEB应用的初始化参数" class="headerlink" title="3.4.6.1 获取WEB应用的初始化参数"></a>3.4.6.1 获取WEB应用的初始化参数</h5><p>web.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>admin888<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>driverClassName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>org.postgresql.Driver<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc:postgresql://127.0.0.1:5432/postgres<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GetWebInitParamServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetWebInitParamServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GetWebInitParamServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 设置响应到客户端的文本类型为HTML</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 得到ServletContext对象</span></span><br><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">// 得到包含所有初始化参数名的Enumeration对象</span></span><br><span class="line">Enumeration&lt;String&gt; paramNames = context.getInitParameterNames();</span><br><span class="line"><span class="comment">// 获取输出流</span></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line"><span class="comment">// 遍历所有的初始化参数名，得到相应的参数值，打印到控制台</span></span><br><span class="line">out.print(<span class="string">"&lt;h2&gt;当前Web应用的所有初始化参数：&lt;/h2&gt;"</span>);</span><br><span class="line"><span class="comment">// 遍历所有的初始化参数名，得到相应的参数值并打印</span></span><br><span class="line"><span class="keyword">while</span> (paramNames.hasMoreElements()) &#123;</span><br><span class="line">String name = paramNames.nextElement();</span><br><span class="line">String value = context.getInitParameter(name);</span><br><span class="line">out.println(name + <span class="string">"："</span> + value);</span><br><span class="line">out.println(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108090330.png" alt="image-20201108090330016"></p><h5 id="3-4-6-2-实现多个Servlet对象共享数据"><a href="#3-4-6-2-实现多个Servlet对象共享数据" class="headerlink" title="3.4.6.2 实现多个Servlet对象共享数据"></a>3.4.6.2 实现多个Servlet对象共享数据</h5><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108081209.png" alt="image-20201108081209675"></p><p><strong>先访问PutContextDataServlet.java设置共享数据，再访问GetContextDataServlet.java获取共享数据</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mialab.servlet_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/PutContextDataServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PutContextDataServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PutContextDataServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">// 通过setAttribute()方法设置属性值</span></span><br><span class="line">context.setAttribute(<span class="string">"contextData"</span>, <span class="string">"Here is contexData"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GetContextDataServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetContextDataServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GetContextDataServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">// 通过getAttribute()方法获取属性值</span></span><br><span class="line">String data = (String) context.getAttribute(<span class="string">"contextData"</span>);</span><br><span class="line">out.println(data);</span><br><span class="line">System.out.println(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108090922.png" alt="image-20201108090922188"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108090944.png" alt="image-20201108090944433"></p><h5 id="3-4-6-3-读取WEB应用下的资源文件"><a href="#3-4-6-3-读取WEB应用下的资源文件" class="headerlink" title="3.4.6.3 读取WEB应用下的资源文件"></a>3.4.6.3 读取WEB应用下的资源文件</h5><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108081217.png" alt="image-20201108081217655"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108092051.png" alt="image-20201108092051407"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/GetResourceServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetResourceServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">GetResourceServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"><span class="comment">// 获取文件绝对路径</span></span><br><span class="line">String path = context.getRealPath(<span class="string">"/WEB-INF/classes/data.properties"</span>);</span><br><span class="line">FileInputStream in = <span class="keyword">new</span> FileInputStream(path);</span><br><span class="line">Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line">pros.load(in);</span><br><span class="line">out.println(<span class="string">"username = "</span> + pros.getProperty(<span class="string">"username"</span>) + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"password = "</span> + pros.getProperty(<span class="string">"password"</span>) + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"driverClassName = "</span> + pros.getProperty(<span class="string">"driverClassName"</span>) + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"url = "</span> + pros.getProperty(<span class="string">"url"</span>) + <span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108092115.png" alt="image-20201108092115021"></p><p>ServletContext.java源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Source code recreated from a .class file by IntelliJ IDEA</span></span><br><span class="line"><span class="comment">// (powered by FernFlower decompiler)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> javax.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.EventListener;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRegistration.Dynamic;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.descriptor.JspConfigDescriptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ServletContext</span> </span>&#123;</span><br><span class="line">    String TEMPDIR = <span class="string">"javax.servlet.context.tempdir"</span>;</span><br><span class="line">    String ORDERED_LIBS = <span class="string">"javax.servlet.context.orderedLibs"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getContextPath</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ServletContext <span class="title">getContext</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMajorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMinorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getEffectiveMajorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getEffectiveMinorVersion</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getMimeType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Set&lt;String&gt; <span class="title">getResourcePaths</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">URL <span class="title">getResource</span><span class="params">(String var1)</span> <span class="keyword">throws</span> MalformedURLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">InputStream <span class="title">getResourceAsStream</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">RequestDispatcher <span class="title">getRequestDispatcher</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">RequestDispatcher <span class="title">getNamedDispatcher</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function">Servlet <span class="title">getServlet</span><span class="params">(String var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function">Enumeration&lt;Servlet&gt; <span class="title">getServlets</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function">Enumeration&lt;String&gt; <span class="title">getServletNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(Exception var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">log</span><span class="params">(String var1, Throwable var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getRealPath</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getServerInfo</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getInitParameter</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Enumeration&lt;String&gt; <span class="title">getInitParameterNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">setInitParameter</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Object <span class="title">getAttribute</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Enumeration&lt;String&gt; <span class="title">getAttributeNames</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAttribute</span><span class="params">(String var1, Object var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeAttribute</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getServletContextName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String var1, Servlet var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dynamic <span class="title">addServlet</span><span class="params">(String var1, Class&lt;? extends Servlet&gt; var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dynamic <span class="title">addJspFile</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T extends Servlet&gt; <span class="function">T <span class="title">createServlet</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ServletRegistration <span class="title">getServletRegistration</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, ? extends ServletRegistration&gt; getServletRegistrations();</span><br><span class="line"></span><br><span class="line">    javax.servlet.FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    javax.servlet.FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String var1, Filter var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    javax.servlet.FilterRegistration.<span class="function">Dynamic <span class="title">addFilter</span><span class="params">(String var1, Class&lt;? extends Filter&gt; var2)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T extends Filter&gt; <span class="function">T <span class="title">createFilter</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">FilterRegistration <span class="title">getFilterRegistration</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, ? extends FilterRegistration&gt; getFilterRegistrations();</span><br><span class="line"></span><br><span class="line">    <span class="function">SessionCookieConfig <span class="title">getSessionCookieConfig</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSessionTrackingModes</span><span class="params">(Set&lt;SessionTrackingMode&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Set&lt;SessionTrackingMode&gt; <span class="title">getDefaultSessionTrackingModes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Set&lt;SessionTrackingMode&gt; <span class="title">getEffectiveSessionTrackingModes</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T extends EventListener&gt; <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(T var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addListener</span><span class="params">(Class&lt;? extends EventListener&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    &lt;T extends EventListener&gt; <span class="function">T <span class="title">createListener</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> ServletException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">JspConfigDescriptor <span class="title">getJspConfigDescriptor</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ClassLoader <span class="title">getClassLoader</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">declareRoles</span><span class="params">(String... var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getVirtualServerName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSessionTimeout</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSessionTimeout</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getRequestCharacterEncoding</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setRequestCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">getResponseCharacterEncoding</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setResponseCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Servlet处理表单数据"><a href="#4-Servlet处理表单数据" class="headerlink" title="4. Servlet处理表单数据"></a>4. Servlet处理表单数据</h2><p>表单数据是指通过表单让用户填写内容，然后提交到服务器上；这些数据被称之为表单数据。<br><code>Servlet  处理表单数据</code>可以使用以下的方法：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108092522.png" alt="image-20201108092522230"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Servlet处理表单数据<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>个人信息<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/formtest"</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">密 <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>码 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">性 <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>别 ：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"boy"</span></span></span><br><span class="line"><span class="tag"><span class="attr">checked</span>&gt;</span>男<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"girl"</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">家 <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>乡 ：<span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"home"</span>&gt;</span><span class="tag">&lt;<span class="name">option</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"suzhou"</span>&gt;</span>苏州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"shanghai"</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"nanjing"</span>&gt;</span>南京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">爱 <span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>好： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"swim"</span>&gt;</span>游泳 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"go"</span>&gt;</span>围棋 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hobby"</span></span></span><br><span class="line"><span class="tag"><span class="attr">value</span>=<span class="string">"music"</span>&gt;</span>音乐</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">自我介绍：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"info"</span> <span class="attr">rows</span>=<span class="string">"5"</span> <span class="attr">cols</span>=<span class="string">"26"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> webstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/formtest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FormServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FormServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 设置响应到客户端MIME类型和字符编码方式</span></span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置request对象的解码方式</span></span><br><span class="line">        request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        String sex = request.getParameter(<span class="string">"sex"</span>);</span><br><span class="line">        String home = request.getParameter(<span class="string">"home"</span>);</span><br><span class="line">        String info = request.getParameter(<span class="string">"info"</span>);</span><br><span class="line">        <span class="comment">//获取所有参数</span></span><br><span class="line">        Enumeration&lt;String&gt; enu=request.getParameterNames();</span><br><span class="line">        <span class="comment">//循环打印jsp的name值</span></span><br><span class="line">        <span class="keyword">while</span>(enu.hasMoreElements()) &#123;</span><br><span class="line">            String paramName = (String) enu.nextElement();</span><br><span class="line">            System.out.println(paramName);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取输出流</span></span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line">        out.println(<span class="string">"&lt;p&gt;用户名："</span> + username + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;p&gt;密码："</span> + password + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;p&gt;性别："</span> + sex + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;p&gt;家乡："</span> + home + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;p&gt;爱好："</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取参数名为“hobby”的值</span></span><br><span class="line">        String[] hobbys = request.getParameterValues(<span class="string">"hobby"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hobbys.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; hobbys.length - <span class="number">1</span>) &#123;</span><br><span class="line">                out.println(hobbys[i] + <span class="string">"，"</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                out.println(hobbys[i] + <span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        out.println(<span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">        out.println(<span class="string">"&lt;p&gt;自我介绍："</span> + info + <span class="string">"&lt;/p&gt;"</span>);</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(request, response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108092925.png" alt="image-20201108092925231"></p><h2 id="5-Servlet-重定向和请求转发"><a href="#5-Servlet-重定向和请求转发" class="headerlink" title="5.Servlet 重定向和请求转发"></a>5.Servlet 重定向和请求转发</h2><p><code>请求转发</code>只是把请求转发给服务器上（通常是同一个 Web 应用中）的另一个组件（ Servlet 或 JSP等）；</p><p><code>重定向</code>则只是告诉客户（浏览器）去访问另一个 URL（可能是同一个 Web 站点甚至其他站点）。</p><p><code>请求转发</code>发生在服务器端，由服务器（比如 Servlet）控制；</p><p><code>重定向</code>发生在客户端，由客户（通常是浏览器）控制。</p><p><code>请求转发</code>使用 RequestDispatcher 对象的 forward() 或 include()方法。<br><code>重定向</code>则使用 HttpServletResponse 对象的 sendRedirect() 方法。    </p><h3 id="5-1-重定向"><a href="#5-1-重定向" class="headerlink" title="5.1 重定向"></a>5.1 重定向</h3><p><code>重定向</code>后则无法在服务器端获取第一次请求对象上保存的信息。比如还是在  Servlet 中将用户名保存到当前 request 对象中，并重定向到一个新的 URL，然后在新 URL 指向的地址中（假设是某个 Servlet）就无法获取原先保存在第一个请求中的信息。很明显，用户名是保存在第一次请求的对象中，但并没有保存在本次（第二次）请求的对象中。<br>重定向后，浏览器地址栏 URL 变为新的 URL（因为浏览器确实给新的 URL 发送了一个<code>新的请求</code>）。</p><p>访问RedirectServlet，重定向到AnotherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/RedirectServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">RedirectServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 设置响应到客户端的文本类型为HTML</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 输出当前时间</span></span><br><span class="line">response.getWriter().println(<span class="keyword">new</span> java.util.Date());</span><br><span class="line"><span class="comment">// 进行重定向</span></span><br><span class="line">response.sendRedirect(request.getContextPath() + <span class="string">"/AnotherServlet"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/AnotherServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnotherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AnotherServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 设置响应到客户端的文本类型为HTML</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 获取输出流</span></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line"><span class="comment">// 输出响应结果</span></span><br><span class="line">out.println(<span class="string">"&lt;p&gt;重定向页面&lt;/p&gt;"</span>);</span><br><span class="line">out.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://localhost:8080/RedirectServlet" target="_blank" rel="noopener">http://localhost:8080/RedirectServlet</a>   —&gt; <a href="http://localhost:8080/AnotherServlet" target="_blank" rel="noopener">http://localhost:8080/AnotherServlet</a></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108093750.png" alt="image-20201108093750469"></p><h3 id="5-2-请求转发"><a href="#5-2-请求转发" class="headerlink" title="5.2 请求转发"></a>5.2 请求转发</h3><p><code>请求转发</code>后可以在服务器端获取本次请求对象上保存的信息（比如在 Servlet 中将用户名保存到当前 request 对象中，转发给另一组件（如 JSP ）后，另一组件可以通过 request 对象取得用户名信息）。<br>请求转发后，浏览器地址栏 <code>URL 不会发生改变</code>。</p><p><code>RequestDispatcher</code>对象是通过调用 HttpServletRequest 对象的getRequestDispatcher()方法得到的，所以 forward() 或 include() 本质来说是属于请求对象的方法，所以请求转发始终发生在一个请求当中。</p><p><strong>forword() 和 include() 的区别：</strong></p><p><code>forward()</code>：表示在服务器端从一个 Servlet 中将请求转发到另一个资源（Servlet、JSP 或 HTML 等），本意是让第一个组件对请求做些预处理（或者什么都不做），而让另一组件处理并返回响应。</p><p><code>include()</code>：表示在响应中包含另一个资源（Servlet、JSP 或 HTML 等）的响应内容，最终被包含的页面产生的任何响应都将并入原来的 response 对象，然后一起输出到客户端。</p><p>请求ForwardServlet，转发到OtherServlet</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.RequestDispatcher;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ForwardServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ForwardServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/******************* 转发请求 *******************/</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 将key为bookname，value为《Android应用开发实践教程》的属性对象存储到request对象中</span></span><br><span class="line">request.setAttribute(<span class="string">"bookname"</span>, <span class="string">"《Android应用开发实践教程》"</span>);</span><br><span class="line">RequestDispatcher dispatcher = request.getRequestDispatcher(<span class="string">"/OtherServlet"</span>);</span><br><span class="line">dispatcher.forward(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/OtherServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OtherServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OtherServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// 设置响应到客户端的文本类型为HTML</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"><span class="comment">// 从request对象中获取bookname属性值</span></span><br><span class="line">String bookname = (String) request.getAttribute(<span class="string">"bookname"</span>);</span><br><span class="line"><span class="comment">// 获取输出流</span></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line"><span class="comment">// 输出响应结果</span></span><br><span class="line">out.println(<span class="string">"&lt;p&gt;请求转发的结果页面&lt;/p&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"读取的request对象的bookname属性值为："</span> + bookname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108094253.png" alt="image-20201108094253305"></p><h2 id="6-Servlet数据库访问"><a href="#6-Servlet数据库访问" class="headerlink" title="6. Servlet数据库访问"></a>6. Servlet数据库访问</h2><p> JDBC（Java DataBase Connectivity，java 数据库连接）是一种用于执行 SQL 语句的 Java API ，可以为多种关系数据库提供统一访问，它由一组用 Java 语言编写的类和接口组成。 JDBC 提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够更为便利地编写数据库应用程序。</p><p><strong>一个示例：</strong></p><p>文件结构：</p><p> <img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108094827.png" alt="image-20201108094826868"></p><p>book.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> FOREIGN_KEY_CHECKS=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Table structure for book</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`book`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`book`</span> (</span><br><span class="line">  <span class="string">`bookId`</span> <span class="built_in">int</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`bookName`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`bookId`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="comment">-- Records of book</span></span><br><span class="line"><span class="comment">-- ----------------------------</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span> <span class="keyword">VALUES</span> (<span class="string">'9801'</span>, <span class="string">'Android应用开发实践教程'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span> <span class="keyword">VALUES</span> (<span class="string">'9802'</span>, <span class="string">'Web应用开发'</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span> <span class="keyword">VALUES</span> (<span class="string">'9803'</span>, <span class="string">'iOS程序设计'</span>);</span><br></pre></td></tr></table></figure><p>测试数据：</p><p> <img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108095009.png" alt="image-20201108095009058"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> webstudy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/jdbctest"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String JDBC_Driver = <span class="string">"com.mysql.jdbc.Driver"</span>;</span><br><span class="line">    String DB_URL = <span class="string">"jdbc:mysql://localhost:3306/message?useSSL=true"</span>;</span><br><span class="line">    String user = <span class="string">"root"</span>;</span><br><span class="line">    String password = <span class="string">"123456"</span>;</span><br><span class="line">    Connection con1 = <span class="keyword">null</span>;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs1;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        PrintWriter out = response.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(JDBC_Driver);</span><br><span class="line">            con1 = DriverManager.getConnection(DB_URL, user, password);</span><br><span class="line">            stmt = con1.createStatement();</span><br><span class="line">            String sql;</span><br><span class="line">            sql = <span class="string">"select bookid,bookName from book"</span>;</span><br><span class="line">            rs1 = stmt.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs1.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs1.getInt(<span class="string">"bookid"</span>);</span><br><span class="line">                String bookname1 = rs1.getString(<span class="string">"bookName"</span>);</span><br><span class="line">                out.println(<span class="string">"bookid:"</span> + id);</span><br><span class="line">                out.println(<span class="string">",bookName:"</span> + bookname1);</span><br><span class="line">                out.println(<span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            rs1.close();</span><br><span class="line">            stmt.close();</span><br><span class="line">            con1.close();</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//out.close();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108095223.png" alt="image-20201108095223277"></p><h2 id="7-Servlet-异常处理"><a href="#7-Servlet-异常处理" class="headerlink" title="7. Servlet 异常处理"></a>7. Servlet 异常处理</h2><p>当一个 Servlet 抛出一个异常时，Web  容器在使用了 <code>exception-type</code>元素的 <code>web.xml</code>中搜索与抛出异常类型相匹配的配置。可以在<code>web.xml</code>中使用<code>error-page</code>元素来指定对特定异常 或 HTTP 状态码作出相应的 Servlet 调用。</p><p>假设有一个 <code>ErrorHandler</code>的 Servlet 在任何已定义的异常或错误出现时被调用，以下将是在 web.xml 中创建的项。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--********************* 定义 *********************--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>book.ch2.ErrorHandlerServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--********************* 映射 *********************--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--********************* 相关错误页面 *********************--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>403<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>javax.servlet.ServletException<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.io.IOException<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于上面的<code>web.xml</code>中异常处理几点说明：<br> ErrorHandler 与其他的 Servelt 的定义方式一样，且在 web.xml 中进行配置。<br> 如果有错误状态代码出现，不管为  404（Not Found 未找到）或  403（Forbidden 禁止），则会调用 ErrorHandler。<br> 如果 Web 应用程序抛出 ServletException 或 IOException，Web 容器则会调用 ErrorHandler。<br> 可以定义不同的错误处理程序来处理不同类型的错误或异常。</p><p>如果要<code>对所有的异常有一个通用的错误处理程序</code>，那么应该定义下面的 <code>error-page</code>，而不是为每个异常定义单独的 error-page 元素：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一个示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--********************* 定义 *********************--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>book.ch2.ErrorHandlerServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--********************* 映射 *********************--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>ErrorHandler<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--********************* 相关错误页面 *********************--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exception-type</span>&gt;</span>java.lang.Throwable<span class="tag">&lt;/<span class="name">exception-type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">location</span>&gt;</span>/ErrorHandler<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ErrorHandlerServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorHandlerServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ErrorHandlerServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">Throwable throwable = (Throwable) request.getAttribute(<span class="string">"javax.servlet.error.exception"</span>);</span><br><span class="line">Integer statusCode = (Integer) request.getAttribute(<span class="string">"javax.servlet.error.status_code"</span>);</span><br><span class="line">String servletName = (String) request.getAttribute(<span class="string">"javax.servlet.error.servlet_name"</span>);</span><br><span class="line"><span class="keyword">if</span> (servletName == <span class="keyword">null</span>) &#123;</span><br><span class="line">servletName = <span class="string">"Unknown"</span>;</span><br><span class="line">&#125;</span><br><span class="line">String requestUri = (String) request.getAttribute(<span class="string">"javax.servlet.error.request_uri"</span>);</span><br><span class="line"><span class="keyword">if</span> (requestUri == <span class="keyword">null</span>) &#123;</span><br><span class="line">requestUri = <span class="string">"Unknown"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置响应内容类型</span></span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">String title = <span class="string">"Servlet处理 Error/Exception"</span>;</span><br><span class="line"></span><br><span class="line">String docType = <span class="string">"&lt;!DOCTYPE html&gt;\n"</span>;</span><br><span class="line">out.println(</span><br><span class="line">docType + <span class="string">"&lt;html&gt;\n"</span> + <span class="string">"&lt;head&gt;&lt;title&gt;"</span> + title + <span class="string">"&lt;/title&gt;&lt;/head&gt;\n"</span> + <span class="string">"&lt;body bgcolor=\"#f0f0f0\"&gt;\n"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;h3&gt;Servlet异常/错误处理&lt;/h3&gt;"</span>);</span><br><span class="line"><span class="keyword">if</span> (throwable == <span class="keyword">null</span> &amp;&amp; statusCode == <span class="keyword">null</span>) &#123;</span><br><span class="line">out.println(<span class="string">"&lt;h3&gt;错误信息丢失&lt;/h2&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"请返回 &lt;a href=\""</span> + response.encodeURL(<span class="string">"http://localhost:8080/"</span>) + <span class="string">"\"&gt;主页&lt;/a&gt;。"</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode != <span class="keyword">null</span>) &#123;</span><br><span class="line">out.println(<span class="string">"错误代码 : "</span> + statusCode + <span class="string">"&lt;br&gt;&lt;br&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"Servlet Name : "</span> + servletName + <span class="string">"&lt;/br&gt;&lt;/br&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"异常类型 : "</span> + throwable.getClass().getName() + <span class="string">"&lt;/br&gt;&lt;/br&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"请求 URI: "</span> + requestUri + <span class="string">"&lt;br&gt;&lt;br&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"异常信息: "</span> + throwable.getMessage());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//out.println("&lt;h3&gt;错误信息&lt;/h3&gt;");</span></span><br><span class="line"><span class="comment">//out.println("Servlet Name : " + servletName + "&lt;/br&gt;&lt;/br&gt;");</span></span><br><span class="line"><span class="comment">//out.println("异常类型 : " + throwable.getClass().getName() + "&lt;/br&gt;&lt;/br&gt;");</span></span><br><span class="line"><span class="comment">//out.println("请求 URI: " + requestUri + "&lt;br&gt;&lt;br&gt;");</span></span><br><span class="line"><span class="comment">//out.println("异常信息: " + throwable.getMessage());</span></span><br><span class="line">&#125;</span><br><span class="line">out.println(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">out.println(<span class="string">"&lt;/html&gt;"</span>);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> book.ch2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/ExceptionServlet"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ExceptionServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">126</span>/<span class="number">0</span>;</span><br><span class="line"><span class="comment">//int[] array = &#123;2,4,6&#125;;</span></span><br><span class="line"><span class="comment">//System.out.println(array[3]);</span></span><br><span class="line"><span class="comment">//throw new ArrayIndexOutOfBoundsException();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">doGet(request, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201108100930.png" alt="image-20201108100930408"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Servlet </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Oracle12c与Oracle11g采用触发器与存储过程实现同步更新（代码+图解）</title>
      <link href="/posts/198e6f50.html"/>
      <url>/posts/198e6f50.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、保证两台笔记本网络互通"><a href="#一、保证两台笔记本网络互通" class="headerlink" title="一、保证两台笔记本网络互通"></a>一、保证两台笔记本网络互通</h2><p>关于连接，详情见之前写的：<a href="https://blog.csdn.net/weixin_43914604/article/details/109089438" target="_blank" rel="noopener">WIFI网络，两台笔记本互联Oracle，一台是11g,一台是12c</a></p><p>现在测试的ip地址：</p><ul><li>A: 10.65.252.84</li><li>B: 10.82.156.248</li></ul><h2 id="二、用户简单架构图及权限设计"><a href="#二、用户简单架构图及权限设计" class="headerlink" title="二、用户简单架构图及权限设计"></a>二、用户简单架构图及权限设计</h2><ul><li>A机的DBA账户是shj_dba，B机的DBA账户是c##hachi</li><li>中间的为连接名，标明连接的名字，对应权限的用户使用对方跟自己权限相同的账号，通过连接名访问对方数据库。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023004617.png" alt="image-20201023004617075"></p><ul><li>各个用户的权限</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023021653.png" alt="image-20201023021653854"></p><h2 id="三、表结构"><a href="#三、表结构" class="headerlink" title="三、表结构"></a>三、表结构</h2><ul><li>这里双方都采用以下语句创建表，表就建立在各自sys创建的DBA的模式下，不建立任何外键和索引，以免发生同步触发器更新异常，初学先入个门吧！</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023011006.png" alt="image-20201023011006150"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023011048.png" alt="image-20201023011048816"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "part"                                                */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"part"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"p_id"</span>               <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"p_name"</span>             <span class="built_in">VARCHAR2</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"p_size"</span>             <span class="built_in">VARCHAR2</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"p_price"</span>            <span class="built_in">FLOAT</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"p_desc"</span>             <span class="built_in">VARCHAR2</span>(<span class="number">50</span>),</span><br><span class="line">   <span class="keyword">constraint</span> PK_PART primary <span class="keyword">key</span> (<span class="string">"p_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "project"                                             */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"project"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"pj_id"</span>              <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"pj_money"</span>           <span class="built_in">FLOAT</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"pj_date"</span>            <span class="built_in">DATE</span>,</span><br><span class="line">   <span class="keyword">constraint</span> PK_PROJECT primary <span class="keyword">key</span> (<span class="string">"pj_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "staff"                                               */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"staff"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"sf_id"</span>              <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"s_id"</span>               <span class="built_in">INTEGER</span>,</span><br><span class="line">   <span class="string">"sta_sf_id"</span>          <span class="built_in">INTEGER</span>,</span><br><span class="line">   <span class="string">"sf_name"</span>            <span class="built_in">VARCHAR2</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"sf_age"</span>             <span class="built_in">SMALLINT</span>,</span><br><span class="line">   <span class="string">"sf_xname"</span>           <span class="built_in">VARCHAR2</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="keyword">constraint</span> PK_STAFF primary <span class="keyword">key</span> (<span class="string">"sf_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "storage"                                             */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"storage"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"s_id"</span>               <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"s_area"</span>             <span class="built_in">FLOAT</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"s_phone"</span>            <span class="built_in">VARCHAR2</span>(<span class="number">11</span>),</span><br><span class="line">   <span class="keyword">constraint</span> PK_STORAGE primary <span class="keyword">key</span> (<span class="string">"s_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "storage_info"                                        */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"storage_info"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"s_id"</span>               <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"p_id"</span>               <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"sf_num"</span>             <span class="built_in">INTEGER</span>,</span><br><span class="line">   <span class="keyword">constraint</span> PK_STORAGE_INFO primary <span class="keyword">key</span> (<span class="string">"s_id"</span>, <span class="string">"p_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "supplier"                                            */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"supplier"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"sp_id"</span>              <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"sp_name"</span>            <span class="built_in">VARCHAR2</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"sp_address"</span>         <span class="built_in">VARCHAR2</span>(<span class="number">30</span>),</span><br><span class="line">   <span class="string">"sp_phone"</span>           <span class="built_in">VARCHAR2</span>(<span class="number">11</span>),</span><br><span class="line">   <span class="string">"sp_acount"</span>          <span class="built_in">VARCHAR2</span>(<span class="number">15</span>),</span><br><span class="line">   <span class="keyword">constraint</span> PK_SUPPLIER primary <span class="keyword">key</span> (<span class="string">"sp_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "supply_info"                                         */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"supply_info"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"p_id"</span>               <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"pj_id"</span>              <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"sp_id"</span>              <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"sp_num"</span>             <span class="built_in">INTEGER</span>,</span><br><span class="line">   <span class="keyword">constraint</span> PK_SUPPLY_INFO primary <span class="keyword">key</span> (<span class="string">"p_id"</span>, <span class="string">"pj_id"</span>, <span class="string">"sp_id"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="四、sys授予系统权限，创建DBA账户"><a href="#四、sys授予系统权限，创建DBA账户" class="headerlink" title="四、sys授予系统权限，创建DBA账户"></a>四、sys授予系统权限，创建DBA账户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--------------------------   一些可能用得上的查询调试语句   ------------------------------------------ </span></span><br><span class="line"><span class="comment">-- 命令行查看是否有远程连接权限</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_sys_privs <span class="keyword">where</span> privilege <span class="keyword">like</span> <span class="keyword">upper</span>(<span class="string">'%DATABASE LINK%'</span>); </span><br><span class="line"><span class="comment">-- 命令行窗口使用system管理员去grant授权远程连接</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">LINK</span> <span class="keyword">to</span> <span class="keyword">public</span>; </span><br><span class="line"><span class="comment">-- 查看远程连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_db_links;  </span><br><span class="line"> <span class="comment">-- 创建同义词</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">public</span> <span class="keyword">synonym</span> stu <span class="keyword">for</span> student;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu;</span><br><span class="line"><span class="comment">--删除同义词</span></span><br><span class="line"><span class="keyword">drop</span>  <span class="keyword">synonym</span> remote ;</span><br><span class="line"><span class="comment">-- 删除远程连接</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">link</span> linkname;</span><br><span class="line"><span class="comment">-- ORACLE 查找所有同义词</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SYS.ALL_SYNONYMS t <span class="keyword">WHERE</span> t.owner <span class="keyword">in</span> (<span class="string">'C##HACHI'</span>);</span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">------------------------------------   A机   ---------------------------------------------- </span></span><br><span class="line">conn sys/a123456 as sysdba; </span><br><span class="line"><span class="comment">-- 授予所有用户连接权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- 授予所有用户创建远程连接权限，这样所有用户都可以创建和删除远程连接 database link</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">LINK</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- 授予所有用户创建同义词的权限,这样所有用户都可以创建和删除同义词 synonym</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">CREATE</span> <span class="keyword">synonym</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- DBA用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> shj_dba <span class="keyword">IDENTIFIED</span> <span class="keyword">by</span> a123456;</span><br><span class="line"><span class="keyword">grant</span> dba,<span class="keyword">connect</span>,<span class="keyword">resource</span> <span class="keyword">to</span> shj_dba;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">------------------------------------   B机   ---------------------------------------------- </span></span><br><span class="line">conn sys/a123456 as sysdba; </span><br><span class="line"><span class="comment">-- 授予所有用户连接权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- 授予所有用户创建远程连接权限，这样所有用户都可以创建和删除远程连接 database link</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">LINK</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- 授予所有用户创建同义词的权限,这样所有用户都可以创建和删除同义词 synonym</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">CREATE</span> <span class="keyword">synonym</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- DBA用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> c<span class="comment">##hachi IDENTIFIED by a123456;</span></span><br><span class="line"><span class="keyword">grant</span> dba,<span class="keyword">connect</span>,<span class="keyword">resource</span> <span class="keyword">to</span> c<span class="comment">##hachi;</span></span><br></pre></td></tr></table></figure><h2 id="五、双方各自创建的DBA账户再创建其他用户，以及私有同义词"><a href="#五、双方各自创建的DBA账户再创建其他用户，以及私有同义词" class="headerlink" title="五、双方各自创建的DBA账户再创建其他用户，以及私有同义词"></a>五、双方各自创建的DBA账户再创建其他用户，以及私有同义词</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">------------------------------------   B机   ---------------------------------------------- </span></span><br><span class="line">conn c<span class="comment">##hachi/a123456;</span></span><br><span class="line"><span class="comment">-- 供应商用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> c<span class="comment">##supplier IDENTIFIED by a123456 ;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span>  <span class="string">"supplier"</span> <span class="keyword">to</span> c<span class="comment">##supplier;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span> <span class="string">"supply_info"</span> <span class="keyword">to</span> c<span class="comment">##supplier;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"part"</span> <span class="keyword">to</span> c<span class="comment">##supplier;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"project"</span> <span class="keyword">to</span> c<span class="comment">##supplier;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 领导用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> c<span class="comment">##leader IDENTIFIED by a123456 ;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span> <span class="string">"staff"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"supplier"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"supply_info"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"project"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"part"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"storage"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"storage_info"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 职工用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> c<span class="comment">##staff IDENTIFIED by a123456;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"staff"</span> <span class="keyword">to</span> c<span class="comment">##staff;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"storage"</span> <span class="keyword">to</span> c<span class="comment">##staff;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建4个不同用户权限的远程连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">conn</span> c<span class="comment">##hachi/a123456;</span></span><br><span class="line"><span class="comment">-- 本机DBA用户c##hachi，使用对方的DBA账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  shj0dba   <span class="keyword">connect</span> <span class="keyword">to</span> shj_dba <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"a123456"</span> <span class="keyword">using</span> <span class="string">'10.65.252.84/orcl'</span>;</span><br><span class="line"><span class="comment">-- 创建同义词</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> <span class="string">"part"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> <span class="string">"project"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> <span class="string">"staff"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> <span class="string">"storage"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage_info <span class="keyword">for</span> <span class="string">"storage_info"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> <span class="string">"supplier"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> <span class="string">"supply_info"</span>@shj0dba;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">conn c<span class="comment">##leader/a123456;</span></span><br><span class="line"><span class="comment">-- 本机领导用户c##leader，使用对方的领导账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  shj0leader   <span class="keyword">connect</span> <span class="keyword">to</span> shj_leader <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"a123456"</span> <span class="keyword">using</span> <span class="string">'10.65.252.84/orcl'</span>;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> shj_dba.<span class="string">"part"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> shj_dba.<span class="string">"project"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> shj_dba.<span class="string">"staff"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> shj_dba.<span class="string">"storage"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage_info <span class="keyword">for</span> shj_dba.<span class="string">"storage_info"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> shj_dba.<span class="string">"supplier"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> shj_dba.<span class="string">"supply_info"</span>@shj0leader;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"> <span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">conn c<span class="comment">##supplier/a123456;</span></span><br><span class="line"><span class="comment">-- 本机供应商用户c##supplier，使用对方的供应商账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  shj0supplier   <span class="keyword">connect</span> <span class="keyword">to</span> shj_supplier <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"a123456"</span> <span class="keyword">using</span> <span class="string">'10.65.252.84/orcl'</span>;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> shj_dba.<span class="string">"part"</span>@shj0supplier;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> shj_dba.<span class="string">"project"</span>@shj0supplier;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> shj_dba.<span class="string">"supplier"</span>@shj0supplier;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> shj_dba.<span class="string">"supply_info"</span>@shj0supplier;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"> <span class="keyword">commit</span>;</span><br><span class="line"> </span><br><span class="line">conn c<span class="comment">##staff/a123456;</span></span><br><span class="line"><span class="comment">-- 本机员工用户c##staff，使用对方的员工账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  shj0staff   <span class="keyword">connect</span> <span class="keyword">to</span> shj_staff <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"a123456"</span> <span class="keyword">using</span> <span class="string">'10.65.252.84/orcl'</span>;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> shj_dba.<span class="string">"staff"</span>@shj0staff ;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> shj_dba.<span class="string">"storage"</span>@shj0staff;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_staff;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023011729.png" alt="image-20201023011729623"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">------------------------------------   A机   ---------------------------------------------- </span></span><br><span class="line">conn shj_dba/a123456;</span><br><span class="line"><span class="comment">-- 供应商用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> shj_supplier <span class="keyword">IDENTIFIED</span> <span class="keyword">by</span> a123456 ;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span>  <span class="string">"supplier"</span> <span class="keyword">to</span> shj_supplier;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span> <span class="string">"supply_info"</span> <span class="keyword">to</span> shj_supplier;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"part"</span> <span class="keyword">to</span> shj_supplier;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"project"</span> <span class="keyword">to</span> shj_supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 领导用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> shj_leader <span class="keyword">IDENTIFIED</span> <span class="keyword">by</span> a123456 ;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span> <span class="string">"staff"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"supplier"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"supply_info"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"project"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"part"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"storage"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"storage_info"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 职工用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> shj_staff <span class="keyword">IDENTIFIED</span> <span class="keyword">by</span> a123456;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"staff"</span> <span class="keyword">to</span> shj_staff;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"storage"</span> <span class="keyword">to</span> shj_staff;</span><br><span class="line"> <span class="keyword">commit</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 删除同名同义词与连接</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_part;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_project;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_staff;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_storage;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_storage_info;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_supplier;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_supply_info;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">link</span> c<span class="comment">##0hachi;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建4个不同用户权限的远程连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">conn</span> shj_dba/a123456;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 本机DBA用户shj_dba，使用对方的DBA账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  c<span class="comment">##0hachi connect to "c##hachi" identified by "a123456" using '10.82.156.248/orcl';</span></span><br><span class="line"><span class="comment">-- 创建同义词</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> <span class="string">"part"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> <span class="string">"project"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> <span class="string">"staff"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> <span class="string">"storage"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage_info <span class="keyword">for</span> <span class="string">"storage_info"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> <span class="string">"supplier"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> <span class="string">"supply_info"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">conn shj_leader/a123456;</span><br><span class="line"><span class="comment">-- 本机领导用户shj_leader，使用对方的领导账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  c<span class="comment">##0leader   connect to "c##leader" identified by "a123456" using '10.82.156.248/orcl';</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> c<span class="comment">##hachi."part"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> c<span class="comment">##hachi."project"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> c<span class="comment">##hachi."staff"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> c<span class="comment">##hachi."storage"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage_info <span class="keyword">for</span> c<span class="comment">##hachi."storage_info"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> c<span class="comment">##hachi."supplier"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> c<span class="comment">##hachi."supply_info"@c##0leader;</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"> <span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">conn shj_supplier/a123456;</span><br><span class="line"><span class="comment">-- 本机供应商用户shj_supplier，使用对方的供应商账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  c<span class="comment">##0supplier   connect to "c##supplier" identified by "a123456" using '10.82.156.248/orcl';</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> c<span class="comment">##hachi."part"@c##0supplier;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> c<span class="comment">##hachi."project"@c##0supplier;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> c<span class="comment">##hachi."supplier"@c##0supplier;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> c<span class="comment">##hachi."supply_info"@c##0supplier;</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"> <span class="keyword">commit</span>;</span><br><span class="line"> </span><br><span class="line">conn shj_staff/a123456;</span><br><span class="line"><span class="comment">-- 本机员工用户shj_staff，使用对方的员工账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  c<span class="comment">##0staff   connect to "c##staff" identified by "a123456" using '10.82.156.248/orcl';</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> c<span class="comment">##hachi."staff"@c##0staff ;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> c<span class="comment">##hachi."storage"@c##0staff;</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_staff;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023011822.png" alt="image-20201023011822446"></p><blockquote><p>因为使用的wifi网络，采用DHCP协议动态分配IP地址，所以每一次两台笔记本的IP地址是不一样的，所以连接得删了再重新建立，同义词不用删了重新建立，重新创建一下database link连接就行了。<br>我这里建的都是私有连接，私有同义词，只有创建该连接的用户才可以使用，其他用户没有使用权限，是透明的，所以设置同名的同义词不影响。</p></blockquote><ul><li>同义词创建后就可以使用同义词去增删改查对方的表了，这里贴两张图，各自私有建的连接，不影响各自的同名同义词。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023012624.png" alt="image-20201023012624628">)<img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023012748.png" alt="image-20201023012748914"></p><h2 id="六、创建同步触发器与存储过程"><a href="#六、创建同步触发器与存储过程" class="headerlink" title="六、创建同步触发器与存储过程"></a>六、创建同步触发器与存储过程</h2><ol><li><p>可能由于版本问题，B机12C可以创建触发器同步备份A机的上的表，而A机不行。同时B机创建存储过程，执行存储过程，会触发B机的触发器去同步更新A机上的表。</p></li><li><p>A机可以使用连接更新B机的数据，同时触发触发器更新A机自己的表。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023153322.png" alt="123"></p></li></ol><p>下面以图文结合方式说明以上两点。</p><p><code>这里触发器和存储过程都建在c##hachi用户模式下。</code></p><h3 id="6-1-触发器"><a href="#6-1-触发器" class="headerlink" title="6.1 触发器"></a>6.1 触发器</h3><p>触发器代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">------------------------------------   B机 c##hachi模式下创建   ---------------------------------------------- </span></span><br><span class="line"><span class="comment">-- 增删改part</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_part;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_part <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"part"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span>  </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_part(<span class="string">"p_id"</span>,<span class="string">"p_name"</span>,<span class="string">"p_size"</span>,<span class="string">"p_price"</span>,<span class="string">"p_desc"</span>) <span class="keyword">values</span>(:new.<span class="string">"p_id"</span>,:new.<span class="string">"p_name"</span>,:new.<span class="string">"p_size"</span>,:new.<span class="string">"p_price"</span>,:new.<span class="string">"p_desc"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_part <span class="keyword">set</span>  remote_part.<span class="string">"p_name"</span>=:new.<span class="string">"p_name"</span>,remote_part.<span class="string">"p_size"</span>=:new.<span class="string">"p_size"</span>,remote_part.<span class="string">"p_price"</span>=:new.<span class="string">"p_price"</span>,remote_part.<span class="string">"p_desc"</span>=:new.<span class="string">"p_desc"</span> <span class="keyword">where</span> remote_part.<span class="string">"p_id"</span>=:new.<span class="string">"p_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_part <span class="keyword">where</span> remote_part.<span class="string">"p_id"</span>=:old.<span class="string">"p_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"part"</span> <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">'eeeee'</span>,<span class="number">22</span>,<span class="number">12</span>,<span class="string">'eeeeee'</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"part"</span> <span class="keyword">set</span> <span class="string">"p_name"</span>=<span class="string">'abc'</span>,<span class="string">"p_size"</span>=<span class="number">11</span>,<span class="string">"p_price"</span>=<span class="number">11</span>,<span class="string">"p_desc"</span>=<span class="string">'abc'</span> <span class="keyword">where</span> <span class="string">"p_id"</span>=<span class="number">9</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"part"</span> <span class="keyword">where</span> <span class="string">"p_id"</span>=<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 增删改project</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_project;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_project <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"project"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_project(<span class="string">"pj_id"</span>,<span class="string">"pj_money"</span>,<span class="string">"pj_date"</span>) <span class="keyword">values</span>(:new.<span class="string">"pj_id"</span>,:new.<span class="string">"pj_money"</span>,:new.<span class="string">"pj_date"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_project <span class="keyword">set</span>  remote_project.<span class="string">"pj_money"</span>=:new.<span class="string">"pj_money"</span>,remote_project.<span class="string">"pj_date"</span>=:new.<span class="string">"pj_date"</span> <span class="keyword">where</span> remote_project.<span class="string">"pj_id"</span>=:new.<span class="string">"pj_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_project <span class="keyword">where</span> remote_project.<span class="string">"pj_id"</span>=:old.<span class="string">"pj_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"project"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"project"</span> <span class="keyword">set</span> <span class="string">"pj_money"</span>=<span class="number">200</span>,<span class="string">"pj_date"</span>=<span class="literal">null</span> <span class="keyword">where</span> <span class="string">"pj_id"</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"project"</span> <span class="keyword">where</span> <span class="string">"pj_id"</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增删改staff</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_staff;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_staff <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"staff"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_staff(<span class="string">"sf_id"</span>,<span class="string">"s_id"</span>,<span class="string">"sta_sf_id"</span>,<span class="string">"sf_name"</span>,<span class="string">"sf_age"</span>,<span class="string">"sf_xname"</span>) <span class="keyword">values</span>(:new.<span class="string">"sf_id"</span>,:new.<span class="string">"s_id"</span>,:new.<span class="string">"sta_sf_id"</span>,:new.<span class="string">"sf_name"</span>,:new.<span class="string">"sf_age"</span>,:new.<span class="string">"sf_xname"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_staff <span class="keyword">set</span>  remote_staff.<span class="string">"sf_name"</span>=:new.<span class="string">"sf_name"</span>,remote_staff.<span class="string">"sf_age"</span>=:new.<span class="string">"sf_age"</span>,remote_staff.<span class="string">"sf_xname"</span>=:new.<span class="string">"sf_xname"</span> <span class="keyword">where</span> remote_staff.<span class="string">"sf_id"</span>=:new.<span class="string">"sf_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_staff <span class="keyword">where</span> remote_staff.<span class="string">"sf_id"</span>=:old.<span class="string">"sf_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"staff"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">'Hachi'</span>,<span class="number">10</span>,<span class="string">'Bit'</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"staff"</span> <span class="keyword">set</span> <span class="string">"sf_name"</span>=<span class="string">'BitHachi'</span>,<span class="string">"sf_xname"</span>=<span class="string">'bithachi'</span> <span class="keyword">where</span> <span class="string">"sf_id"</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"staff"</span> <span class="keyword">where</span> <span class="string">"sf_id"</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增删改storage</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_storage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_storage <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"storage"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_storage(<span class="string">"s_id"</span>,<span class="string">"s_area"</span>,<span class="string">"s_phone"</span>) <span class="keyword">values</span>(:new.<span class="string">"s_id"</span>,:new.<span class="string">"s_area"</span>,:new.<span class="string">"s_phone"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_storage <span class="keyword">set</span>  remote_storage.<span class="string">"s_area"</span>=:new.<span class="string">"s_area"</span>,remote_storage.<span class="string">"s_phone"</span>=:new.<span class="string">"s_phone"</span> <span class="keyword">where</span> remote_storage.<span class="string">"s_id"</span>=:new.<span class="string">"s_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_storage <span class="keyword">where</span> remote_storage.<span class="string">"s_id"</span>=:old.<span class="string">"s_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"storage"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100</span>,<span class="string">'17683738511'</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"storage"</span> <span class="keyword">set</span> <span class="string">"s_area"</span>=<span class="number">200</span>,<span class="string">"s_phone"</span>=<span class="string">'17683838555'</span> <span class="keyword">where</span> <span class="string">"s_id"</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"storage"</span> <span class="keyword">where</span> <span class="string">"s_id"</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增删改storage_info</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_storage_info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_storage_info <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"storage_info"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_storage_info(<span class="string">"s_id"</span>,<span class="string">"p_id"</span>,<span class="string">"sf_num"</span>) <span class="keyword">values</span>(:new.<span class="string">"s_id"</span>,:new.<span class="string">"p_id"</span>,:new.<span class="string">"sf_num"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_storage_info <span class="keyword">set</span>  remote_storage_info.<span class="string">"sf_num"</span>=:new.<span class="string">"sf_num"</span>  <span class="keyword">where</span> remote_storage_info.<span class="string">"s_id"</span>=:new.<span class="string">"s_id"</span> <span class="keyword">and</span> remote_storage_info.<span class="string">"p_id"</span>=:new.<span class="string">"p_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_storage_info <span class="keyword">where</span> remote_storage_info.<span class="string">"s_id"</span>=:old.<span class="string">"s_id"</span> <span class="keyword">and</span> remote_storage_info.<span class="string">"p_id"</span>=:old.<span class="string">"p_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"storage_info"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"storage_info"</span> <span class="keyword">set</span> <span class="string">"sf_num"</span>=<span class="number">200</span>  <span class="keyword">where</span> <span class="string">"s_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"p_id"</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"storage_info"</span> <span class="keyword">where</span> <span class="string">"s_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"p_id"</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增删改supplier</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_supplier <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"supplier"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_supplier(<span class="string">"sp_id"</span>,<span class="string">"sp_name"</span>,<span class="string">"sp_address"</span>,<span class="string">"sp_phone"</span>,<span class="string">"sp_acount"</span>) <span class="keyword">values</span>(:new.<span class="string">"sp_id"</span>,:new.<span class="string">"sp_name"</span>,:new.<span class="string">"sp_address"</span>,:new.<span class="string">"sp_phone"</span>,:new.<span class="string">"sp_acount"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_supplier <span class="keyword">set</span>  remote_supplier.<span class="string">"sp_name"</span>=:new.<span class="string">"sp_name"</span>  <span class="keyword">where</span> remote_supplier.<span class="string">"sp_id"</span>=:new.<span class="string">"sp_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_supplier <span class="keyword">where</span> remote_supplier.<span class="string">"sp_id"</span>=:old.<span class="string">"sp_id"</span> ;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"supplier"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'BitHachi'</span>,<span class="string">'中国湖北'</span>,<span class="string">'17683738511'</span>,<span class="string">'1000001'</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"supplier"</span> <span class="keyword">set</span> <span class="string">"sp_name"</span>=<span class="string">'Hachi'</span>  <span class="keyword">where</span> <span class="string">"sp_id"</span>=<span class="number">1</span>  ;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"supplier"</span> <span class="keyword">where</span>  <span class="string">"sp_id"</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增删改supply_info</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_supply_info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_supply_info <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"supply_info"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_supply_info(<span class="string">"p_id"</span>,<span class="string">"pj_id"</span>,<span class="string">"sp_id"</span>,<span class="string">"sp_num"</span>) <span class="keyword">values</span>(:new.<span class="string">"p_id"</span>,:new.<span class="string">"pj_id"</span>,:new.<span class="string">"sp_id"</span>,:new.<span class="string">"sp_num"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_supply_info <span class="keyword">set</span>  remote_supply_info.<span class="string">"sp_num"</span>=:new.<span class="string">"sp_num"</span>  <span class="keyword">where</span> remote_supply_info.<span class="string">"p_id"</span>=:new.<span class="string">"p_id"</span> <span class="keyword">and</span> remote_supply_info.<span class="string">"pj_id"</span>=:new.<span class="string">"pj_id"</span> <span class="keyword">and</span> remote_supply_info.<span class="string">"sp_id"</span>=:new.<span class="string">"sp_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_supply_info <span class="keyword">where</span> remote_supply_info.<span class="string">"p_id"</span>=:old.<span class="string">"p_id"</span> <span class="keyword">and</span> remote_supply_info.<span class="string">"pj_id"</span>=:old.<span class="string">"pj_id"</span> <span class="keyword">and</span> remote_supply_info.<span class="string">"sp_id"</span>=:old.<span class="string">"sp_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"supply_info"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"supply_info"</span> <span class="keyword">set</span> <span class="string">"sp_num"</span>=<span class="number">200</span>  <span class="keyword">where</span> <span class="string">"p_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"pj_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"sp_id"</span>=<span class="number">1</span> ;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"supply_info"</span> <span class="keyword">where</span> <span class="string">"p_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"pj_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"sp_id"</span>=<span class="number">1</span> ;</span><br></pre></td></tr></table></figure><ul><li><p>这里触发器很多，我就演示一个。见下图：</p><p>这张图是B机创建一个触发器实现remote_part同义词表示的A机的part表的同步更新。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023014536.png" alt="image-20201023014536530"></p><p>现在我们在A机上使用同义词进行插入、修改、删除，会触发B机的触发器同步更新B机和A机的表数据。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023015836.png" alt="img"></p><h3 id="6-2存储过程"><a href="#6-2存储过程" class="headerlink" title="6.2存储过程"></a>6.2存储过程</h3><p>这里B机创建了一个存储过程，B机调用存储过程可以实现B机和A机的同步更新。</p><p>先贴代码再放截图流程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询数据</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> select_data;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> select_data </span><br><span class="line">(var_datas <span class="keyword">out</span> sys_refcursor) <span class="keyword">AS</span>  </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">OPEN</span> var_datas <span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">"part"</span>; </span><br><span class="line"><span class="keyword">end</span> select_data;</span><br><span class="line">var datas refcursor;</span><br><span class="line">exec select_data(:datas);</span><br><span class="line">print:datas;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加数据</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> insert_data;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_data</span><br><span class="line">(var_id <span class="string">"part"</span>.<span class="string">"p_id"</span>%<span class="keyword">TYPE</span>,var_name <span class="string">"part"</span>.<span class="string">"p_name"</span>%<span class="keyword">TYPE</span>,var_size <span class="string">"part"</span>.<span class="string">"p_size"</span>%<span class="keyword">TYPE</span>,var_price <span class="string">"part"</span>.<span class="string">"p_price"</span>%<span class="keyword">TYPE</span>,var_desc <span class="string">"part"</span>.<span class="string">"p_desc"</span>%<span class="keyword">TYPE</span>) </span><br><span class="line"><span class="keyword">AS</span>   </span><br><span class="line"><span class="keyword">begin</span>  </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"part"</span> <span class="keyword">values</span>(var_id,var_name,var_size,var_price,var_desc);</span><br><span class="line"><span class="keyword">end</span> insert_data;</span><br><span class="line">exec insert_data(2,'ANIVJO',22,15,'DFGDG');</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改数据</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> update_data;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> update_data</span><br><span class="line">(var_id <span class="string">"part"</span>.<span class="string">"p_id"</span>%<span class="keyword">TYPE</span>,var_name <span class="string">"part"</span>.<span class="string">"p_name"</span>%<span class="keyword">TYPE</span>)  </span><br><span class="line"><span class="keyword">AS</span>  </span><br><span class="line"><span class="keyword">begin</span>  </span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">"part"</span> <span class="keyword">SET</span> <span class="string">"p_name"</span>=var_name  <span class="keyword">WHERE</span> <span class="string">"p_id"</span>=var_id;</span><br><span class="line"><span class="keyword">end</span> update_data;</span><br><span class="line">exec update_data(2,'BitHachi');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> delete_data;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> delete_data</span><br><span class="line">(var_id <span class="string">"part"</span>.<span class="string">"p_id"</span>%<span class="keyword">TYPE</span>)  </span><br><span class="line"><span class="keyword">AS</span>  </span><br><span class="line"><span class="keyword">begin</span>  </span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="string">"part"</span> <span class="keyword">WHERE</span> <span class="string">"p_id"</span>=var_id;</span><br><span class="line"><span class="keyword">end</span> delete_data;</span><br><span class="line">exec delete_data(2);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023020723.png" alt="image-20201023020723206"></p>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> Database </tag>
            
            <tag> trigger </tag>
            
            <tag> procedure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后台json交互，以及数据库json转换——PHP&amp;Thinkphp5.1</title>
      <link href="/posts/50fa6455.html"/>
      <url>/posts/50fa6455.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>最近在做一个项目，一个考试系统。后台采用的核心技术是PHP+Thinkhp5.1+Mysql。</p><ul><li><p>要求前后台之间用json数据交互，后台需要将前台json关键字段接收，然后查询数据库，返回相应的json数据。</p></li><li><p>前台会调用<code>上传答题情况的接口</code>将卷子答题情况的json传给后台,后台要将此json存入数据库，在前台再次调用<code>查看卷子答题情况的接口</code>时能再从数据库中把json数据返还给前台。</p></li></ul><p>这篇文章主要记录的就是以上两点的前后台json数据的转换方法，以及如何将json存入数据库再取出来传给前台。</p><p>此篇文章需要一些基础，比如json基本格式，PHP数组与json转换等dump打印数据信息等函数方法，Thinkphp5.1框架的基本理解和使用。</p><h2 id="1-前台POST提交json数据给后台，后台保存为json格式存储到数据库"><a href="#1-前台POST提交json数据给后台，后台保存为json格式存储到数据库" class="headerlink" title="1. 前台POST提交json数据给后台，后台保存为json格式存储到数据库"></a>1. 前台POST提交json数据给后台，后台保存为json格式存储到数据库</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前台post方式传给后台json数据,后台将其作为json数据存在数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">indexPostaAdmin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $data = Request::post();</span><br><span class="line">    dump($data);<span class="comment">//经检验前台传过来的json数据自动被转换成了数组类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将前台传过来的数据作为json格式存入某张表的某个字段中</span></span><br><span class="line">    $datas[<span class="string">'paper'</span>] = $data;</span><br><span class="line">    Db::table(<span class="string">'paper'</span>)</span><br><span class="line">        -&gt;json([<span class="string">'paper'</span>])</span><br><span class="line">        -&gt;insert($datas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915171105.png" alt="image-20200915171059833"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915171219.png" alt="image-20200915171219186"></p><h2 id="2-前台GET方式传关键参数id，后台返回存储在数据库中的json数据给前台"><a href="#2-前台GET方式传关键参数id，后台返回存储在数据库中的json数据给前台" class="headerlink" title="2. 前台GET方式传关键参数id，后台返回存储在数据库中的json数据给前台"></a>2. 前台GET方式传关键参数id，后台返回存储在数据库中的json数据给前台</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前台GET方式传关键参数id，后台返回存储在数据库中的json数据给前台</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">adminReturnDataToIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $id=Request::param(<span class="string">"id"</span>);</span><br><span class="line">    $selectdata= Db::table(<span class="string">'paper'</span>)</span><br><span class="line">        -&gt;json([<span class="string">'paper'</span>])</span><br><span class="line">        -&gt;where(<span class="string">"id"</span>,$id)</span><br><span class="line">        -&gt;select();</span><br><span class="line">    $data[<span class="string">"test"</span>]=$selectdata[<span class="number">0</span>];</span><br><span class="line">    $data[<span class="string">"name"</span>]=<span class="string">"zhangsan"</span>;</span><br><span class="line">    <span class="keyword">return</span> json($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915181240.png" alt="image-20200915181240115"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915181307.png" alt="image-20200915181307904"></p><h2 id="3-前台POST方式传json数据给后台，后台存储为普通数据"><a href="#3-前台POST方式传json数据给后台，后台存储为普通数据" class="headerlink" title="3. 前台POST方式传json数据给后台，后台存储为普通数据"></a>3. 前台POST方式传json数据给后台，后台存储为普通数据</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前台POST方式传json数据给后台，后台存储为普通数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  <span class="function"><span class="keyword">function</span>  <span class="title">indexPostCommonDataToAdmin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $indexdata=Request::post();</span><br><span class="line">    dump($indexdata);</span><br><span class="line">    Db::table(<span class="string">"test"</span>)-&gt;insert($indexdata);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915200509.png" alt="image-20200915200508389"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915200800.png" alt="image-20200915200800813"></p><h2 id="4-前台GET方式传关键字段num-后台将数据库中非json数据转换为json数据传给前台"><a href="#4-前台GET方式传关键字段num-后台将数据库中非json数据转换为json数据传给前台" class="headerlink" title="4. 前台GET方式传关键字段num,后台将数据库中非json数据转换为json数据传给前台"></a>4. 前台GET方式传关键字段num,后台将数据库中非json数据转换为json数据传给前台</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 前台GET方式传关键字段num,后台将数据库中非json数据转换为json数据传给前台</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">indexGetCommonDataFromAdmin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      $num=Request::get(<span class="string">"num"</span>);</span><br><span class="line">      $selectdata = Db::table(<span class="string">"test"</span>)-&gt;limit($num)-&gt;select();</span><br><span class="line">      <span class="keyword">return</span> json($selectdata);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915202744.png" alt="image-20200915202743937"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915202804.png" alt="image-20200915202803990"></p><h2 id="5-MySQL-8-x-设置json字段存储json数据和转换"><a href="#5-MySQL-8-x-设置json字段存储json数据和转换" class="headerlink" title="5. MySQL 8.x 设置json字段存储json数据和转换"></a>5. MySQL 8.x 设置json字段存储json数据和转换</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200919215252.png" alt="image-20200919215252662"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testjson</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $posts=<span class="keyword">$this</span>-&gt;request-&gt;post();<span class="comment">//$posts前台穿过来的json,自动转为数组</span></span><br><span class="line">    $data[<span class="string">"ac_id"</span>]=<span class="number">2</span>;</span><br><span class="line">    $data[<span class="string">"content"</span>]=$posts;</span><br><span class="line">    $data[<span class="string">"score"</span>]=<span class="number">100</span>;</span><br><span class="line">    $data[<span class="string">"flag"</span>]=<span class="number">2</span>;</span><br><span class="line">    Db::table(<span class="string">"exam_paper"</span>)-&gt;insert($data);<span class="comment">//数组插进去为json类型</span></span><br><span class="line">    $datas=Db::table(<span class="string">"exam_paper"</span>)-&gt;json([<span class="string">"content"</span>])-&gt;where(<span class="string">"exam_id"</span>,<span class="number">1</span>)-&gt;select();<span class="comment">//查出来为json自动转为数组</span></span><br><span class="line">    <span class="keyword">return</span> json($datas);<span class="comment">//将数组转为json发给前台</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200919215458.png" alt="image-20200919215458065"></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
          <category> Thinkphp5.1 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Thinkphp5.1 </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在疫情期间的思考与总结</title>
      <link href="/posts/89ce7fdb.html"/>
      <url>/posts/89ce7fdb.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>现在是2020年8月27日晚20:13分，从未想过有一天我会对我最不喜欢的文字相关的东西会上心。</p><p>在我的记忆中，我是非常不喜欢与文字相关的东西，更别提写文章或是写心得了。也不知从何时起走上了这条路，我相信我会一直坚持下去，将此博客至少写十年，将这十年的技术积累与程序人生记录下来，目前已申请<a href="https://www.foreverblog.cn/treaty.html" target="_blank" rel="noopener">十年之约</a>。一来作为自己的业余爱好，二来开源分享，希望所写文章能够帮助更多的人。</p><p>这是我第一次写总结。本来我是想在年末写一篇总结的，但因为这一次由于疫情原因在家呆了这大半年，学到很多，收获很多，感触很多，所以想记录下来，作为我这大半年在家的总结，让短暂存在的思维灵感得以保存下来，也希望能够通过自己的经历和分享对有需要的人有所帮助叭。</p><p>这篇文章可能比较杂，会分为几个标题来写，内容包含学习收获以及人生的思考。</p><h1 id="2-为什么写博客？"><a href="#2-为什么写博客？" class="headerlink" title="2. 为什么写博客？"></a>2. 为什么写博客？</h1><p>其实原因很简单，经常有时候会碰见一些问题，这些问题我曾经解决过，但是再次碰到时我却不记得怎么解决了。再次搜博客叭，花费很多时间，有时候大多数的解决方案又是错的，而且很多文章复制来复制去连错误都一模一样。再就是有时候对一个知识点理解的比较深刻，但是当时没有记录下来，导致下一次去使用这个知识点去写东西的时候一脸懵逼，没有头绪，感觉忘光了，不知道为什么这么写，为什么会报错。</p><p>因为上述问题，写笔记写博客就变得无比重要了，其实单纯的写笔记就可以了，但是为什么要写博客了。我的想法是这样的：笔记是私人的，博客是开源的。我们在享受他人分享知识成果、解决方案的同时我们是否也可以为这个开源的世界贡献一点，去分享自己的所得所感，让更多的人受益。</p><p>因为博客是写给别人看的，所以写博客会比较费时，要组织语言和行文结构，要搜索查询各种资料，有时候甚至要花掉好几个小时或者几天时间去写一篇文章。但是就是在这样不知不觉中潜移默化的提高了自己的语言表达能力，也对所学的知识理解的更加深刻，也便于日后回顾，对他人对自己都是有好处的。同时写的博客有人看，有人点赞，有粉丝，也会正向的激励自己去写博客，去记录，去分享。而私人笔记则没有这样的正向激励，也就自己写写看看，比较随意。</p><p>我在疫情期间，跟着学校课程就写了很多的博客笔记，虽然只是简单的把知识点总结归纳了一下，刚开始写一般都入门级，等慢慢积累沉淀多了，再写更加高级的深入原理部分，比如手撕源码，徒手写框架，哈哈，梦想还是要有的，万一实现了了。虽然刚开始写的简单点，但是对我日后看相关的书籍和提高奠定了基础，有时候想到某个知识点时我也可以快速回顾复习。这段时间也收获了不少的粉丝，帮助了一些正在学习相关知识的同学们，这也正向激励着我不断将博客持续写下去，感谢各位老铁的支持。</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIxNDQ1OS5wbmc?x-oss-process=image/format,png" alt="image-20200827214459076"></p><h1 id="3-聊聊我对学习方法的感悟"><a href="#3-聊聊我对学习方法的感悟" class="headerlink" title="3. 聊聊我对学习方法的感悟"></a>3. 聊聊我对学习方法的感悟</h1><p>我自认为自己不是一个很会学习的人，毕竟我没考上一本、985或211，这是事实。我在这段时间对自己的学习方法也进行过思考，我对此还特地看了一本书，名为《学习之道》，也看过一些讲学习方法的文章和视频。</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIyMjIyMy5wbmc?x-oss-process=image/format,png" alt="image-20200827222223613"></p><p>这里我先说一下我看<code>《学习之道》</code>的收获和感受叭。这本书是美国一位女性作家写的，她起初对数理化是无比厌恶的，唯恐避之不及，但是后来经过她在军队等一些经历之后她渐渐的学习了数理化相关的知识，而且最后还成为了工程学教授。</p><p>这本书从心理学和脑科学讲解了人的大脑在面对一些场景时做出的反应，以及如何去应对，还讲解了一些学习理论、学习工具、学习方法等。我印象最深刻的是里面提到的<code>发散/专注模式</code>，当我们在某一事情上专注很长时间而没有成效时，不妨休息一下转为发散模式，让大脑休息一下，或许会有不一样的灵感迸发，其实这里总结就是简单的四个字：<code>劳逸结合</code>    。当我们专注在某一事情太长时间而没有头绪，很可能陷入了思维定式，这时候就难以跳跃思维定式，去大脑的其它区域寻找答案了。而适当休息一下，进入发散模式，则可以让大脑跳出思维定式，从大脑其它相关跨度大的知识区域寻找答案。</p><p>这里谈到了劳逸结合，书中也提到了帮助学习的工具和方法，比如<code>番茄工作法</code>，番茄工作法是我现在正在使用的方法，感觉还不错。番茄工作法其实就是利用了劳逸结合的思想，在专注/发散模式之间相互转换，更加高效的学习。使用番茄工作法，需要计时工具，我使用的是”番茄to do”，可以倒计时番茄钟，而且可以记录自己的学习时间，统计学习数据信息等。值得一用哦！下面放几张在这段时间学习的一个大致情况叭，截图来自<code>“番茄to do”</code>，让你爱上这个软件，帮助你学习。时长并不代表一切，专注时学习到的东西才是属于自己的。</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIyNDc0MS5wbmc?x-oss-process=image/format,png" alt="image-20200827224741621"></p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIyNDc1NC5qcGc?x-oss-process=image/format,png" alt="img"></p><p>接下来还有一种方法，叫做<code>费曼学习法</code>，这个方法与上面提到的<code>番茄工作法</code>方法是相辅相成的，其主要思想就是<code>将自己所学进行实践总结，简单易懂的教授给他人，比如写博客，录视频，口授等方式</code>。这里不得不放上一张学习金字塔来感受费曼学习法的魅力。</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIyNTQwMy5wbmc?x-oss-process=image/format,png" alt="image-20200827225403490"></p><h1 id="4-看书还是看视频学习？"><a href="#4-看书还是看视频学习？" class="headerlink" title="4. 看书还是看视频学习？"></a>4. 看书还是看视频学习？</h1><p>对于这个问题我之前也纠结过，在这段实践我也进行过思考和实践。</p><p>我的感受是对于一门陌生的技术知识，最好是看视频先入门，如果一来就看书，可能掌握不住重点，容易跑偏，而且看书很枯燥，很可能坚持不下去。一般好的学习视频，里面的讲师都是行业有一定经验的人，他们会对重要知识进行总结，他们会告诉你哪些知识点重要，哪些知识点不重要，哪些可以以后再学，哪些现阶段不用太死扣，以免陷入自闭进而放弃。</p><p>入门看视频可以，但是要想提高技术，成为大牛，最终都要回归于书本，书本虽然枯燥，但是它成体系，系统全面，再难啃也得啃。</p><p>我现在就挺喜欢看书的，特别是已经学习了操作系统、数据库、计算机网络之后，看相关的书籍，能看懂，而且有时候会感到兴奋，恨怎么这么晚才发现这本书，真有一种相见恨晚的感觉。这里放一下我现在正在看的书叭，这张图是我在这段时间在闲鱼买书时截的图。足足用了我380RMB，这还算便宜的，在正规店买估计翻倍。</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIzMDkxNC5qcGc?x-oss-process=image/format,png" alt="img"></p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIzMDkwOC5qcGc?x-oss-process=image/format,png" alt="img"></p><h1 id="5-对于日益繁杂的公众号与博客文章"><a href="#5-对于日益繁杂的公众号与博客文章" class="headerlink" title="5. 对于日益繁杂的公众号与博客文章"></a>5. 对于日益繁杂的公众号与博客文章</h1><p>这段时间也看了很多博客文章，有技术的，有程序人生相关的，但是总感觉如昙花一现般看完就没了，脑子也记不住多少。</p><p>有些文章或零散视频平常没事看看就好，感觉没必要专门去看公众号和博客文章去零散的学习，看了也记不住多少，最好还是看完整视频或者书籍系统的进行入门学习和提高。</p><p>面对一些正在学习不懂的知识点或遇到的难题，看一下别人的博客借鉴一下是可以的，但是没必要完全靠这个去零散的学习，如果博客文章或视频作者的水平参差不齐，搞不好很容易带偏，导致你对某一知识点产生误解，陷入死循环。</p><p>这里推荐几个我偶尔没事看看的公众号和关注的大牛：</p><ul><li>公众号：CodeSheep、三太子敖丙、码农翻身、GitHub社区、Java社区、JavaGuide、技术胖、马士兵</li><li>大牛网站：<a href="https://coolshell.cn/" target="_blank" rel="noopener">左耳朵耗子</a>、<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a></li></ul><p>其实我之前也考虑过把文章发布在公众号里面，但是看了左耳朵耗子写的文章：<a href="https://coolshell.cn/articles/17391.html" target="_blank" rel="noopener">为什么我不在微信公众号上写文章</a>，我觉得还是写博客好，我希望我的文章可以被搜索引擎所检索到，能被修改，因为文章会有错误，也会需要时常更新等。</p><p>耗子叔和《码农翻身》作者刘欣真的对我的影响非常大，改变了我很多，特别是让我意识到计算机专业理论基础的重要性，虽然枯燥，但是无比重要，就如同九阳神功，以不变应万变。这里非常感谢师兄告诉我关注这两位大佬，让我受益无穷。</p><h1 id="6-修炼九阳神功，打通任督二脉"><a href="#6-修炼九阳神功，打通任督二脉" class="headerlink" title="6. 修炼九阳神功，打通任督二脉"></a>6. 修炼九阳神功，打通任督二脉</h1><p>所谓的九阳神功指的就是计算机专业理论基础知识，这些知识在我大一大二上学期时，说实话学的都没啥体会，就感觉学了没啥用，后来看的大牛的博客文章多了，都提到了专业基础知识的重要性，我才开始关注这些知识在应用层技术语言、框架等的重要性。</p><p>这里必须得推荐一个视频，是左耳朵耗子在极客时间的直播录屏，视频内容格局很高，内涵丰富，具有深度。非常推荐大家看看，里面就提到了理论基础的重要性：<a href="https://www.bilibili.com/video/BV1C7411F7x3?from=search&seid=2558119300487211833" target="_blank" rel="noopener">直面问题，咱谈焦虑，谈烦恼，谈怎么成长</a>，耗子叔还在自己的博客对视频内容简述写成了一篇文章：<a href="https://coolshell.cn/articles/20977.html" target="_blank" rel="noopener">程序员如何把控自己的职业</a></p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIzNTExMC5wbmc?x-oss-process=image/format,png" alt="image-20200827235110416"></p><p>我通过自己的学习，也对计算机基础知识做了一个比喻。</p><p>我们可以把计算机专业理论基础知识比如树干，语言、框架、工具比作枝叶，我们知道枝叶是很快就会凋谢更新换代的，而树干不会，只要有树干存在，就会有源源不断的新枝叶生长出来。怎么样？看到这里有没有感受到理论知识的魅力。我也忘记这个比喻是不是来自于院长的启发了，有点忘了，嘿嘿😁。</p><p>我最近在学习Java多线程和网络编程时是真的再一次感受到了专业理论基础知识的魅力，比如我看了一个100行左右的死锁示例代码，其实从操作系统的知识来说，就是一个P,V操作顺序不一致，导致双方都拿到了对方下一步需要的锁(临界资源)，导致互相等待产生死锁。</p><p>在网络编程中比如套接字、TCP/IP协议栈、HTTP、UDP等知识点，都是网络原理里面的知识，如果不懂的话，应用层编程将举步维艰，学习起来就慢，但若是掌握了理论基础知识，那么学习周期就可以缩短，更快的掌握知识，并且比别人理解的更深刻，在面对同样类似的技术时可以以不变应万变，一眼看到本质。</p><p>还有之前在学习PHP和ThinkPHP5写一个校demo时，用到的MVC设计模式，也让我感受到了设计模式这门理论学科的魅力，一定要好好学一学。</p><p>还有学习Java时，不明白一点JVM内存分配，比如堆、栈、方法区等，很难理解一些引用赋值操作到底是咋回事。</p><p>还有一次测试工作室开发的后台API，当时也没学计算机网络，我当时把项目代码弄到了本地，本地测试访问域名和实际测试上线的域名搞得一样的，我把本地开发环境打开后测试没问题，但是不打开本地开发环境就无法正确测试，原因是因为本地hosts里面域名对应的IP地址写的是本地主机127.0.0.1，不打开开发环境是无法测试本地代码接口的，因为域名解析指向本机，同样肯定是不可以测试上线的代码接口的。</p><p>其实这里面就涉及到计算机网络里面的DNS解析，域名解析首先是在本地hosts文件里面找，看找不找得到对应域名的IP，如果找不到就找离本机最近的DNS服务器，然后先在DNS服务器高速缓存里面找，找不到再去找根服务器，后面步骤还有很多，这里就不一一描述了。</p><p>如果当时学了计算机网络也就不用浪费两三个小时去解决这个问题了，而且当时解决了还不明所以。现在回想起来，真是越来越感受到理论学科的魅力了。</p><p>虽然学校教的理论课程知识很枯燥，学起来感觉没什么用，也没有直接敲代码所见即所得那么有意思，但是仔细想想，为什么考研要考408（操作系统，计算机网络，组成原理，数据结构与算法），而且多年来亘古不变，我想一定是有原因的。这些理论课程是许多专家学者，教育部经过多次研究讨论共同制定的学习课程，为什么学习这些课程，肯定是非常重要才要去学习。</p><h1 id="7-关于爱情，只字不提？"><a href="#7-关于爱情，只字不提？" class="headerlink" title="7. 关于爱情，只字不提？"></a>7. 关于爱情，只字不提？</h1><p>这是一个比较硬核的话题了。<br>目前单身，宁缺毋滥，洁身自好。<br>前几天不是七夕节嘛，如果不是朋友圈我还真没把这节日记心里。害。<br>我还随手想了一个段子，估计也只有面向对象编程的程序员听得懂了。</p><p>听我娓娓道来，如果有一个人问我有没有对象，我会告诉他/她：有，而且后宫佳丽三千。<code>海王</code>已经不能形容我的身份，应该叫<code>海皇</code>!。不过啊，对象多了也不好，因为很容易身心俱疲。虽然对象都不一样，有不同的的状态和行为，每个对象都挺有意思的，各有各的特色。但是有时候对象多了，老是给我报错，说我错了，唉，这可把我累的，不断在想我哪错了，怎么改。导致我经常熬夜通宵啊，头发都掉了不少了，可把我累坏了。所以啊，对象还是一个的好，一个好维护。估计要是渣男海王看到这里，估计要把我打死。</p><p>说实在的，大一下学期还真追过一女孩，不过以失败而告终，为此近一年都不在状态，很多工作都不是很上心，自我感觉一团糟，没有好好上课，没有好好规划，虽然也拿过一些或大或小的奖项等一些还可以的成绩，但是只有我自己知道，我并没有为此付出全力，没有开满状态，总是感觉畏手畏脚的，小心翼翼，没有以前那种自信了。所幸自己没有挂科，期末考试平均分86分，估计是卷子太简单了，然后老师还画了重点，所以啊，挂科其实也挺难的。也许有人会说为个女人至于吗？我想说的是没什么值不值得的，人生没有白走的路，每一步都算数。世界这么大：宇宙-&gt;已知宇宙-&gt;银河系-&gt;太阳系-&gt;地球-&gt;亚洲-&gt;中国-&gt;湖北-&gt;某市-&gt;某校-&gt;某院，总言之能遇见不容易，好聚好散叭，人生如逆旅，我亦是行人！</p><p>现在想想，当时还真的是勇敢，无所畏惧，一往无前，只因单纯的喜欢去追别人女生，现在想想，其实自己对待爱情还没有准备好，不知道咋个谈恋爱，回想起来细思极恐，好在对方没答应，不然我还真不知道咋办勒，手足无措……。</p><h1 id="8-聊聊班级工作与学生会工作"><a href="#8-聊聊班级工作与学生会工作" class="headerlink" title="8. 聊聊班级工作与学生会工作"></a>8. 聊聊班级工作与学生会工作</h1><p>先说说班级工作吧！和许多怀揣理想，想着在大学好好磨练自己的大一新生们一样，在大一的时候我也积极去竞选了班干部，我竞选的职位是班级团支书，那时候大家都不太熟，很意外，竟然有半数的同学投票给了我，也不知道那时候咋那会忽悠勒！开个玩笑哈！</p><p>既然大家那么多人相信我，我自然也不能闲着，在做好学院下达的团支部工作的同时，积极开展团建活动。很多次团支部主题讲解和团建活动都是生平第一次，每一次都生怕捅了篓子，开始前都会好好想想准备要说些什么。</p><p>其实很多同学都各自有各自的事情要做，有的要学习，有的要打游戏，有的要谈恋爱，还有的只想躺着休息，每次开会或搞活动，最怕的就是没人来参加会议，没人来参加活动。我有时候都在想如果没有PU校园实践要求，没有PU分，或许参加的人会很少叭，或是没有，因为从我自己来说叭。我就比较少参加活动，身边人参加活动的也不多，大多数的人都是各自在忙着自己的事，有着自己的节奏，如上面列举的那些事等等。</p><p>做为团支书工作已经两年了，现在想想有时候一些工作和活动都感觉非常形式主义，好像没什么太大的意义，但不得不做，对此也是很无奈啊！</p><p>聊完了班级工作再聊聊学生会工作叭。其实刚来大一的我感觉自己好像做班干部应该会挺忙的，所以就没有去竞选学院的学生会，参加学生会也纯属于偶然，或许是特别的缘分与机遇让我加入了学生会大家庭。说到这里，我就聊聊我是咋个加入学生会的叭，这还得从秋季运动会说起，那时候我们班级有很多同学参加了运动会项目，我那时是没有参加(自我认知-&gt;运动非我强项)，所以勒，我就全操场满地跑，给我们班的同学和学院的同学加油助威，也拿出手机记录一些精彩时刻，其实那时也是随便拍拍，没认真去拍照。</p><p>说来也巧了，当时学院负责学院学生工作的团总支书记是我们班的职业规划老师，因为当时上职业规划这门课程是要求分组然后进行一些课堂互动等等的，具体的忘记了，我吧，就应小组成员的要求与信任做了这组长，然后组长必须得跟老师发一些信息沟通交流，就加了老师，然后刚好运动会的某天我把拍的照片全部发到了空间，老师刚好看见了我拍的照片，感觉可能拍的还不错叭，就评论了一句：小伙子，来新宣部。于是我就这样加入了新宣部，再后来参加竞选晋升新宣部副部。这里非常感谢我的老师给予我这个机会让我有了一段不一样的经历与体验，从中学到很多，收获很多。</p><p>说实在的，团支书工作与新宣部工作，两个一起搞有时候真的累的够呛，特别是有时候工作与学习在同一段时间内，经常熬夜，压榨自己想自由学习和休息的时间，熬夜搞学习补作业。有时候真想不干了，但是我的内心告诉我：我不可以临阵退缩，既然干就干到底。于是很多时候我都坚持了下来，既把工作做好了，学习也没落下。</p><p>我发现在学习与工作之间来回奔波，对我产生了很多潜移默化的影响，比如渐渐学会了一些办公软件，视频剪辑，图片编辑，公众号排版发布，摄影，与人交流，收获友谊，增长见识，合理安排学习与工作的时间，抗压能力，解决问题的能力等等。</p><p>人生没有白走的路，每一步都算数。我们所经历的每一件事情，或多或少总会对你的身心产生一些影响，不论好的坏的，都会有所收获与感悟。</p><p>最近学生会换届，我没有选择继续留任在学生会工作了。我想两年多来为学生会奉献自己的时间与精力，也该退休了，让新鲜血液涌入学生会大家庭，虽然人不在学生会，但部门遇到一些问题时，我还会给予指导和帮助，毕竟这是我曾待过的部门，怎么说都会有一些感情存在吧，也希望我们新宣部能越来越好！</p><p>选择退休不再竞选更多的可能是我接下来要说的目标了。现在马上大三了，虽然之前也学了不少知识，也做过一些小的demo，但是没有知识归档记录，学的比较分散，有很多已记不清了，或是完全忘记了，最主要的还是对计算机领域不了解，对基础理论学科，一些专业思想不了解，导致学的东西理解不深刻，记不牢。感觉是时候要系统认真，全力以赴的学一些技能为就业做准备了，做一些自己喜欢的事情，比如写写博客，分享知识等等。通过自己的努力，从一个小白向架构师一步一步进军。</p><p>虽然离开了学生会，但是班级团支书的工作还是会去做。说实在的我个人其实不是蛮喜欢与人交流，经常出去聚会啥的。如果全都去搞学习搞技术的话，估计都会很少与人交流了。</p><p>继续选择团支书这份工作：一是真的想为大家服务，希望能够帮到大家。二是希望自己可以有更多的机会与同学们交流，不然光去搞学习，可能与同学们的交流就少了，那个感情就淡了啊。三是拿了一些奖学金，助学金，咱钱不能白拿哈，作为一个有担当的有志青年，我们应该去回报这个社会，也为这个社会做出贡献，投我以桃，报之以李，知恩图报。</p><h1 id="9-尾声"><a href="#9-尾声" class="headerlink" title="9. 尾声"></a>9. 尾声</h1><p>不知不觉已经码了七千多字了，这里小小总结一下叭！</p><ul><li><p>写博客很重要，不要觉得写博客耗费时间，写博客的过程中就是重新深度思考知识点的过程，通过记录回想能够学得更扎实，而且有正向的激励，会忍不住去学习去积累。</p></li><li><p>掌握正确的学习方法很重要，它可以让你事半功倍，学习知识更有效率，学的更好，不妨试试番茄工作法和费曼学习法，还有相应的学习工具番茄to do 。</p></li><li><p>对于一项陌生的技术刚开始还是以视频为主，以书为辅，先入门之后再说提高，要想提高的话后期必须得看书，看大牛写的书，经典的书，再难啃也得啃。</p></li><li><p>对于日益繁杂的公众号和博客文章，偶尔看看就好，真的不要指望能拿这些去系统的学习一门技术，因为作者的水平参差不齐，搞不好被带偏，还是看真大牛录制的系统性的技术学习视频或者书籍为上，对于一些不太懂的知识点或BUG不能解决的可以用搜索引擎搜一下。</p></li><li><p>专业理论基础真的很重要，如同枝干与树叶，树叶总是更新换代，不断萌生新的枝丫，但是树干与树根总是存在的，学习好专业理论基础才能以不变应万变，学习新技术时，一眼望穿本质，更快更好更有深度的掌握一门新技术。</p></li><li><p>关于爱情，俺虽然也不懂，不过我还是相信爱情，我相信某个偶然的那瞬间，我与未知的她终会相遇。</p></li><li><p>虽然学生工作挺累的，但请一定要坚持下去。请相信我们所经历的每一件事情，或多或少总会对你的身心产生一些影响，不论好的坏的，都会有所收获与感悟。</p></li></ul><p>希望上面所写的一些想法与经历能够给一些大一的科班小白些许帮助叭。</p><p>大三的钟声已经敲响，我已整装待发，明日即将开赴学校而去，这一次火力全开，状态打满，奥利给！！！</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合全家桶</title>
      <link href="/posts/6d5520b0.html"/>
      <url>/posts/6d5520b0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么使用集合？"><a href="#1-为什么使用集合？" class="headerlink" title="1. 为什么使用集合？"></a>1. 为什么使用集合？</h2><p>首先我们回顾一下数组的优缺点，然后解释为什么要引入集合。</p><p><strong>数组在内存存储方面的特点：</strong></p><ul><li><p>数组初始化以后，长度就确定了。</p></li><li><p>数组声明的类型，就决定了进行元素初始化时的类型</p><p><strong>数组在存储数据方面的弊端：</strong></p></li><li><p>数组初始化以后，长度就不可变了，不便于扩展。</p></li><li><p>数组中提供的属性和方法少，不便于进行添加、删除、插入等操作，且效率不高。同时无法直接获取存储元素的个数。</p></li><li><p>数组存储的数据是有序的、可以重复的。—-&gt;存储数据的特点单一。</p></li></ul><p>我们可以看到数组的一些弊端，为了解决这些弊端，让数组可扩展，有增删改查等方法，让数据可以无序也可以有序，Java就提供了集合来弥补数组的。Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。</p><h2 id="2-集合框架体系"><a href="#2-集合框架体系" class="headerlink" title="2. 集合框架体系"></a>2. 集合框架体系</h2><p><strong>Java 集合可分为 <code>Collection 和 Map</code> 两种体系：</strong></p><ul><li><code>Collection</code>接口 ：单列数据，定义了存取一组对象的方法的集合<br><code>List</code>接口：元素有序、可重复的集合<br><code>Set</code>接口：元素无序、不可重复的集合</li><li><code>Map</code> 接口：双列数据，保存具有映射关系“key-value对”的集合</li></ul><p><strong>JDK提供的集合API位于java.util包内</strong></p><p><strong>下面放一张集合结构图，来全局认知集合的继承和实现体系：</strong></p><ul><li><p>‘——’ ：实线边框的是实现类，比如ArrayList，LinkedList，HashMap等</p></li><li><p>‘- - -’ ：折线边框的是抽象类，比如AbstractCollection，AbstractList，AbstractMap等</p></li><li><p>‘· · · ：’点线边框的是接口，比如Collection，Iterator，List等。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200903174201.png" alt="image-20200903174200772"></p><h2 id="3-Collection接口方法"><a href="#3-Collection接口方法" class="headerlink" title="3. Collection接口方法"></a>3. Collection接口方法</h2><ul><li>Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。</li><li>JDK不提供Collection 接口的任何直接实现，而是提供更具体的子接口(如：Set和List)实现。</li><li>在 Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都当成 Object 类型处理；从 JDK 5.0 增加了 <code>泛型</code>以后，Java 集合可以记住容器中对象的数据类型。</li></ul><p>接下来我们用代码示例测试一下Collection接口中的方法：</p><p>1、添加<br>  add(Object obj)<br>  addAll(Collection coll)<br>2、获取有效元素的个数<br>  int size()<br>3、清空集合<br> void clear()<br>4、是否是空集合<br>  boolean isEmpty()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多态引用，父类接口引用</span></span><br><span class="line">    Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add(Object e):将元素e添加到集合coll中</span></span><br><span class="line">    coll.add(<span class="string">"AA"</span>);</span><br><span class="line">    coll.add(<span class="string">"BB"</span>);</span><br><span class="line">    coll.add(<span class="number">123</span>);<span class="comment">//自动装箱</span></span><br><span class="line">    coll.add(System.nanoTime());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//size():获取添加的元素的个数</span></span><br><span class="line">    System.out.println(coll.size());<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//addAll(Collection coll1): 将coll1集合中的元素添加到当前的集合中</span></span><br><span class="line">    Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll1.add(<span class="number">456</span>);</span><br><span class="line">    coll1.add(<span class="string">"CC"</span>);</span><br><span class="line">    coll.addAll(coll1);</span><br><span class="line"></span><br><span class="line">    System.out.println(coll.size());<span class="comment">//6</span></span><br><span class="line">    System.out.println(coll);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clear():清空集合元素</span></span><br><span class="line">    coll.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//isEmpty():判断当前集合是否为空</span></span><br><span class="line">    System.out.println(coll.isEmpty());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">[AA, BB, <span class="number">123</span>, <span class="number">12560089811300</span>, <span class="number">456</span>, CC]</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>5、是否包含某个元素</p><ul><li>boolean contains(Object obj)：是通过元素的equals方法来判断是否是同一个对象</li><li>boolean containsAll(Collection c)：也是调用元素的equals方法来比较的。拿两个集合的元素挨个比较。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>);</span><br><span class="line">        coll.add(p);</span><br><span class="line">        System.out.println(coll.contains(p)); <span class="comment">//true，这里查找的就是p地址了，所以为true</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"abc"</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.contains(Object obj):判断当前集合中是否包含obj</span></span><br><span class="line">        <span class="comment">//我们在判断时会调用obj对象所在类的equals()。</span></span><br><span class="line">        <span class="keyword">boolean</span> contains = coll.contains(<span class="number">123</span>);</span><br><span class="line">        System.out.println(contains);<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//这里因为String已经重写了equals方法，所以显示为true</span></span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> String(<span class="string">"Tom"</span>)));<span class="comment">//true</span></span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> Person(<span class="string">"abc"</span>,<span class="number">20</span>)));<span class="comment">//false,Person没有重写equals方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.containsAll(Collection coll1):判断形参coll1中的所有元素是否都存在于当前集合中。</span></span><br><span class="line">        Collection coll1 = Arrays.asList(<span class="number">123</span>,<span class="number">4567</span>);</span><br><span class="line">        System.out.println(coll.containsAll(coll1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public boolean equals(Object o) &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println("Person equals()....");</span></span><br><span class="line"><span class="comment">//        if (this == o) return true;</span></span><br><span class="line"><span class="comment">//        if (o == null || getClass() != o.getClass()) return false;</span></span><br><span class="line"><span class="comment">//        Person person = (Person) o;</span></span><br><span class="line"><span class="comment">//        return age == person.age &amp;&amp;</span></span><br><span class="line"><span class="comment">//                Objects.equals(name, person.name);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">true</span><br><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>6、删除</p><ul><li>boolean remove(Object obj) ：通过元素的equals方法判断是否是要删除的那个元素。只会删除找到的第一个元素</li><li>boolean removeAll(Collection coll)：取当前集合的差集</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//3.remove(Object obj):从当前集合中移除obj元素。</span></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        coll.remove(<span class="number">1234</span>);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        coll.remove(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. removeAll(Collection coll1):差集：从当前集合中移除coll1中所有的元素。</span></span><br><span class="line">        Collection coll1 = Arrays.asList(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">        coll.removeAll(coll1);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person equals()...."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">123</span>, <span class="number">456</span>, Person&#123;name='Jerry', age=<span class="number">20</span>&#125;, Tom, false]</span><br><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">[<span class="number">123</span>, <span class="number">456</span>, Tom, false]</span><br><span class="line">[Tom, false]</span><br></pre></td></tr></table></figure><p>7、boolean retainAll(Collection c)：把交集的结果存在当前集合中，不影响c集合。</p><p>8、boolean equals(Object obj)：判断两个集合是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll.add(<span class="number">123</span>);</span><br><span class="line">    coll.add(<span class="number">456</span>);</span><br><span class="line">    coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">    coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">    coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.retainAll(Collection coll1):交集：获取当前集合和coll1集合的交集，并返回给当前集合</span></span><br><span class="line">    Collection coll1 = Arrays.asList(<span class="number">123</span>,<span class="number">456</span>,<span class="number">789</span>);</span><br><span class="line">    coll.retainAll(coll1);</span><br><span class="line">    System.out.println(coll);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.equals(Object obj):要想返回true，需要当前集合和形参集合的元素都相同。</span></span><br><span class="line">    Collection coll2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll2.add(<span class="number">123</span>);</span><br><span class="line">    coll2.add(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(coll2);</span><br><span class="line">    System.out.println(coll.equals(coll2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">[<span class="number">123</span>, <span class="number">456</span>]</span><br><span class="line">[<span class="number">123</span>, <span class="number">456</span>]</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>9、转成对象数组： Object[] toArray()<br>10、获取集合对象的哈希值： hashCode()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        <span class="comment">//7.hashCode():返回当前对象的哈希值</span></span><br><span class="line">        System.out.println(coll.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.集合 ---&gt;数组：toArray()</span></span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓展：数组 ---&gt;集合:调用Arrays类的静态方法asList()</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="keyword">new</span> String[]&#123;<span class="string">"AA"</span>, <span class="string">"BB"</span>, <span class="string">"CC"</span>&#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        List arr1 = Arrays.asList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr1.size());<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        List arr2 = Arrays.asList(<span class="keyword">new</span> Integer[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr2.size());<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">123</span>, <span class="number">456</span>, Person&#123;name='Jerry', age=<span class="number">20</span>&#125;, Tom, false]</span><br><span class="line">-<span class="number">1200490100</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Person&#123;name='Jerry', age=<span class="number">20</span>&#125;</span><br><span class="line">Tom</span><br><span class="line">false</span><br><span class="line">[AA, BB, CC]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>11、遍历： iterator()：返回迭代器对象，用于集合遍历</p><p>关于这个方法，接下来另开一个主题进行演示讲解。</p><h2 id="4-Iterator迭代器接口"><a href="#4-Iterator迭代器接口" class="headerlink" title="4. Iterator迭代器接口"></a>4. Iterator迭代器接口</h2><ul><li><p>Iterator对象称为<code>迭代器</code>(设计模式的一种)，<code>主要用于遍历 Collection 集合中的元素</code>。</p></li><li><p><code>GOF</code>(<strong>GoF（Gang of Four），中文名——四人组，设计模式鼻祖。</strong>)给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。 迭代器模式，就是为容器而生。类似于“公交车上的售票员”、“火车上的乘务员”、“空姐”。</p></li><li><p><code>Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象</code>。</p></li><li><p>Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。<code>如果需要创建Iterator 对象，则必须有一个被迭代的集合</code>。</p></li><li><p>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，<code>默认游标都在集合的第一个元素之前</code>。</p><p><strong>Iterator接口的方法：</strong></p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905093244.png" alt="image-20200905093243976"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905093448.png" alt="image-20200905093448818"></p><h3 id="4-1-Iterator-遍历集合"><a href="#4-1-Iterator-遍历集合" class="headerlink" title="4.1 Iterator 遍历集合"></a>4.1 Iterator 遍历集合</h3><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        //报异常：NoSuchElementException,越界了</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：不推荐</span></span><br><span class="line"><span class="comment">//        for(int i = 0;i &lt; coll.size();i++)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：推荐</span></span><br><span class="line">        <span class="comment">////hasNext():判断是否还有下一个元素</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//next():①指针下移 ②将下移以后集合位置上的元素返回</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Person&#123;name='Jerry', age=<span class="number">20</span>&#125;</span><br><span class="line">Tom</span><br><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="4-2-Iterator-两种错误的遍历方式"><a href="#4-2-Iterator-两种错误的遍历方式" class="headerlink" title="4.2 Iterator 两种错误的遍历方式"></a>4.2 Iterator 两种错误的遍历方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式一：跳着输出，越界异常：NoSuchElementException</span></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span>((iterator.next()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式二：</span></span><br><span class="line">        <span class="comment">//集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</span></span><br><span class="line"><span class="comment">//        while (coll.iterator().hasNext())&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(coll.iterator().next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">456</span></span><br><span class="line">Tom</span><br><span class="line"></span><br><span class="line">java.util.NoSuchElementException…………</span><br></pre></td></tr></table></figure><h3 id="4-3-Iterator-接口remove-方法"><a href="#4-3-Iterator-接口remove-方法" class="headerlink" title="4.3 Iterator 接口remove()方法"></a>4.3 Iterator 接口remove()方法</h3><p> <strong>注意：</strong></p><ul><li>Iterator可以删除集合的元素，但是是遍历过程中通过迭代器对象的remove方法，不是集合对象的remove方法。</li><li>如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   //测试Iterator中的remove()</span><br><span class="line">    //如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，</span><br><span class="line">    // 再调用remove都会报IllegalStateException。</span><br><span class="line">    @Test</span><br><span class="line">    public void test3()&#123;</span><br><span class="line">        Collection coll = new ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(new Person("Jerry",<span class="number">20</span>));</span><br><span class="line">        coll.add(new String("Tom"));</span><br><span class="line">        coll.add(false);</span><br><span class="line"></span><br><span class="line">        //删除集合中"Tom"</span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">//            iterator.remove();  IllegalStateException</span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>("Tom".equals(obj))&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">//                iterator.remove(); IllegalStateException</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //遍历集合</span><br><span class="line">        iterator = coll.iterator();</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Person&#123;name='Jerry', age=<span class="number">20</span>&#125;</span><br><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="4-4-使用-foreach-循环遍历集合元素"><a href="#4-4-使用-foreach-循环遍历集合元素" class="headerlink" title="4.4 使用 foreach 循环遍历集合元素"></a>4.4 使用 foreach 循环遍历集合元素</h3><ul><li>Java 5.0 提供了 foreach 循环迭代访问<code>Collection和数组</code>。</li><li>遍历操作不需获取Collection或数组的长度，无需使用索引访问元素。</li><li>遍历集合的底层调用Iterator完成操作。</li><li>foreach还可以用来遍历数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>, <span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="string">"Tom"</span>);</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for(集合元素的类型 局部变量 : 集合对象)</span></span><br><span class="line">        <span class="comment">//内部仍然调用了迭代器。</span></span><br><span class="line">        <span class="keyword">for</span> (Object obj : coll) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Person&#123;name=<span class="string">'Jerry'</span>, age=<span class="number">20</span>&#125;</span><br><span class="line">Tom</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">//for(数组元素的类型 局部变量 : 数组对象)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i+<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-List接口"><a href="#5-List接口" class="headerlink" title="5. List接口"></a>5. List接口</h2><ul><li>鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组</li><li>List集合类中 <code>元素有序、且可重复</code>，集合中的每个元素都有其对应的顺序索引。</li><li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。</li><li>JDK API中<code>List接口的实现类常用的有：ArrayList、LinkedList和Vector</code>。</li></ul><h3 id="5-1-List接口常用方法"><a href="#5-1-List接口常用方法" class="headerlink" title="5.1 List接口常用方法"></a>5.1 List接口常用方法</h3><p> <strong>List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。</strong></p><ul><li>void add(int index, Object ele): 在index 位置插入ele 元素</li><li>boolean addAll(int index, Collection eles): 从index 位置开始将eles中 中的所有元素添加进来</li><li>Object get(int index): 获取指定index 位置的元素</li><li>int indexOf(Object obj): 返回obj 在集合中首次出现的位置</li><li>int lastIndexOf(Object obj): 返回obj 在当前集合中末次出现的位置</li><li>Object remove(int index): 移除指定index 位置的元素，并返回此元素</li><li>Object set(int index, Object ele): 设置指定index 位置的元素为ele</li><li>List subList(int fromIndex, int toIndex): 返回从fromIndex 到toIndex位置的子集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. List接口框架</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * |----Collection接口：单列集合，用来存储一个一个的对象</span></span><br><span class="line"><span class="comment"> * |----List接口：存储有序的、可重复的数据。  --&gt;“动态”数组,替换原有的数组</span></span><br><span class="line"><span class="comment"> * |----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储</span></span><br><span class="line"><span class="comment"> * |----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</span></span><br><span class="line"><span class="comment"> * |----Vector：作为List接口的古老实现类；线程安全（synchronized）的，效率低；底层使用Object[] elementData存储</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void add(int index, Object ele):在index位置插入ele元素</span></span><br><span class="line"><span class="comment">boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line"><span class="comment">Object get(int index):获取指定index位置的元素</span></span><br><span class="line"><span class="comment">int indexOf(Object obj):返回obj在集合中首次出现的位置</span></span><br><span class="line"><span class="comment">int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span></span><br><span class="line"><span class="comment">Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class="line"><span class="comment">Object set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class="line"><span class="comment">List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总结：常用方法</span></span><br><span class="line"><span class="comment">增：add(Object obj)</span></span><br><span class="line"><span class="comment">删：remove(int index) / remove(Object obj)</span></span><br><span class="line"><span class="comment">改：set(int index, Object ele)</span></span><br><span class="line"><span class="comment">查：get(int index)</span></span><br><span class="line"><span class="comment">插：add(int index, Object ele)</span></span><br><span class="line"><span class="comment">长度：size()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="string">"AA"</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">12</span>));</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int indexOf(Object obj):返回obj在集合中首次出现的位置。如果不存在，返回-1.</span></span><br><span class="line">        <span class="keyword">int</span> index = list.indexOf(<span class="number">4567</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置。如果不存在，返回-1.</span></span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="number">456</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class="line">        Object obj = list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class="line">        list.set(<span class="number">1</span>, <span class="string">"CC"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的左闭右开区间的子集合</span></span><br><span class="line">        List subList = list.subList(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(subList);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">123</span>, <span class="number">456</span>, AA, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">[<span class="number">456</span>, AA, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">[<span class="number">456</span>, CC, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">[Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">[<span class="number">456</span>, CC, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]       </span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="string">"AA"</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">12</span>));</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void add(int index, Object ele):在index位置插入ele元素</span></span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">"BB"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line">        List list1 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        list.addAll(list1);<span class="comment">//1, 2, 3</span></span><br><span class="line"><span class="comment">//        list.add(list1);//[1, 2, 3]</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(list.size());<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object get(int index):获取指定index位置的元素</span></span><br><span class="line">        System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">123</span>, <span class="number">456</span>, AA, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">[<span class="number">123</span>, BB, <span class="number">456</span>, AA, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">[<span class="number">123</span>, BB, <span class="number">456</span>, AA, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-List-实现类之一：ArrayList"><a href="#5-2-List-实现类之一：ArrayList" class="headerlink" title="5.2 List 实现类之一：ArrayList"></a>5.2 List 实现类之一：ArrayList</h3><ul><li><p>ArrayList 是 List 接口的典型实现类、主要实现类</p></li><li><p>线程不安全的，效率高；底层使用<code>Object[] elementData</code>存储</p></li><li><p>ArrayList 的JDK1.8 之前与之后的实现区别？</p><ol><li><p>JDK1.7：ArrayList像饿汉式，直接底层创建了长度是10的Object[]数组elementData,，如果添加导致底层elementData数组容量不够，则扩容，默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</p></li><li><p>JDK1.8：ArrayList像懒汉式，一开始底层Object[] elementData初始化为{}，并没有创建长度为10的数组，当添加第一个元素时再创建一个始容量为10的数组</p></li><li><p>jdk7中的ArrayList的对象的创建类似于<code>单例的饿汉式</code>，而jdk8中的ArrayList的对象的创建类似于<code>单例的懒汉式</code>，延迟了数组的创建，节省内存。</p></li></ol></li><li><p>Arrays.asList(…) 方法返回的 List 集合，既不是 ArrayList 实例，也不是Vector 实例。 Arrays.asList(…) 返回值是一个固定长度的 List 集合</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-List-实现类之二：LinkedList"><a href="#5-3-List-实现类之二：LinkedList" class="headerlink" title="5.3 List 实现类之二：LinkedList"></a>5.3 List 实现类之二：LinkedList</h3><ul><li>对于<code>频繁的插入、删除</code>操作，使用此类效率比ArrayList高；底层使用<code>双向链表</code>存储</li><li>LinkedList： 双向链表，内部没有声明数组，而是定义了<code>Node类型的first和last</code>，用于记录首末元素。同时，定义内部类Node，作为LinkedList中保存数据的基本结构。Node除了保存数据，还定义了两个变量：<ol><li>prev变量记录前一个元素的位置</li><li>next变量记录下一个元素的位置 </li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905114128.png" alt="image-20200905114128774"></p><h3 id="5-4-List-实现类之三：Vector"><a href="#5-4-List-实现类之三：Vector" class="headerlink" title="5.4 List 实现类之三：Vector"></a>5.4 List 实现类之三：Vector</h3><ul><li>Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于<code>Vector是线程安全的</code>。</li><li>在各种list中，最好把ArrayList作为缺省选择。<code>当插入、删除频繁时，使用LinkedList；</code>Vector总是比ArrayList慢，所以尽量避免使用。</li></ul><h3 id="5-5-面试题练练手"><a href="#5-5-面试题练练手" class="headerlink" title="5.5 面试题练练手"></a>5.5 面试题练练手</h3><p><strong>请问ArrayList/LinkedList/Vector的异同？谈谈你的理解？ArrayList底层是什么？扩容机制？Vector和ArrayList的最大区别?</strong></p><ul><li>ArrayList和LinkedList的异同：<ol><li>二者都线程不安全，相对线程安全的Vector，执行效率高。</li><li>此外，ArrayList是实现了基于动态数组的数据结构，LinkedList基于双向链表的数据结构。</li><li>对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。</li><li>对于新增和删除操作add(特指插入)和remove，LinkedList比较占优势，因为ArrayList要移动数据。</li></ol></li><li>ArrayList和Vector的区别：<ol><li>Vector和ArrayList几乎是完全相同的,唯一的区别在于Vector是同步类(synchronized)，属于<br>强同步类。因此开销就比ArrayList要大，访问要慢。</li><li>正常情况下,大多数的Java程序员使用ArrayList而不是Vector,因为同步完全可以由程序员自己来控制。</li><li>Vector每次扩容请求其大小的2倍空间，而ArrayList是1.5倍。Vector还有一个子类Stack。</li></ol></li></ul><h2 id="6-Set接口"><a href="#6-Set接口" class="headerlink" title="6. Set接口"></a>6. Set接口</h2><ul><li>Set接口是Collection的子接口，set接口没有提供额外的方法</li><li>Set 集合<code>不允许包含相同的元素</code>，如果试把两个相同的元素加入同一个Set 集合中，则添加操作失败。</li><li>Set 判断两个对象是否相同不是使用 == 运算符，而是根据 equals() 方法</li></ul><h3 id="6-1-Set-实现类之一：HashSet"><a href="#6-1-Set-实现类之一：HashSet" class="headerlink" title="6.1 Set 实现类之一：HashSet"></a>6.1 Set 实现类之一：HashSet</h3><ul><li><p>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。</p></li><li><p>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。</p></li><li><p><code>HashSet 具有以下特点：</code></p><ol><li>不能保证元素的排列顺序</li><li>HashSet <code>不是线程安全的</code></li><li>集合元素可以是 <code>null</code></li></ol></li><li><p><code>HashSet 集合判断两个元素相等的标准：</code>两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。</p></li><li><p>对于存放在Set容器中的对象， 对应的类一定要重写equals() 和hashCode(Objectobj) 方法，以实现对象相等规则 。即：<code>“相等的对象必须具有相等的散列码”</code>。</p></li><li><p>向HashSet中添加元素的过程：</p><ol><li><p>当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值，通过某种散列函数决定该对象在 HashSet 底层数组中的存储位置。（这个散列函数会与底层数组的长度相计算得到在数组中的下标，并且这种散列函数计算还尽可能保证能均匀存储元素，越是散列分布，该散列函数设计的越好）</p></li><li><p>如果两个元素的hashCode()值相等，会再继续调用equals方法，如果equals方法结果为true，添加失败；如果为false，那么会保存该元素，但是该数组的位置已经有元素了，那么会通过链表的方式继续链接。</p></li></ol></li><li><p>如果两个元素的 equals() 方法返回 true，但它们的 hashCode() 返回值不相等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905164448.png" alt="image-20200905164446219"></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">"AA"</span>);</span><br><span class="line">        set.add(<span class="string">"CC"</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"User equals()...."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        User user = (User) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != user.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(user.name) : user.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; <span class="comment">//return name.hashCode() + age;</span></span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从大到小排列,年龄从小到大排列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user = (User)o;</span><br><span class="line"><span class="comment">//            return -this.name.compareTo(user.name);</span></span><br><span class="line">            <span class="keyword">int</span> compare = -<span class="keyword">this</span>.name.compareTo(user.name);</span><br><span class="line">            <span class="keyword">if</span>(compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.age,user.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User equals()....</span><br><span class="line">AA</span><br><span class="line">CC</span><br><span class="line"><span class="number">129</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">User&#123;name='Tom', age=<span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-重写-hashCode-方法的基本原则"><a href="#6-2-重写-hashCode-方法的基本原则" class="headerlink" title="6.2 重写 hashCode() 方法的基本原则"></a>6.2 重写 hashCode() 方法的基本原则</h3><ul><li>在程序运行时，同一个对象多次调用 hashCode() 方法应该返回相同的值。</li><li>当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode()方法的返回值也应相等。</li><li>对象中用作 equals() 方法比较的 Field（属性），都应该用来计算 hashCode 值</li></ul><p><strong>Eclipse/IDEA 工具里hashCode()的 重写</strong></p><p>以Eclipse/IDEA为例，在自定义类中可以调用工具自动重写equals和hashCode。问题：为什么用Eclipse/IDEA复写hashCode方法，有31这个数字？</p><ul><li>选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的“冲突”就越少，查找起来效率也会提高。（减少冲突）</li><li>并且31只占用5bits,相乘造成数据溢出的概率较小。</li><li>31可以 由i*31== (i&lt;&lt;5)-1来表示,现在很多虚拟机里面都有做相关优化。（提高算法效率）</li><li>31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终出来的结果只能被素数本身和被乘数还有1来整除！(减少冲突)</li></ul><h3 id="6-3-重写-equals-方法的基本原则"><a href="#6-3-重写-equals-方法的基本原则" class="headerlink" title="6.3 重写 equals() 方法的基本原则"></a>6.3 重写 equals() 方法的基本原则</h3><ul><li>当一个类有自己特有的“逻辑相等”概念,当改写equals()的时候，总是要改写hashCode()，根据一个类的equals方法（改写后），两个截然不同的实例有可能在逻辑上是相等的，但是，根据Object.hashCode()方法，它们仅仅是两个对象。</li><li>因此，违反了<code>“相等的对象必须具有相等的散列码”</code>。</li><li>结论：复写equals方法的时候一般都需要同时复写hashCode方法。通常参与计算hashCode 的对象的属性也应该参与到equals()</li></ul><h3 id="6-4-Set-实现类之二：LinkedHashSet"><a href="#6-4-Set-实现类之二：LinkedHashSet" class="headerlink" title="6.4 Set 实现类之二：LinkedHashSet"></a>6.4 Set 实现类之二：LinkedHashSet</h3><ul><li>LinkedHashSet 是 HashSet 的子类</li><li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它<code>同时使用双向链表维护元素的次</code>序，这使得元素看起来是以插入顺序保存的。</li><li>LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。</li><li>LinkedHashSet 不允许集合元素重复。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905171723.png" alt="image-20200905171722947"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LinkedHashSet的使用</span></span><br><span class="line">   <span class="comment">//LinkedHashSet作为HashSet的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个</span></span><br><span class="line">   <span class="comment">//数据和后一个数据。</span></span><br><span class="line">   <span class="comment">//优点：对于频繁的遍历操作，LinkedHashSet效率高于HashSet，因为不用比较hash值equals</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Set set = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">       set.add(<span class="number">456</span>);</span><br><span class="line">       set.add(<span class="number">123</span>);</span><br><span class="line">       set.add(<span class="number">123</span>);</span><br><span class="line">       set.add(<span class="string">"AA"</span>);</span><br><span class="line">       set.add(<span class="string">"CC"</span>);</span><br><span class="line">       set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">       set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">       set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">       Iterator iterator = set.iterator();</span><br><span class="line">       <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User equals()....</span><br><span class="line"><span class="number">456</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">AA</span><br><span class="line">CC</span><br><span class="line">User&#123;name='Tom', age=<span class="number">12</span>&#125;</span><br><span class="line"><span class="number">129</span></span><br></pre></td></tr></table></figure><h3 id="6-5-Set-实现类之三：TreeSet"><a href="#6-5-Set-实现类之三：TreeSet" class="headerlink" title="6.5  Set 实现类之三：TreeSet"></a>6.5  Set 实现类之三：TreeSet</h3><ul><li><code>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</code></li><li>TreeSet底层使用 <code>红黑树</code>结构存储数据</li><li>TreeSet 两种排序方法： <code>自然排序和 定制排序</code>。默认情况下，TreeSet 采用自然排序。</li><li>TreeSet和TreeMap采用红黑树的存储结构</li><li>特点：有序，查询速度比List快</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905175427.png" alt="image-20200905175427515"></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.向TreeSet中添加的数据，要求是相同类的对象。</span></span><br><span class="line"><span class="comment">    2.两种排序方式：自然排序（实现Comparable接口） 和 定制排序（Comparator）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals().</span></span><br><span class="line"><span class="comment">    4.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//失败：不能添加不同类的对象</span></span><br><span class="line"><span class="comment">//        set.add(123);</span></span><br><span class="line"><span class="comment">//        set.add(456);</span></span><br><span class="line"><span class="comment">//        set.add("AA");</span></span><br><span class="line"><span class="comment">//        set.add(new User("Tom",12));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例一：</span></span><br><span class="line">        set.add(<span class="number">34</span>);</span><br><span class="line">        set.add(-<span class="number">34</span>);</span><br><span class="line">        set.add(<span class="number">43</span>);</span><br><span class="line">        set.add(<span class="number">11</span>);</span><br><span class="line">        set.add(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        set.removeAll(set);</span><br><span class="line">        System.out.println(<span class="string">"------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例二：</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jerry"</span>,<span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jim"</span>,<span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Mike"</span>,<span class="number">65</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line">         iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"User equals()...."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        User user = (User) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != user.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(user.name) : user.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; <span class="comment">//return name.hashCode() + age;</span></span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从大到小排列,年龄从小到大排列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user = (User)o;</span><br><span class="line"><span class="comment">//            return -this.name.compareTo(user.name);</span></span><br><span class="line">            <span class="keyword">int</span> compare = -<span class="keyword">this</span>.name.compareTo(user.name);</span><br><span class="line">            <span class="keyword">if</span>(compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//姓名相同再比较年龄</span></span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.age,user.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">34</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">43</span></span><br><span class="line">------------</span><br><span class="line">User&#123;name='Tom', age=<span class="number">12</span>&#125;</span><br><span class="line">User&#123;name='Mike', age=<span class="number">65</span>&#125;</span><br><span class="line">User&#123;name='Jim', age=<span class="number">2</span>&#125;</span><br><span class="line">User&#123;name='Jerry', age=<span class="number">32</span>&#125;</span><br><span class="line">User&#123;name='Jack', age=<span class="number">33</span>&#125;</span><br><span class="line">User&#123;name='Jack', age=<span class="number">56</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="6-5-1-排序—-自然排序"><a href="#6-5-1-排序—-自然排序" class="headerlink" title="6.5.1 排序— 自然排序"></a>6.5.1 排序— 自然排序</h4><ul><li><p><code>自然排序：TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列</code></p></li><li><p><code>如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable接口。</code></p><ul><li>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过compareTo(Object obj) 方法的返回值来比较大小。</li></ul></li><li><p>Comparable 的典型实现：</p><ul><li>BigDecimal、BigInteger 以及所有的数值型对应的包装类：按它们对应的数值大小进行比较</li><li>Character：按字符的 unicode值来进行比较</li><li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li><li>String：按字符串中字符的 unicode 值进行比较</li><li>Date、Time：后边的时间、日期比前面的时间、日期大</li></ul></li><li><p>向TreeSet 中添加元素时，只有第一个元素无须比较compareTo()方法，后面添加的所有元素都会调用compareTo()方法进行比较。</p></li><li><p><code>因为只有相同类的两个实例才会比较大小，所以向 TreeSet 中添加的应该是同一个类 的 对象。</code></p></li><li><p>对于 TreeSet 集合而言，它<code>判断两个对象是否相等的唯一标准</code>是：两个对象通过 compareTo(Object obj) 方法比较返回值。</p></li><li><p>当需要把一个对象放入 TreeSet 中，重写该对象对应的 equals() 方法时，应保证该方法与 compareTo(Object obj) 方法有一致的结果：如果两个对象通过<br>equals() 方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0。否则，让人难以理解。</p></li></ul><h4 id="6-5-2-排序—-定制排序"><a href="#6-5-2-排序—-定制排序" class="headerlink" title="6.5.2 排序— 定制排序"></a>6.5.2 排序— 定制排序</h4><ul><li>TreeSet的自然排序要求元素所属的类实现Comparable接口，如果元素所属的类没有实现Comparable接口，或不希望按照升序(默认情况)的方式排列元素或希望按照其它属性大小进行排序，则考虑使用定制排序。定制排序，通过Comparator接口来实现。需要重写compare(T o1,T o2)方法。</li><li>利用int compare(T o1,T o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li><li>要实现定制排序，需要<code>将实现Comparator接口的实例作为形参传递给TreeSet的构造器</code>。</li><li>此时，<code>仍然只能向TreeSet中添加类型相同的对象</code>。否则发生ClassCastException异常。</li><li>使用定制排序<code>判断两个元素相等的标准</code>是：通过Comparator比较两个元素返回了0。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">     Comparator com = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">         <span class="comment">//按照年龄从小到大排列</span></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                 User u1 = (User)o1;</span><br><span class="line">                 User u2 = (User)o2;</span><br><span class="line">                 <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的数据类型不匹配"</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     TreeSet set = <span class="keyword">new</span> TreeSet(com);</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Jerry"</span>,<span class="number">32</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Jim"</span>,<span class="number">2</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Mike"</span>,<span class="number">65</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Mary"</span>,<span class="number">33</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">33</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     Iterator iterator = set.iterator();</span><br><span class="line">     <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">         System.out.println(iterator.next());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User&#123;name='Jim', age=<span class="number">2</span>&#125;</span><br><span class="line">User&#123;name='Tom', age=<span class="number">12</span>&#125;</span><br><span class="line">User&#123;name='Jerry', age=<span class="number">32</span>&#125;</span><br><span class="line">User&#123;name='Mary', age=<span class="number">33</span>&#125;</span><br><span class="line">User&#123;name='Jack', age=<span class="number">56</span>&#125;</span><br><span class="line">User&#123;name='Mike', age=<span class="number">65</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-面试题"><a href="#6-6-面试题" class="headerlink" title="6.6 面试题"></a>6.6 面试题</h3><p><strong>在List内去除重复数字值，要求尽量简单：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">duplicateList</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">    HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    set.addAll(list);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(set);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">    List list2 = duplicateList(list);</span><br><span class="line">    <span class="keyword">for</span> (Object integer : list2) &#123;</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>面试题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">"AA"</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="number">1002</span>,<span class="string">"BB"</span>);</span><br><span class="line"></span><br><span class="line">    set.add(p1);</span><br><span class="line">    set.add(p2);</span><br><span class="line">    System.out.println(set);</span><br><span class="line"></span><br><span class="line">    p1.name = <span class="string">"CC"</span>;</span><br><span class="line">    <span class="comment">//因为之前是根据1001 AA的hash值存放的</span></span><br><span class="line">    <span class="comment">//现在改成CC，所以hash值与1001 AA的hash值不一样</span></span><br><span class="line">    <span class="comment">//所以找到的是1001 AA 存放之外的地址，删除的是null</span></span><br><span class="line">    <span class="comment">//原来的两个数据仍在</span></span><br><span class="line">    set.remove(p1);</span><br><span class="line">    System.out.println(set);</span><br><span class="line">    <span class="comment">//因为上面说的删除的是null,所以可以存放在那个位置</span></span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">"CC"</span>));</span><br><span class="line">    System.out.println(set);</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">"AA"</span>));</span><br><span class="line">    System.out.println(set);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Person&#123;id=<span class="number">1002</span>, name='BB'&#125;, Person&#123;id=<span class="number">1001</span>, name='AA'&#125;]</span><br><span class="line">[Person&#123;id=<span class="number">1002</span>, name='BB'&#125;, Person&#123;id=<span class="number">1001</span>, name='CC'&#125;]</span><br><span class="line">[Person&#123;id=<span class="number">1002</span>, name='BB'&#125;, Person&#123;id=<span class="number">1001</span>, name='CC'&#125;, Person&#123;id=<span class="number">1001</span>, name='CC'&#125;]</span><br><span class="line">[Person&#123;id=<span class="number">1002</span>, name='BB'&#125;, Person&#123;id=<span class="number">1001</span>, name='CC'&#125;, Person&#123;id=<span class="number">1001</span>, name='CC'&#125;, Person&#123;id=<span class="number">1001</span>, name='AA'&#125;]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905183215.png" alt="image-20200905183215588"></p><h2 id="7-Map接口"><a href="#7-Map接口" class="headerlink" title="7. Map接口"></a>7. Map接口</h2><p>先看看Map接口的继承体系：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200903174201.png" alt="image-20200903174200772"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909161600.png" alt="image-20200909161600032"></p><h3 id="7-1-Map-接口概述"><a href="#7-1-Map-接口概述" class="headerlink" title="7.1 Map 接口概述"></a>7.1 Map 接口概述</h3><ul><li>Map与Collection并列存在。用于保存具有 映射关系的数据:<code>key-value</code></li><li>Map 中的 key 和 value 都可以是任何引用类型的数据</li><li>Map 中的 <code>key 用Set来存放， 不允许重复</code>，即同一个 <code>Map 对象所对应的类，须重写hashCode()和equals()方法</code></li><li>常用String类作为Map的“键-key”</li><li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value</li><li>Map接口的常用实现类：<code>HashMap、TreeMap、LinkedHashMap和Properties</code>。其中，HashMap是 Map 接口使用频率最高的实现类</li></ul><h3 id="7-2-Map接口常用方法"><a href="#7-2-Map接口常用方法" class="headerlink" title="7.2 Map接口常用方法"></a>7.2 Map接口常用方法</h3><p> <strong>添加 、 删除、修改操作 ：</strong></p><ul><li><p>Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</p></li><li><p>void putAll(Map m):将m中的所有key-value对存放到当前map中</p></li><li><p>Object remove(Object key)：移除指定key的key-value对，并返回value</p></li><li><p>void clear()：清空当前map中的所有数据</p></li></ul><p><strong>元素查询的操作：</strong></p><ul><li><p>Object get(Object key)：获取指定 key对应的value</p></li><li><p>boolean containsKey(Object key)：是否包含指定的key</p></li><li><p>boolean containsValue(Object value)：是否包含指定的value</p></li><li><p>int size()：返回map中key-value对的个数</p></li><li><p>boolean isEmpty()：判断当前map是否为空</p></li><li><p>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</p></li></ul><p><strong>元视图操作的方法：</strong></p><ul><li><p>Set keySet()：返回所有key构成的Set集合</p></li><li><p>Collection values()：返回所有value构成的Collection集合</p></li><li><p>Set entrySet()：返回所有key-value对构成的Set集合</p></li></ul><p>代码测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 元视图操作的方法：</span></span><br><span class="line"><span class="comment"> Set keySet()：返回所有key构成的Set集合</span></span><br><span class="line"><span class="comment"> Collection values()：返回所有value构成的Collection集合</span></span><br><span class="line"><span class="comment"> Set entrySet()：返回所有key-value对构成的Set集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"AA"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">1234</span>);</span><br><span class="line">        map.put(<span class="string">"BB"</span>,<span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的key集：keySet()</span></span><br><span class="line">        Set set = map.keySet();</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的value集：values()</span></span><br><span class="line">        Collection values = map.values();</span><br><span class="line">        <span class="keyword">for</span>(Object obj : values)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的key-value</span></span><br><span class="line">        <span class="comment">//方式一：entrySet()</span></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            <span class="comment">//entrySet集合中的元素都是entry</span></span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"----&gt;"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        Set keySet = map.keySet();</span><br><span class="line">        Iterator iterator2 = keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator2.hasNext())&#123;</span><br><span class="line">            Object key = iterator2.next();</span><br><span class="line">            Object value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">"====="</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">test5运行结果</span></span><br><span class="line"><span class="comment">AA</span></span><br><span class="line"><span class="comment">BB</span></span><br><span class="line"><span class="comment">45</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">123</span></span><br><span class="line"><span class="comment">56</span></span><br><span class="line"><span class="comment">1234</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">AA----&gt;123</span></span><br><span class="line"><span class="comment">BB----&gt;56</span></span><br><span class="line"><span class="comment">45----&gt;1234</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">AA=====123</span></span><br><span class="line"><span class="comment">BB=====56</span></span><br><span class="line"><span class="comment">45=====1234</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 元素查询的操作：</span></span><br><span class="line"><span class="comment"> Object get(Object key)：获取指定key对应的value</span></span><br><span class="line"><span class="comment"> boolean containsKey(Object key)：是否包含指定的key</span></span><br><span class="line"><span class="comment"> boolean containsValue(Object value)：是否包含指定的value</span></span><br><span class="line"><span class="comment"> int size()：返回map中key-value对的个数</span></span><br><span class="line"><span class="comment"> boolean isEmpty()：判断当前map是否为空</span></span><br><span class="line"><span class="comment"> boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"AA"</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"BB"</span>, <span class="number">56</span>);</span><br><span class="line">        <span class="comment">// Object get(Object key)</span></span><br><span class="line">        System.out.println(map.get(<span class="number">45</span>));<span class="comment">//123</span></span><br><span class="line">        <span class="comment">//containsKey(Object key)</span></span><br><span class="line">        <span class="keyword">boolean</span> isExist = map.containsKey(<span class="string">"BB"</span>);</span><br><span class="line">        System.out.println(isExist);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        isExist = map.containsValue(<span class="number">123</span>);</span><br><span class="line">        System.out.println(isExist);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        map.clear();</span><br><span class="line"></span><br><span class="line">        System.out.println(map.isEmpty());<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     添加、删除、修改操作：</span></span><br><span class="line"><span class="comment"> Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</span></span><br><span class="line"><span class="comment"> void putAll(Map m):将m中的所有key-value对存放到当前map中</span></span><br><span class="line"><span class="comment"> Object remove(Object key)：移除指定key的key-value对，并返回value</span></span><br><span class="line"><span class="comment"> void clear()：清空当前map中的所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        map.put(<span class="string">"AA"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"BB"</span>,<span class="number">56</span>);</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        map.put(<span class="string">"AA"</span>,<span class="number">87</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;AA=87, BB=56, 45=123&#125;</span></span><br><span class="line"></span><br><span class="line">        Map map1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map1.put(<span class="string">"CC"</span>,<span class="number">123</span>);</span><br><span class="line">        map1.put(<span class="string">"DD"</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        map.putAll(map1);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;AA=87, BB=56, CC=123, DD=123, 45=123&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove(Object key)</span></span><br><span class="line">        Object value = map.remove(<span class="string">"CC"</span>);</span><br><span class="line">        System.out.println(value);<span class="comment">//123</span></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;AA=87, BB=56, DD=123, 45=123&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear()</span></span><br><span class="line">        map.clear();<span class="comment">//与map = null操作不同</span></span><br><span class="line">        System.out.println(map.size());<span class="comment">//0</span></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">        map.put(<span class="number">123</span>,<span class="string">"AA"</span>);</span><br><span class="line">        map.put(<span class="number">345</span>,<span class="string">"BB"</span>);</span><br><span class="line">        map.put(<span class="number">12</span>,<span class="string">"CC"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;123=AA, 345=BB, 12=CC&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//Hashtable不可以存储null的key和value，是线程安全的，有synchronized方法</span></span><br><span class="line"><span class="comment">//        map = new Hashtable();</span></span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="number">123</span>);<span class="comment">//HashMap可以存储null的key和value，是线程不安全的</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-Map-实现类之一：HashMap"><a href="#7-3-Map-实现类之一：HashMap" class="headerlink" title="7.3 Map 实现类之一：HashMap"></a>7.3 Map 实现类之一：HashMap</h3><h4 id="7-3-1-HashMap概述"><a href="#7-3-1-HashMap概述" class="headerlink" title="7.3.1 HashMap概述"></a>7.3.1 HashMap概述</h4><ul><li>HashMap是 Map 接口 使用频率最高的实现类。</li><li><code>允许使用null键和null值，与HashSet一样，不保证映射的顺序。</code></li><li>所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode()</li><li>所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals()</li><li>一个key-value构成一个Entry对象</li><li>所有的entry构成的集合是Set:无序的、不可重复的</li><li>HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</li><li>HashMap 判断两个 value 相等的标准是：两个 value 通过 equals() 方法返回 true。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909162737.png" alt="image-20200909162737364"></p><h4 id="7-3-2-HashMap-源码中的重要常量"><a href="#7-3-2-HashMap-源码中的重要常量" class="headerlink" title="7.3.2 HashMap 源码中的重要常量"></a>7.3.2 HashMap 源码中的重要常量</h4><ul><li>DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</li><li>MAXIMUM_CAPACITY ： ： HashMap的最大支持容量，2^30</li><li>DEFAULT_LOAD_FACTOR ：HashMap的默认加载因子</li><li>TREEIFY_THRESHOLD ：Bucket中链表长度大于该默认值，转化为红黑树</li><li>UNTREEIFY_THRESHOLD ：Bucket中红黑树存储的Node小于该默认值，转化为链表</li><li>MIN_TREEIFY_CAPACITY ：桶中的Node被树化时最小的hash表容量。（当桶中Node的数量大到需要变红黑树时，若hash表容量小于MIN_TREEIFY_CAPACITY时，此时应执行resize扩容操作这个MIN_TREEIFY_CAPACITY的值至少是TREEIFY_THRESHOLD的4倍。）</li><li>table ：存储元素的数组，总是2的n次幂</li><li>entrySet： ：存储具体元素的集</li><li>size ：HashMap中存储的键值对的数量</li><li>modCount ：HashMap扩容和结构改变的次数。</li><li>threshold ：扩容的临界值，=容量*填充因子</li><li>loadFactor： ：填充因子</li></ul><h4 id="7-3-3-HashMap-的存储结构"><a href="#7-3-3-HashMap-的存储结构" class="headerlink" title="7.3.3 HashMap 的存储结构"></a>7.3.3 HashMap 的存储结构</h4><p><font size=4 color=red>以jdk7为例说明:</font></p><ul><li><p>HashMap的内部存储结构其实是 <code>数组和链表</code>的结合。</p></li><li><p>当实例化一个HashMap时，系统会创建一个长度为Capacity的Entry数组，这个长度在哈希表中被称为容量(Capacity)，在这个<code>数组中可以存放元素的位置我们称之为“桶”(bucket)</code>，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。</p></li><li><p>每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。而且新添加的元素作为链表的head。</p></li><li><p><code>添加元素的过程</code>：向HashMap中添加entry1(key，value)，需要首先计算entry1中key的哈希值(根据key所在类的hashCode()计算得到)，此哈希值经过处理以后，得到在底层Entry[]数组中要存储的位置i。</p><ol><li><p>如果位置i上没有元素，则entry1直接添加成功。</p></li><li><p>如果位置i上已经存在entry2(或还有链表存在的entry3，entry4)，则需要通过循环的方法，依次比较entry1中key和其他的entry。</p><ul><li><p>如果彼此hash值不同，则直接添加成功。</p></li><li><p>如果hash值相同，继续比较二者是否equals。</p><p>（1）如果返回值为true，则使用entry1的value去替换equals为true的entry的value。</p><p>（2）如果遍历一遍以后，发现所有的equals返回都为false,则entry1仍可添加成功。entry1指向原有的entry元素。</p></li></ul></li></ol></li><li><p><code>HashMap 的扩容:</code><br>当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的长度是固定的。所以为了提高查询的效率，就要对HashMap的数组进行扩容，而在HashMap数组扩容之后，最消耗性能的点就出现了：<code>原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize</code>。</p></li><li><p><code>那么HashMap 什么时候进行扩容呢 ？</code></p><ul><li>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)loadFactor 时 ， 就 会 进 行 数 组 扩 容 ， loadFactor 的 默 认 值(DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。</li><li>默认情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么当HashMap中元素个数超过16*0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909172608.png" alt="image-20200909172608709"></p><p><font size=4 color=red>以jdk8为例说明:</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*      jdk8 相较于jdk7在底层实现方面的不同：</span><br><span class="line">*      <span class="number">1</span>. <span class="keyword">new</span> HashMap():底层没有创建一个长度为<span class="number">16</span>的Entry[]数组</span><br><span class="line">*      <span class="number">2</span>. jdk <span class="number">8</span>底层的数组是：Node[],而非Entry[]</span><br><span class="line">*      <span class="number">3</span>. 首次调用put()方法时，底层创建长度为<span class="number">16</span>的数组</span><br><span class="line">*      <span class="number">4</span>. jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。</span><br><span class="line">*         <span class="number">4.1</span> 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）</span><br><span class="line">*         <span class="number">4.2</span> 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; <span class="number">8</span> 且当前数组的长度 &gt; <span class="number">64</span>时，此时此索引位置上的所数据改为使用红黑树存储。</span><br></pre></td></tr></table></figure><ul><li><p>HashMap的内部存储结构其实是 <code>数组+ 链表+ 树</code> 的结合。</p></li><li><p>当实例化一个HashMap时，会初始化initialCapacity和loadFactor，在首次put第一对映射关系时，系统会创建一个长度为initialCapacity的Node数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。</p></li><li><p>每个bucket中存储一个元素，即一个Node对象，但每一个Node对象可以带一个引用变量next，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Node链。也可能是一个一个TreeNode对象，每一个TreeNode对象(<code>红黑树</code>)可以有两个叶子结点left和right，因此，在一个桶中，就有可能生成一个TreeNode树。而新添加的元素作为链表的last，或树的叶子结点。</p></li><li><p><code>那么HashMap 什么时候进行扩容和树形化呢 ？</code></p><ul><li>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)*loadFactor 时 ， 就 会 进 行 数 组 扩 容 ， loadFactor 的 默 认 值(DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。</li><li>默认情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么当HashMap中元素个数超过16*0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</li><li>当HashMap中的其中一个链的对象个数如果达到了8个，此时如果capacity没有达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链会变成树，结点类型由Node变成TreeNode类型。当然，如果当映射关系被移除后，下次resize方法时判断树的结点个数低于6个，也会把树再转为链表。</li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909174017.png" alt="image-20200909174017532"></p><h4 id="7-3-4-关于映射关系的key-是否可以修改-？"><a href="#7-3-4-关于映射关系的key-是否可以修改-？" class="headerlink" title="7.3.4 关于映射关系的key 是否可以修改 ？"></a>7.3.4 关于映射关系的key 是否可以修改 ？</h4><p><strong>answer ：不要修改</strong></p><ul><li>映射关系存储到HashMap中会存储key的hash值，这样就不用在每次查找时重新计算每一个Entry或Node（TreeNode）的hash值了，因此如果已经put到Map中的映射关系，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上。</li></ul><h4 id="7-3-5-JDK8-相较于之前的变化"><a href="#7-3-5-JDK8-相较于之前的变化" class="headerlink" title="7.3.5 JDK8 相较于之前的变化"></a>7.3.5 JDK8 相较于之前的变化</h4><ol><li>HashMap map = new HashMap();//默认情况下，先不创建长度为16的数组</li><li>.当首次调用map.put()时，再创建长度为16的数组</li><li>数组为Node类型，在jdk7中称为Entry类型</li><li>形成链表结构时，新添加的key-value对在链表的尾部（七上八下）</li><li>当数组指定索引位置的链表长度&gt;8时，<code>且</code>map中的数组的长度&gt; 64时，此索引位置上的所有key-value对使用红黑树进行存储。</li></ol><h4 id="7-3-6-面试题"><a href="#7-3-6-面试题" class="headerlink" title="7.3.6 面试题"></a>7.3.6 面试题</h4><p><strong>面试题：负载因子值的大小，对HashMap 有什么影响?</strong></p><ul><li>负载因子的大小决定了HashMap的数据密度。</li><li>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长,造成查询或插入时的比较次数增多，性能会下降。</li><li>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会浪费一定的内容空间。而且经常扩容也会影响性能，建议初始化预设大一点的空间。</li><li>按照其他语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此时平均检索长度接近于常数。</li></ul><h3 id="7-4-Map-实现类之二：LinkedHashMap"><a href="#7-4-Map-实现类之二：LinkedHashMap" class="headerlink" title="7.4 Map 实现类之二：LinkedHashMap"></a>7.4 Map 实现类之二：LinkedHashMap</h3><ul><li>LinkedHashMap 是 HashMap 的子类</li><li>在HashMap存储结构的基础上，使用了一对<code>双向链表来记录添加元素的顺序</code></li><li>与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代顺序：迭代<code>顺序与 Key-Value 对的插入顺序一致</code></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909180627.png" alt="image-20200909180627488"></p><h3 id="7-5-Map-实现类之三：TreeMap"><a href="#7-5-Map-实现类之三：TreeMap" class="headerlink" title="7.5 Map 实现类之三：TreeMap"></a>7.5 Map 实现类之三：TreeMap</h3><ul><li>TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。<br>TreeMap 可以保证所有的 Key-Value 对处于 <code>有序</code>状态。</li><li>TreeSet底层使用 <code>红黑树</code>结构存储数据</li><li>TreeMap 的 Key 的排序：<ol><li><code>自然排序</code>：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</li><li><code>定制排序</code>：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现Comparable 接口</li></ol></li><li>TreeMap判断 <code>两个key 相等的标准</code>：两个key通过compareTo()方法或者compare()方法返回0。</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向TreeMap中添加key-value，要求key必须是由同一个类创建的对象</span></span><br><span class="line">    <span class="comment">//按照key进行排序：自然排序 、定制排序</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自然排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">23</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">"Jerry"</span>,<span class="number">32</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">20</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">98</span>);</span><br><span class="line">        map.put(u2,<span class="number">89</span>);</span><br><span class="line">        map.put(u3,<span class="number">76</span>);</span><br><span class="line">        map.put(u4,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"----&gt;"</span> + entry.getValue());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定制排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap(<span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1 = (User)o1;</span><br><span class="line">                    User u2 = (User)o2;</span><br><span class="line">                    <span class="comment">//按年龄排序</span></span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">23</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">"Jerry"</span>,<span class="number">32</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">20</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">"Rose"</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">98</span>);</span><br><span class="line">        map.put(u2,<span class="number">89</span>);</span><br><span class="line">        map.put(u3,<span class="number">76</span>);</span><br><span class="line">        map.put(u4,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"----&gt;"</span> + entry.getValue());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"User equals()...."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        User user = (User) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != user.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(user.name) : user.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; <span class="comment">//return name.hashCode() + age;</span></span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从大到小排列,年龄从小到大排列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user = (User)o;</span><br><span class="line">            <span class="keyword">int</span> compare = -<span class="keyword">this</span>.name.compareTo(user.name);</span><br><span class="line">            <span class="keyword">if</span>(compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.age,user.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test1：</span><br><span class="line">User&#123;name='Tom', age=<span class="number">23</span>&#125;----&gt;<span class="number">98</span></span><br><span class="line">User&#123;name='Jerry', age=<span class="number">32</span>&#125;----&gt;<span class="number">89</span></span><br><span class="line">User&#123;name='Jack', age=<span class="number">18</span>&#125;----&gt;<span class="number">100</span></span><br><span class="line">User&#123;name='Jack', age=<span class="number">20</span>&#125;----&gt;<span class="number">76</span></span><br><span class="line"></span><br><span class="line">test2：</span><br><span class="line">User&#123;name='Rose', age=<span class="number">18</span>&#125;----&gt;<span class="number">100</span></span><br><span class="line">User&#123;name='Jack', age=<span class="number">20</span>&#125;----&gt;<span class="number">76</span></span><br><span class="line">User&#123;name='Tom', age=<span class="number">23</span>&#125;----&gt;<span class="number">98</span></span><br><span class="line">User&#123;name='Jerry', age=<span class="number">32</span>&#125;----&gt;<span class="number">89</span></span><br></pre></td></tr></table></figure><h3 id="7-6-Map-实现类之四：Hashtable"><a href="#7-6-Map-实现类之四：Hashtable" class="headerlink" title="7.6 Map 实现类之四：Hashtable"></a>7.6 Map 实现类之四：Hashtable</h3><ul><li>Hashtable是个古老的 Map 实现类，JDK1.0就提供了。不同于HashMap，Hashtable是线程安全的(synchronized)。</li><li>Hashtable实现原理和HashMap相同，功能相同。底层都使用<code>哈希表</code>结构，查询速度快，很多情况下可以互用。</li><li>与HashMap不同，Hashtable <code>不允许使用 null 作为 key 和 value</code></li><li>与HashMap一样，Hashtable 也<code>不能保证其中 Key-Value 对的顺序</code></li><li>Hashtable判断两个key相等、两个value相等的标准，与HashMap一致。</li></ul><h3 id="7-7-Map-实现类之五：Properties"><a href="#7-7-Map-实现类之五：Properties" class="headerlink" title="7.7 Map 实现类之五：Properties"></a>7.7 Map 实现类之五：Properties</h3><ul><li>Properties 类是 Hashtable 的子类，该对象用于<code>处理属性文件</code></li><li>由于属性文件里的 key、value 都是字符串类型，所以 <code>Properties 里的 key和 value 都是字符串类型</code></li><li>存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Properties:常用来处理配置文件。key和value都是String类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            pros.load(fis);<span class="comment">//加载流对应的文件</span></span><br><span class="line"></span><br><span class="line">            String name = pros.getProperty(<span class="string">"name"</span>);</span><br><span class="line">            String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"name = "</span> + name + <span class="string">", password = "</span> + password);</span><br><span class="line">            <span class="comment">//运行结果：name = BitHachi, password = 123456</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909202341.png" alt="image-20200909202340159"></p><h2 id="8-Collections工具类"><a href="#8-Collections工具类" class="headerlink" title="8. Collections工具类"></a>8. Collections工具类</h2><ul><li><p>Collections 是一个<code>操作 Set、List 和 Map 等集合的工具类</code></p></li><li><p>Collections 中提供了一系列静态的方法<code>对集合元素进行排序、查询和修改</code>等操作，还提供了<code>对集合对象设置不可变、对集合对象实现同步控制等方法</code></p></li><li><p>排序操作：<code>（均为static 方法）</code></p><ol><li>reverse(List)：反转 List 中元素的顺序</li><li>shuffle(List)：对 List 集合元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li><li>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</li></ol></li><li><p>查找、替换</p><ol><li>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</li><li>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</li><li>Object min(Collection)</li><li>Object min(Collection，Comparator)</li><li>int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</li><li>void copy(List dest,List src)：将src中的内容复制到dest中</li><li>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换List 对象的所有旧值</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Collections:操作Collection、Map的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">reverse(List)：反转 List 中元素的顺序</span></span><br><span class="line"><span class="comment">shuffle(List)：对 List 集合元素进行随机排序</span></span><br><span class="line"><span class="comment">sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line"><span class="comment">sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span></span><br><span class="line"><span class="comment">swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span></span><br><span class="line"><span class="comment">Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span></span><br><span class="line"><span class="comment">Object min(Collection)</span></span><br><span class="line"><span class="comment">Object min(Collection，Comparator)</span></span><br><span class="line"><span class="comment">int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span><br><span class="line"><span class="comment">void copy(List dest,List src)：将src中的内容复制到dest中</span></span><br><span class="line"><span class="comment">boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(-<span class="number">97</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//报异常：IndexOutOfBoundsException("Source does not fit in dest")</span></span><br><span class="line"><span class="comment">//        List dest = new ArrayList();</span></span><br><span class="line"><span class="comment">//        Collections.copy(dest,list);</span></span><br><span class="line">        <span class="comment">//正确的：</span></span><br><span class="line">        List dest = Arrays.asList(<span class="keyword">new</span> Object[list.size()]);</span><br><span class="line">        System.out.println(dest.size());<span class="comment">//list.size();</span></span><br><span class="line"></span><br><span class="line">        Collections.copy(dest,list);</span><br><span class="line">        System.out.println(dest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Collections 类中提供了多个 synchronizedXxx() 方法，</span></span><br><span class="line"><span class="comment">        该方法可使将指定集合包装成线程同步的集合，从而可以解决</span></span><br><span class="line"><span class="comment">        多线程并发访问集合时的线程安全问题</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//返回的list1即为线程安全的List</span></span><br><span class="line">        List list1 = Collections.synchronizedList(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(-<span class="number">97</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(list);<span class="comment">//反转 List 中元素的顺序</span></span><br><span class="line"></span><br><span class="line">        Collections.shuffle(list);<span class="comment">//对 List 集合元素进行随机排序</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        Collections.sort(list);<span class="comment">//根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        Collections.swap(list,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//将指定 list 集合中的 1 处元素和 2 处元素进行交换</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> frequency = Collections.frequency(list, <span class="number">123</span>);<span class="comment">//返回指定集合中指定元素的出现次数</span></span><br><span class="line">        System.out.println(frequency);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test2():</span><br><span class="line"><span class="number">5</span></span><br><span class="line">[<span class="number">123</span>, <span class="number">43</span>, <span class="number">765</span>, -<span class="number">97</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test1():</span><br><span class="line">[<span class="number">123</span>, <span class="number">123</span>, <span class="number">43</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>, -<span class="number">97</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, -<span class="number">97</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">43</span>, <span class="number">123</span>, <span class="number">123</span>]</span><br><span class="line">[<span class="number">765</span>, <span class="number">123</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">43</span>, <span class="number">0</span>, -<span class="number">97</span>, <span class="number">123</span>]</span><br><span class="line">[-<span class="number">97</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">123</span>, <span class="number">123</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>]</span><br><span class="line">[-<span class="number">97</span>, <span class="number">43</span>, <span class="number">0</span>, <span class="number">123</span>, <span class="number">123</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>]</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>Collections 类中提供了多个 <code>synchronizedXxx()</code>方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909210720.png" alt="image-20200909210720219"></p><h2 id="9-Enumeration"><a href="#9-Enumeration" class="headerlink" title="9. Enumeration"></a>9. Enumeration</h2><ul><li>Enumeration 接口是 Iterator 迭代器的 “古老版本”</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909210827.png" alt="image-20200909210827227"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Enumeration stringEnum = <span class="keyword">new</span> StringTokenizer(<span class="string">"a-b*c-d-e-g"</span>, <span class="string">"-"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(stringEnum.hasMoreElements())&#123;</span><br><span class="line">    Object obj = stringEnum.nextElement();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HashMap </tag>
            
            <tag> Map </tag>
            
            <tag> List </tag>
            
            <tag> Set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门网络编程</title>
      <link href="/posts/8bb450e2.html"/>
      <url>/posts/8bb450e2.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么要学习网络编程？"><a href="#1-为什么要学习网络编程？" class="headerlink" title="1. 为什么要学习网络编程？"></a>1. 为什么要学习网络编程？</h1><p>我们初学一门语言时，大多数的时候都是与控制台或者本地主机打交道。如果我们想与其它计算机交流沟通，交换数据，那么我们就需要学习一些网络知识，学习一些网络编程的技术去达到这个目的。</p><p>简单一句话：网络编程可以让你与其它计算机进行交流沟通。</p><h1 id="2-复习一些重要的网络知识"><a href="#2-复习一些重要的网络知识" class="headerlink" title="2. 复习一些重要的网络知识"></a>2. 复习一些重要的网络知识</h1><p>我在之前总结过计算机网络的重要基础知识，忘记的同志可以去看看：<a href="https://blog.csdn.net/weixin_43914604/article/details/104722679" target="_blank" rel="noopener">计算机网络知识总结目录</a>，这里只简述一些在这里用到的知识点。</p><h2 id="2-1-网络通信协议"><a href="#2-1-网络通信协议" class="headerlink" title="2.1 网络通信协议"></a>2.1 网络通信协议</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826221619.png" alt="image-20200826221618034"></p><h3 id="2-1-1-TCP-IP"><a href="#2-1-1-TCP-IP" class="headerlink" title="2.1.1 TCP/IP"></a>2.1.1 TCP/IP</h3><ul><li>传输层协议中有两个非常重要的协议：<br>传输控制协议TCP(Transmission Control Protocol)<br>用户数据报协议UDP(User Datagram Protocol)。</li><li>TCP/IP 以其两个主要协议：传输控制协议(TCP) 和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。</li><li>IP(Internet Protocol)协议是网络层的主要协议，支持网间互连的数据通信。</li></ul><h3 id="2-1-2-TCP-和-UDP"><a href="#2-1-2-TCP-和-UDP" class="headerlink" title="2.1.2 TCP 和 UDP"></a>2.1.2 TCP 和 UDP</h3><ul><li><p>TCP 协议：</p><ul><li><p>使用TCP协议前，须先建立TCP连 接，形成传输数据通道</p></li><li><p>传输前，采用“ 三次握手”方式，点对点通信，是可靠的</p></li><li><p>TCP协议进行通信的两个应用进程：客户端、服务端。</p></li><li><p>在连接中可进行大数据量的传输</p></li><li><p>传输完毕，需释放已建立的连接，效率低</p></li></ul></li><li><p>UDP 协议：</p><ul><li>将数据、源、目的封装成数据包，不需要建立连接</li><li>每个数据报的大小限制在64K内</li><li>发送不管对方是否准备好，接收方收到也不确认，故是不可靠的</li><li>可以广播发送</li><li>发送数据结束时无需释放资源，开销小，速度快</li></ul></li></ul><h2 id="2-2-IP"><a href="#2-2-IP" class="headerlink" title="2.2 IP"></a>2.2 IP</h2><ul><li>IP 地址：InetAddress</li><li><code>唯一的标识 Internet 上的一台计算机</code></li><li>本地回环地址(hostAddress)：127.0.0.1 ，主机名(hostName)：localhost</li><li>IP地址分类方式1：<code>IPV4 和 IPV6</code><ul><li>IPV4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如192.168.0.1</li><li>IPV6：128位（16个字节），写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号（：）分开，如：3ffe:3201:1401:1280:c8ff:fe4d:db39:1984</li></ul></li><li>IP地址分类方式2： <code>公网地址( 万维网使用)和 私有地址( 局域网使用)</code>。192.168.开头的就是私有址址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用</li><li>特点：不易记忆</li></ul><h2 id="2-3-端口"><a href="#2-3-端口" class="headerlink" title="2.3 端口"></a>2.3 端口</h2><ul><li><p><code>端口号标识正在计算机上运行的进程（程序）</code></p></li><li><p>不同的进程有不同的端口号</p></li><li><p>被规定为一个 16 位的整数 0~65535。</p></li><li><p>端口分类：</p><ul><li><p><code>公认端口</code>：0~1023。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23）</p></li><li><p><code>注册端口</code>：1024~49151。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）。</p></li><li><p><code>动态/ 私有端口</code>：49152~65535。</p></li></ul></li><li><p>端口号与IP 地址的组合得出一个网络套接字：<code>Socket</code>,标识某台计算机上的某一进程。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826222340.png" alt="image-20200826222340691"></p><h2 id="2-4-Socket"><a href="#2-4-Socket" class="headerlink" title="2.4 Socket"></a>2.4 Socket</h2><ul><li>网络上具有唯一标识的<code>IP地址和端口号组合</code>在一起才能构成唯一能识别的标识符套接字。</li><li>通信的两端都要有Socket，是两台机器间通信的端点。</li><li>网络通信其实就是Socket间的通信。</li><li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</li><li>一般主动发起通信的应用程序属<code>客户端</code>，等待通信请求的为<code>服务端</code>。</li><li>Socket分类：<br><code>流套接字</code>（stream socket）：使用<code>TCP</code>提供可依赖的字节流服务<br><code>数据报套接字</code>（datagram socket）：使用<code>UDP</code>提供“尽力而为”的数据报服务</li></ul><p><strong>Java中提供了Socket类：</strong></p><ul><li><p>Socket 类的常用构造 器 ：</p><ol><li>public Socket(InetAddress address,int port)创建一个流套接字并将其连接到指定IP 地址的指定端口号。</li><li>public Socket(String host,int port)创建一个流套接字并将其连接到指定主机上的指定端口号。</li></ol></li><li><p>Socket 类的常用方法：</p><ol><li><p>public InputStream getInputStream()返回此套接字的输入流。可以用于接收网络消息</p></li><li><p>public OutputStream getOutputStream()返回此套接字的输出流。可以用于发送网络消息</p></li><li><p>public InetAddress getInetAddress()此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。</p></li><li><p>public InetAddress getLocalAddress()获取套接字绑定的本地地址。 即本端的IP地址</p></li><li><p>public int getPort()此套接字连接到的远程端口号；如果尚未连接套接字，则返回0。</p></li><li><p>public int getLocalPort()返回此套接字绑定到的本地端口。 如果尚未绑定套接字，则返回 -1。即本端的端口号。</p></li><li><p>public void close()关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和OutputStream。</p></li><li><p>public void shutdownInput()如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。即不能在从此套接字的输入流中接收任何数据。</p></li><li><p>public void shutdownOutput()禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</p></li></ol></li></ul><h1 id="3-InetAddress类"><a href="#3-InetAddress类" class="headerlink" title="3. InetAddress类"></a>3. InetAddress类</h1><p><strong>InetAddress类是Java中用于标识IP地址的类</strong></p><ul><li><p>Internet上的主机有两种方式表示地址：</p><ol><li><p>域名(hostName)：<a href="www.bithachi.cn">www.bithachi.cn</a> </p></li><li><p>IP 地址(hostAddress)：150.108.35.210</p></li></ol></li><li><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p></li><li><p>InetAddress 类对象含有一个 Internet 主机地址的域名和IP地址：<a href="www.bithachi.cn">www.bithachi.cn</a> 和 150.108.35.210。</p></li><li><p>域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS) 负责将域名转化成IP地址，这样才能和主机建立连接。 ——-<code>域名解析</code></p></li><li><p>先找本机hosts文件，是否有输入的域名地址，没有的话，再通过DNS服务器，找主机。</p></li></ul><p><strong>InetAddress类的构造器和方法：</strong></p><ul><li>InetAddress 类没有提供公共的构造器，而是提供 了 如下几个 静态方法来获取InetAddress 实例<br>public static InetAddress getLocalHost()<br>public static InetAddress getByName(String host)</li><li>InetAddress 提供了如下几个常用 的 方法<br>public String getHostAddress() ：返回 IP 地址字符串（以文本表现形式）。<br>public String getHostName() ：获取此 IP 地址的主机名<br>public boolean isReachable(int timeout)： ：测试是否可以达到该地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress inet1 = InetAddress.getByName(<span class="string">"192.168.10.14"</span>);</span><br><span class="line">            System.out.println(inet1);</span><br><span class="line"></span><br><span class="line">            InetAddress inet2 = InetAddress.getByName(<span class="string">"www.bithachi.cn"</span>);</span><br><span class="line">            System.out.println(inet2);</span><br><span class="line"></span><br><span class="line">            InetAddress inet3 = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">            System.out.println(inet3);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取本地ip</span></span><br><span class="line">            InetAddress inet4 = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(inet4);</span><br><span class="line"></span><br><span class="line">            inet2 = InetAddress.getByName(<span class="string">"www.bithachi.cn"</span>);</span><br><span class="line">            <span class="comment">//getHostName()</span></span><br><span class="line">            System.out.println(inet2.getHostName());</span><br><span class="line">            <span class="comment">//getHostAddress()</span></span><br><span class="line">            System.out.println(inet2.getHostAddress());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/<span class="number">192</span>.<span class="number">168</span>.<span class="number">10</span>.<span class="number">14</span></span><br><span class="line">www.bithachi.cn/<span class="number">150</span>.<span class="number">109</span>.<span class="number">4</span>.<span class="number">162</span></span><br><span class="line">/<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span></span><br><span class="line">BitHachi/<span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">3</span></span><br><span class="line">www.bithachi.cn</span><br><span class="line"><span class="number">150</span>.<span class="number">109</span>.<span class="number">4</span>.<span class="number">162</span></span><br></pre></td></tr></table></figure><h1 id="4-基于Socket-的TCP网络编程"><a href="#4-基于Socket-的TCP网络编程" class="headerlink" title="4.  基于Socket 的TCP网络编程"></a>4.  基于Socket 的TCP网络编程</h1><p> Java语言的基于套接字编程分为服务端编程和客户端编程，其通信模型如图所示：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826234826.png" alt="image-20200826234826836"></p><h2 id="4-1-客户端—Client"><a href="#4-1-客户端—Client" class="headerlink" title="4.1 客户端—Client"></a>4.1 客户端—Client</h2><ul><li>客户端Socket 的工作过程包含以下四个基本的步骤 ：<ol><li>创建 Socket ：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li><li>打开连接到 Socket 的输入/ 出流： 使用 getInputStream()方法获得输入流，使用getOutputStream()方法获得输出流，进行数据传输</li><li>按照一定的协议对 Socket 进行读/ 写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线程。</li><li>关闭 Socket： ：断开客户端到服务器的连接，释放线路</li></ol></li><li>客户端程序可以使用Socket类创建对象， 创建的同时会自动向服务器方发起连接。</li></ul><p><strong>Socket的构造器是：</strong></p><ul><li>Socket(String host,int port)throws UnknownHostException,IOException：向服务器(域名是host。端口号为port)发起TCP连接，若成功，则创建Socket对象，否则抛出异常。</li><li>Socket(InetAddress address,int port)throws IOException：根据InetAddress对象所表示的IP地址以及端口号port发起连接。</li></ul><h2 id="4-2-服务端—Server"><a href="#4-2-服务端—Server" class="headerlink" title="4.2 服务端—Server"></a>4.2 服务端—Server</h2><ul><li>服务器 程序的工作过程包含以下四个基本的步骤：<ol><li>调用 ServerSocket(int port) ： ：创建一个服务器端套接字，并绑定到指定端口 上。用于监听客户端的请求。</li><li>调用 accept()： ：监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象。</li><li>调用该Socket 类对象的 getOutputStream() 和 和 getInputStream ()： ：获取输出流和输入流，开始网络数据的发送和接收。</li><li>关闭ServerSocket 和Socket 对象：客户端访问结束，关闭通信套接字。</li></ol></li><li>ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说，<code>服务器必须事先建立一个等待客户请求建立套接字的 连接的ServerSocket 对象。</code></li><li>所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象</li></ul><h2 id="4-3-一个文件传输的例子"><a href="#4-3-一个文件传输的例子" class="headerlink" title="4.3 一个文件传输的例子"></a>4.3 一个文件传输的例子</h2><p><strong>这里举一个例子，在本地有一个服务端和一个客户端，客户端向服务端发送一个文件，服务端保存文件，并对客户端进行信息反馈。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现TCP的网络编程，需先启动服务端再启动客户端</span></span><br><span class="line"><span class="comment"> * 从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。</span></span><br><span class="line"><span class="comment"> * 并关闭相应的连接。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPTest3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Socket对象，指定IP和端口</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">"127.0.0.1"</span>), <span class="number">9090</span>);</span><br><span class="line">            <span class="comment">//2.获取一个输出流，用于发送数据给服务端</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//3.选择一个文件发送给服务端，比如hello.txt</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"hello.txt"</span>));<span class="comment">//这里填写你文件的路径</span></span><br><span class="line">            <span class="comment">//4.将hello.txt以字节方式发送给服务端</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//5.关闭数据的输出/发送,不关闭则服务端那边一直read堵塞</span></span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//6.接收来自于服务器端的数据，并显示到控制台上</span></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] bufferr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> len1;</span><br><span class="line">            <span class="keyword">while</span> ((len1 = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len1);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6.资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建服务端套接字，并绑定到监听的端口上</span></span><br><span class="line">            ss = <span class="keyword">new</span> ServerSocket(<span class="number">9090</span>);</span><br><span class="line">            <span class="comment">//2.监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象</span></span><br><span class="line">            socket = ss.accept();</span><br><span class="line">            <span class="comment">//3.获取输入流，接收客服端发来的数据</span></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            <span class="comment">//4.将客户端发来的文件内容输出到hello3.txt</span></span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"hello3.txt"</span>));<span class="comment">//这里填写你文件的路径</span></span><br><span class="line">            <span class="comment">//5.将客户端发来的文件进行存储，写入指定的hello3.txt文件中</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"已接收到客户端发来的数据文件，文件传输完成"</span>);</span><br><span class="line">            <span class="comment">//6.服务器端给予客户端反馈</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">"你好客户端，txt文件已收到！"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//7.资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ss != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>服务端正确存储了客户端发来的文件，并有以下信息的交互：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//客户端：</span><br><span class="line">你好客户端，txt文件已收到！</span><br><span class="line"></span><br><span class="line">//服务端：</span><br><span class="line">已接收到客户端发来的数据文件，文件传输完成</span><br></pre></td></tr></table></figure><h1 id="5-UDP网络编程"><a href="#5-UDP网络编程" class="headerlink" title="5. UDP网络编程"></a>5. UDP网络编程</h1><h2 id="5-1-DatagramSocket-与-DatagramPacket"><a href="#5-1-DatagramSocket-与-DatagramPacket" class="headerlink" title="5.1 DatagramSocket 与 DatagramPacket"></a>5.1 DatagramSocket 与 DatagramPacket</h2><ul><li>类<code>DatagramSocket</code>和<code>DatagramPacket</code>实现了基于 UDP 协议网络程序。</li><li>UDP数据报通过<code>数据报套接字 DatagramSocket</code>发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</li><li><code>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。</code></li><li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。</li></ul><h2 id="5-2-DatagramSocket-类的常用方法"><a href="#5-2-DatagramSocket-类的常用方法" class="headerlink" title="5.2 DatagramSocket 类的常用方法"></a>5.2 DatagramSocket 类的常用方法</h2><ol><li>public DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。</li><li>public DatagramSocket(int port,InetAddress laddr)创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。</li><li>public void close()关闭此数据报套接字。</li><li>public void send(DatagramPacket p)从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的IP 地址和远程主机的端口号。</li><li>public void receive(DatagramPacket p)从此套接字接收数据报包。当此方法返回时，DatagramPacket的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。</li><li>public InetAddress getLocalAddress()获取套接字绑定的本地地址。</li><li>public int getLocalPort()返回此套接字绑定的本地主机上的端口号。</li><li>public InetAddress getInetAddress()返回此套接字连接的地址。如果套接字未连接，则返回null。</li><li>public int getPort()返回此套接字的端口。如果套接字未连接，则返回-1。</li></ol><h2 id="5-3-DatagramPacket-类的常用方法"><a href="#5-3-DatagramPacket-类的常用方法" class="headerlink" title="5.3 DatagramPacket 类的常用方法"></a>5.3 DatagramPacket 类的常用方法</h2><ol><li>public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。</li><li>public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length参数必须小于等于 buf.length。</li><li>public InetAddress getAddress()返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。</li><li>public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。</li><li>public byte[] getData()返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。</li><li>public int getLength()返回将要发送或接收到的数据的长度。</li></ol><h2 id="5-4-UDP网络通信流程"><a href="#5-4-UDP网络通信流程" class="headerlink" title="5.4 UDP网络通信流程"></a>5.4 UDP网络通信流程</h2><ul><li>流 程：<ol><li>创建DatagramSocket与DatagramPacket对象</li><li>建立发送端，接收端</li><li>建立数据包</li><li>调用Socket的发送、接收方法</li><li>关闭Socket</li></ol></li><li>发送端与接收端是两个独立的运行程序</li></ul><h2 id="5-5-一个例子"><a href="#5-5-一个例子" class="headerlink" title="5.5 一个例子"></a>5.5 一个例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Random_name.sgm.day10.src.com.atguigu.java1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UDPd协议的网络编程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sender</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建数据报套接字 DatagramSocket</span></span><br><span class="line">            <span class="comment">//将其绑定到本地主机上的任何可用端口。</span></span><br><span class="line">            <span class="comment">// 套接字将被绑定到一个由内核选择的IP地址。</span></span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">            <span class="comment">//设置要发送的数据</span></span><br><span class="line">            String str = <span class="string">"我是UDP方式发送的数据"</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] data = str.getBytes();</span><br><span class="line">            <span class="comment">//创建UDP数据报包DatagramPacket对象，在数据报包中包含了发送的数据、其长度，接收端的IP地址和端口号。</span></span><br><span class="line">            InetAddress inet = InetAddress.getLocalHost();</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, <span class="number">0</span>, data.length, inet, <span class="number">9090</span>);</span><br><span class="line">            socket.send(packet);<span class="comment">//用数据报套接字的方法发送数据报给接收端</span></span><br><span class="line"></span><br><span class="line">            System.out.println(socket.getInetAddress());<span class="comment">//返回此套接字连接的地址。如果套接字未连接，则返回null。</span></span><br><span class="line">            System.out.println(socket.getPort());<span class="comment">//返回此套接字的端口。如果套接字未连接，则返回-1。</span></span><br><span class="line">            <span class="comment">//获取套接字绑定的本地地址,如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。</span></span><br><span class="line">            System.out.println(socket.getLocalAddress());</span><br><span class="line">            System.out.println(socket.getLocalPort());<span class="comment">//返回此套接字绑定的本地主机上的端口号。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiver</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建数据报套接字并将其绑定到本地主机上的指定端口</span></span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">            <span class="comment">//用来接收长度为 buffer.length 的数据包</span></span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">            <span class="comment">//从此套接字接收数据报包</span></span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="comment">//打印接收到的数据报包中的信息</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(packet.getData(), <span class="number">0</span>, packet.getLength()));</span><br><span class="line"></span><br><span class="line">            System.out.println(socket.getInetAddress());<span class="comment">//返回此套接字连接的地址。如果套接字未连接，则返回null。</span></span><br><span class="line">            System.out.println(socket.getPort());<span class="comment">//返回此套接字的端口。如果套接字未连接，则返回-1。</span></span><br><span class="line">            <span class="comment">//获取套接字绑定的本地地址,如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。</span></span><br><span class="line">            System.out.println(socket.getLocalAddress());<span class="comment">//获取套接字绑定的本地地址</span></span><br><span class="line">            System.out.println(socket.getLocalPort());<span class="comment">//返回此套接字绑定的本地主机上的端口号。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//发送端：</span><br><span class="line">null</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>/<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line"><span class="number">55684</span></span><br><span class="line"></span><br><span class="line">//接收端：</span><br><span class="line">我是UDP方式发送的数据</span><br><span class="line">null</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>/<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line"><span class="number">9090</span></span><br></pre></td></tr></table></figure><h1 id="6-URL编程"><a href="#6-URL编程" class="headerlink" title="6. URL编程"></a>6. URL编程</h1><h2 id="6-1-URL类"><a href="#6-1-URL类" class="headerlink" title="6.1 URL类"></a>6.1 URL类</h2><ul><li><code>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上 某一资源的地址。</code></li><li>它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何定位这个资源。</li><li>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。</li><li>URL的基本结构由5部分组成：<br><code>&lt; 传输协议&gt;://&lt; 主机名&gt;:&lt; 端口号&gt;/&lt; 文件名&gt;# 片段名? 参数列表</code><br>例如: <a href="http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123" target="_blank" rel="noopener">http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123</a><ul><li>#片段名：即锚点，例如看小说，直接定位到章节</li><li>参数列表格式：参数名=参数值&amp;参数名=参数值….</li></ul></li></ul><h2 id="6-2-URL类构造器"><a href="#6-2-URL类构造器" class="headerlink" title="6.2 URL类构造器"></a>6.2 URL类构造器</h2><ul><li>为了表示URL，java.net 中实现了类 URL。我们可以通过下面的构造器来初始化一个 URL 对象：<ul><li>public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。<br>例如：URL url = new URL (“<a href="http://www" target="_blank" rel="noopener">http://www</a>. bithachi.cn/“);</li><li>public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。<br>例如：URL downloadUrl = new URL(url, “download.html”)</li><li>public URL(String protocol, String host, String file);<br>例如：new URL(“https”,”<a href="http://www.bithachi.cn&quot;" target="_blank" rel="noopener">www.bithachi.cn&quot;</a>, “download. html”);</li><li>public URL(String protocol, String host, int port, String file);<br>例如: URL gamelan = new URL(“https”, “<a href="http://www.bithachi.cn&quot;" target="_blank" rel="noopener">www.bithachi.cn&quot;</a>, 80, “download.html”);</li></ul></li><li>URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。</li><li>一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性：<ol><li>public String getProtocol( ) 获取该URL的协议名</li><li>public String getHost( ) 获取该URL的主机名</li><li>public String getPort( ) 获取该URL的端口号</li><li>public String getPath( ) 获取该URL的文件路径</li><li>public String getFile( ) 获取该URL的文件名</li><li>public String getQuery( ) 获取该URL的查询名</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">URLTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.bithachi.cn:666/abc/123.jpg?username=Tom"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"getProtocol() : "</span>+url.getProtocol());<span class="comment">//获取该URL的协议名</span></span><br><span class="line">            System.out.println(<span class="string">"getHost() : "</span>+url.getHost());<span class="comment">//获取该URL的主机名</span></span><br><span class="line">            System.out.println(<span class="string">"getPort() : "</span>+url.getPort());<span class="comment">//获取该URL的端口号</span></span><br><span class="line">            System.out.println(<span class="string">"getPath() : "</span>+url.getPath());<span class="comment">//获取该URL的文件路径</span></span><br><span class="line">            System.out.println(<span class="string">"getFile() : "</span>+url.getFile());<span class="comment">//获取该URL的文件名</span></span><br><span class="line">            System.out.println(<span class="string">"getQuery() : "</span>+url.getQuery());<span class="comment">//获取该URL的查询名</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getProtocol() : https</span><br><span class="line">getHost() : www.bithachi.cn</span><br><span class="line">getPort() : <span class="number">666</span></span><br><span class="line">getPath() : /abc/<span class="number">123</span>.jpg</span><br><span class="line">getFile() : /abc/<span class="number">123</span>.jpg?username=Tom</span><br><span class="line">getQuery() : username=Tom</span><br></pre></td></tr></table></figure><h2 id="6-2-针对HTTP-协议的URLConnection类"><a href="#6-2-针对HTTP-协议的URLConnection类" class="headerlink" title="6.2 针对HTTP 协议的URLConnection类"></a>6.2 针对HTTP 协议的URLConnection类</h2><ul><li>URL的方法 <code>openStream()</code>：能从网络上读取数据</li><li>若希望输出数据，例如向服务器端的 <code>CGI</code>（<code>公共网关接口-Common GatewayInterface</code>-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用URLConnection 。</li><li><code>URLConnection</code>：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 <code>openConnection()</code>生成对应的 URLConnection对象。如果连接过程失败，将产生<code>IOException.</code></li><li>URL netchinaren = new URL (“<a href="https://www.bithachi.cn/index.html&quot;">https://www.bithachi.cn/index.html&quot;</a>);</li><li>URLConnectonn u = netchinaren.openConnection( );</li><li>通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。<ol><li>public Object getContent( ) throws IOException</li><li>public int getContentLength( )</li><li>public String getContentType( )</li><li>public long getDate( )</li><li>public long getLastModified( )</li><li>public InputStream getInputStream( )throws IOException</li><li>public OutputSteram getOutputStream( )throws IOException</li></ol></li></ul><p><strong>举个例子：下载URL所指的文件到本地</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpURLConnection urlConnection = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/examples/123.jpg"</span>);</span><br><span class="line">            <span class="comment">//获取HttpURLConnection对象</span></span><br><span class="line">            urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            urlConnection.connect();</span><br><span class="line">            <span class="comment">//获取输入流</span></span><br><span class="line">            is = urlConnection.getInputStream();</span><br><span class="line">            <span class="comment">//将输入流中的数据保存到abc.jpg中</span></span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"../abc.jpg"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"下载完成"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(urlConnection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                urlConnection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-URI-、URL-和URN的区别"><a href="#6-3-URI-、URL-和URN的区别" class="headerlink" title="6.3 URI 、URL 和URN的区别"></a>6.3 URI 、URL 和URN的区别</h2><ul><li><p><code>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</code></p></li><li><p>URL是uniform resource locator，统一资源定位符，它是一种具体的URI，即<code>URL可以用来标识一个资源，而且还指明了如何定位这个资源</code>。</p></li><li><p>URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:<a href="mailto:java-net@java.sun.com">java-net@java.sun.com</a>。</p></li><li><p>也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。</p><p>URL和URN都是一种URI。</p></li><li><p>在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200827132103.png" alt="image-20200827132102888"></p><h1 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h1><ul><li>位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。</li><li><code>客户端-服务器/CS</code>是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。</li><li><code>端口号</code>是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。</li><li><code>套接字</code>用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。</li><li>TCP协议用于实现面向连接的会话。</li><li>Java 中有关网络方面的功能都定义在<code>java.net</code>程序包中。Java 用<code>InetAddress</code>对象表示 IP地址，该对象里有两个字段：<code>主机名(String) 和 IP 地址(int)。</code></li><li>类 <code>Socket</code> 和 <code>ServerSocket</code>实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。</li><li>类 <code>URL</code>和 <code>URLConnection</code>提供了最高级网络应用。URL 的网络资源的位置来同一表示Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型的奥妙</title>
      <link href="/posts/dd50572c.html"/>
      <url>/posts/dd50572c.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么要有泛型？"><a href="#1-为什么要有泛型？" class="headerlink" title="1. 为什么要有泛型？"></a>1. 为什么要有泛型？</h1><p>在学习泛型前，我们先了解一下为什么要有泛型，它有什么作用。</p><p>我们知道，在JDK1.5之前，集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以<code>在JDK1.5之前只能把元素类型设计为Object</code>，JDK1.5之后使用<code>泛型</code>来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时<code>把元素的类型设计成一个参数，这个类型参数叫做泛型</code>。Collection<E>，List<E>，ArrayList<E> 这个<E>就是类型参数，即泛型。</p><p><strong>为什么要有泛型呢 ， 直接Object 不是也可以存储数据吗 ？</strong></p><ol><li>解决元素存储的安全性问题，好比商品、药品标签，不会弄错。</li><li>解决获取数据元素时，需要类型强制转换的问题，好比不用每回拿商品、药品都要辨别。</li></ol><p>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常。同时，代码更加简洁、健壮。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826092830.png" alt="image-20200826092830230"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826092843.png" alt="image-20200826092843863"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//在集合中使用泛型之前的情况：</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//需求：存放学生的成绩</span></span><br><span class="line">        list.add(<span class="number">78</span>);</span><br><span class="line">        list.add(<span class="number">76</span>);</span><br><span class="line">        list.add(<span class="number">89</span>);</span><br><span class="line">        list.add(<span class="number">88</span>);</span><br><span class="line">        <span class="comment">//问题一：类型不安全</span></span><br><span class="line"><span class="comment">//        list.add("Tom");</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Object score : list)&#123;</span><br><span class="line">            <span class="comment">//问题二：强转时，可能出现ClassCastException</span></span><br><span class="line">            <span class="keyword">int</span> stuScore = (Integer) score;<span class="comment">//自动拆箱</span></span><br><span class="line">            System.out.println(stuScore);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在集合中使用泛型的情况：以ArrayList为例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ArrayList&lt;Integer&gt; list =  <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="number">78</span>);</span><br><span class="line">        list.add(<span class="number">87</span>);</span><br><span class="line">        list.add(<span class="number">99</span>);</span><br><span class="line">        list.add(<span class="number">65</span>);</span><br><span class="line">        <span class="comment">//编译时，就会进行类型检查，保证数据的安全</span></span><br><span class="line"><span class="comment">//        list.add("Tom");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        for(Integer score : list)&#123;</span></span><br><span class="line"><span class="comment">//            //避免了强转操作</span></span><br><span class="line"><span class="comment">//            int stuScore = score;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            System.out.println(stuScore);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> stuScore = iterator.next();</span><br><span class="line">            System.out.println(stuScore);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="2-什么是泛型？"><a href="#2-什么是泛型？" class="headerlink" title="2. 什么是泛型？"></a>2. 什么是泛型？</h1><ul><li><code>所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。</code></li><li>从JDK1.5以后，Java引入了<code>“参数化类型（Parameterized type）”</code>的概念，允许我们在创建集合时再指定集合元素的类型，正如：List<String>，这表明该List只能保存字符串类型的对象。</li><li>JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类型实参。</li></ul><h1 id="3-在集合中使用泛型"><a href="#3-在集合中使用泛型" class="headerlink" title="3. 在集合中使用泛型"></a>3. 在集合中使用泛型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//在集合中使用泛型的情况：以HashMap为例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;();</span></span><br><span class="line">        <span class="comment">//jdk7新特性：类型推断,后面可以省略不写或&lt;&gt; </span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"Tom"</span>,<span class="number">87</span>);</span><br><span class="line">        map.put(<span class="string">"Jerry"</span>,<span class="number">87</span>);</span><br><span class="line">        map.put(<span class="string">"Jack"</span>,<span class="number">67</span>);</span><br><span class="line"><span class="comment">//        map.put(123,"ABC");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//泛型的嵌套</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entry = map.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entry.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; e = iterator.next();</span><br><span class="line">            String key = e.getKey();</span><br><span class="line">            Integer value = e.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">"----"</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tom----<span class="number">87</span></span><br><span class="line">Jerry----<span class="number">87</span></span><br><span class="line">Jack----<span class="number">67</span></span><br></pre></td></tr></table></figure><h1 id="4-自定义泛型结构"><a href="#4-自定义泛型结构" class="headerlink" title="4. 自定义泛型结构"></a>4. 自定义泛型结构</h1><h2 id="4-1-泛型的声明与实例化"><a href="#4-1-泛型的声明与实例化" class="headerlink" title="4.1 泛型的声明与实例化"></a>4.1 泛型的声明与实例化</h2><p><strong>1. 泛型的声明</strong></p><p><code>interface List&lt;T&gt; 和 class GenTest&lt;K,V&gt;</code></p><p>其中，T,K,V不代表值，而是表示类型。这里使用任意字母都可以。常用T表示，是Type的缩写。</p><p><strong>2. 泛型的实例化</strong></p><p>一定要在类名后面指定类型参数的值（类型）。</p><ul><li><p><code>List&lt;String&gt; strList = new ArrayList&lt;String&gt;();</code></p></li><li><p><code>Iterator&lt;Customer&gt; iterator = customers.iterator();</code></p></li><li><p><code>T只能是类，不能用基本数据类型填充。但可以使用包装类填充。</code></p></li><li><p>把一 个 集合中的内容限制为一个特定的数据类型，这就是泛型背后的核心思想。</p></li></ul><h2 id="4-2-自定义泛型类或泛型接口"><a href="#4-2-自定义泛型类或泛型接口" class="headerlink" title="4.2 自定义泛型类或泛型接口"></a>4.2 自定义泛型类或泛型接口</h2><ol><li><p>泛型类可能有多个参数，此时应将多个参数一起放在尖括号内。比如：&lt;E1,E2,E3&gt;</p></li><li><p>泛型类的构造器如下：public GenericClass(){}。<br>这样是错误的：public GenericClass<E>(){}</p></li><li><p>实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。</p></li><li><p>泛型不同的引用不能相互赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   ArrayList&lt;String&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">   ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">   <span class="comment">//泛型不同的引用不能相互赋值。</span></span><br><span class="line"><span class="comment">//list1 = list2;</span></span><br></pre></td></tr></table></figure></li><li><p>泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。 </p></li><li><p>如果泛型结构是一个接口或抽象类，则不可创建泛型类的对象。</p></li><li><p>jdk1.7，泛型的简化操作：<code>ArrayList&lt;Fruit&gt; flist = new ArrayList&lt;&gt;();</code></p></li><li><p>泛型的指定中不能使用基本数据类型，可以使用包装类替换。</p></li><li><p>在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。但在<code>静态方法中不能使用类的泛型。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法中不能使用类的泛型。可以把泛型标签当一个变量，static结构不能调用变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T orderT)</span></span>&#123;</span><br><span class="line">    System.out.println(orderT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异常类不能是泛型的，不能在try-catch中使用泛型定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异常类不能声明为泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>不能使用new E[]。但是可以：E[] elements = (E[])new Object[capacity];</p><p>参考：ArrayList源码中声明：Object[] elementData，而非泛型参数类型数组。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//不能创建一个不确定的类对象</span></span><br><span class="line">    <span class="comment">//编译不通过</span></span><br><span class="line"> <span class="comment">//T[] arr = new T[10];</span></span><br><span class="line">    <span class="comment">//编译通过</span></span><br><span class="line">    T[] arr = (T[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个完整代码例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    String orderName;</span><br><span class="line">    <span class="keyword">int</span> orderId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类的内部结构就可以使用类的泛型</span></span><br><span class="line">    T orderT;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//不能在创建一个不确定的类对象</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        T[] arr = new T[10];</span></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        T[] arr = (T[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String orderName,<span class="keyword">int</span> orderId,T orderT)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如下的三个方法都不是泛型方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getOrderT</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderT</span><span class="params">(T orderT)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Order&#123;"</span> +</span><br><span class="line">                <span class="string">"orderName='"</span> + orderName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", orderId="</span> + orderId +</span><br><span class="line">                <span class="string">", orderT="</span> + orderT +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法中不能使用类的泛型。可以把泛型标签当一个变量，static结构不能调用变量</span></span><br><span class="line"><span class="comment">//    public static void show(T orderT)&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(orderT);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        try&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;catch(T t)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系。</span></span><br><span class="line">    <span class="comment">//换句话说，泛型方法所属的类是不是泛型类都没有关系。</span></span><br><span class="line">    <span class="comment">//泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt;  <span class="function">List&lt;E&gt; <span class="title">copyFromArrayToList</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12.父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型：</p><ul><li><p>子类不保留父类的泛型：</p><ul><li><p>没有类型：擦除</p></li><li><p>继承时为父类指定具体类型</p></li></ul></li><li><p>子类保留父类的泛型：泛型子类</p><ul><li>全部保留</li><li>部分保留</li></ul></li></ul><p>结论：子类除了指定或保留父类的泛型，还可以增加自己的泛型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类不保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)没有类型 擦除</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;<span class="comment">// 等价于class Son extends Father&lt;Object,Object&gt;&#123;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)继承时为父类指定具体类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span> <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)全部保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)部分保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son4</span>&lt;<span class="title">T2</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类不保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)没有类型 擦除</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;<span class="comment">//等价于class Son extends Father&lt;Object,Object&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)继承时为父类指定具体类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)全部保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>, <span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)部分保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son4</span>&lt;<span class="title">T2</span>, <span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-自定义泛型方法"><a href="#4-3-自定义泛型方法" class="headerlink" title="4.3 自定义泛型方法"></a>4.3 自定义泛型方法</h2><ul><li>方法，也可以被泛型化，不管此时定义在其中的类是不是 泛型类。 在泛型方法中可以定义泛型参数，此时，参数的类型就是传入数据的 类型 。</li><li>泛型方法的格式：<code>[ 访问权限] &lt; 泛型&gt; 型 返回类型 名 方法名([ 泛型标识 称 参数名称]) 抛出的异常</code></li><li>泛型方法声明泛型时也可以指定上限</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系。</span></span><br><span class="line">    <span class="comment">//换句话说，泛型方法所属的类是不是泛型类都没有关系。</span></span><br><span class="line">    <span class="comment">//泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt;  <span class="function">List&lt;E&gt; <span class="title">copyFromArrayToList</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Order&lt;String&gt; order = <span class="keyword">new</span> Order&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="comment">//泛型方法在调用时，指明泛型参数的类型。</span></span><br><span class="line">        List&lt;Integer&gt; list = order.copyFromArrayToList(arr);</span><br><span class="line">        System.out.println(list);<span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">fromArrayToCollection</span><span class="params">(T[] a, Collection&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (T o : a) &#123;</span><br><span class="line">    c.add(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Object[] ao = <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">    Collection&lt;Object&gt; co = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    fromArrayToCollection(ao, co);</span><br><span class="line">    </span><br><span class="line">    String[] sa = <span class="keyword">new</span> String[<span class="number">20</span>];</span><br><span class="line">    Collection&lt;String&gt; cs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    fromArrayToCollection(sa, cs);</span><br><span class="line">    </span><br><span class="line">    Collection&lt;Double&gt; cd = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 下面代码中T是Double类，但sa是String类型，编译错误。</span></span><br><span class="line">     fromArrayToCollection(sa, cd);</span><br><span class="line">    <span class="comment">// 下面代码中T是Object类型，sa是String类型，可以赋值成功。</span></span><br><span class="line">    fromArrayToCollection(sa, co);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-泛型在继承上的体现"><a href="#5-泛型在继承上的体现" class="headerlink" title="5.泛型在继承上的体现"></a>5.泛型在继承上的体现</h1><ul><li>如果B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，G<B>并不是G<A>的子类型！</li><li>比如：String是Object的子类，但是List<String >并不是List<Object>的子类。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826111613.png" alt="image-20200826111613650"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGenericAndSubClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person[] persons = <span class="keyword">null</span>;</span><br><span class="line">    Man[] mans = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// Person是 Man的父类.</span></span><br><span class="line">    persons = mans;</span><br><span class="line">    Person p = mans[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在泛型的集合上</span></span><br><span class="line">    List&lt;Person&gt; personList = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;Man&gt; manList = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// personList = manList;(报错)</span></span><br><span class="line">    </span><br><span class="line">    List&lt;Object&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="comment">//此时的list1和list2的类型不具有子父类关系</span></span><br><span class="line">    <span class="comment">//编译不通过</span></span><br><span class="line">    <span class="comment">//list1 = list2;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-通配符的使用"><a href="#6-通配符的使用" class="headerlink" title="6. 通配符的使用"></a>6. 通配符的使用</h1><h2 id="6-1-通配符-？"><a href="#6-1-通配符-？" class="headerlink" title="6.1 通配符 ？"></a>6.1 通配符 ？</h2><ul><li><p>使用类型 <code>通配符：？</code><br>比如：List<?> ，Map<?,?><br><code>List&lt;?&gt;是List&lt;String&gt;、List&lt;Object&gt;等各种泛型List的父类。</code></p></li><li><p><code>读取</code>List&lt;?&gt;的对象list中的元素时，永远是安全的，因为不管list的真实类型是什么，它包含的都是Object。</p></li><li><p><code>写入list中的元素时，不行。</code>因为我们不知道c的元素类型，我们不能向其中添加对象。</p><ul><li><p>唯一的例外是null，它是所有类型的成员。</p></li><li><p>将任意元素加入到其中不是类型安全的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;?&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">c.add(<span class="keyword">new</span> Object()); <span class="comment">// 编译时错误</span></span><br></pre></td></tr></table></figure><p>因为我们不知道c的元素类型，我们不能向其中添加对象。add方法有类型参数E作为集合的元素类型。我们传给add的任何参数都必须是一个未知类型的子类。因为我们不知道那是什么类型，所以我们无法传任何东西进去。</p></li><li><p>另一方面，我们可以调用get() 方法并使用其返回值。返回值是一个未知的类型，但是我们知道，它总是一个Object。</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;?&gt; list = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    List&lt;Object&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;String&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    list = list1;<span class="comment">//编译通过</span></span><br><span class="line">    list = list2;<span class="comment">//编译通过</span></span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list3.add(<span class="string">"AA"</span>);</span><br><span class="line">    list3.add(<span class="string">"BB"</span>);</span><br><span class="line">    list3.add(<span class="string">"CC"</span>);</span><br><span class="line">    list = list3;<span class="comment">//编译通过</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加(写入)：对于List&lt;?&gt;就不能向其内部添加数据。</span></span><br><span class="line">    <span class="comment">//除了添加null之外。</span></span><br><span class="line">    <span class="comment">//list.add("DD");//编译错误</span></span><br><span class="line">    <span class="comment">//list.add('?');//编译错误</span></span><br><span class="line">    <span class="comment">//list.add(null);//编译通过</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取(读取)：允许读取数据，读取的数据类型为Object。</span></span><br><span class="line">    Object o = list.get(<span class="number">0</span>);</span><br><span class="line">    System.out.println(o);</span><br><span class="line">    System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">    print(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(List&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">    Iterator&lt;?&gt; iterator = list.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        Object obj = iterator.next();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AA</span><br><span class="line">----------------</span><br><span class="line">AA</span><br><span class="line">BB</span><br><span class="line">CC</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意点1：编译错误：不能用在泛型方法声明上，返回值类型前面&lt;&gt;不能使用?</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;?&gt; <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意点2：编译错误：不能用在泛型类的声明上</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericTypeClass</span>&lt;?&gt;</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意点3：编译错误：不能用在创建对象上，右边属于创建集合对象</span></span><br><span class="line">ArrayList&lt;?&gt; list2 = <span class="keyword">new</span> ArrayList&lt;?&gt;();</span><br></pre></td></tr></table></figure><h2 id="6-2-有限制的通配符"><a href="#6-2-有限制的通配符" class="headerlink" title="6.2 有限制的通配符"></a>6.2 有限制的通配符</h2><ul><li>&lt;?&gt;<br>允许所有泛型的引用调用</li><li>通配符指定上限<br>上限extends：使用时指定的类型必须是继承某个类，或者实现某个接口，即&lt;=</li><li>通配符指定下限<br>下限super：使用时指定的类型不能小于操作的类，即&gt;=</li><li>举例：<ul><li>&lt;? extends Number&gt; ( 无穷小 , Number]<br>只允许泛型为Number及Number子类的引用调用</li><li>&lt;? super Number&gt; [Number , 无穷大)<br>只允许泛型为Number及Number父类的引用调用</li><li>&lt;? extends Comparable&gt;<br>只允许泛型为实现Comparable接口的实现类的引用调用</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用时指定的类型必须是继承某个类，或者实现某个接口，或者自己</span></span><br><span class="line">        List&lt;? extends Person&gt; list1extendsPerson = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//引用时指定的类型必须是它的父类或自己</span></span><br><span class="line">        List&lt;? <span class="keyword">super</span> Person&gt; list2superPerson = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list3Student = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        List&lt;Person&gt; list4Person = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        List&lt;Object&gt; list5Object = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用多态</span></span><br><span class="line">        list1extendsPerson = list3Student;</span><br><span class="line">        list1extendsPerson = list4Person;</span><br><span class="line"><span class="comment">//      list1extendsPerson = list5Object;</span></span><br><span class="line"></span><br><span class="line">        list2superPerson = list4Person;</span><br><span class="line">        list2superPerson = list5Object;</span><br><span class="line"><span class="comment">//      list2superPerson = list3Student;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取数据：</span></span><br><span class="line">        list1extendsPerson = list3Student;</span><br><span class="line">        Person p = list1extendsPerson.get(<span class="number">0</span>);<span class="comment">//返回Person对象</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        Student s = list1extendsPerson.get(0);</span></span><br><span class="line"></span><br><span class="line">        list2superPerson = list4Person;</span><br><span class="line">        Object obj = list2superPerson.get(<span class="number">0</span>);<span class="comment">//返回Person的父类对象</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//      Person obj2 = list2superPerson.get(0);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入数据：</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        list1extendsPerson = list3Student;</span><br><span class="line"><span class="comment">//        list1extendsPerson.add(new Student());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        list2superPerson = list4Person;</span><br><span class="line">        list2superPerson.add(<span class="keyword">new</span> Person());</span><br><span class="line">        list2superPerson.add(<span class="keyword">new</span> Student());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类操作手册</title>
      <link href="/posts/8f28afe1.html"/>
      <url>/posts/8f28afe1.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p><strong>Java中有许多经常拿来编写程序的常用类，这些常用类有一些常用的方法，学习这些常用类可以方便我们更好的处理数据和实现一些功能。</strong></p><p>常用类有以下几种：</p><ul><li>字符串相关类：String、StringBuffer、StringBuilder</li><li>JDK8之前处理日期时间相关类：System、Date、Calendar、SimpleDateFormat</li><li>JDK8中新增的处理日期时间相关类：LocalDate、LocalTime、LocalDateTime、Instant、DateTimeFormatter、其它类</li><li>比较器：Comparable接口、Comparator接口</li><li>System类单独讲解</li><li>Math类</li><li>处理大数值的类：BigInteger与BigDecimal</li></ul><p>我们的行文路线将根据上面所列常用类进行讲解和演示。</p><h1 id="1-字符串相关"><a href="#1-字符串相关" class="headerlink" title="1.字符串相关"></a>1.字符串相关</h1><h2 id="1-1-String的特性"><a href="#1-1-String的特性" class="headerlink" title="1.1 String的特性"></a>1.1 String的特性</h2><ul><li>String类  ： 代表 字符串。Java 程序中的所有字符串字面值（如 “abc” ）都作为此类的实例实现。</li><li>String是一个final类，代表<code>不可变的字符序列</code>。String的内容不可变，但是可改变其引用指向的地址，从而达到间接改变其值的感觉。</li><li>字符串是常量，用双引号引起来表示。它们的值在创建之后不能更改。</li><li>String对象的字符内容是存储在一个字符数组<code>private final char value[]</code>中的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK8部分源码所示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line"><span class="comment">/** The value is used for character storage. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"><span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure><h2 id="1-2-字符串对象是如何存储的？"><a href="#1-2-字符串对象是如何存储的？" class="headerlink" title="1.2 字符串对象是如何存储的？"></a>1.2 字符串对象是如何存储的？</h2><p><strong>这里我们通过几个案例切实的感受字符串对象是如何在内存中存储的。以代码和图文结合来分析。</strong></p><p><strong>案例一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;<span class="comment">// 字面量的定义方式</span></span><br><span class="line">String s2 = <span class="string">"abc"</span>;<span class="comment">//如果字符串常量池已有这个常量则指向它，否则就创建一个新的字符串常量，比如下文的 hello</span></span><br><span class="line">s1 = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817222725.png" alt="image-20200817222725824"></p><p><strong>案例二：</strong></p><p>以下方式创建字符串对象有什么区别？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"abc"</span>; </span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817223223.png" alt="image-20200817223223583"></p><p><strong>案例三：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"javaEE"</span>;</span><br><span class="line">String s2 = <span class="string">"javaEE"</span>;</span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"javaEE"</span>);</span><br><span class="line">String s4 = <span class="keyword">new</span> String(<span class="string">"javaEE"</span>);</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//true</span></span><br><span class="line">System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">System.out.println(s1 == s4);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817223423.png" alt="image-20200817223423566"></p><p><strong>案例四：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>,<span class="number">12</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(p1.name.equals(p2.name));<span class="comment">//true,内容相等</span></span><br><span class="line">    System.out.println(p1.name == p2.name);<span class="comment">//true,地址相等</span></span><br><span class="line"></span><br><span class="line">    p1.name = <span class="string">"Jerry"</span>;</span><br><span class="line">    System.out.println(p2.name);<span class="comment">//Tom</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817223734.png" alt="image-20200817223734206"></p><p><strong>案例五：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817224123.png" alt="image-20200817224123718"></p><p>结论：</p><ul><li>常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。</li><li>只要+连接中有一个是变量，new出来的对象就在堆中</li><li>如果拼接的结果调用intern()方法，返回值就在常量池中</li></ul><p><strong>案例六：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817224240.png" alt="image-20200817224240918"></p><p><strong>案例七：</strong></p><p>下列程序的运行结果是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//包装类和String都是不可变类型</span></span><br><span class="line">    String str = <span class="keyword">new</span> String(<span class="string">"good"</span>);</span><br><span class="line">    Integer i1=<span class="keyword">new</span> Integer(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">char</span>[] ch = &#123; <span class="string">'t'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'t'</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str, <span class="keyword">char</span> ch[])</span> </span>&#123;</span><br><span class="line">        System.out.println(str.hashCode());</span><br><span class="line">        str = <span class="string">"test ok"</span>;</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">'b'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Integer i1, <span class="keyword">char</span> ch[])</span> </span>&#123;</span><br><span class="line">        i1=<span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">'b'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringTest ex = <span class="keyword">new</span> StringTest();</span><br><span class="line">        ex.change(ex.str, ex.ch);</span><br><span class="line">        ex.change(ex.i1,ex.ch);</span><br><span class="line">        System.out.println(ex.i1);<span class="comment">//20</span></span><br><span class="line">        System.out.println(ex.str);<span class="comment">//good</span></span><br><span class="line">        System.out.println(ex.ch);<span class="comment">//best</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-String常用方法示例"><a href="#1-3-String常用方法示例" class="headerlink" title="1.3 String常用方法示例"></a>1.3 String常用方法示例</h2><p>这里直接以代码形式展现，附上详细注释，运行结果在每一个打印的注释后面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethodTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">替换：</span></span><br><span class="line"><span class="comment">String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span></span><br><span class="line"><span class="comment">String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span></span><br><span class="line"><span class="comment">String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span></span><br><span class="line"><span class="comment">String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span></span><br><span class="line"><span class="comment">匹配:</span></span><br><span class="line"><span class="comment">boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</span></span><br><span class="line"><span class="comment">切片：</span></span><br><span class="line"><span class="comment">String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</span></span><br><span class="line"><span class="comment">String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">"acenlsv"</span>;</span><br><span class="line">        String str2 = str1.replace(<span class="string">'n'</span>, <span class="string">'W'</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1);<span class="comment">//acenlsv</span></span><br><span class="line">        System.out.println(str2);<span class="comment">//aceWlsv</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*************************"</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"12hello34world5java7891mysql456"</span>;</span><br><span class="line">        <span class="comment">//把字符串中的数字替换成,，如果结果中开头和结尾有，的话去掉</span></span><br><span class="line">        System.out.println(str.replaceAll(<span class="string">"\\d+"</span>, <span class="string">","</span>));<span class="comment">//,hello,world,java,mysql,</span></span><br><span class="line">        String string = str.replaceAll(<span class="string">"\\d+"</span>, <span class="string">","</span>).replaceAll(<span class="string">"^,|,$"</span>, <span class="string">""</span>);</span><br><span class="line">        System.out.println(string);<span class="comment">//hello,world,java,mysql</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*************************"</span>);</span><br><span class="line"></span><br><span class="line">        str = <span class="string">"12345"</span>;</span><br><span class="line">        <span class="comment">//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span></span><br><span class="line">        <span class="keyword">boolean</span> matches = str.matches(<span class="string">"\\d+"</span>);</span><br><span class="line">        System.out.println(matches);<span class="comment">//true</span></span><br><span class="line">        String tel = <span class="string">"0321-3214289"</span>;</span><br><span class="line">        <span class="comment">//判断这是否是一个杭州的固定电话</span></span><br><span class="line">        <span class="keyword">boolean</span> result = tel.matches(<span class="string">"0321-\\d&#123;7,8&#125;"</span>);</span><br><span class="line">        System.out.println(result);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*************************"</span>);</span><br><span class="line"></span><br><span class="line">        str = <span class="string">"hello|world|java"</span>;</span><br><span class="line">        String[] strs = str.split(<span class="string">"\\|"</span>);</span><br><span class="line">        System.out.println(Arrays.toString(strs));<span class="comment">//[hello,world,java]</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*************************"</span>);</span><br><span class="line"></span><br><span class="line">        str2 = <span class="string">"hello.world.java"</span>;</span><br><span class="line">        String[] strs2 = str2.split(<span class="string">"\\."</span>);</span><br><span class="line">        System.out.println(Arrays.toString(strs2));<span class="comment">//[hello,world,java]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</span></span><br><span class="line"><span class="comment">boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</span></span><br><span class="line"><span class="comment">boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</span></span><br><span class="line"><span class="comment">boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</span></span><br><span class="line"><span class="comment">int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</span></span><br><span class="line"><span class="comment">int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</span></span><br><span class="line"><span class="comment">int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</span></span><br><span class="line"><span class="comment">int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注：indexOf和lastIndexOf方法如果未找到都是返回-1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hellowworld"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b1 = str1.endsWith(<span class="string">"rld"</span>);</span><br><span class="line">        System.out.println(b1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = str1.startsWith(<span class="string">"He"</span>);</span><br><span class="line">        System.out.println(b2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b3 = str1.startsWith(<span class="string">"ll"</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(b3);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        String str2 = <span class="string">"wor"</span>;</span><br><span class="line">        System.out.println(str1.contains(str2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">"lol"</span>));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">"lo"</span>,<span class="number">5</span>));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line">        String str3 = <span class="string">"hellorworld"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(str3.lastIndexOf(<span class="string">"or"</span>));<span class="comment">//7</span></span><br><span class="line">        System.out.println(str3.lastIndexOf(<span class="string">"or"</span>,<span class="number">6</span>));<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//什么情况下，indexOf(str)和lastIndexOf(str)返回值相同？</span></span><br><span class="line">        <span class="comment">//情况一：存在唯一的一个str。情况二：不存在str</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">int length()：返回字符串的长度： return value.length</span></span><br><span class="line"><span class="comment">char charAt(int index)： 返回某索引处的字符return value[index]</span></span><br><span class="line"><span class="comment">boolean isEmpty()：判断是否是空字符串：return value.length == 0</span></span><br><span class="line"><span class="comment">String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写</span></span><br><span class="line"><span class="comment">String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写</span></span><br><span class="line"><span class="comment">String trim()：返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line"><span class="comment">boolean equals(Object obj)：比较字符串的内容是否相同</span></span><br><span class="line"><span class="comment">boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</span></span><br><span class="line"><span class="comment">String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</span></span><br><span class="line"><span class="comment">int compareTo(String anotherString)：比较两个字符串的大小</span></span><br><span class="line"><span class="comment">String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</span></span><br><span class="line"><span class="comment">String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"HelloWorld"</span>;</span><br><span class="line">        System.out.println(s1.length());<span class="comment">//10</span></span><br><span class="line">        System.out.println(s1.charAt(<span class="number">0</span>));<span class="comment">//H</span></span><br><span class="line">        System.out.println(s1.charAt(<span class="number">9</span>));<span class="comment">//d</span></span><br><span class="line">        System.out.println(s1.isEmpty());<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//s1 = "";</span></span><br><span class="line"><span class="comment">//        System.out.println(s1.isEmpty());//true</span></span><br><span class="line"></span><br><span class="line">        String s2 = s1.toLowerCase();</span><br><span class="line">        System.out.println(s1);<span class="comment">//HelloWorld, s1不可变的，仍然为原来的字符串</span></span><br><span class="line">        System.out.println(s2);<span class="comment">//helloworld,改成小写以后的字符串</span></span><br><span class="line"></span><br><span class="line">        String s3 = <span class="string">"   he  llo   world   "</span>;</span><br><span class="line">        String s4 = s3.trim();<span class="comment">//返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line">        System.out.println(<span class="string">"-----"</span> + s3 + <span class="string">"-----"</span>);<span class="comment">//-----   he  llo   world   -----</span></span><br><span class="line">        System.out.println(<span class="string">"-----"</span> + s4 + <span class="string">"-----"</span>);<span class="comment">//-----he  llo   world-----</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"HelloWorld"</span>;</span><br><span class="line">        String s2 = <span class="string">"helloworld"</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));<span class="comment">//false</span></span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        String s3 = <span class="string">"abc"</span>;</span><br><span class="line">        String s4 = s3.concat(<span class="string">"def"</span>);</span><br><span class="line">        System.out.println(s4);<span class="comment">//abcdef</span></span><br><span class="line"></span><br><span class="line">        String s5 = <span class="string">"abc"</span>;</span><br><span class="line">        String s6 = <span class="keyword">new</span> String(<span class="string">"abe"</span>);</span><br><span class="line">        System.out.println(s5.compareTo(s6));<span class="comment">//-2: e-c=101-99 涉及到字符串排序</span></span><br><span class="line"></span><br><span class="line">        String s7 = <span class="string">"abcdefgh"</span>;</span><br><span class="line">        String s8 = s7.substring(<span class="number">2</span>);<span class="comment">//取子串</span></span><br><span class="line">        System.out.println(s7);<span class="comment">//abcdefgh</span></span><br><span class="line">        System.out.println(s8);<span class="comment">//cdefgh</span></span><br><span class="line"></span><br><span class="line">        String s9 = s7.substring(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(s9);<span class="comment">//cde</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-String与八大包装类型的转换"><a href="#1-4-String与八大包装类型的转换" class="headerlink" title="1.4 String与八大包装类型的转换"></a>1.4 String与八大包装类型的转换</h2><p>这里我之前写过一篇文章讲述过这个问题，详情参考：<a href="https://www.bithachi.cn/posts/a852be86.html">八大基本数据类型对应的八大包装类（含对应面试题解析）</a></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817225350.png" alt="image-20200817225350479"></p><h2 id="1-5-String-与字符数组转换"><a href="#1-5-String-与字符数组转换" class="headerlink" title="1.5 String 与字符数组转换"></a>1.5 String 与字符数组转换</h2><p><strong>字符数组 -&gt;字符串:</strong></p><ul><li>String 类的构造器：String(char[]) 和 和 String(char[] ，int offset ，int length) 分别用字符数组中的全部字符和部分字符创建字符串对象。</li></ul><p><strong>字符串 -&gt;字符 数组:</strong></p><ul><li>public char[] toCharArray()： 将字符串中的全部字符存放在一个字符数组中的方法。</li><li>public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)： 提供了将指定索引范围内的字符串存放到数组中的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    String 与 char[]之间的转换</span></span><br><span class="line"><span class="comment">    String --&gt; char[]:调用String的toCharArray()</span></span><br><span class="line"><span class="comment">    char[] --&gt; String:调用String的构造器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">"abc123"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = str1.toCharArray();</span><br><span class="line">        System.out.println(Arrays.toString(charArray));<span class="comment">//[a, b, c, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(arr);</span><br><span class="line">        System.out.println(str2);<span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-String-与字节数组转换"><a href="#1-6-String-与字节数组转换" class="headerlink" title="1.6 String 与字节数组转换"></a>1.6 String 与字节数组转换</h2><p><strong>默认编码一般是Unicode</strong></p><p><strong>字节数组 -&gt;字符串:</strong></p><ul><li><p>String(byte[]) ：通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。</p></li><li><p>String(byte[] ，int offset ，int length) ： 用指定的字节数组的一部分，即从数组起始位置offset开始取length个字节构造一个字符串对象。</p><p><strong>字符串 -&gt;字节数组:</strong></p></li><li><p>public byte[] getBytes() ：使用平台的默认字符集将此 String 编码为byte 序列，并将结果存储到一个新的 byte 数组中。</p></li><li><p>public byte[] getBytes(String charsetName) ： 使用指定的字符集将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   String 与 byte[]之间的转换</span></span><br><span class="line"><span class="comment">   编码：String --&gt; byte[]:调用String的getBytes()</span></span><br><span class="line"><span class="comment">   解码：byte[] --&gt; String:调用String的构造器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   编码：字符串 --&gt;字节  (看得懂 ---&gt;看不懂的二进制数据)</span></span><br><span class="line"><span class="comment">   解码：编码的逆过程，字节 --&gt; 字符串 （看不懂的二进制数据 ---&gt; 看得懂）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">       String str1 = <span class="string">"abc123中国"</span>;</span><br><span class="line">       <span class="keyword">byte</span>[] bytes = str1.getBytes();<span class="comment">//使用默认的字符集，进行编码。</span></span><br><span class="line">       System.out.println(Arrays.toString(bytes));<span class="comment">//[97, 98, 99, 49, 50, 51, -28, -72, -83, -27, -101, -67]</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">byte</span>[] gbks = str1.getBytes(<span class="string">"gbk"</span>);<span class="comment">//使用gbk字符集进行编码。</span></span><br><span class="line">       System.out.println(Arrays.toString(gbks));<span class="comment">//[97, 98, 99, 49, 50, 51, -42, -48, -71, -6]</span></span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"******************"</span>);</span><br><span class="line"></span><br><span class="line">       String str2 = <span class="keyword">new</span> String(bytes);<span class="comment">//使用默认的字符集，进行解码。</span></span><br><span class="line">       System.out.println(str2);<span class="comment">//abc123中国</span></span><br><span class="line"></span><br><span class="line">       String str3 = <span class="keyword">new</span> String(gbks);</span><br><span class="line">       <span class="comment">//出现乱码。原因：编码集和解码集不一致！</span></span><br><span class="line">       System.out.println(str3);<span class="comment">//abc123�й�</span></span><br><span class="line"></span><br><span class="line">       String str4 = <span class="keyword">new</span> String(gbks, <span class="string">"gbk"</span>);</span><br><span class="line">       <span class="comment">//没有出现乱码。原因：编码集和解码集一致！</span></span><br><span class="line">       System.out.println(str4); <span class="comment">//abc123中国</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-StringBuffer与StringBuilder类"><a href="#1-7-StringBuffer与StringBuilder类" class="headerlink" title="1.7 StringBuffer与StringBuilder类"></a>1.7 StringBuffer与StringBuilder类</h2><h3 id="1-7-1-StringBuffer与StringBuilder源码分析"><a href="#1-7-1-StringBuffer与StringBuilder源码分析" class="headerlink" title="1.7.1 StringBuffer与StringBuilder源码分析"></a>1.7.1 StringBuffer与StringBuilder源码分析</h3><p>StringBuilder 和 StringBuffer 非常类似，均代表<code>可变的字符序列</code> ，可以对<code>字符串内容进行增删改，不会产生新的对象</code>， 而且提供相关功能的方法基本也一样，很多方法与String相同。</p><p>他们的源码继承实现关系一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuffer</span> <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span>&#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value is used for character storage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">char</span>[] value; <span class="comment">//没有final声明，可扩容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The count is the number of characters used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> count;<span class="comment">//记录有效字符个数</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];  <span class="comment">//有final声明，不可扩容，只能新创建再指向新的地址内容</span></span><br></pre></td></tr></table></figure><p>StringBuilder和StringBuffer 类不同于String ，其对象必须使用构造器生成。他们都有以下4个构造 器，这里以StringBuffer 为例 ：</p><ul><li>StringBuffer() ：初始为容量为16 的字符串缓冲区</li><li>StringBuffer(int size) ：构造指定容量的字符串缓冲区</li><li>StringBuffer(String str) ：将内容初始化为指定字符串的内容</li><li>StringBuilder(CharSequence seq)：将内容初始化为指定的字符序列的内容</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820105823.png" alt="image-20200820105823847"></p><h3 id="1-7-2-StringBuffer和StringBuilder常用方法"><a href="#1-7-2-StringBuffer和StringBuilder常用方法" class="headerlink" title="1.7.2 StringBuffer和StringBuilder常用方法"></a>1.7.2 StringBuffer和StringBuilder常用方法</h3><ul><li>当append和insert时，如果原来value数组长度不够，可自动扩容。默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。</li><li>如上这些方法支持方法链操作，可以点好几次。</li><li>方法链的原理：</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820110914.png" alt="image-20200820110914360"></p><p><strong>StringBuffer和StringBuilder类的常用方法继承自AbstractStringBuilder，这里列举几个常用的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   StringBuffer的常用方法：</span></span><br><span class="line"><span class="comment">   StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接</span></span><br><span class="line"><span class="comment">   StringBuffer delete(int start,int end)：删除指定位置的内容</span></span><br><span class="line"><span class="comment">   StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</span></span><br><span class="line"><span class="comment">   StringBuffer insert(int offset, xxx)：在指定位置插入xxx</span></span><br><span class="line"><span class="comment">   StringBuffer reverse() ：把当前字符序列逆转</span></span><br><span class="line"><span class="comment">   public int indexOf(String str)</span></span><br><span class="line"><span class="comment">   public String substring(int start,int end):返回一个从start开始到end索引结束的左闭右开区间的子字符串</span></span><br><span class="line"><span class="comment">   public int length()</span></span><br><span class="line"><span class="comment">   public char charAt(int n )</span></span><br><span class="line"><span class="comment">   public void setCharAt(int n ,char ch)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       总结：</span></span><br><span class="line"><span class="comment">       增：append(xxx)</span></span><br><span class="line"><span class="comment">       删：delete(int start,int end)</span></span><br><span class="line"><span class="comment">       改：setCharAt(int n ,char ch) / replace(int start, int end, String str)</span></span><br><span class="line"><span class="comment">       查：charAt(int n )</span></span><br><span class="line"><span class="comment">       插：insert(int offset, xxx)</span></span><br><span class="line"><span class="comment">       长度：length();</span></span><br><span class="line"><span class="comment">       *遍历：for() + charAt() / toString()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       StringBuffer s1 = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line">       s1.append(<span class="number">1</span>);<span class="comment">//增</span></span><br><span class="line">       s1.append(<span class="string">'2'</span>);</span><br><span class="line">       System.out.println(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        s1.delete(2,4);//删</span></span><br><span class="line"></span><br><span class="line">       s1.replace(<span class="number">2</span>,<span class="number">4</span>,<span class="string">"hello"</span>);<span class="comment">//改</span></span><br><span class="line">       System.out.println(s1);</span><br><span class="line"></span><br><span class="line">       s1.insert(<span class="number">2</span>,<span class="keyword">false</span>);<span class="comment">//插</span></span><br><span class="line">       System.out.println(s1);</span><br><span class="line"></span><br><span class="line">       s1.reverse();<span class="comment">//反转</span></span><br><span class="line">       System.out.println(s1);</span><br><span class="line"></span><br><span class="line">       String s2 = s1.substring(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">//取子串</span></span><br><span class="line">       System.out.println(s1.length());</span><br><span class="line">       System.out.println(s2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">abc12</span><br><span class="line">abhello2</span><br><span class="line">abfalsehello2</span><br><span class="line"><span class="number">2</span>olleheslafba</span><br><span class="line"><span class="number">13</span></span><br><span class="line">ol</span><br></pre></td></tr></table></figure><h3 id="1-7-3-举个例子"><a href="#1-7-3-举个例子" class="headerlink" title="1.7.3 举个例子"></a>1.7.3 举个例子</h3><p><strong>以下代码输出什么？我已经在注释后面打上了结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       StringBuffer sb12 = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line">       sb12.setCharAt(<span class="number">0</span>,<span class="string">'m'</span>);</span><br><span class="line">       System.out.println(sb12);<span class="comment">//mbc</span></span><br><span class="line"></span><br><span class="line">       StringBuffer sb2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">       System.out.println(sb2.length());<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">       String str = <span class="keyword">null</span>;</span><br><span class="line">       StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">       sb.append(str);</span><br><span class="line">       System.out.println(sb.length());<span class="comment">//4</span></span><br><span class="line">       System.out.println(sb);<span class="comment">//null</span></span><br><span class="line">       StringBuffer sb1 = <span class="keyword">new</span> StringBuffer(str);<span class="comment">//java.lang.NullPointerException</span></span><br><span class="line">       System.out.println(<span class="string">"123"</span>);</span><br><span class="line">       System.out.println(sb1);<span class="comment">//</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="1-8-对比-String-、StringBuffer-、StringBuilder"><a href="#1-8-对比-String-、StringBuffer-、StringBuilder" class="headerlink" title="1.8 对比 String 、StringBuffer 、StringBuilder"></a>1.8 对比 String 、StringBuffer 、StringBuilder</h2><ul><li><p>String(JDK1.0)：不可变字符序列</p></li><li><p>StringBuffer(JDK1.0)：可变字符序列、效率低、线程安全(很多方法由synchronized修饰)</p></li><li><p>StringBuilder(JDK 5.0)：可变字符序列、效率高、线程不安全</p></li></ul><p>注意：作为参数传递的话，方法内部String不会改变其值，StringBuffer和StringBuilder会改变其值。</p><p><strong>效率比较：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始设置</span></span><br><span class="line">        <span class="keyword">long</span> startTime = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">long</span> endTime = <span class="number">0L</span>;</span><br><span class="line">        String text = <span class="string">""</span>;</span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//开始对比</span></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100_0000</span>; i++) &#123;</span><br><span class="line">            buffer.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"StringBuffer的执行时间："</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100_0000</span>; i++) &#123;</span><br><span class="line">            builder.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"StringBuilder的执行时间："</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2_0000</span>; i++) &#123;</span><br><span class="line">            text = text + i;</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"String的执行时间："</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//百万级以内</span></span><br><span class="line">StringBuffer的执行时间：<span class="number">67</span></span><br><span class="line">StringBuilder的执行时间：<span class="number">54</span></span><br><span class="line">String的执行时间：<span class="number">1058</span></span><br><span class="line"><span class="comment">//千万级</span></span><br><span class="line">StringBuffer的执行时间：<span class="number">581</span></span><br><span class="line">StringBuilder的执行时间：<span class="number">603</span></span><br><span class="line">String的执行时间：<span class="number">926</span></span><br></pre></td></tr></table></figure><p>StringBuilder和StringBuffer的效率有时候不相上下，但是一定比String快。</p><p>千万级StringBuffer快一点，百万级以下StringBuilder快一点，视具体操作系统和硬件而定叭。</p><h1 id="2-日期时间相关类"><a href="#2-日期时间相关类" class="headerlink" title="2. 日期时间相关类"></a>2. 日期时间相关类</h1><p><strong>计算世界时间的主要标准有：</strong></p><ul><li>UTC(Coordinated Universal Time)</li><li>GMT(Greenwich Mean Time)</li><li>CST(Central Standard Time)</li></ul><h2 id="2-1-JDK8之前处理日期时间相关类"><a href="#2-1-JDK8之前处理日期时间相关类" class="headerlink" title="2.1 JDK8之前处理日期时间相关类"></a>2.1 JDK8之前处理日期时间相关类</h2><h3 id="2-1-1-java-lang-System类"><a href="#2-1-1-java-lang-System类" class="headerlink" title="2.1.1 java.lang.System类"></a>2.1.1 java.lang.System类</h3><p>System类提供的public static long currentTimeMillis()用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。<br><strong>此方法适于计算时间差。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</span></span><br><span class="line">        <span class="comment">//称为时间戳</span></span><br><span class="line">        System.out.println(time);<span class="comment">//1597895477010</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-java-util-Date类"><a href="#2-1-2-java-util-Date类" class="headerlink" title="2.1.2 java.util.Date类"></a>2.1.2 java.util.Date类</h3><p>表示特定的瞬间，精确到毫秒</p><p><strong>构造器 ：</strong></p><ul><li><p>Date()： 使用无参构造器创建的对象可以获取本地当前时间。</p></li><li><p>Date(long date)：创建指定毫秒数的Date对象</p><p><strong>常用方法：</strong></p></li><li><p>getTime():返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</p></li><li><p>toString():把此 Date 对象转换为以下形式的 String： dow mon dd  hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)，zzz是时间标准。</p></li><li><p>其它很多方法都过时了。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">//说明一点：public class java.sql.Date extends java.util.Date &#123;...&#125;</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date1.toString());<span class="comment">//Thu Aug 20 11:37:14 CST 2020</span></span><br><span class="line"></span><br><span class="line">        System.out.println(date1.getTime());<span class="comment">//1597894634029</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">1597894634029L</span>);</span><br><span class="line">        System.out.println(date2.toString());<span class="comment">//Thu Aug 20 11:37:14 CST 2020</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建java.sql.Date对象</span></span><br><span class="line">        java.sql.Date date3 = <span class="keyword">new</span> java.sql.Date(<span class="number">1597894634029L</span>);</span><br><span class="line">        System.out.println(date3);<span class="comment">//2020-08-20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line">        <span class="comment">//情况一：</span></span><br><span class="line">        Date date4 = <span class="keyword">new</span> java.sql.Date(<span class="number">1597894634029L</span>);</span><br><span class="line">        java.sql.Date date5 = (java.sql.Date) date4;</span><br><span class="line">        System.out.println(date5);<span class="comment">//2020-08-20</span></span><br><span class="line">        <span class="comment">//情况二：</span></span><br><span class="line">        Date date6 = <span class="keyword">new</span> Date();</span><br><span class="line">        java.sql.Date date7 = <span class="keyword">new</span> java.sql.Date(date6.getTime());</span><br><span class="line">        System.out.println(date6);<span class="comment">//Thu Aug 20 11:53:29 CST 2020</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-java-text-SimpleDateFormat类"><a href="#2-1-3-java-text-SimpleDateFormat类" class="headerlink" title="2.1.3 java.text.SimpleDateFormat类"></a>2.1.3 java.text.SimpleDateFormat类</h3><ul><li>Date类的API不易于国际化，大部分被废弃了，java.text.SimpleDateFormat类是一个不与语言环境有关的方式来格式化和解析日期的具体类。</li><li>它允许进行格式化：<code>日期 -&gt;文本、 解析：文本 -&gt; 日期</code></li><li>格式化：<br>  SimpleDateFormat() ：默认的模式和语言环境创建对象<br>  public SimpleDateFormat(String pattern) ：该构造方法可以用参数pattern指定的格式创建一个对象，该对象调用：public String format(Date date) ：方法格式化时间对象date</li><li>解析：<br>  public Date parse(String source)：  从给定字符串的开始解析文本，以生成一个日期。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleDateFormat</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//实例化SimpleDateFormat:使用默认的构造器</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式化：日期 ---&gt;字符串</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);<span class="comment">//Thu Aug 20 11:57:11 CST 2020</span></span><br><span class="line"></span><br><span class="line">        String format = sdf.format(date);</span><br><span class="line">        System.out.println(format);<span class="comment">//20-8-20 上午11:57</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析：格式化的逆过程，字符串 ---&gt; 日期</span></span><br><span class="line">        String str = <span class="string">"20-8-20 上午11:57"</span>;</span><br><span class="line">        Date date1 = sdf.parse(str);</span><br><span class="line">        System.out.println(date1);<span class="comment">//Thu Aug 20 11:57:00 CST 2020</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  按照指定的方式格式化和解析：调用带参的构造器   *************/</span></span><br><span class="line"><span class="comment">//        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyyy.MMMMM.dd GGG hh:mm aaa");</span></span><br><span class="line">        SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String format1 = sdf1.format(date);</span><br><span class="line">        System.out.println(format1);<span class="comment">//2020-08-20 12:02:39</span></span><br><span class="line">        <span class="comment">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),</span></span><br><span class="line">        <span class="comment">//否则，抛异常</span></span><br><span class="line">        Date date2 = sdf1.parse(<span class="string">"2020-08-20 12:02:39"</span>);</span><br><span class="line">        System.out.println(date2);<span class="comment">//Thu Aug 20 00:02:39 CST 2020</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820124457.png" alt="image-20200820124457055"></p><h3 id="2-1-4-java-util-Calendar-日历-类"><a href="#2-1-4-java-util-Calendar-日历-类" class="headerlink" title="2.1.4 java.util.Calendar( 日历)类"></a>2.1.4 java.util.Calendar( 日历)类</h3><p> Calendar是一个抽象基类，主用用于完成<code>日期字段之间相互操作</code>的功能。</p><ul><li>获取Calendar实例的方法<br>  使用<code>Calendar.getInstance()</code>方法<br> 调用它的<code>子类GregorianCalendar的构造器</code>。 </li><li>一个Calendar的实例是系统时间的抽象表示，通过<code>get(int field)</code>方法来取得想要的时间信息。比如YEAR、MONTH、DAY_OF_WEEK、HOUR_OF_DAY 、MINUTE、SECOND<br> public void set(int field,int value)<br> public void add(int field,int amount)<br> public final Date getTime()<br> public final void setTime(Date date)</li><li>注意:<br> 获取月份时：一月是0，二月是1，以此类推，12月是11<br> 获取星期时：周日是1，周二是2 ， 。。。。周六是7</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCalendar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.实例化</span></span><br><span class="line">    <span class="comment">//方式一：创建其子类（GregorianCalendar）的对象</span></span><br><span class="line">    <span class="comment">//方式二：调用其静态方法getInstance()</span></span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    System.out.println(calendar.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.常用方法</span></span><br><span class="line">    <span class="comment">//get()  测试时间：2020.8.20 星期四</span></span><br><span class="line">    <span class="keyword">int</span> days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    System.out.println(calendar.get(Calendar.YEAR));<span class="comment">//2020</span></span><br><span class="line">    System.out.println(calendar.get(Calendar.MONTH));<span class="comment">//7</span></span><br><span class="line">    System.out.println(calendar.get(Calendar.DAY_OF_YEAR));<span class="comment">//233</span></span><br><span class="line">    System.out.println(calendar.get(Calendar.DAY_OF_MONTH));<span class="comment">//20</span></span><br><span class="line">    System.out.println(calendar.get(Calendar.DAY_OF_WEEK));<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">    <span class="comment">//set()</span></span><br><span class="line">    <span class="comment">//calendar可变性</span></span><br><span class="line">    calendar.set(Calendar.DAY_OF_MONTH,<span class="number">22</span>);<span class="comment">//当前日期设置为22号</span></span><br><span class="line">    days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    System.out.println(days);<span class="comment">//22</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//add()</span></span><br><span class="line">    calendar.add(Calendar.DAY_OF_MONTH,-<span class="number">3</span>);<span class="comment">//当前日期减3天</span></span><br><span class="line">    days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    System.out.println(days);<span class="comment">//19</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getTime():日历类---&gt; Date</span></span><br><span class="line">    Date date = calendar.getTime();</span><br><span class="line">    System.out.println(date);<span class="comment">//Wed Aug 19 16:42:41 CST 2020</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//setTime():Date ---&gt; 日历类</span></span><br><span class="line">    Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">    calendar.setTime(date1);</span><br><span class="line">    days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    System.out.println(days);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-JDK8中新处理日期时间相关类"><a href="#2-2-JDK8中新处理日期时间相关类" class="headerlink" title="2.2 JDK8中新处理日期时间相关类"></a>2.2 JDK8中新处理日期时间相关类</h2><h3 id="2-2-1-新日期间时间API-出现的背景"><a href="#2-2-1-新日期间时间API-出现的背景" class="headerlink" title="2.2.1 新日期间时间API 出现的背景"></a>2.2.1 新日期间时间API 出现的背景</h3><p>如果我们可以跟别人说：“我们在1502643933071见面，别晚了！”那么就再简单不过了。但是我们希望时间与昼夜和四季有关，于是事情就变复杂了。JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：<br><code>可变性</code>：像日期和时间这样的类应该是不可变的。<br><code>偏移性</code>：Date中的年份是从1900开始的，而月份都从0开始。<br><code>格式化</code>：格式化只对Date有用，Calendar则不行。此外，它们也不是线程安全的；不能处理闰秒等。</p><p>总结：对日期和时间的操作一直是Java程序员最痛苦的地方之一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//偏移量，Date中的年份是从1900开始的，而月份都从0开始</span></span><br><span class="line">      Date date1 = <span class="keyword">new</span> Date(<span class="number">2020</span> - <span class="number">1900</span>,<span class="number">9</span> - <span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">      Date date2 = <span class="keyword">new</span> Date(<span class="number">2020</span>,<span class="number">9</span> ,<span class="number">8</span>);</span><br><span class="line">      System.out.println(date1);<span class="comment">//Tue Sep 08 00:00:00 CST 2020</span></span><br><span class="line">      System.out.println(date2);<span class="comment">//Fri Oct 08 00:00:00 CST 3920</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-新时间日期API"><a href="#2-2-2-新时间日期API" class="headerlink" title="2.2.2 新时间日期API"></a>2.2.2 新时间日期API</h3><blockquote><p>新时间日期API添加了如下包：</p><p>java.time – 包含值对象的基础包<br>java.time.chrono – 提供对不同的日历系统的访问<br>java.time.format – 格式化和解析时间和日期<br>java.time.temporal – 包括底层框架和扩展特性<br>java.time.zone – 包含时区支持的类</p></blockquote><ul><li>第三次引入的API是成功的，并且Java 8中引入的java.time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。</li><li>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。</li><li>新的<code>java.time</code>中包含了：<ul><li>所有关于本地日期（LocalDate）类</li><li>本地时间（LocalTime）类</li><li>本地日期时间（LocalDateTime）类</li><li>时区（ZonedDateTime）类</li><li>持续时间（Duration）类。</li></ul></li><li>历史悠久的 Date 类新增了 toInstant() 方法，用于把 Date 转换成新的表示形式。</li><li>这些新增的本地化时间日期 API 大大简化了日期时间和本地化的管理。</li></ul><h3 id="2-2-3-LocalDate-、LocalTime-、LocalDateTime"><a href="#2-2-3-LocalDate-、LocalTime-、LocalDateTime" class="headerlink" title="2.2.3  LocalDate 、LocalTime 、LocalDateTime"></a>2.2.3  LocalDate 、LocalTime 、LocalDateTime</h3><ul><li>LocalDate、LocalTime、LocalDateTime 类是其中较重要的几个类，它们的实例是<code>不可变的对象</code>，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。</li><li>LocalDate代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期。</li><li>LocalTime表示一个时间，而不是日期。</li><li>LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。</li></ul><p>注：ISO-8601日历系统是国际标准化组织制定的现代公民的日期和时间的表示法，也就是公历。</p><p>LocalTime一些常用方法：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820170520.png" alt="image-20200820170519978"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//now():获取当前的日期、时间、日期+时间</span></span><br><span class="line">        LocalDate localDate = LocalDate.now();</span><br><span class="line">        LocalTime localTime = LocalTime.now();</span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">        System.out.println(localDate);<span class="comment">//2020-08-20</span></span><br><span class="line">        System.out.println(localTime);<span class="comment">//17:19:15.882</span></span><br><span class="line">        System.out.println(localDateTime);<span class="comment">//2020-08-20T17:19:15.882</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span></span><br><span class="line">        LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">43</span>);</span><br><span class="line">        LocalDate localDate2=LocalDate.of(<span class="number">2020</span>,<span class="number">8</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(localDateTime1);<span class="comment">//2020-10-06T13:23:43</span></span><br><span class="line">        System.out.println(localDate2);<span class="comment">//2020-08-20</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getXxx()：获取相关的属性  2020-08-20T17:19:15.882</span></span><br><span class="line">        System.out.println(localDateTime.getYear());<span class="comment">//2020</span></span><br><span class="line">        System.out.println(localDateTime.getMonth());<span class="comment">//AUGUST</span></span><br><span class="line">        System.out.println(localDateTime.getDayOfYear());<span class="comment">//233</span></span><br><span class="line">        System.out.println(localDateTime.getDayOfMonth());<span class="comment">//20</span></span><br><span class="line">        System.out.println(localDateTime.getDayOfWeek());<span class="comment">//THURSDAY</span></span><br><span class="line">        System.out.println(localDateTime.getMonthValue());<span class="comment">//8</span></span><br><span class="line">        System.out.println(localDateTime.getHour());<span class="comment">//17</span></span><br><span class="line">        System.out.println(localDateTime.getMinute());<span class="comment">//19</span></span><br><span class="line">        System.out.println(localDateTime.getSecond());<span class="comment">//15</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//体现不可变性</span></span><br><span class="line">        <span class="comment">//withXxx():设置相关的属性</span></span><br><span class="line">        LocalDate localDate1 = localDate.withDayOfMonth(<span class="number">22</span>);</span><br><span class="line">        System.out.println(localDate);<span class="comment">//2020-08-20</span></span><br><span class="line">        System.out.println(localDate1);<span class="comment">//2020-08-20</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        LocalDateTime localDateTime2 = localDateTime.withHour(<span class="number">4</span>);</span><br><span class="line">        System.out.println(localDateTime);<span class="comment">//2020-08-20T17:19:15.882</span></span><br><span class="line">        System.out.println(localDateTime2);<span class="comment">//2020-08-20T04:19:15.882</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不可变性</span></span><br><span class="line">        <span class="comment">//plusxxx：向当前对象添加几天、几周、几个月、几年、几小时</span></span><br><span class="line">        LocalDateTime localDateTime3 = localDateTime.plusMonths(<span class="number">3</span>);</span><br><span class="line">        System.out.println(localDateTime);<span class="comment">//2020-08-20T17:19:15.882</span></span><br><span class="line">        System.out.println(localDateTime3);<span class="comment">//2020-11-20T17:19:15.882</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不可变性</span></span><br><span class="line">        <span class="comment">//minusXXX：从当前对象减去几月、几周、几天、几年、几小时</span></span><br><span class="line">        LocalDateTime localDateTime4 = localDateTime.minusDays(<span class="number">6</span>);</span><br><span class="line">        System.out.println(localDateTime);<span class="comment">//2020-08-20T17:19:15.882</span></span><br><span class="line">        System.out.println(localDateTime4);<span class="comment">//2020-08-14T17:19:15.882</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-瞬时：Instant"><a href="#2-2-4-瞬时：Instant" class="headerlink" title="2.2.4 瞬时：Instant"></a>2.2.4 瞬时：Instant</h3><ul><li>Instant：<code>时间线上的一个瞬时点</code>。 这可能被用来记录应用程序中的事件时间戳。</li><li>在处理时间和日期的时候，我们通常会想到年,月,日,时,分,秒。然而，这只是时间的一个模型，是面向人类的。第二种通用模型是面向机器的，或者说是连续的。在此模型中，时间线中的一个点表示为一个很大的数，这有利于计算机处理。在UNIX中，这个数从1970年开始，以秒为的单位；同样的，在Java中，也是从1970年开始，但以毫秒为单位。</li><li>java.time包通过值类型Instant提供机器视图，不提供处理人类意义上的时间单位。Instant表示时间线上的一点，而不需要任何上下文信息，例如，时区。概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒数。因为java.time包是基于纳秒计算的，所以Instant的精度可以达到纳秒级。</li><li>(1 ns = 10 ^-9^ s) ，1秒 = 1000毫秒 =10^6^微秒=10^9^纳秒</li><li><code>时间戳是指格林威治时间1970 年01 月01 日00 时00 分00 秒( 北京时间1970 年01 月01日 日08 时00 分00 秒) 起至现在的总秒数</code></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820181616.png" alt="image-20200820181615961"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820181546.png" alt="image-20200820181546657"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//now():获取本初子午线对应的标准时间</span></span><br><span class="line">    Instant instant = Instant.now();</span><br><span class="line">    System.out.println(instant);<span class="comment">//2020-08-20T10:35:04.996Z</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加时间的偏移量</span></span><br><span class="line">    OffsetDateTime offsetDateTime = instant.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">    System.out.println(offsetDateTime);<span class="comment">//2020-08-20T18:35:04.996+08:00</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---&gt; Date类的getTime()</span></span><br><span class="line">    <span class="keyword">long</span> milli = instant.toEpochMilli();</span><br><span class="line">    System.out.println(milli);<span class="comment">//1597919704996L</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ofEpochMilli():通过给定的毫秒数，获取Instant实例  --&gt;Date(long millis)</span></span><br><span class="line">    Instant instant1 = Instant.ofEpochMilli(<span class="number">1597919704996L</span>);</span><br><span class="line">    System.out.println(instant1);<span class="comment">//2020-08-20T10:35:04.996Z</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-5-java-time-format-DateTimeFormatter-类—格式化与解析日期-或-时间"><a href="#2-2-5-java-time-format-DateTimeFormatter-类—格式化与解析日期-或-时间" class="headerlink" title="2.2.5  java.time.format.DateTimeFormatter 类—格式化与解析日期 或 时间"></a>2.2.5  java.time.format.DateTimeFormatter 类—格式化与解析日期 或 时间</h3><ul><li>java.time.format.DateTimeFormatter 类：该类提供了三种格式化方法：<ol><li>预定义的标准格式。如：ISO_LOCAL_DATE_TIME; ISO_LOCAL_DATE; ISO_LOCAL_TIME</li><li>本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)</li><li>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</li></ol></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820183814.png" alt="image-20200820183814620"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/************   方式一：预定义的标准格式。  ************/</span></span><br><span class="line"><span class="comment">//        如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span></span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class="line">        <span class="comment">//格式化:日期--&gt;字符串</span></span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">        String str1 = formatter.format(localDateTime);</span><br><span class="line"></span><br><span class="line">        System.out.println(localDateTime);<span class="comment">//2020-08-20T18:50:25.850</span></span><br><span class="line">        System.out.println(str1);<span class="comment">//2020-08-20T18:50:25.85</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析：字符串 --&gt;日期</span></span><br><span class="line">        TemporalAccessor parse = formatter.parse(<span class="string">"2020-08-20T18:39:23.152"</span>);</span><br><span class="line">        System.out.println(parse);<span class="comment">//&#123;&#125;,ISO resolved to 2020-08-20T18:39:23.152</span></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/************  方式二： 本地化相关的格式。如：ofLocalizedDateTime()  ************/</span></span><br><span class="line"><span class="comment">//        FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span></span><br><span class="line">        DateTimeFormatter formatter1 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);</span><br><span class="line">        DateTimeFormatter formatter11 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);</span><br><span class="line">        DateTimeFormatter formatter111 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str11 = formatter1.format(localDateTime);</span><br><span class="line">        String str111 = formatter11.format(localDateTime);</span><br><span class="line">        String str1111 = formatter111.format(localDateTime);</span><br><span class="line">        System.out.println(str11);<span class="comment">//2020年8月20日 下午06时50分25秒</span></span><br><span class="line">        System.out.println(str111);<span class="comment">//2020-8-20 18:50:25</span></span><br><span class="line">        System.out.println(str1111);<span class="comment">//20-8-20 下午6:50</span></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      本地化相关的格式。如：ofLocalizedDate()</span></span><br><span class="line"><span class="comment">//      FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span></span><br><span class="line">        DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);</span><br><span class="line">        DateTimeFormatter formatter22 = DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG);</span><br><span class="line">        DateTimeFormatter formatter222 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);</span><br><span class="line">        DateTimeFormatter formatter2222 = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str3 = formatter2.format(LocalDate.now());</span><br><span class="line">        String str33 = formatter22.format(LocalDate.now());</span><br><span class="line">        String str333 = formatter222.format(LocalDate.now());</span><br><span class="line">        String str3333 = formatter2222.format(LocalDate.now());</span><br><span class="line">        System.out.println(str3);<span class="comment">//2020年8月20日 星期四</span></span><br><span class="line">        System.out.println(str33);<span class="comment">//2020年8月20日</span></span><br><span class="line">        System.out.println(str333);<span class="comment">//2020-8-20</span></span><br><span class="line">        System.out.println(str3333);<span class="comment">//20-8-20</span></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  方式三：自定义的格式。如：ofPattern("yyyy-MM-dd hh:mm:ss")  ************/</span></span><br><span class="line">        DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str4 = formatter3.format(LocalDateTime.now());</span><br><span class="line">        System.out.println(str4);<span class="comment">//2020-08-20 06:50:25</span></span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        TemporalAccessor accessor = formatter3.parse(<span class="string">"2020-08-20 06:49:07"</span>);</span><br><span class="line">        System.out.println(accessor);<span class="comment">//&#123;MicroOfSecond=0, MilliOfSecond=0, NanoOfSecond=0, SecondOfMinute=7, MinuteOfHour=49, HourOfAmPm=6&#125;,ISO resolved to 2020-08-20</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-6-其它API"><a href="#2-2-6-其它API" class="headerlink" title="2.2.6 其它API"></a>2.2.6 其它API</h3><ul><li><p>ZoneId ：该类中包含了所有的时区信息，一个时区的ID，如 Europe/Paris</p></li><li><p>ZonedDateTime ：一个在ISO-8601日历系统时区的日期时间，如 2007-12-03T10:15:30+01:00 Europe/Paris。</p><p>其中每个时区都对应着ID，地区ID都为“{区域}/{城市}”的格式，例如：Asia/Shanghai等</p></li><li><p>Clock： ：使用时区提供对当前即时、日期和时间的访问的时钟。</p></li><li><p>持续时间：Duration，用于计算两个“时间”间隔</p></li><li><p>日期间隔：Period，用于计算两个“日期”间隔</p></li><li><p>TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下一个工作日”等操作。</p></li><li><p>TemporalAdjusters : 该类通过静态方法(firstDayOfXxx()/lastDayOfXxx()/nextXxx())提供了大量的常用TemporalAdjuster 的实现。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/************  ZoneId:类中包含了所有的时区信息  ************/</span></span><br><span class="line">    <span class="comment">// ZoneId的getAvailableZoneIds():获取所有的ZoneId</span></span><br><span class="line">    Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">    System.out.println(zoneIds.size());</span><br><span class="line">    <span class="keyword">for</span> (String s : zoneIds) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"----------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ZoneId的of():获取指定时区的时间</span></span><br><span class="line">    LocalDateTime localDateTime = LocalDateTime.now(ZoneId.of(<span class="string">"Asia/Tokyo"</span>));</span><br><span class="line">    System.out.println(localDateTime);<span class="comment">//2020-08-20T20:05:04.625</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/************ ZonedDateTime:带时区的日期时间   ************/</span></span><br><span class="line">    <span class="comment">// ZonedDateTime的now():获取本时区的ZonedDateTime对象</span></span><br><span class="line">    ZonedDateTime zonedDateTime = ZonedDateTime.now();</span><br><span class="line">    System.out.println(zonedDateTime);<span class="comment">//2020-08-20T19:05:04.631+08:00[Asia/Shanghai]</span></span><br><span class="line">    <span class="comment">// ZonedDateTime的now(ZoneId id):获取指定时区的ZonedDateTime对象</span></span><br><span class="line">    ZonedDateTime zonedDateTime1 = ZonedDateTime.now(ZoneId.of(<span class="string">"Asia/Tokyo"</span>));</span><br><span class="line">    System.out.println(zonedDateTime1);<span class="comment">//2020-08-20T20:05:04.631+09:00[Asia/Tokyo]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/************  Duration:用于计算两个“时间”间隔，以秒和纳秒为基准  ************/</span></span><br><span class="line">    LocalTime localTime = LocalTime.now();</span><br><span class="line">    LocalTime localTime1 = LocalTime.of(<span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">    <span class="comment">//between():静态方法，返回Duration对象，表示两个时间的间隔</span></span><br><span class="line">    Duration duration = Duration.between(localTime1, localTime);</span><br><span class="line">    System.out.println(duration);<span class="comment">//PT3H41M32.631S</span></span><br><span class="line">    System.out.println(duration.getSeconds());<span class="comment">//13292</span></span><br><span class="line">    System.out.println(duration.getNano());<span class="comment">//631000000</span></span><br><span class="line">    LocalDateTime localDateTime2 = LocalDateTime.of(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">    LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">    Duration duration1 = Duration.between(localDateTime1, localDateTime2);</span><br><span class="line">    System.out.println(duration1.toDays());<span class="comment">//-365</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/************  Period:用于计算两个“日期”间隔，以年、月、日衡量  ************/</span></span><br><span class="line">    LocalDate localDate = LocalDate.now();</span><br><span class="line">    LocalDate localDate1 = LocalDate.of(<span class="number">2028</span>, <span class="number">3</span>, <span class="number">18</span>);</span><br><span class="line">    Period period = Period.between(localDate, localDate1);</span><br><span class="line">    System.out.println(period);<span class="comment">//P7Y6M27D</span></span><br><span class="line">    System.out.println(period.getYears());<span class="comment">//7</span></span><br><span class="line">    System.out.println(period.getMonths());<span class="comment">//6</span></span><br><span class="line">    System.out.println(period.getDays());<span class="comment">//27</span></span><br><span class="line">    Period period1 = period.withYears(<span class="number">2</span>);</span><br><span class="line">    System.out.println(period1);<span class="comment">//P2Y6M27D</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/************  TemporalAdjuster:时间校正器  ************/</span></span><br><span class="line">    <span class="comment">// 获取当前日期的下一个周日是哪天？</span></span><br><span class="line">    TemporalAdjuster temporalAdjuster = TemporalAdjusters.next(DayOfWeek.SUNDAY);</span><br><span class="line">    LocalDateTime localDateTime = LocalDateTime.now().with(temporalAdjuster);</span><br><span class="line">    System.out.println(localDateTime);<span class="comment">//2020-08-23T19:09:26.712</span></span><br><span class="line">    <span class="comment">// 获取下一个工作日是哪天？</span></span><br><span class="line">    LocalDate localDate = LocalDate.now().with(<span class="keyword">new</span> TemporalAdjuster() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Temporal <span class="title">adjustInto</span><span class="params">(Temporal temporal)</span> </span>&#123;</span><br><span class="line">            LocalDate date = (LocalDate) temporal;</span><br><span class="line">            <span class="keyword">if</span> (date.getDayOfWeek().equals(DayOfWeek.FRIDAY)) &#123;</span><br><span class="line">                <span class="keyword">return</span> date.plusDays(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (date.getDayOfWeek().equals(DayOfWeek.SATURDAY)) &#123;</span><br><span class="line">                <span class="keyword">return</span> date.plusDays(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> date.plusDays(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">"下一个工作日是："</span> + localDate);<span class="comment">//下一个工作日是：2020-08-21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-7-新日期与传统日期处理的转换"><a href="#2-2-7-新日期与传统日期处理的转换" class="headerlink" title="2.2.7 新日期与传统日期处理的转换"></a>2.2.7 新日期与传统日期处理的转换</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820191037.png" alt="image-20200820191037056"></p><h1 id="3-比较器"><a href="#3-比较器" class="headerlink" title="3. 比较器"></a>3. 比较器</h1><ul><li>在Java中经常会涉及到对象数组的排序问题，那么就涉及到对象之间的比较问题。</li><li>Java实现对象排序的方式有两种：<ol><li><code>自然排序：java.lang.Comparable</code></li><li><code>定制排序：java.util.Comparator</code></li></ol></li></ul><h2 id="3-1-自然排序：java-lang-Comparable"><a href="#3-1-自然排序：java-lang-Comparable" class="headerlink" title="3.1 自然排序：java.lang.Comparable"></a>3.1 自然排序：java.lang.Comparable</h2><ul><li><p>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序。</p></li><li><p>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过 <code>compareTo(Object obj)</code> 方法的返回值来比较大小。</p><p>如果当前对象this大于形参对象obj，则返回正整数，</p><p>如果当前对象this小于形参对象obj，则返回负整数，</p><p>如果当前对象this等于形参对象obj，则返回零。</p></li><li><p>实现Comparable接口的对象列表（和数组）可以通过 Collections.sort 或Arrays.sort进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p></li><li><p>对于类 C 的每一个 e1 和 e2 来说，当且仅当 e1.compareTo(e2) == 0 与e1.equals(e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals一致。建议（虽然不是必需的）最好使自然排序与 equals 一致。</p></li><li><p>Comparable 的典型实现：(<code>默认都是从小到大排列的</code>)</p><ul><li>String：按照字符串中字符的Unicode值进行比较</li><li>Character：按照字符的Unicode值来进行比较</li><li>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较</li><li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li><li>Date、Time等：后面的日期时间比前面的日期时间大</li></ul></li></ul><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"AA"</span>,<span class="string">"CC"</span>,<span class="string">"KK"</span>,<span class="string">"MM"</span>,<span class="string">"GG"</span>,<span class="string">"JJ"</span>,<span class="string">"DD"</span>&#125;;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[AA, CC, DD, GG, JJ, KK, MM]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Goods[] arr = <span class="keyword">new</span> Goods[<span class="number">5</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> Goods(<span class="string">"lenovoMouse"</span>,<span class="number">34</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> Goods(<span class="string">"dellMouse"</span>,<span class="number">43</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> Goods(<span class="string">"xiaomiMouse"</span>,<span class="number">12</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> Goods(<span class="string">"huaweiMouse"</span>,<span class="number">65</span>);</span><br><span class="line">        arr[<span class="number">4</span>] = <span class="keyword">new</span> Goods(<span class="string">"microsoftMouse"</span>,<span class="number">43</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">for</span>(Goods v: arr)&#123;</span><br><span class="line">            System.out.println(v.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">implements</span>  <span class="title">Comparable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">(String name, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Goods&#123;"</span> +</span><br><span class="line">                    <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", price="</span> + price +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指明商品比较大小的方式:按照价格从低到高排序,再按照产品名称从高到低排序</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Goods)&#123;</span><br><span class="line">                Goods goods = (Goods)o;</span><br><span class="line">                <span class="comment">//方式一：</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.price &gt; goods.price)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.price &lt; goods.price)&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="keyword">this</span>.name.compareTo(goods.name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//方式二：调用相应数据类型的重写方法</span></span><br><span class="line"><span class="comment">//           return Double.compare(this.price,goods.price);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"传入的数据类型不一致！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//test2()</span><br><span class="line">Goods&#123;name='xiaomiMouse', price=<span class="number">12</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='lenovoMouse', price=<span class="number">34</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='microsoftMouse', price=<span class="number">43</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='dellMouse', price=<span class="number">43</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='huaweiMouse', price=<span class="number">65</span>.<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-定制排序：java-util-Comparator"><a href="#3-2-定制排序：java-util-Comparator" class="headerlink" title="3.2 定制排序：java.util.Comparator"></a>3.2 定制排序：java.util.Comparator</h2><ul><li><p><code>当元素的类型没有实现java.lang.Comparable 接口而又不方便修改代码，了 或者实现了java.lang.Comparable 接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来 排序</code>，强行对多个对象进行整体排序的比较。</p></li><li><p>重写compare(Object o1,Object o2)方法，比较o1和o2的大小： </p><p>如果方法返示 回正整数，则表示o1 大于o2 ；</p><p>如果返回0 ，表示相等；</p><p>返回负整数，表示o1 小于o2。</p></li><li><p>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。</p></li><li><p>还可以使用 Comparator 来控制某些数据结构（如有序 set或有序映射）的顺序，或者为那些没有自然顺序的对象 collection 提供排序。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"AA"</span>, <span class="string">"CC"</span>, <span class="string">"KK"</span>, <span class="string">"MM"</span>, <span class="string">"GG"</span>, <span class="string">"JJ"</span>, <span class="string">"DD"</span>&#125;;</span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="comment">//按照字符串从大到小的顺序排列</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> String &amp;&amp; o2 <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    String s1 = (String) o1;</span><br><span class="line">                    String s2 = (String) o2;</span><br><span class="line">                    <span class="keyword">return</span> -s1.compareTo(s2);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                return 0;</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的数据类型不一致"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[MM, KK, JJ, GG, DD, CC, AA]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Goods[] arr = <span class="keyword">new</span> Goods[<span class="number">6</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> Goods(<span class="string">"lenovoMouse"</span>, <span class="number">34</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> Goods(<span class="string">"dellMouse"</span>, <span class="number">43</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> Goods(<span class="string">"xiaomiMouse"</span>, <span class="number">12</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> Goods(<span class="string">"huaweiMouse"</span>, <span class="number">65</span>);</span><br><span class="line">        arr[<span class="number">4</span>] = <span class="keyword">new</span> Goods(<span class="string">"huaweiMouse"</span>, <span class="number">224</span>);</span><br><span class="line">        arr[<span class="number">5</span>] = <span class="keyword">new</span> Goods(<span class="string">"microsoftMouse"</span>, <span class="number">43</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="comment">//指明商品比较大小的方式:按照产品名称从低到高排序,再按照价格从高到低排序</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> Goods &amp;&amp; o2 <span class="keyword">instanceof</span> Goods) &#123;</span><br><span class="line">                    Goods g1 = (Goods) o1;</span><br><span class="line">                    Goods g2 = (Goods) o2;</span><br><span class="line">                    <span class="keyword">if</span> (g1.getName().equals(g2.getName())) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -Double.compare(g1.getPrice(), g2.getPrice());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> g1.getName().compareTo(g2.getName());<span class="comment">//调用String的compareTo()方法</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的数据类型不一致"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Goods v : arr) &#123;</span><br><span class="line">            System.out.println(v.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">(String name, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Goods&#123;"</span> +</span><br><span class="line">                    <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", price="</span> + price +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Goods&#123;name='dellMouse', price=<span class="number">43</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='huaweiMouse', price=<span class="number">224</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='huaweiMouse', price=<span class="number">65</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='lenovoMouse', price=<span class="number">34</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='microsoftMouse', price=<span class="number">43</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='xiaomiMouse', price=<span class="number">12</span>.<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="4-System类"><a href="#4-System类" class="headerlink" title="4. System类"></a>4. System类</h1><ul><li><p>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。</p></li><li><p>由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。</p></li><li><p>成员变量：System类内部包含<code>in、out和err</code>三个成员变量，分别代表<code>标准输入流(键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。</code></p></li><li><p>成员方法<br><code>native long currentTimeMillis()：</code>该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时<br>间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。<br> <code>void exit(int status):</code>该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表异常退出。 使用该方法可以在图形界面编程中实现程序的退出功能等。</p><p><code>void gc()：</code> 该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则取决于系统中垃圾回收算法的实现以及系统执行时的情况。<br><code>String getProperty(String key)：</code> 该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见的属性名以及属性的作用如下表所示：</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820202750.png" alt="image-20200820202750543"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String javaVersion = System.getProperty(<span class="string">"java.version"</span>);</span><br><span class="line">    System.out.println(<span class="string">"java的version:"</span> + javaVersion);</span><br><span class="line"></span><br><span class="line">    String javaHome = System.getProperty(<span class="string">"java.home"</span>);</span><br><span class="line">    System.out.println(<span class="string">"java的home:"</span> + javaHome);</span><br><span class="line"></span><br><span class="line">    String osName = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">    System.out.println(<span class="string">"os的name:"</span> + osName);</span><br><span class="line"></span><br><span class="line">    String osVersion = System.getProperty(<span class="string">"os.version"</span>);</span><br><span class="line">    System.out.println(<span class="string">"os的version:"</span> + osVersion);</span><br><span class="line"></span><br><span class="line">    String userName = System.getProperty(<span class="string">"user.name"</span>);</span><br><span class="line">    System.out.println(<span class="string">"user的name:"</span> + userName);</span><br><span class="line"></span><br><span class="line">    String userHome = System.getProperty(<span class="string">"user.home"</span>);</span><br><span class="line">    System.out.println(<span class="string">"user的home:"</span> + userHome);</span><br><span class="line"></span><br><span class="line">    String userDir = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">    System.out.println(<span class="string">"user的dir:"</span> + userDir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java的version:<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_161</span><br><span class="line">java的home:C:\Program Files\Java\jdk1.<span class="number">8</span>.<span class="number">0</span>_161\jre</span><br><span class="line">os的name:Windows <span class="number">10</span></span><br><span class="line">os的version:<span class="number">10</span>.<span class="number">0</span></span><br><span class="line">user的name:君莫笑</span><br><span class="line">user的home:C:\Users\君莫笑</span><br><span class="line">user的<span class="built_in">dir</span>:D:\Project\IDEA\Java\JavaSE</span><br></pre></td></tr></table></figure><h1 id="5-Math类"><a href="#5-Math类" class="headerlink" title="5. Math类"></a>5. Math类</h1><p><strong>java.lang.Math 提供了一系列静态方法用于 科学 计算。其 方法的参数和返回为 值类型一般为double 型。</strong><br>abs 绝对值<br>acos,asin,atan,cos,sin,tan 三角函数<br>sqrt 平方根<br>pow(double a,doble b) a 的b 次幂<br>log 自然对数<br>exp e 为底指数<br>max(double a,double b)<br>min(double a,double b)<br>random() 返回0.0 到1.0 的随机数<br>long round(double a) double 型数据a 转换为long 型（四舍五入）<br>toDegrees(double angrad) 弧度—&gt; 角度<br>toRadians(double angdeg) 角度—&gt;弧度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"90 度的正弦值："</span> + Math.sin(Math.PI/<span class="number">2</span>));</span><br><span class="line">    System.out.println(<span class="string">"0度的余弦值："</span> + Math.cos(<span class="number">0</span>));</span><br><span class="line">    System.out.println(<span class="string">"60度的正切值："</span> + Math.tan(Math.PI/<span class="number">3</span>));</span><br><span class="line">    System.out.println(<span class="string">"1的反正切值： "</span> + Math.atan(<span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">"π/2的角度值："</span> + Math.toDegrees(Math.PI/<span class="number">2</span>));</span><br><span class="line">    System.out.println(Math.PI);<span class="comment">//3.141592653589793</span></span><br><span class="line">    System.out.println(Math.E);<span class="comment">//2.718281828459045</span></span><br><span class="line">    System.out.println(Math.pow(<span class="number">2</span>,<span class="number">3</span>));<span class="comment">//8.0</span></span><br><span class="line">    System.out.println(Math.max(<span class="number">10</span>,<span class="number">20</span>));<span class="comment">//20</span></span><br><span class="line">    System.out.println(Math.abs(-<span class="number">100.111</span>));<span class="comment">//100.111</span></span><br><span class="line">    System.out.println(Math.exp(<span class="number">1</span>));<span class="comment">//2.718281828459045</span></span><br><span class="line">    System.out.println(Math.log(Math.E));<span class="comment">//1.0</span></span><br><span class="line">    System.out.println(Math.sqrt(<span class="number">4</span>));<span class="comment">//2.0</span></span><br><span class="line">    System.out.println(Math.random());<span class="comment">//0.09531601577541382</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-BigInteger与BigDecimal"><a href="#6-BigInteger与BigDecimal" class="headerlink" title="6. BigInteger与BigDecimal"></a>6. BigInteger与BigDecimal</h1><h2 id="6-1-BigInteger"><a href="#6-1-BigInteger" class="headerlink" title="6.1  BigInteger"></a>6.1  BigInteger</h2><ul><li><p>Integer类作为int的包装类，能存储的最大整型值为2 ^31^ -1（有一位是符号位），Long类也是有限的，最大为2 ^63^ -1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。</p></li><li><p>java.math包的<code>BigInteger 可以表示不可变的任意精度的整数</code>。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。</p></li><li><p>构造器：</p><p> BigInteger(String val)：根据字符串构建BigInteger对象</p></li></ul><p><strong>常用方法：</strong></p><ul><li>public BigInteger abs()：返回此 BigInteger 的绝对值的 BigInteger。</li><li>BigInteger add(BigInteger val) ：返回其值为 (this + val) 的 BigInteger</li><li>BigInteger subtract(BigInteger val) ：返回其值为 (this - val) 的 BigInteger</li><li>BigInteger multiply(BigInteger val) ：返回其值为 (this * val) 的 BigInteger</li><li>BigInteger divide(BigInteger val) ：返回其值为 (this / val) 的 BigInteger。整数相除只保留整数部分。</li><li>BigInteger remainder(BigInteger val) ：返回其值为 (this % val) 的 BigInteger。</li><li>BigInteger[] divideAndRemainder(BigInteger val)：返回包含 (this / val) 后跟(this % val) 的两个 BigInteger 的数组。</li><li>BigInteger pow(int exponent) ：返回其值为 (this exponent ) 的 BigInteger。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BigInteger a = <span class="keyword">new</span> BigInteger(<span class="string">"66666666666666666666666666666666666666666666666666666666666666"</span>);</span><br><span class="line">    BigInteger b = <span class="keyword">new</span> BigInteger(<span class="string">"2222222222222222222222222222222222222222222222"</span>);</span><br><span class="line">    System.out.println(<span class="string">"a.add(b)= "</span>+a.add(b));</span><br><span class="line">    System.out.println(<span class="string">"a.subtract(b)= "</span>+a.subtract(b));</span><br><span class="line">    System.out.println(<span class="string">"a.multiply(b)= "</span>+a.multiply(b));</span><br><span class="line">    System.out.println(<span class="string">"a.divide(b)= "</span>+a.divide(b));</span><br><span class="line">    System.out.println(<span class="string">"a.max(b)= "</span>+a.max(b));</span><br><span class="line">    System.out.println(<span class="string">"a.remainder(b)= "</span>+a.remainder(b));</span><br><span class="line">    System.out.println(<span class="string">"a.pow(2)= "</span>+a.pow(<span class="number">2</span>));</span><br><span class="line">    BigInteger c = <span class="keyword">new</span> BigInteger(<span class="string">"-1111111111111111111111111111111111111111"</span>);</span><br><span class="line">    System.out.println(<span class="string">"c.abs()= "</span>+c.abs());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a.add(b)= <span class="number">66666666666666668888888888888888888888888888888888888888888888</span></span><br><span class="line">a.subtract(b)= <span class="number">66666666666666664444444444444444444444444444444444444444444444</span></span><br><span class="line">a.multiply(b)= <span class="number">148148148148148148148148148148148148148148148133333333333333331851851851851851851851851851851851851851851852</span></span><br><span class="line">a.divide(b)= <span class="number">30000000000000000</span></span><br><span class="line">a.max(b)= <span class="number">66666666666666666666666666666666666666666666666666666666666666</span></span><br><span class="line">a.remainder(b)= <span class="number">6666666666666666</span></span><br><span class="line">a.pow(<span class="number">2</span>)= <span class="number">4444444444444444444444444444444444444444444444444444444444444355555555555555555555555555555555555555555555555555555555555556</span></span><br><span class="line">c.abs()= <span class="number">1111111111111111111111111111111111111111</span></span><br></pre></td></tr></table></figure><h2 id="6-2-BigDecimal"><a href="#6-2-BigDecimal" class="headerlink" title="6.2 BigDecimal"></a>6.2 BigDecimal</h2><ul><li>一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中， 要求数字精度比较高，故用到<code>java.math.BigDecimal 类 。</code></li><li><code>BigDecimal类支持不可变的、任意精度的有符号十进制定点数。</code></li><li>构造器<br>public BigDecimal(double val)<br>  public BigDecimal(String val)</li><li>常用方法<br>public BigDecimal add(BigDecimal augend)<br> public BigDecimal subtract(BigDecimal subtrahend)<br> public BigDecimal multiply(BigDecimal multiplicand)<br> public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"6666666666666666666666666666666.2222222222222222222222222222222222222222"</span>);</span><br><span class="line">    BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"222222222222222222222222222222222.1111111111111111111111111111111111111"</span>);</span><br><span class="line">    System.out.println(<span class="string">"a.add(b)= "</span>+a.add(b));</span><br><span class="line">    System.out.println(<span class="string">"a.subtract(b)= "</span>+a.subtract(b));</span><br><span class="line">    System.out.println(<span class="string">"a.multiply(b)= "</span>+a.multiply(b));</span><br><span class="line">    <span class="comment">//取小数点后100位，并四舍五入</span></span><br><span class="line">    System.out.println(<span class="string">"a.divide(b)= "</span>+a.divide(b,<span class="number">100</span>,BigDecimal.ROUND_HALF_UP));</span><br><span class="line">    System.out.println(<span class="string">"a.max(b)= "</span>+a.max(b));</span><br><span class="line">    System.out.println(<span class="string">"a.remainder(b)= "</span>+a.remainder(b));</span><br><span class="line">    System.out.println(<span class="string">"a.pow(2)= "</span>+a.pow(<span class="number">2</span>));</span><br><span class="line">    BigDecimal c = <span class="keyword">new</span> BigDecimal(<span class="string">"-1111111111111111111111111111111111.111111111111111111111111111111111111111"</span>);</span><br><span class="line">    System.out.println(<span class="string">"c.abs()= "</span>+c.abs());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a.add(b)= <span class="number">228888888888888888888888888888888</span>.<span class="number">3333333333333333333333333333333333333222</span></span><br><span class="line">a.subtract(b)= -<span class="number">215555555555555555555555555555555</span>.<span class="number">8888888888888888888888888888888888888778</span></span><br><span class="line">a.multiply(b)= <span class="number">1481481481481481481481481481481381975308641975308641975308641975</span>.<span class="number">35802461234567901234567901234567901235061975308641975308641975308641975308642</span></span><br><span class="line">a.divide(b)= <span class="number">0</span>.<span class="number">0299999999999999999999999999999980149999999999999999999999999999990075013999999999999999999999999995</span></span><br><span class="line">a.max(b)= <span class="number">222222222222222222222222222222222</span>.<span class="number">1111111111111111111111111111111111111</span></span><br><span class="line">a.remainder(b)= <span class="number">6666666666666666666666666666666</span>.<span class="number">2222222222222222222222222222222222222222</span></span><br><span class="line">a.pow(<span class="number">2</span>)= <span class="number">44444444444444444444444444444438518518518518518518518518518518</span>.<span class="number">71604938241975308641975308641975308641977283950617283950617283950617283950617284</span></span><br><span class="line">c.abs()= <span class="number">1111111111111111111111111111111111</span>.<span class="number">111111111111111111111111111111111111111</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> StringBuffer </tag>
            
            <tag> StringBuilder </tag>
            
            <tag> System </tag>
            
            <tag> Date </tag>
            
            <tag> Calendar </tag>
            
            <tag> SimpleDateFormat </tag>
            
            <tag> LocalDate </tag>
            
            <tag> LocalTime </tag>
            
            <tag> LocalDateTime </tag>
            
            <tag> Instant </tag>
            
            <tag> DateTimeFormatter </tag>
            
            <tag> Comparable </tag>
            
            <tag> Comparator </tag>
            
            <tag> Math </tag>
            
            <tag> BigInteger </tag>
            
            <tag> BigDecimal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门：Java多线程的生命周期、创建、使用、同步与通信</title>
      <link href="/posts/b9904a01.html"/>
      <url>/posts/b9904a01.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-多线程相关基本概念"><a href="#1-多线程相关基本概念" class="headerlink" title="1. 多线程相关基本概念"></a>1. 多线程相关基本概念</h1><p><strong>在学习多线程编程之前，先大致回顾一下操作系统有关线程相关的知识点。以便于更好的理解多线程编程。</strong></p><h2 id="1-1-程序-进程-线程"><a href="#1-1-程序-进程-线程" class="headerlink" title="1.1 程序-进程-线程"></a>1.1 程序-进程-线程</h2><ul><li><code>程序(program)</code>是为完成特定任务、用某种语言编写的一组<code>指令的集合</code>。即指一段<code>静态的代码</code>，静态对象。</li><li><code>进程(process)</code>是程序的一次执行过程，或是<code>正在运行的一个程序</code>。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期<ul><li>如：运行中的QQ，运行中的MP3播放器</li><li>程序是静态的，进程是动态的</li><li><code>进程作为资源分配的单位</code>，系统在运行时会为每个进程分配不同的内存区域</li></ul></li><li><code>线程(thread)</code>，进程可进一步细化为线程，是<code>一个程序内部的一条执行路径</code>。<ul><li>若一个进程同一时间 <code>并行</code>执行多个线程，就是支持多线程的</li><li><code>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)</code>，线程切换的开销小</li><li>一个进程中的多个线程共享相同的内存单元/内存地址空间-&gt;它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但<code>多个线程操作共享的系统资源可能就会带来安全的隐患</code>。</li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200815120503.png" alt="image-20200815120503247"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200815120536.png" alt="image-20200815120536622"></p><h2 id="1-2-线程的分类"><a href="#1-2-线程的分类" class="headerlink" title="1.2 线程的分类"></a>1.2 线程的分类</h2><p>在Java中有两类线程：<code>User Thread(用户线程)</code>、<code>Daemon Thread(守护线程)</code></p><p>用个比较通俗的比如，任何一个守护线程都是整个JVM中所有非守护线程的保姆：</p><p>只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。</p><p>Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)，它就是一个很称职的守护者。</p><p>User和Daemon两者几乎没有区别，唯一的不同之处就在于虚拟机的离开：如果 User Thread已经全部退出运行了，只剩下Daemon Thread存在了，虚拟机也就退出了。 因为没有了被守护者，Daemon也就没有工作可做了，也就没有继续运行程序的必要了。</p><p>通过在start()方法前调用<code>thread.setDaemon(true)</code>可以把一个用户线程变 成一个守护线程。</p><blockquote><p>参考：<a href="https://blog.csdn.net/shimiso/article/details/8964414?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param" target="_blank" rel="noopener">线程的分类</a></p></blockquote><h2 id="1-3-线程的优先级"><a href="#1-3-线程的优先级" class="headerlink" title="1.3 线程的优先级"></a>1.3 线程的优先级</h2><p>Java中线程优先级可以指定，范围是1~10。但是并不是所有的操作系统都支持10级优先级的划分（比如有些操作系统只支持3级划分：低，中，高），Java只是给操作系统一个优先级的<strong>参考值</strong>，线程最终<strong>在操作系统的优先级</strong>是多少还是由操作系统决定。</p><p>线程的执行顺序由调度程序来决定，线程的优先级会在线程被调用之前设定。</p><p>Java源码中3种预定义的优先级：</p><ul><li>MAX_PRIORITY ：10</li><li>MIN _PRIORITY ：1</li><li>NORM_PRIORITY ：5 //默认的线程优先级为5</li></ul><p>线程创建时继承父线程的优先级。</p><p>通常情况下，高优先级的线程将会比低优先级的线程有<strong>更高的几率</strong>得到执行。我们使用方法<code>Thread</code>类的<code>setPriority()</code>实例方法来设定线程的优先级。<code>getPriority()</code> 返回线程优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread a = <span class="keyword">new</span> Thread();</span><br><span class="line">        System.out.println(<span class="string">"我是默认线程优先级："</span>+a.getPriority());</span><br><span class="line">        Thread b = <span class="keyword">new</span> Thread();</span><br><span class="line">        b.setPriority(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"我是设置过的线程优先级："</span>+b.getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是默认线程优先级：<span class="number">5</span></span><br><span class="line">我是设置过的线程优先级：<span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="1-4-单核与多核CPU"><a href="#1-4-单核与多核CPU" class="headerlink" title="1.4 单核与多核CPU"></a>1.4 单核与多核CPU</h2><ul><li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果有某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费）。但是因为CPU时间单元特别短，因此感觉不出来。</li><li>如果是多核的话，就相当于多条车道，多个收费站台，可以同时执行多个收费任务，能更好的发挥多线程的效率。（现在的服务器都是多核的）</li><li>一个Java应用程序java.exe，至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</li></ul><h2 id="1-5-并行与并发"><a href="#1-5-并行与并发" class="headerlink" title="1.5 并行与并发"></a>1.5 并行与并发</h2><ul><li>并行：多个CPU同时执行多个任务。<code>同一时刻</code>执行多个任务。</li><li>并发：一个CPU(采用时间片)同时执行多个任务。<code>同一时间段内</code>执行多个任务。</li></ul><h2 id="1-6-使用多线程的优点"><a href="#1-6-使用多线程的优点" class="headerlink" title="1.6 使用多线程的优点"></a>1.6 使用多线程的优点</h2><p>背景 ： 以单核CPU为例，只使用单个线程先后完成多个任务（调用多个方法），肯定比用多个线程来完成用的时间更短（因为异步性，线程的切换需要时间），为何仍需多线程呢？</p><p><strong>多线程程序的优点：</strong></p><ol><li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。比如音乐播放器可以同时放音乐，也可以同时搜索浏览其它歌曲信息。</li><li>提高计算机系统CPU的利用率，程序不必按顺序执行，可以多个线程同时安排任务执行，让CPU不空闲。</li><li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。</li></ol><h2 id="1-7-何时使用多线程？"><a href="#1-7-何时使用多线程？" class="headerlink" title="1.7  何时使用多线程？"></a>1.7  何时使用多线程？</h2><ul><li>程序需要同时执行两个或多个任务。比如刚刚提到的音乐播放器的使用体验。</li><li>程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。比如浏览网页文章时的图片加载，可能不是一次性从上到下加载完，而是多线程加载，文字和图片分两个线程加载，整体内容会显示出来，图片没加载完的先以默认图片形式呈现。</li><li>需要一些后台运行的程序时。比如java程序里面的main线程执行的同时可能有垃圾，那么GC垃圾回收线程就负责main线程运行时边回收垃圾。</li></ul><blockquote><p>关于进程线程的相关更多了解，可参考：<a href="https://blog.csdn.net/weixin_43914604/article/details/104415990" target="_blank" rel="noopener">进程与线程</a>，文章部分图片如下：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200815122437.png" alt="image-20200815122437338"></p></blockquote><h1 id="2-线程的生命周期"><a href="#2-线程的生命周期" class="headerlink" title="2.线程的生命周期"></a>2.线程的生命周期</h1><p>JDK 中用Thread.State 类定义了 线程的几种状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread.State 源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">    NEW, <span class="comment">//新创建</span></span><br><span class="line">    RUNNABLE,<span class="comment">//可运行</span></span><br><span class="line">    BLOCKED,<span class="comment">//被阻塞</span></span><br><span class="line">    WAITING,<span class="comment">//等待</span></span><br><span class="line">    TIMED_WAITING,<span class="comment">//计时等待</span></span><br><span class="line">    TERMINATED;<span class="comment">//被终止</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NEW：处于NEW状态的线程此时尚未启动。这里的尚未启动指的是还没调用Thread实例的start()方法。</p><p>RUNNABLE：调用start()方法，线程进入可运行状态。一个处于可运行状态的线程可能正在运行也可能没有运行，这取决于操作系统分配给线程的运行时间。Java线程的<strong>RUNNABLE</strong>状态其实是包括了传统操作系统线程的<strong>ready</strong>和<strong>running</strong>两个状态的。</p><p>BLOCKED：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态。处于BLOCKED状态的线程正等待锁的释放以进入同步区。</p><p>WAITING：等待状态。处于等待状态的线程变成RUNNABLE状态需要其他线程唤醒。</p><p>TIMED_WAITING：超时等待状态。线程等待一个具体的时间，时间到后会被自动唤醒。</p><p>TERMINATED：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200816102640.jpg" alt="java线程状态切换"></p><h1 id="3-线程的创建和使用"><a href="#3-线程的创建和使用" class="headerlink" title="3. 线程的创建和使用"></a>3. 线程的创建和使用</h1><p><strong>上面我们已经大致回顾了多线程相关的操作系统基本概念，接下来正式开始学习如何在Java应用程序中创建和使用多线程。</strong></p><p>JDK1.5之前创建新执行线程有两种方法：</p><ul><li>继承Thread类的方式</li><li>实现Runnable接口的方式</li></ul><p>JDK5.0 新增线程创建方式：</p><ul><li>实现Callable 接口</li><li>使用线程池</li></ul><h2 id="3-1-继承Thread类"><a href="#3-1-继承Thread类" class="headerlink" title="3.1  继承Thread类"></a>3.1  继承Thread类</h2><p><strong>我们先看看Thread中的一些常用方法：</strong></p><ul><li><p>void start(): 启动线程，并执行对象的run()方法</p></li><li><p>run(): 线程在被调度时执行的操作</p></li><li><p>String getName(): 返回线程的名称</p></li><li><p>void setName(String name):设置该线程名称</p></li><li><p>static Thread currentThread(): 返回当前线程。在Thread子类中就是this，通常用于主线程和Runnable实现类</p></li><li><p>static void yield()： ： 线程让步</p><p>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</p><p>若队列中没有同优先级的线程，忽略此方法</p></li><li><p>join() ： 当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止</p><p>低优先级的线程也可以获得执行</p></li><li><p>static void sleep(long millis) ：(指定时间:毫秒)</p><p>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。</p><p>抛出InterruptedException异常</p></li><li><p>stop(): 强制线程生命期结束，不推荐使用，方法已过时。</p></li><li><p>boolean isAlive()： ： 返回boolean，判断线程是否还活着。</p></li></ul><p>注意点：</p><ol><li>如果自己手动调用run()方法，那么就只是普通方法，没有启动多线程模式。</li><li>run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU调度决定。</li><li>想要启动多线程，必须调用start方法。</li><li>一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出以上的异常“IllegalThreadStateException”。</li></ol><p><strong>下面举个例子用Thread实现线程的创建：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2. 重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":  "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Thread类的子类的对象</span></span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.setName(<span class="string">"线程一"</span>);</span><br><span class="line">        <span class="comment">//4.通过此对象调用start():JVM ①启动当前线程 ② 调用当前线程的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们不能通过直接调用run()的方式启动线程。</span></span><br><span class="line">        <span class="comment">// 这样只是简单的调用一个方法，没有创建线程，这个run方法还是在main线程内执行</span></span><br><span class="line">        <span class="comment">//t1.run();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//再启动一个线程，遍历10以内的偶数。不可以还让已经start()的线程去执行。会报IllegalThreadStateException</span></span><br><span class="line">        <span class="comment">//t1.start();</span></span><br><span class="line">        <span class="comment">//我们需要重新创建一个线程的对象</span></span><br><span class="line">        MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t2.setName(<span class="string">"线程二"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如下操作仍然是在main线程中执行的。</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">"main线程"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":  "</span> + i );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行顺序图：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200816105353.png" alt="image-20200816105350982"></p><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">main线程:  <span class="number">0</span></span><br><span class="line">线程二:  <span class="number">0</span></span><br><span class="line">线程一:  <span class="number">0</span></span><br><span class="line">线程二:  <span class="number">2</span></span><br><span class="line">main线程:  <span class="number">2</span></span><br><span class="line">线程二:  <span class="number">4</span></span><br><span class="line">线程一:  <span class="number">2</span></span><br><span class="line">线程二:  <span class="number">6</span></span><br><span class="line">main线程:  <span class="number">4</span></span><br><span class="line">线程二:  <span class="number">8</span></span><br><span class="line">线程一:  <span class="number">4</span></span><br><span class="line">线程二:  <span class="number">10</span></span><br><span class="line">main线程:  <span class="number">6</span></span><br><span class="line">线程二:  <span class="number">12</span></span><br><span class="line">线程一:  <span class="number">6</span></span><br><span class="line">线程二:  <span class="number">14</span></span><br><span class="line">main线程:  <span class="number">8</span></span><br><span class="line">main线程:  <span class="number">10</span></span><br><span class="line">main线程:  <span class="number">12</span></span><br><span class="line">线程二:  <span class="number">16</span></span><br><span class="line">线程一:  <span class="number">8</span></span><br><span class="line">线程二:  <span class="number">18</span></span><br><span class="line">main线程:  <span class="number">14</span></span><br><span class="line">线程一:  <span class="number">10</span></span><br><span class="line">main线程:  <span class="number">16</span></span><br><span class="line">main线程:  <span class="number">18</span></span><br><span class="line">线程一:  <span class="number">12</span></span><br><span class="line">线程一:  <span class="number">14</span></span><br><span class="line">线程一:  <span class="number">16</span></span><br><span class="line">线程一:  <span class="number">18</span></span><br></pre></td></tr></table></figure><h2 id="3-2-测试Thread的常用方法"><a href="#3-2-测试Thread的常用方法" class="headerlink" title="3.2 测试Thread的常用方法"></a>3.2 测试Thread的常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">10</span>);<span class="comment">//因为sleep方法声明了InterruptedException，所以得捕获异常</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//Thread.currentThread()返回当前线程。在Thread子类中就是this，通常用于主线程和Runnable实现类</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"-"</span> + Thread.currentThread().getPriority() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">20</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</span></span><br><span class="line">                <span class="comment">//也可能操作系统马上又让当前线程继续执行</span></span><br><span class="line">                yield();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        HelloThread h1 = <span class="keyword">new</span> HelloThread(<span class="string">"Thread：1"</span>);</span><br><span class="line"></span><br><span class="line">        h1.setName(<span class="string">"线程一"</span>);</span><br><span class="line">        <span class="comment">//设置分线程的优先级</span></span><br><span class="line">        h1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        h1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给主线程命名</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line">        System.out.println(h1.isAlive());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"-"</span> + Thread.currentThread().getPriority() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//当某个程序执行流中调用其他线程的 join() 方法时，</span></span><br><span class="line">                    <span class="comment">// 调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止</span></span><br><span class="line">                    h1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(h1.isAlive());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">0</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">2</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">4</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">6</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">8</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">10</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">12</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">14</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">16</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">18</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">20</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">0</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">2</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">4</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">6</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">8</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">10</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">12</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">14</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">16</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">18</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">20</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">22</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">24</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">26</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">28</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">22</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">24</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">26</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">28</span></span><br><span class="line">false</span><br></pre></td></tr></table></figure><h2 id="3-3-实现Runnable接口"><a href="#3-3-实现Runnable接口" class="headerlink" title="3.3  实现Runnable接口"></a>3.3  实现Runnable接口</h2><p>1) 定义子类，实现Runnable接口。<br>2) 子类中重写Runnable接口中的run方法。<br>3) 通过Thread类含参构造器创建线程对象。<br>4) 将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。<br>5) 调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建实现类的对象</span></span><br><span class="line">        MThread mThread = <span class="keyword">new</span> MThread();</span><br><span class="line">        <span class="comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(mThread);<span class="comment">//target为Runnable的对象变量</span></span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        <span class="comment">//5. 通过Thread类的对象调用start():① 启动线程 ②调用Thread线程的run()--&gt;调用了Runnable类型的target的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再启动一个线程，遍历30以内的偶数</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(mThread);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">1</span>:<span class="number">0</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">0</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">2</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">4</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">6</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">8</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">10</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">12</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">14</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">16</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">2</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">18</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">20</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">22</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">24</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">6</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">26</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">8</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">28</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">12</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">14</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">16</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">18</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">20</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">22</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">24</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">26</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">28</span></span><br></pre></td></tr></table></figure><h2 id="3-4-Thread与Runnable两种方式的联系和区别"><a href="#3-4-Thread与Runnable两种方式的联系和区别" class="headerlink" title="3.4 Thread与Runnable两种方式的联系和区别"></a>3.4 Thread与Runnable两种方式的联系和区别</h2><p><strong>联系：</strong>我们可以从Thread的源码中看出Thread其实也是实现了Runnable的一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br></pre></td></tr></table></figure><p><strong>区别：</strong></p><ul><li><p>继承Thread：线程运行代码存放在Thread子类run方法中。</p></li><li><p>实现Runnable：线程运行代码存放在实现接口的类的run方法中。</p></li></ul><p><strong>Runnable实现方式的好处：</strong></p><ul><li>避免了单继承的局限性</li><li>多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。</li></ul><p><strong>下面来到题目举个例子：创建三个窗口卖票，总票数为50张，分别使用继承Thread类和Runnable的方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: adsd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-08-16 11:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果不加static就是每个线程都有20张票</span></span><br><span class="line">    <span class="comment">//加static就是所有线程共用20张票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(getName() + <span class="string">"正在卖票，卖出的票号为： "</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖票，卖出的票号为： "</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/************  Thread方式  ************/</span></span><br><span class="line">        WindowThread t1 = <span class="keyword">new</span> WindowThread();</span><br><span class="line">        WindowThread t2 = <span class="keyword">new</span> WindowThread();</span><br><span class="line">        WindowThread t3 = <span class="keyword">new</span> WindowThread();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"Thread的窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"Thread的窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"Thread的窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">            t3.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        WindowRunnable r = new WindowRunnable();</span></span><br><span class="line"><span class="comment">//        WindowRunnable rr = new WindowRunnable();</span></span><br><span class="line"><span class="comment">//        WindowRunnable rrr = new WindowRunnable();</span></span><br><span class="line"><span class="comment">//        //如果这样写的话就是每个线程各自有20张票</span></span><br><span class="line"><span class="comment">//        Thread r1 = new Thread(r);</span></span><br><span class="line"><span class="comment">//        Thread r2 = new Thread(rr);</span></span><br><span class="line"><span class="comment">//        Thread r3 = new Thread(rrr);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        WindowRunnable r = <span class="keyword">new</span> WindowRunnable();</span><br><span class="line">        <span class="comment">//每个线程共享r对象的20张票</span></span><br><span class="line">        Thread r1 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread r2 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread r3 = <span class="keyword">new</span> Thread(r);</span><br><span class="line"></span><br><span class="line">        r1.setName(<span class="string">"Runnable的窗口1"</span>);</span><br><span class="line">        r2.setName(<span class="string">"Runnable的窗口2"</span>);</span><br><span class="line">        r3.setName(<span class="string">"Runnable的窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        r1.start();</span><br><span class="line">        r2.start();</span><br><span class="line">        r3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Thread的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">18</span></span><br><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">19</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">16</span></span><br><span class="line">Thread的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">17</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">14</span></span><br><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">15</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">12</span></span><br><span class="line">Thread的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">13</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">10</span></span><br><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">11</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">8</span></span><br><span class="line">Thread的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">9</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">6</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">4</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">3</span></span><br><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">7</span></span><br><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">1</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">2</span></span><br><span class="line">Thread的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">5</span></span><br><span class="line">---------------------------------------</span><br><span class="line">Runnable的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Runnable的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Runnable的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">17</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">18</span></span><br><span class="line">Runnable的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">19</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">15</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">13</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">12</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">11</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">10</span></span><br><span class="line">Runnable的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">16</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">9</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">7</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">6</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">5</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">4</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">3</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">2</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">1</span></span><br><span class="line">Runnable的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">14</span></span><br><span class="line">Runnable的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">8</span></span><br></pre></td></tr></table></figure><p>我们从上面可以看出20号票有重复出票的情况，这两种方式存在线程的安全问题，待解决。</p><h2 id="3-5-实现Callable接口"><a href="#3-5-实现Callable接口" class="headerlink" title="3.5 实现Callable接口"></a>3.5 实现Callable接口</h2><p>与使用Runnable相比， Callable功能更强大些</p><ul><li>相比run()方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类，比如获取返回结果</li></ul><p>Future接口</p><ul><li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。</li><li><code>FutrueTask是Futrue接口的唯一的实现类</code></li><li>FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值</li></ul><p>我们可以看看这些接口和类的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; </span>&#123;……&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">     <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Callable举个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</span></span><br><span class="line"><span class="comment"> * 1. call()可以有返回值的。</span></span><br><span class="line"><span class="comment"> * 2. call()可以抛出异常，被外面的操作捕获，获取异常的信息</span></span><br><span class="line"><span class="comment"> * 3. Callable是支持泛型的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.创建一个实现Callable的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;<span class="comment">//sum自动装箱为Integer</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建Callable接口实现类的对象</span></span><br><span class="line">        NumThread numThread = <span class="keyword">new</span> NumThread();</span><br><span class="line">        <span class="comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(numThread);</span><br><span class="line">        <span class="comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.获取Callable中call方法的返回值</span></span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span></span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">"总和为："</span> + sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">总和为：<span class="number">240</span></span><br></pre></td></tr></table></figure><h2 id="3-6-使用线程池"><a href="#3-6-使用线程池" class="headerlink" title="3.6 使用线程池"></a>3.6 使用线程池</h2><p><code>背景</code>： 经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。<br><code>思路</code>：提前 创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。<br><code>好处</code>：</p><ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理：<ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止<br>…</li></ul></li></ul><p><strong>线程池相关API：</strong></p><p>JDK 5.0起提供了线程池相关API：<code>ExecutorService</code>和<code>Executors</code></p><ul><li><code>ExecutorService</code>：真正的线程池接口。常见子类ThreadPoolExecutor<ol><li>void execute(Runnable command) ：执行任务/命令，没有返回值，一般用来执行Runnable</li><li><T> Future<T> submit(Callable<T> task)：执行任务，有返回值，一般用来执行Callable</li><li>void shutdown() ：关闭连接池</li></ol></li><li><code>Executors</code>：工具类、线程池的工厂类，用于创建并返回不同类型的线程池<ol><li>Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池</li><li>Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池</li><li>Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池</li><li>Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">20</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableThread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">20</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"测试线程池返回值"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 提供指定线程数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(service.getClass());<span class="comment">//其实service是ThreadPoolExecutor类型</span></span><br><span class="line">        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;</span><br><span class="line">        <span class="comment">//便于线程管理：设置线程池的属性</span></span><br><span class="line">        service1.setCorePoolSize(<span class="number">15</span>);<span class="comment">//等一些方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        RunnableThread runnableThread1 = <span class="keyword">new</span> RunnableThread();</span><br><span class="line">        service.execute(runnableThread1);<span class="comment">//适合适用于Runnable</span></span><br><span class="line"></span><br><span class="line">        CallableThread callableThread1 = <span class="keyword">new</span> CallableThread();</span><br><span class="line">        Future&lt;Object&gt; futureTask =service.submit(callableThread1);<span class="comment">//适合使用于Callable</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println((String)futureTask.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果;</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class java.util.concurrent.ThreadPoolExecutor</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">4</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">6</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">8</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">10</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">12</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">14</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">16</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">18</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">20</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">5</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">7</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">9</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">11</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">13</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">15</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">17</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">19</span></span><br><span class="line">测试线程池返回值</span><br></pre></td></tr></table></figure><h1 id="4-线程的同步"><a href="#4-线程的同步" class="headerlink" title="4. 线程的同步"></a>4. 线程的同步</h1><p>所谓线程的同步简单点可以理解为，<code>多个线程的执行需要遵循一定的顺序，否则可能出现安全问题</code>，比如上面例子中20号票重复的现象。共享数据没有加锁。</p><p>更多详细的介绍：<a href="https://blog.csdn.net/weixin_43914604/article/details/104942405" target="_blank" rel="noopener">进程的同步与互斥</a></p><p>那么我们如何解决线程同步可能带来的不安全问题呢？我们可以对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。</p><p>Java 对于多线程的安全问题提供了专业的解决 方式 ： <code>同步机制</code></p><h2 id="4-1-synchronized"><a href="#4-1-synchronized" class="headerlink" title="4.1 synchronized"></a>4.1 synchronized</h2><p>在学习Java<code>同步代码块与同步方法</code>时，得先了解一下<code>synchronize</code>(中文翻译：同步)关键字。</p><p><font size=5 color=red>synchronized 的锁是什么 ?</font></p><ul><li><p>synchronized的锁，即<code>同步监视器</code>，一般为类对象</p></li><li><p>任意对象都可以作为同步锁。所有对象都自动含有单一的锁（监视器）</p></li><li><p>同步方法的锁：静态方法（类名.class）、非静态方法（this）</p></li><li><p>同步代码块：自己指定，很多时候也是指定为this或类名.class</p><p><strong>注意：</strong></p></li><li><p>必须确保使用<code>同一个资源</code>的 <code>多个线程共用一把锁</code>，这个非常重要，否则就无法保证共享资源的安全</p></li><li><p>一个线程类中的所有静态方法共用同一把锁（类名.class），所有非静态方法共用同一把锁（this），同步代码块（指定需谨慎）</p></li></ul><h2 id="4-2-同步的范围"><a href="#4-2-同步的范围" class="headerlink" title="4.2 同步的范围"></a>4.2 同步的范围</h2><p>1 、 如何 找问题 ， 即代码是否存在线程安全 ？ （ 非常重要 ）<br>（1）明确哪些代码是多线程运行的代码<br>（2）明确多个线程是否有共享数据<br>（3）明确多线程运行代码中是否有多条语句操作共享数据</p><p>2 、 如何解决呢 ？ （ 非常重要 ）<br>对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。<br>即所有操作共享数据的这些语句都要放在同步范围中</p><p>3 、 切记 ：<br> 范围太小：没锁住所有有安全问题的代码<br> 范围太大：没发挥多线程的功能。</p><h2 id="4-3-释放锁的操作"><a href="#4-3-释放锁的操作" class="headerlink" title="4.3 释放锁的操作"></a>4.3 释放锁的操作</h2><p>什么时候回释放锁？</p><ul><li>当前线程的同步方法、同步代码块执行结束。</li><li>当前线程在同步代码块、同步方法中遇到<code>break、return</code>终止了该代码块或该方法的继续执行。</li><li>当前线程在同步代码块、同步方法中出现了未处理的<code>Error或Exception</code>，导致异常结束。</li><li>当前线程在同步代码块、同步方法中执行了线程对象的<code>wait()</code>方法，当前线程暂停，并释放锁。</li></ul><h2 id="4-4-不会释放锁的操作"><a href="#4-4-不会释放锁的操作" class="headerlink" title="4.4 不会释放锁的操作"></a>4.4 不会释放锁的操作</h2><ul><li>线程执行同步代码块或同步方法时，程序调用<code>Thread.sleep()、Thread.yield()</code>方法暂停当前线程的执行</li><li>线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁（同步监视器）。</li><li>应<code>尽量避免</code>使用<code>suspend()和resume()</code>来控制线程</li></ul><p><strong>下面就介绍几种Java实现同步的几个案例，解决线程安全问题，巩固上面说的规则和方法</strong></p><ol><li>同步代码块—Thread</li><li>同步方法—Thread</li><li>同步代码块—Runnable</li><li>同步方法—Runnable</li><li>Lock锁—Thread</li><li>Lock锁—Runnable</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步代码块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> ( 同步监视器)&#123;</span><br><span class="line"><span class="comment">// 需要被同步的代码；</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">(String name)</span></span>&#123;</span><br><span class="line">….</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>还是以三个窗口卖票为例，三个窗口一起卖50张票</strong></p><h2 id="4-5-同步代码块—Thread"><a href="#4-5-同步代码块—Thread" class="headerlink" title="4.5  同步代码块—Thread"></a>4.5  同步代码块—Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">50</span>;<span class="comment">//共享资源</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();<span class="comment">//内部对象锁</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//正确 synchronized (obj)</span></span><br><span class="line">            <span class="comment">//正确 Class clazz = Window2.class,Window2.class只会加载一次</span></span><br><span class="line">            <span class="comment">//错误的方式：this代表着t1,t2,t3三个对象</span></span><br><span class="line">            <span class="comment">//只要保证t1,t2,t3三个对象共用同一把锁就行</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Window2<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(getName() + <span class="string">"：卖票，票号为："</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window2 t1 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t2 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t3 = <span class="keyword">new</span> Window2();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-6-同步方法—Thread"><a href="#4-6-同步方法—Thread" class="headerlink" title="4.6  同步方法—Thread"></a>4.6  同步方法—Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window4</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//private synchronized void show()&#123; //不加static,默认同步监视器：t1,t2,t3。此种解决方式是错误的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//加static,默认同步监视器：Window4.class</span></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"：卖票，票号为："</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window4 t1 = <span class="keyword">new</span> Window4();</span><br><span class="line">        Window4 t2 = <span class="keyword">new</span> Window4();</span><br><span class="line">        Window4 t3 = <span class="keyword">new</span> Window4();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-7-同步代码块—Runnable"><a href="#4-7-同步代码块—Runnable" class="headerlink" title="4.7  同步代码块—Runnable"></a>4.7  同步代码块—Runnable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//    Object obj = new Object();</span></span><br><span class="line"><span class="comment">//    Dog dog = new Dog();</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//正确：synchronized (dog)  </span></span><br><span class="line">            <span class="comment">// 正确：synchronized (obj)  </span></span><br><span class="line">            <span class="comment">//正确：this:唯一的Window1的对象    </span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":卖票，票号为："</span> + ticket);</span><br><span class="line"></span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window1 w = <span class="keyword">new</span> Window1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-8-同步方法—Runnable"><a href="#4-8-同步方法—Runnable" class="headerlink" title="4.8  同步方法—Runnable"></a>4.8  同步方法—Runnable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">             show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认同步监视器：this，即w，三个对象用这一个对象锁</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//synchronized (this)&#123; 也正确</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":卖票，票号为："</span> + ticket);</span><br><span class="line"></span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window3 w = <span class="keyword">new</span> Window3();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-9-Lock锁—Runnable"><a href="#4-9-Lock锁—Runnable" class="headerlink" title="4.9 Lock锁—Runnable"></a>4.9 Lock锁—Runnable</h2><ul><li>从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</li><li><code>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具</code>。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</li><li><code>ReentrantLock 类实现了 Lock</code> ，它拥有与 synchronized 相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁、释放锁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock,3个窗口共用一个lock对象</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"：售票，票号为："</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()，如果发生Error或Exception,释放锁以免其它进程被阻塞</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-10-Locak锁—Thread"><a href="#4-10-Locak锁—Thread" class="headerlink" title="4.10  Locak锁—Thread"></a>4.10  Locak锁—Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"：售票，票号为："</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Window t1=<span class="keyword">new</span> Window();</span><br><span class="line">        Window t2=<span class="keyword">new</span> Window();</span><br><span class="line">        Window t3=<span class="keyword">new</span> Window();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-11-synchronized-与-Lock-的对比"><a href="#4-11-synchronized-与-Lock-的对比" class="headerlink" title="4.11 synchronized 与 Lock 的对比"></a>4.11 synchronized 与 Lock 的对比</h2><ol><li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，出了作用域自动释放</li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li></ol><p><font size=5 color=red>优先使用顺序：</font></p><p>Lock &gt;同步代码块（已经进入了方法体，分配了相应资源） &gt;同步方法（在方法体之外）</p><h2 id="4-12-一个例子：同步存钱问题"><a href="#4-12-一个例子：同步存钱问题" class="headerlink" title="4.12  一个例子：同步存钱问题"></a>4.12  一个例子：同步存钱问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">银行有一个账户。有两个储户分别向同一个账户存3000元，每次存1000，存3次。每次存完打印账户余额。</span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment"> 1.是否是多线程问题？ 是，两个储户线程</span></span><br><span class="line"><span class="comment"> 2.是否有共享数据？ 有，账户（或账户余额）</span></span><br><span class="line"><span class="comment"> 3.是否有线程安全问题？ 有</span></span><br><span class="line"><span class="comment"> 4.需要考虑如何解决线程安全问题？同步机制：有三种方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存钱</span></span><br><span class="line">    <span class="comment">//默认监视器(锁)为 acct对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(amt &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            balance += amt;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":存钱成功。余额为："</span> + balance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Account acct;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Account acct)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.acct = acct;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            acct.deposit(<span class="number">1000</span>);<span class="comment">//调用同步方法，每次存1000</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account acct = <span class="keyword">new</span> Account(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//c1 c2 两个顾客共用一个账户存钱</span></span><br><span class="line">        Customer c1 = <span class="keyword">new</span> Customer(acct);</span><br><span class="line">        Customer c2 = <span class="keyword">new</span> Customer(acct);</span><br><span class="line"></span><br><span class="line">        c1.setName(<span class="string">"甲"</span>);</span><br><span class="line">        c2.setName(<span class="string">"乙"</span>);</span><br><span class="line"></span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">甲:存钱成功。余额为：<span class="number">1000</span>.<span class="number">0</span></span><br><span class="line">甲:存钱成功。余额为：<span class="number">2000</span>.<span class="number">0</span></span><br><span class="line">甲:存钱成功。余额为：<span class="number">3000</span>.<span class="number">0</span></span><br><span class="line">乙:存钱成功。余额为：<span class="number">4000</span>.<span class="number">0</span></span><br><span class="line">乙:存钱成功。余额为：<span class="number">5000</span>.<span class="number">0</span></span><br><span class="line">乙:存钱成功。余额为：<span class="number">6000</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="5-线程的死锁"><a href="#5-线程的死锁" class="headerlink" title="5. 线程的死锁"></a>5. 线程的死锁</h1><p><strong>死锁：</strong></p><ul><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</li></ul><p><strong>解决方法：</strong></p><ul><li>专门的算法、原则</li><li>尽量减少同步资源的定义</li><li>尽量避免嵌套同步</li></ul><blockquote><p>更多理论参考：<a href="https://blog.csdn.net/weixin_43914604/article/details/105437474" target="_blank" rel="noopener">操作系统之死锁详解(预防、避免、检测、解除)</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//死锁的演示</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(B b)</span> </span>&#123; <span class="comment">//同步监视器：A类的对象：a</span></span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 进入了A实例的foo方法"</span>); <span class="comment">// ①</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 企图调用B实例的last方法"</span>); <span class="comment">// ③</span></span><br><span class="line">b.last();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;<span class="comment">//同步监视器：A类的对象：a</span></span><br><span class="line">System.out.println(<span class="string">"进入了A类的last方法内部"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">(A a)</span> </span>&#123;<span class="comment">//同步监视器：b</span></span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 进入了B实例的bar方法"</span>); <span class="comment">// ②</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 企图调用A实例的last方法"</span>); <span class="comment">// ④</span></span><br><span class="line">a.last();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;<span class="comment">//同步监视器：b</span></span><br><span class="line">System.out.println(<span class="string">"进入了B类的last方法内部"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line"><span class="comment">// 调用a对象的foo方法</span></span><br><span class="line">a.foo(b);</span><br><span class="line">System.out.println(<span class="string">"进入了主线程之后"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Thread.currentThread().setName(<span class="string">"副线程"</span>);</span><br><span class="line"><span class="comment">// 调用b对象的bar方法</span></span><br><span class="line">b.bar(a);</span><br><span class="line">System.out.println(<span class="string">"进入了副线程之后"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DeadLock dl = <span class="keyword">new</span> DeadLock();</span><br><span class="line"><span class="keyword">new</span> Thread(dl).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dl.init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码分析：如果不加sleep，大概率不会发生死锁现象，因为cpu执行速度快，主线程和副线程很大几率可以一次性取得a和b两个对象锁。加了sleep，主线程和副线程就很大几率会出现死锁，因为很可能会导致主线程和副线程都只拿到了一个锁，两个人同时等待对方手里的锁，进而导致死锁现象。</p><h1 id="6-线程的通信"><a href="#6-线程的通信" class="headerlink" title="6. 线程的通信"></a>6. 线程的通信</h1><p>线程的通信，即多个线程之间的交流合作，按一定的顺序执行或按一定的规则执行。</p><p>这里举一个例子先直观感受一下线程之间的通信方式：<strong>使用两个线程印 打印 1-10 。线程1, 线程2 交替打印</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();<span class="comment">//可以用obj</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//也可以用this，同时下面的obj也要换成this</span></span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line"></span><br><span class="line">                obj.notify();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(number &lt;= <span class="number">10</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//使得调用如下wait()方法的线程进入阻塞状态,并释放锁</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommunicationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">1</span>:<span class="number">1</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">2</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">3</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">4</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">5</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">6</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">7</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">8</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">9</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">10</span></span><br></pre></td></tr></table></figure><p>现在对以上使用的方法说明一下：</p><h2 id="6-1-Object用于线程的三个方法"><a href="#6-1-Object用于线程的三个方法" class="headerlink" title="6.1 Object用于线程的三个方法"></a>6.1 Object用于线程的三个方法</h2><p><strong>wait() 与 与 notify() 和 notifyAll()简述：</strong></p><ul><li>wait()：令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当前线程排队等候其他线程调用notify()或notifyAll()方法唤醒，唤醒后等待重新获得对监视器的所有权后才能继续执行。</li><li>notify()：唤醒正在排队等待同步资源的线程中优先级最高者结束等待</li><li>notifyAll ()：唤醒正在排队等待资源的所有线程结束等待.</li><li>这三个方法只有在synchronized方法或synchronized代码块中才能使用，这三个方法的调用者必须是同步代码块或同步方法中的同步监视器，否则会报<code>java.lang.IllegalMonitorStateException异常</code>。</li><li>因为这三个方法必须有锁对象调用，而任意对象都可以作为synchronized的同步锁，因此这三个方法只能在Object类中声明。</li></ul><p><strong>wait() 方法</strong></p><ul><li>在当前线程中调用方法： 对象名.wait()</li><li>使当前线程进入等待（某对象）状态 ，直到另一线程对该对象发出 notify(或notifyAll) 为止。</li><li>调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）</li><li><code>调用此方法后，当前线程将释放对象监控权 ，然后进入等待</code></li><li>在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。</li></ul><p><strong>notify()/notifyAll()</strong></p><ul><li>在当前线程中调用方法： 对象名.notify()/notifyAll()</li><li>功能：唤醒等待该对象监控权的一个/所有线程。</li><li>调用方法的必要条件：当前线程必须具有对该对象的监控权（获得锁）</li></ul><p><strong>面试题：sleep() 和 wait()的异同？</strong><br>1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。<br>2.不同点：</p><ul><li>两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</li><li>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</li></ul><h2 id="6-2-一个生产者-消费者例题"><a href="#6-2-一个生产者-消费者例题" class="headerlink" title="6.2 一个生产者-消费者例题"></a>6.2 一个生产者-消费者例题</h2><p><strong>问题描述：</strong>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200816231207.png" alt="image-20200816231203694"></p><p><strong>这里可能出现两个问题：</strong></p><ul><li>生产者比消费者快时，消费者会漏掉一些数据没有取到。</li><li>消费者比生产者快时，消费者会取相同的数据。</li></ul><p><strong>分析：</strong></p><ol><li>是否是多线程问题？是，生产者线程，消费者线程</li><li>是否有共享数据？是，店员（或产品）</li><li>如何解决线程的安全问题？同步机制,有三种方法</li><li>是否涉及线程的通信？是</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span> </span>&#123;<span class="comment">//店员</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> productCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产产品，默认同步监视器为clerk</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produceProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (productCount &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            productCount++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":开始生产第"</span> + productCount + <span class="string">"个产品"</span>);</span><br><span class="line">            notify();<span class="comment">//叫醒消费者</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费产品，默认同步监视器为clerk</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consumeProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (productCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":开始消费第"</span> + productCount + <span class="string">"个产品"</span>);</span><br><span class="line">            productCount--;</span><br><span class="line">            notify();<span class="comment">//叫醒生产者</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;<span class="comment">//生产者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">":开始生产产品....."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clerk.produceProduct();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;<span class="comment">//消费者</span></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">":开始消费产品....."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clerk.consumeProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clerk clerk = <span class="keyword">new</span> Clerk();</span><br><span class="line"></span><br><span class="line">        Producer p1 = <span class="keyword">new</span> Producer(clerk);</span><br><span class="line">        p1.setName(<span class="string">"生产者1"</span>);</span><br><span class="line"></span><br><span class="line">        Consumer c1 = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        c1.setName(<span class="string">"消费者1"</span>);</span><br><span class="line">        Consumer c2 = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        c2.setName(<span class="string">"消费者2"</span>);</span><br><span class="line"></span><br><span class="line">        p1.start();</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行的部分结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">生产者<span class="number">1</span>:开始生产产品.....</span><br><span class="line">消费者<span class="number">2</span>:开始消费产品.....</span><br><span class="line">消费者<span class="number">1</span>:开始消费产品.....</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">1</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">2</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">2</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">1</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">1</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">2</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">3</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">3</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">2</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">2</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">3</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">4</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">4</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">3</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">3</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">4</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">5</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">5</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">4</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">4</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">5</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">6</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">6</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">5</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">5</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">6</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">7</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">7</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">6</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">6</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">7</span>个产品</span><br><span class="line">…………………………………………………………</span><br></pre></td></tr></table></figure><h1 id="7-参考文献"><a href="#7-参考文献" class="headerlink" title="7. 参考文献"></a>7. 参考文献</h1><ul><li><a href="https://redspider.gitbook.io/concurrent/" target="_blank" rel="noopener">https://redspider.gitbook.io/concurrent/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举类与注解</title>
      <link href="/posts/3aa86aea.html"/>
      <url>/posts/3aa86aea.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、枚举类"><a href="#一、枚举类" class="headerlink" title="一、枚举类"></a>一、枚举类</h1><h2 id="1-为什么使用枚举类？"><a href="#1-为什么使用枚举类？" class="headerlink" title="1. 为什么使用枚举类？"></a>1. 为什么使用枚举类？</h2><p><strong>枚举在曰常生活中很常见，举例如下：</strong></p><ol><li>星期：Monday(星期一)、……、Sunday(星期天)</li><li>性别：Man(男)、W oman(女)</li><li>季节：Spring(春节)……Winter(冬天)</li><li>支付方式：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)</li><li>就职状态：Busy、Free、Vocation、Dimission</li><li>订单状态：Nonpayment（未付款）、Paid（已付款）、Delivered（已发货）、Return（退货）、Checked（已确认）Fulfilled（已配货）、</li><li>线程状态：创建、就绪、运行、阻塞、死亡</li></ol><p><code>当需要定义一组常量时，我们把常量抽象成类对象去处理，使用枚举定义常量更安全，更便捷，更直观。</code></p><h2 id="2-枚举类的实现和属性概述"><a href="#2-枚举类的实现和属性概述" class="headerlink" title="2. 枚举类的实现和属性概述"></a>2. 枚举类的实现和属性概述</h2><p><strong>若枚举只有一个对象, 则可以作为一种单例模式的实现方式。</strong></p><p><strong>枚举类的实现：</strong></p><ul><li>JDK1.5之前需要自定义枚举类</li><li>JDK 1.5 新增的 enum 关键字用于定义枚举类</li></ul><p><strong>枚举类的属性：</strong></p><ul><li><code>枚举类对象的属性不应允许被改动</code>, 所以应该使用 <code>private final</code>修饰</li><li>枚举类使用 private final 修饰的属性应该在<code>构造器中为其赋值</code></li><li>若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的 传入参数</li></ul><h2 id="3-自定义枚举类"><a href="#3-自定义枚举类" class="headerlink" title="3. 自定义枚举类"></a>3. 自定义枚举类</h2><ol><li>私有化类的构造器，保证不能在类的外部创建其对象</li><li>在类的内部创建枚举类的实例。声明为：<code>public static final</code></li><li>对象如果有实例变量，应该声明为<code>private final</code>，并在构造器中初始化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season spring = Season.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供当前枚举类的多个对象：public static final的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING = <span class="keyword">new</span> Season(<span class="string">"春天"</span>,<span class="string">"春暖花开"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER = <span class="keyword">new</span> Season(<span class="string">"夏天"</span>,<span class="string">"夏日炎炎"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN = <span class="keyword">new</span> Season(<span class="string">"秋天"</span>,<span class="string">"秋高气爽"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER = <span class="keyword">new</span> Season(<span class="string">"冬天"</span>,<span class="string">"冰天雪地"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.toString()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Season&#123;"</span> +</span><br><span class="line">                <span class="string">"seasonName='"</span> + seasonName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", seasonDesc='"</span> + seasonDesc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Season&#123;seasonName='春天', seasonDesc='春暖花开'&#125;</span><br></pre></td></tr></table></figure><h2 id="4-使用enum的定义枚举类"><a href="#4-使用enum的定义枚举类" class="headerlink" title="4. 使用enum的定义枚举类"></a>4. 使用enum的定义枚举类</h2><p><strong>使用说明：</strong></p><ul><li>使用 enum 定义的枚举类默认继承了<code>java.lang.Enum</code>类，因此不能再继承其他类</li><li>枚举类的<code>构造器只能使用 private 权限修饰符</code></li><li>枚举类的所有<code>实例</code>必须在枚举类中显式列出(, 分隔 ; 结尾)。列出的实例系统会<code>自动添加 public static final</code>修饰</li><li>必<code>须在枚举类的第一行声明枚举类对象</code></li><li>JDK 1.5 中可以在 switch 表达式中使用Enum定义的枚举类的对象作为表达式, case 子句可以直接使用枚举值的名字, 无需添加枚举<br>类作为限定。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Season1 s1=Season1.SUMMER;</span><br><span class="line">       System.out.println(s1);</span><br><span class="line">       System.out.println(s1.getSeasonName());</span><br><span class="line">       System.out.println(s1.getSeasonDesc());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用enum关键字定义枚举类</span></span><br><span class="line"><span class="keyword">enum</span> Season1&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span></span><br><span class="line">    SPRING(<span class="string">"春天"</span>,<span class="string">"春暖花开"</span>),</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>,<span class="string">"夏日炎炎"</span>),</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>,<span class="string">"秋高气爽"</span>),</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>,<span class="string">"冰天雪地"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SUMMER</span><br><span class="line">夏天</span><br><span class="line">夏日炎炎</span><br></pre></td></tr></table></figure><h2 id="5-常用的Enum方法"><a href="#5-常用的Enum方法" class="headerlink" title="5. 常用的Enum方法"></a>5. 常用的Enum方法</h2><p><strong>Enum类的主要方法：</strong></p><ul><li>values() 方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</li><li>valueOf(String str)：返回指定字符串对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：<br>IllegalArgumentException。</li><li>toString()：返回当前枚举类对象常量的名称</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1[] s=Season1.values();</span><br><span class="line">        <span class="keyword">for</span>(Season1 e: s)&#123;</span><br><span class="line">            System.out.println(e.toString()+<span class="string">","</span>+e.getSeasonName()+<span class="string">","</span>+e.getSeasonDesc());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"****************"</span>);</span><br><span class="line">        Thread.State[] values = Thread.State.values();</span><br><span class="line">        <span class="keyword">for</span> (Thread.State e:values) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"****************"</span>);</span><br><span class="line">        Season1 s2=Season1.valueOf(<span class="string">"SUMMER"</span>);</span><br><span class="line">        System.out.println(s2.toString()+<span class="string">","</span>+s2.getSeasonName()+<span class="string">","</span>+s2.getSeasonDesc());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用enum关键字定义枚举类</span></span><br><span class="line"><span class="keyword">enum</span> Season1&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span></span><br><span class="line">    SPRING(<span class="string">"春天"</span>,<span class="string">"春暖花开"</span>),</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>,<span class="string">"夏日炎炎"</span>),</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>,<span class="string">"秋高气爽"</span>),</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>,<span class="string">"冰天雪地"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SPRING,春天,春暖花开</span><br><span class="line">SUMMER,夏天,夏日炎炎</span><br><span class="line">AUTUMN,秋天,秋高气爽</span><br><span class="line">WINTER,冬天,冰天雪地</span><br><span class="line">****************</span><br><span class="line">NEW</span><br><span class="line">RUNNABLE</span><br><span class="line">BLOCKED</span><br><span class="line">WAITING</span><br><span class="line">TIMED_WAITING</span><br><span class="line">TERMINATED</span><br><span class="line">****************</span><br><span class="line">SUMMER,夏天,夏日炎炎</span><br></pre></td></tr></table></figure><p><strong>其它方法：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200811181826.png" alt="image-20200811181825664"></p><h2 id="6-枚举类实现接口"><a href="#6-枚举类实现接口" class="headerlink" title="6. 枚举类实现接口"></a>6. 枚举类实现接口</h2><ul><li>和普通 Java 类一样，枚举类可以实现一个或多个接口</li><li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只要统一实现该方法即可。</li><li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式,则可以让每个枚举值分别来实现该方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1[] s=Season1.values();</span><br><span class="line">        <span class="keyword">for</span>(Season1 e :s )&#123;</span><br><span class="line">            System.out.print(e.toString()+<span class="string">","</span>+e.getSeasonName()+<span class="string">","</span>+e.getSeasonDesc()+<span class="string">","</span>);</span><br><span class="line">            e.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用enum关键字枚举类</span></span><br><span class="line"><span class="keyword">enum</span> Season1 implements Info&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span></span><br><span class="line">    <span class="comment">//可以给每一个枚举类对象都实现一个show抽象方法</span></span><br><span class="line">    SPRING(<span class="string">"春天"</span>,<span class="string">"春暖花开"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"春天在哪里？"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>,<span class="string">"夏日炎炎"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"夏天好热！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>,<span class="string">"秋高气爽"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"秋天不回来"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>,<span class="string">"冰天雪地"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"大约在冬季"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    公共的枚举类对象方法</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void show() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println("这是一个季节");</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SPRING,春天,春暖花开,春天在哪里？</span><br><span class="line">SUMMER,夏天,夏日炎炎,夏天好热！</span><br><span class="line">AUTUMN,秋天,秋高气爽,秋天不回来</span><br><span class="line">WINTER,冬天,冰天雪地,大约在冬季</span><br></pre></td></tr></table></figure><h1 id="二、注解-Annotation"><a href="#二、注解-Annotation" class="headerlink" title="二、注解(Annotation)"></a>二、注解(Annotation)</h1><h2 id="1-注解概述"><a href="#1-注解概述" class="headerlink" title="1. 注解概述"></a>1. 注解概述</h2><ul><li>从 JDK 5.0 开始, Java 增加了对元数据(MetaData) 的支持, 也就是<code>Annotation(注解)</code></li><li><code>Annotation 其实就是代码里的 特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。</code></li><li>通过使用Annotation, 程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。<code>代码分析工具、开发工具和部署工具</code>可以通过这些补充信息<code>进行验证或者进行部署。</code></li><li>Annotation 可以像修饰符一样被使用, 可用于<code>修饰包, 类, 构造器, 法, 成员变量, 参数, 局部变量的声明,</code>这些信息被保存在 Annotation的 <code>“name=value”</code>对中。</li><li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。</li><li>在JavaEE/Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。</li><li>未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的<br>Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说：<code>框架 = 注解 + 反射 + 设计模式。</code></li><li>使用 Annotation 时要在其前面增加<code>@</code>符号, 并 <code>把该 Annotation 当成一个修饰符使用</code>。用于修饰它支持的程序元素。</li></ul><h2 id="2-常见的注解示例"><a href="#2-常见的注解示例" class="headerlink" title="2. 常见的注解示例"></a>2. 常见的注解示例</h2><p><strong>示例一：生成文档相关的注解</strong></p><p><code>@author</code> 标明开发该类模块的作者，多个作者之间使用,分割<br><code>@version</code>标明该类模块的版本<br><code>@see</code> 参考转向，也就是相关主题<br><code>@since</code> 从哪个版本开始增加的<br><code>@param</code>对方法中某参数的说明，如果没有参数就不能写<br><code>@return</code> 对方法返回值的说明，如果方法的返回值类型是void就不能写<br><code>@exception</code> 对方法可能抛出的异常进行说明 ，如果方法没有用throws显式抛出的异常就不能写<br>其中：</p><ul><li>@param @return 和 @exception 这三个标记都是只用于方法的。</li><li>@param的格式要求：@param 形参名 形参类型 形参说明</li><li>@return 的格式要求：@return 返回值类型 返回值说明</li><li>@exception的格式要求：@exception 异常类型 异常说明</li><li>@param和@exception可以并列多个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 王xx</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> Math.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavadocTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 程序的主方法，程序的入口</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args String[] 命令行参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 求圆面积的方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> radius double 半径值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> double 圆的面积</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> radius)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例二： 在编译时进行格式检查(JDK 内置的三个基本注解)</strong></p><ul><li><code>@Override:</code> 限定<code>重写</code>父类方法, 该注解只能用于方法</li><li><code>@Deprecated:</code>用于表示所修饰的元素(类, 方法等)已<code>过时</code>。通常是因为所修饰的结构危险或存在更好的选择</li><li><code>@SuppressWarnings: 抑制编译器警告;</code>（如果一些类，属性，方法没有使用，则编译器会警告，友情提示警告你写的代码浪费空间资源）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//泛型注解</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unused"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"过时的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"重写的toString方法()"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例三： 跟踪 代码依赖性，实现替代配置文件功能</strong></p><ul><li>Servlet3.0提供了注解(annotation),使得不再需要在web.xml文件中进行Servlet的部署。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200811204450.png" alt="image-20200811204449062"></p><ul><li>spring框架中关于“事务”的管理</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200811204530.png" alt="image-20200811204530448"></p><h2 id="3-如何自定义注解"><a href="#3-如何自定义注解" class="headerlink" title="3. 如何自定义注解"></a>3. 如何自定义注解</h2><ul><li>定义新的 Annotation 类型使用<code>@interface</code>关键字</li><li>自定义注解自动继承了<code>java.lang.annotation.Annotation 接口</code></li><li><code>Annotation 的成员变量在 Annotation 定义中以无参数方法的形式来声明</code>。其方法名和返回值定义了该成员的名字和类型。我们称为配置参数。类型只能是八种基本数据类型、<code>String 类型 、Class 类型 、enum 类型 、Annotation 类型 、以上所有类型的 数组。</code></li><li>可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始值可使用<code>default</code>关键字</li><li>如果只有一个参数成员，建议使用 <code>参数名为value</code></li><li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认值。格式是“参数名 = 参数值”，如果只有一个参数成员，且名称为value，可以省略“value=”</li><li>没有成员定义的 Annotation 称为<code>标记</code>; 包含成员变量的 Annotation 称为元数据 Annotation</li><li>注意：<code>自定义注解必须配上注解的信息处理流程才有意义。</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="comment">//自定义注解必须配上注解的信息处理流程(使用反射)才有意义。</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "hello"</span>;<span class="comment">//指定成员变量的初始值可使用` default `关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用自定义注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation</span>(value=<span class="string">"hi"</span>)<span class="comment">//注解没有default，就需要在使用时初始化值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-JDK-中的元注解"><a href="#4-JDK-中的元注解" class="headerlink" title="4. JDK 中的元注解"></a>4. JDK 中的元注解</h2><ul><li><p>JDK 的元 Annotation 用于修饰其他 Annotation 定义，对现有注解进行解释说明的注解叫元注解</p></li><li><p>JDK5.0提供了4个标准的meta-annotation类型，分别是：</p><ol><li>Retention</li><li>Target</li><li>Documente</li><li>Inherited</li></ol></li></ul><p><code>元数据：</code>对现有数据进行解释说明的数据叫元数据，比如String name=”BitHachi”; “BitHachi”是现有数据，String name是元数据。</p><p><font color=red size=5>@Retention</font></p><p>@Retention: 只能用于修饰一个 Annotation 定义, 用于指定该 Annotation 的生命周期, @Rentention 包含一个 RetentionPolicy 类型的成员变量, 使用@Rentention 时必须为该 value 成员变量指定值:</p><ul><li>RetentionPolicy.SOURCE:在源文件中有效（即源文件保留），编译器直接丢弃这种策略的注释</li><li>RetentionPolicy.CLASS:在class文件中有效（即class保留） ， 当运行 Java 程序时, JVM不会保留注解。 这是默认值</li><li>RetentionPolicy.RUNTIME:在运行时有效（即运行时保留），当运行 Java 程序时, JVM 会保留注释。程序 可以通过反射获取</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200812192719.png" alt="image-20200812192716508"></p><p><font color=red size=5>@Target</font></p><ul><li>@Target: 用于修饰 Annotation 定义, 用于指定被修饰的 Annotation 能用于修饰哪些程序元素。</li><li>@Target 也包含一个名为 value 的成员变量,这个成员变量是ElementType数组。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200812193200.png" alt="image-20200812193200105"></p><p><font color=red size=5>@Documented</font></p><ul><li>@Documented: 用于指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。</li><li><code>定义为Documented的注解必须设置Retention值为RUNTIME。</code></li></ul><p><font color=red size=5>@Inherited</font></p><ul><li>@Inherited: 被它修饰的 Annotation 将具有<code>继承性</code>。如果某个类使用了被@Inherited 修饰的 Annotation, 则其子类将自动具有该注解。</li><li>比如：如果把标有@Inherited注解的自定义的注解标注在类级别上，子类则可以继承父类类级别的注解</li><li>实际应用中，使用较少</li></ul><p>接下来介绍利用反射获取注解信息，然后举一个例子将以上4个元注解一起演示一遍</p><h2 id="5-利用反射获取注解信息"><a href="#5-利用反射获取注解信息" class="headerlink" title="5. 利用反射获取注解信息"></a>5. 利用反射获取注解信息</h2><ul><li>JDK 5.0 在 java.lang.reflect 包下新增了 AnnotatedElement 接口, 该接口代表程序中可以接受注解的程序元素</li><li>当一个 Annotation 类型被定义为运行时 Annotation 后, 该注解才是运行时可见, 当 class 文件被载入时保存在 class 文件中的 Annotation 才会被虚拟机读取</li><li>程序可以调用 AnnotatedElement对象的如下方法来访问 Annotation 信息</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200812195452.png" alt="image-20200812195451860"></p><p>元注解与反射获取注解信息示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"><span class="comment">//指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//子类可以继承父类类级别的Annotation</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//指定该 Annotation 的生命周期</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">//指定被修饰的 Annotation 能用于修饰哪些程序元素</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class clazz = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Annotation[] annotations = clazz.getAnnotations();<span class="comment">//获取Student的注解信息数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; annotations.length;i++)&#123;</span><br><span class="line">            System.out.println(annotations[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Random_name.sgm.my_Annotation.MyAnnotation(value=hello)</span><br></pre></td></tr></table></figure><h2 id="6-JDK8-中注解的新特性"><a href="#6-JDK8-中注解的新特性" class="headerlink" title="6. JDK8 中注解的新特性"></a>6. JDK8 中注解的新特性</h2><p>Java 8对注解处理提供了两点改进：<code>可重复的注解及可用于类型的注解</code>。此外，反射也得到了加强，在Java8中能够得到方法参数的名称。这会简化标注在方法参数上的注解。</p><p><font color=red size=5>可重复注解</font></p><p><strong>可重复注解示例：</strong></p><ol><li>在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class</li><li>MyAnnotations的@Target可以是MyAnnotation子集或完全一样。</li><li>MyAnnotations的@Retention必须和MyAnnotation完全一样。</li><li>其它元注解，MyAnnotations也要和MyAnnotation保持一样</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//子类可以继承父类类级别的Annotation</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//指定该 Annotation 的生命周期</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">//指定被修饰的 Annotation 能用于修饰哪些程序元素</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Repeatable</span>(MyAnnotations<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">MyAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//子类可以继承父类类级别的Annotation</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//指定该 Annotation 的生命周期</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">//指定被修饰的 Annotation 能用于修饰哪些程序元素</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotations &#123;</span><br><span class="line">    MyAnnotation[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red size=5>类型注解</font></p><ul><li>JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个：<br><code>TYPE_PARAMETER,TYPE_USE。</code></li><li>在Java 8之前，注解只能是在声明的地方所使用，Java8开始，注解可以应用在任何地方。</li><li><code>ElementType.TYPE_PARAMETER</code> 表示该注解能写在类型变量的声明语句中（如：泛型声明）。</li><li><code>ElementType.TYPE_USE</code> 表示该注解能写在使用类型的任何语句中</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//子类可以继承父类类级别的Annotation</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//指定该 Annotation 的生命周期</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">//指定被修饰的 Annotation 能用于修饰哪些程序元素</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Repeatable</span>(MyAnnotations<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">MyAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该注解能写在类型变量的声明语句中（如：泛型声明 T ）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;@<span class="title">MyAnnotation</span> <span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">throws</span> @MyAnnotation RuntimeException</span>&#123;</span><br><span class="line"><span class="comment">//该注解能写在使用类型的任何语句中</span></span><br><span class="line">        ArrayList&lt;<span class="meta">@MyAnnotation</span> String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//该注解能写在使用类型的任何语句中</span></span><br><span class="line">        <span class="keyword">int</span> num = (<span class="meta">@MyAnnotation</span> <span class="keyword">int</span>) <span class="number">10L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
            <tag> 枚举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常: Exception </title>
      <link href="/posts/23a3bd72.html"/>
      <url>/posts/23a3bd72.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是异常？"><a href="#1-什么是异常？" class="headerlink" title="1.什么是异常？"></a>1.什么是异常？</h2><p>在使用计算机语言进行项目开发的过程中，即使程序员把代码写得 <code>尽善尽美</code>，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：客户输入数据的格式，读取文件是否存在，网络是否始终保持通畅,，栈溢出，堆溢出等等。这些错误就叫做异常。</p><p><code>异常</code>：在Java语言中，将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)</p><h2 id="2-异常的分类"><a href="#2-异常的分类" class="headerlink" title="2.异常的分类"></a>2.异常的分类</h2><h3 id="2-1-Error与Exception"><a href="#2-1-Error与Exception" class="headerlink" title="2.1 Error与Exception"></a>2.1 Error与Exception</h3><p><strong>Java程序在执行过程中所发生的异常事件可分为两类：</strong></p><ul><li><p><code>Error</code> ：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError、VirtualMachineError、OOM（OutOfMemoryError）、ThreadDeath。一般不编写针对性的代码进行处理。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.栈溢出：java.lang.StackOverflowError</span></span><br><span class="line"><span class="comment">//main(args);</span></span><br><span class="line"><span class="comment">//2.堆溢出：java.lang.OutOfMemoryError </span></span><br><span class="line">Integer[] arr = <span class="keyword">new</span> Integer[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Exception</code>: 因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如：</p><ol><li>空指针访问</li><li>试图读取不存在的文件</li><li>网络连接中断</li><li>数组角标越界</li></ol></li></ul><p><strong>Exception能被程序本身处理，Error是无法处理</strong></p><p><strong>对于<code>Error</code>和<code>Exception</code>，一般有两种 解决方法：</strong></p><ol><li>一是遇到错误就终止程序的运行。</li><li>另一种方法是由程序员在编写程序时，就考虑到错误的检测、错误消息的提示，以及错误的处理。</li></ol><blockquote><p>捕获错误最理想的是在 编译期间，但有的错误只有在 运行时才会发生。<br>比如：除数为0，数组下标越界等</p></blockquote><h3 id="2-2-编译时与运行时异常-受检异常与非受检异常"><a href="#2-2-编译时与运行时异常-受检异常与非受检异常" class="headerlink" title="2.2 编译时与运行时异常(受检异常与非受检异常)"></a>2.2 编译时与运行时异常(受检异常与非受检异常)</h3><p>我们将<code>Error</code>和<code>Exception</code>两种异常按<code>编译时</code>与<code>运行时</code>再细分，可分为<code>编译时异常</code>和<code>运行时异常</code>，<code>编译时异常可称为（checked）受检异常，运行时异常可称为（unchecked）非受检异常</code>。</p><ol><li>运行时异常</li></ol><ul><li><code>指编译器不要求强制处置的异常</code>。一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常。<code>java.lang.RuntimeException类及它的子类都是运行时异常。</code></li><li>对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。</li></ul><ol start="2"><li>编译时异常</li></ol><ul><li><p><code>指编译器要求必须处置的异常</code>。即程序在运行时由于外界因素造成的一般性异常。<code>编译器要求Java程序必须捕获或声明所有编译时异常。</code></p></li><li><p>对于这类异常，如果程序不处理，可能会带来意想不到的结果。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809125007.png" alt="image-20200809125007865"></p></li></ul><h2 id="3-常见的具体异常"><a href="#3-常见的具体异常" class="headerlink" title="3.常见的具体异常"></a>3.常见的具体异常</h2><p><strong>以下举几个常见的异常，可以在main方法中自行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/************  以下是编译时异常  ************/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);<span class="comment">//当前目录下无hello.txt文件就会报异常</span></span><br><span class="line"><span class="comment">//FileNotFoundException </span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> data = fis.read();</span><br><span class="line"><span class="keyword">while</span>(data != -<span class="number">1</span>)&#123;</span><br><span class="line">System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">data = fis.read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/************  以下是运行时异常  ************/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ArithmeticException </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        System.out.println(a / b);<span class="comment">//除数不能为0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//InputMismatchException </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> score = scanner.nextInt();<span class="comment">//输入不匹配异常，假设输入的是字符串</span></span><br><span class="line">        System.out.println(score);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NumberFormatException </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"123"</span>;</span><br><span class="line">        str = <span class="string">"abc"</span>;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str);<span class="comment">//数据格式转换异常，字符串为非数字不能抓换为数字</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ClassCastException</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> Date();</span><br><span class="line">        String str = (String)obj;<span class="comment">//类的强制类型转换异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IndexOutOfBoundsException  索引越界异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//ArrayIndexOutOfBoundsException </span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">System.out.println(arr[<span class="number">10</span>]);<span class="comment">//数组索引越界异常</span></span><br><span class="line">        <span class="comment">//StringIndexOutOfBoundsException</span></span><br><span class="line">        String str = <span class="string">"abc"</span>;</span><br><span class="line">        System.out.println(str.charAt(<span class="number">3</span>));<span class="comment">//字符串索引越界异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NullPointerException</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">        String str = <span class="string">"abc"</span>;</span><br><span class="line">        str = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(str.charAt(<span class="number">0</span>));<span class="comment">//str为null,空指针异常</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-如何处理异常？"><a href="#4-如何处理异常？" class="headerlink" title="4.如何处理异常？"></a>4.如何处理异常？</h2><ul><li>在编写程序时，经常要在可能出现错误的地方加上检测的代码，如进行x/y运算时，要检测分母为0，数据为空，输入的不是数据而是字符等。过多的if-else分支会导致程序的代码加长、臃肿，可读性差。因此采用异常处理机制。</li><li>Java采用的异常处理机制，是将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。</li><li>Java异常处理的方式有一下几种：<ol><li>代码中捕获异常：try-catch-finally</li><li>方法后面声明异常：throws + 异常类型</li><li>手动抛出异常：throw +异常对象</li><li>自定义异常</li></ol></li></ul><h3 id="4-1-异常的处理机制"><a href="#4-1-异常的处理机制" class="headerlink" title="4.1 异常的处理机制"></a>4.1 异常的处理机制</h3><p><strong>异常的处理：</strong><code>抓抛模型</code></p><ul><li><p><code>&quot;抛&quot;：</code>程序的执行过程中如出现异常，会生成一个异常类对象，该异常对象将被抛给Java运行时系统，这个过程称为抛出(throw)异常。一旦抛出对象以后，其后的代码就不再执行。<br><strong>关于异常对象的产生：</strong><br>① 由虚拟机自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出</p><p>② 由开发人员 手动创建，手动的生成一个异常对象，并抛出（throw）</p></li><li><p><code>&quot;抓&quot;：</code>可以理解为异常的处理方式：① try-catch-finally  ② throws+ 异常类型</p></li></ul><p><strong>异常的抛出机制：</strong></p><ul><li>如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。这一过程称为<code>捕获(catch)异常</code>。</li><li>如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。</li><li>程序员通常只能处理Exception，而对Error无能为力。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809144453.png" alt="image-20200809144453593"></p><p><strong>接下来举几个例子，具体的用java提供的方法来处理一些异常。</strong></p><h3 id="4-2-代码中捕获异常：try-catch-finally"><a href="#4-2-代码中捕获异常：try-catch-finally" class="headerlink" title="4.2  代码中捕获异常：try-catch-finally"></a>4.2  代码中捕获异常：try-catch-finally</h3><p>try-catch-finally语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">...... <span class="comment">//可能产生异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName1 e )&#123;</span><br><span class="line">...... <span class="comment">//当产生ExceptionName1型异常时的处置措施</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName2 e )&#123;</span><br><span class="line">...... <span class="comment">//当产生ExceptionName2型异常时的处置措施</span></span><br><span class="line">&#125;</span><br><span class="line">[ <span class="keyword">finally</span>&#123;</span><br><span class="line">...... <span class="comment">//无论是否发生异常， 都无条件执行的语句 ***finally可要可不要***</span></span><br><span class="line">&#125; ]</span><br></pre></td></tr></table></figure><p><strong>try：</strong></p><p>捕获异常的第一步是用try{…}语句块选定捕获异常的范围，将可能出现异常的代码放在try语句块中。</p><p><strong>catch (Exceptiontype e)：</strong></p><p>在catch语句块中是对<code>异常对象</code>进行处理的代码。每个try语句块可以伴随<code>一个或多个catch语句</code>，用于<code>处理</code>可能产生的<code>不同类型的异常对象</code>。</p><p><strong>如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类作为catch的参数。</strong></p><p>比 如 ： 可 以 用 ArithmeticException 类 作 为 参 数 的 地 方 ， 就 可 以 用RuntimeException类作为参数，或者用所有异常的父类Exception类作为参数。但不能是与ArithmeticException类无关的异常，如NullPointerException（catch中的语句将不会执行）。</p><p>我们可以在cath中使用异常对象的一些方法来捕获异常的有关信息。<br>下面的是 Throwable 类的主要方法:</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809145511.png" alt="image-20200809145511274"></p><p><strong>finally：</strong></p><ul><li>捕获异常的最后一步是通过finally语句为异常处理提供一个统一的出口，使得在控制流转到程序的其它部分以前，能够对程序的状态作统一的管理。像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。</li><li>不论在try代码块中是否发生了异常事件，catch语句是否执行，catch语句是否有异常，catch语句中是否有return，finally块中的语句都会被执行。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809145948.png" alt="image-20200809145948166"></p><ul><li>finally语句和catch语句是任选的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: sdsd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-08-09 16:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"进入方法A"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"制造异常"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"用A方法的finally"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"进入方法B"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"调用B方法的finally"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodA();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        methodB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">进入方法A</span><br><span class="line">用A方法的finally</span><br><span class="line">制造异常</span><br><span class="line">进入方法B</span><br><span class="line">调用B方法的finally</span><br></pre></td></tr></table></figure><p>下面举一个try-catch-finally的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"123"</span>;</span><br><span class="line">        str = <span class="string">"abc"</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"-----1-------"</span>);</span><br><span class="line">            num = Integer.parseInt(str);</span><br><span class="line">            str=<span class="keyword">null</span>;</span><br><span class="line">            System.out.println(<span class="string">"-----2-------"</span>);</span><br><span class="line">            System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line">System.out.println(<span class="string">"出现数值转换异常了，不要着急...."</span>);</span><br><span class="line">System.out.println(<span class="string">"e.getMessage()="</span>+e.getMessage());</span><br><span class="line">System.out.println(e.getMessage().toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"出现空指针异常了，不要着急...."</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"出现异常了，不要着急...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"num="</span>+num);</span><br><span class="line">        System.out.println(<span class="string">"-----3--------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809151815.png" alt="image-20200809151815472"></p><ul><li>异常是<code>RuntimeException类或是它的子类</code>，这些类的异常的特点是：即使没有使用try和catch捕获，<code>Java自己也能捕获</code>，并且编译通过( 但<code>运行时会发生异常使得程序运行终止</code> )。</li><li>如果抛出的异常是IOException等类型的<code>编译时时异常</code>，则<code>必须捕获</code>，否则编译错误。也就是说，<code>我们必须处理编译时异常，将异常进行捕捉，转化为运行时异常</code></li></ul><h3 id="4-3-方法中声明抛出异常：throws-异常类型"><a href="#4-3-方法中声明抛出异常：throws-异常类型" class="headerlink" title="4.3 方法中声明抛出异常：throws + 异常类型"></a>4.3 方法中声明抛出异常：throws + 异常类型</h3><ul><li>如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应<code>显示地声明抛出异常</code>，表明<code>该方法将不对这些异常进行处理，而由该方法的调用者负责处理。</code></li><li>在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类异常类型 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThrowsTest t = <span class="keyword">new</span> ThrowsTest();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.readFile();<span class="comment">//方法的调用者负责处理</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;<span class="comment">//该方法将不对这些异常进行处理，而由该方法的调用者负责处理。</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"atguigushk.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> b;</span><br><span class="line">        b = in.read();</span><br><span class="line">        <span class="keyword">while</span> (b != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) b);</span><br><span class="line">            b = in.read();</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>重写方法不能抛出比被重写方法范围更大的异常类型</code>。在多态的情况下，对methodA()方法的调用—异常的捕获按父类声明的异常处理。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B2</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span>  Exception </span>&#123; <span class="comment">// 报错。重写方法不能抛出比被重写方法范围更大的异常类型</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>开发中如何选择使用try-catch-finally 还是使用throws？</strong></p><ol><li><p>如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            method2();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        method3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException,IOException</span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"hello1.txt"</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> data = fis.read();</span><br><span class="line">        <span class="keyword">while</span>(data != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">            data = fis.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"hahaha!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-4-手动抛出异常：throw-异常对象"><a href="#4-4-手动抛出异常：throw-异常对象" class="headerlink" title="4.4 手动抛出异常：throw + 异常对象"></a>4.4 手动抛出异常：throw + 异常对象</h3><ul><li><p>Java异常类对象除在程序执行过程中出现异常时由系统自动生成并抛出，也可根据需要 使用人工 创建并抛出 。</p></li><li><p>首先要生成异常类对象，然后通过throw语句实现抛出操作(提交给Java运行环境)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IOException e = <span class="keyword">new</span> IOException();</span><br><span class="line"><span class="keyword">throw</span> e;</span><br></pre></td></tr></table></figure></li><li><p>可以抛出的异常必须是Throwable或其子类的实例。下面的语句在编译时将会产生语法错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> String(<span class="string">"want to throw"</span>);<span class="comment">//Error</span></span><br></pre></td></tr></table></figure></li><li><p>可以在每个异常对象构造器中填写要打印的<code>异常信息</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"测试手动抛出异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-5-自定义异常类"><a href="#4-5-自定义异常类" class="headerlink" title="4.5 自定义异常类"></a>4.5 自定义异常类</h3><ul><li>一般地，用户自定义异常类都是<code>RuntimeException</code>的子类。</li><li>自定义异常类通常需要编写几个<code>重载的构造器</code>。</li><li>自定义异常需要提供<code>serialVersionUID</code></li><li>自定义的异常通过<code>throw抛出</code>。</li><li>自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如何自定义异常类？</span></span><br><span class="line"><span class="comment"> * 1. 继承于现有的异常结构：RuntimeException 、Exception</span></span><br><span class="line"><span class="comment"> * 2. 提供全局常量：serialVersionUID  //标明身份唯一性</span></span><br><span class="line"><span class="comment"> * 3. 提供重载的构造器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7034897193246939L</span>;<span class="comment">//标明身份唯一性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: asdsa</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-08-09 16:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            s.regist(-<span class="number">1001</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("您输入的数据非法！");</span></span><br><span class="line">            <span class="comment">//手动抛出异常对象</span></span><br><span class="line"><span class="comment">//throw new RuntimeException("您输入的数据非法！");</span></span><br><span class="line"><span class="comment">//throw new Exception("您输入的数据非法！");</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"不能输入负数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student [id="</span> + id + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不能输入负数</span><br></pre></td></tr></table></figure><h2 id="5-一张图概览关键字"><a href="#5-一张图概览关键字" class="headerlink" title="5.一张图概览关键字"></a>5.一张图概览关键字</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809163215.png" alt="image-20200809163215119"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类（abstract）与接口（interface）</title>
      <link href="/posts/77de2e90.html"/>
      <url>/posts/77de2e90.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是抽象类？"><a href="#1-什么是抽象类？" class="headerlink" title="1. 什么是抽象类？"></a>1. 什么是抽象类？</h2><p>随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫做<code>抽象类</code>。</p><p>抽象类的出现使面向对象更加规范，比如人是一个抽象的概念，没有具体的对象，我们应该将其抽象成一个类，它无法生成对象实例，却拥有一些人通用的属性和方法。有些方法人类都是一样的行为，比如说都是用嘴吃饭，用耳朵听声音等；但有些则不是，比如工作，不同的岗位人们有不同的工作行为，那么这些行为的具体实现在子类完成，Person父类只负责定义。</p><h2 id="2-抽象类与抽象方法的特点"><a href="#2-抽象类与抽象方法的特点" class="headerlink" title="2. 抽象类与抽象方法的特点"></a>2. 抽象类与抽象方法的特点</h2><ul><li>用abstract关键字来修饰一个类，这个类叫做抽象类。</li><li>抽象类可以有构造器，可以使用this关键字，子类可以使用super关键字</li><li>用abstract来修饰一个方法，该方法叫做抽象方法。抽象方法只能声明，具体实现应该交给子类完成<br>抽象方法：只有方法的声明，没有方法的实现。以分号结束：<br>比如：public abstract void talk();</li><li>抽象类中不一定包含抽象方法,但是含有抽象方法的类必须被声明为抽象类。</li><li>抽象类不能被实例化。抽象类是用来被继承的，抽象类的子类必须定义父类的抽象方法，并提供方法体。若没有定义全部的抽象方法，仍为抽象类。</li><li>不能用abstract修饰变量、代码块、构造器；</li><li>不能用abstract修饰私有(private)方法、静态(static)方法、final的方法、final的类</li><li>抽象类可以引用非抽象类的子类对象，并调用子类实现抽象类定义的方法和抽象类本身不是抽象的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Random_name.sgm.abstract_interface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestMain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-08-08 12:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> aa=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String str=<span class="string">"可以有static属性"</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"可以有代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    A(<span class="keyword">int</span> aa)&#123;</span><br><span class="line">        <span class="keyword">this</span>.aa=aa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A类中定义的m2方法"</span>);</span><br><span class="line">        System.out.println(<span class="string">"A类中的属性a="</span>+<span class="keyword">this</span>.aa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bb=<span class="number">10</span>;</span><br><span class="line">    B(<span class="keyword">int</span> aa,<span class="keyword">int</span> bb)&#123;</span><br><span class="line">        <span class="keyword">super</span>(aa);</span><br><span class="line">        <span class="keyword">this</span>.bb=<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B类中定义的m1方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B类中重写的的m2方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.m2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> B(<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">        a.m1();</span><br><span class="line">        a.m2();</span><br><span class="line">        B b=<span class="keyword">new</span> B(<span class="number">30</span>,<span class="number">30</span>);</span><br><span class="line">        b.m3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以有代码块</span><br><span class="line">B类中定义的m1方法</span><br><span class="line">B类中重写的的m2方法</span><br><span class="line">A类中定义的m2方法</span><br><span class="line">A类中的属性a=<span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="3-抽象类的应用"><a href="#3-抽象类的应用" class="headerlink" title="3. 抽象类的应用"></a>3. 抽象类的应用</h2><p>抽象类的应用与多态应用相关联。</p><p>抽象类体现的是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</p><p><strong>抽象类解决的问题：</strong></p><ol><li>当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。</li><li>在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种<code>模板模式</code>。</li></ol><p>模板方法设计模式是编程中经常用得到的模式。各个框架、类库中都有他的影子，比如常见的有：</p><ol><li>数据库访问的封装</li><li>Junit单元测试</li><li>JavaWeb的Servlet中关于doGet/doPost方法调用</li><li>Hibernate中模板程序</li><li>Spring中JDBCTemlate、HibernateTemplate等</li></ol><h2 id="4-什么是接口？"><a href="#4-什么是接口？" class="headerlink" title="4. 什么是接口？"></a>4. 什么是接口？</h2><ul><li>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。</li><li>有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。</li><li>有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。</li><li>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则必须能…”的思想。继承是一个”是不是”的关系，而接口实现则是 “能不能”的关系。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200808185924.png" alt="image-20200808185924554"></p><h2 id="5-接口的特点"><a href="#5-接口的特点" class="headerlink" title="5.接口的特点"></a>5.接口的特点</h2><ul><li>接口(interface)是抽象方法和全局常量值定义的集合(jdk8之前)。jdk8之后可以定义static和default的方法和方法体</li><li>接口的特点：<ol><li>用interface来定义。</li><li><code>接口中没有构造器</code>。</li><li>接口不能用于实例化对象。</li><li><code>接口中不能拥有代码块</code></li><li>接口中的所有成员变量都默认是由<code>public static final</code>修饰的。</li><li>接口中的所有抽象方法都默认是由<code>public abstract</code>修饰的。</li><li>一个类可以实现多个接口，接口也可以继承（extends）其它一个或多个接口。</li><li>定义Java类的语法格式：先写extends，后写implements<br>class SubClass <code>extends</code> SuperClass <code>implements</code> InterfaceA{ }</li><li>实现接口的类中必须提供接口中所有方法的具体实现内容，方可实例化。否则，仍为抽象类。</li><li>接口的主要用途就是被实现类实现。（面向接口编程）</li><li>与继承关系类似，接口与实现类之间存在多态性</li><li>接口和类是并列关系，或者可以理解为一种特殊的类。从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义(JDK7.0及之前)，而没有变量和方法的实现。</li></ol></li></ul><p><strong>接口的定义举例：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200808190415.png" alt="image-20200808190415337"></p><p><strong>JDK8中关于接口的改进:</strong></p><ul><li><p>Java 8中，你可以为接口添加静态方法和默认方法。从技术角度来说，这是完全合法的，只是它看起来违反了接口作为一个抽象定义的理念。</p></li><li><p><code>静态方法</code>：使用 static 关键字修饰。可以通过接口直接调用静态方法，并执行其方法体。我们经常在相互一起使用的类中使用静态方法。可以在标准库中找到像Collection/Collections或者Path/Paths这样成对的接口和类。</p></li><li><p><code>默认方法</code>：默认方法使用 default 关键字修饰。可以通过实现类对象来调用。我们在已有的接口中提供新方法的同时，还保持了与旧版本代码的兼容性。比如：java 8 API中对Collection、List、Comparator等接口提供了丰富的默认方法。</p><ol><li>若一个接口中定义了一个默认方法，而另外一个接口中也定义了一个同名同参数的方法（不管此方法是否是默认方法），在实现类同时实现了这两个接口时，会出现： ·接口冲突·。<br><code>解决办法</code>：实现类必须覆盖接口中同名同参数的方法，来解决冲突。</li><li>若一个接口中定义了一个默认方法，实现其接口的类的父类中也定义了一个同名同参数的非抽象方法，则不会出现冲突问题。因为此时遵守： <code>类优先原则</code>。接口中具有相同名称和参数的默认方法会被忽略。</li></ol></li><li><p><code>接口中静态方法和默认方法必须给出方法体，不能只定义</code></p></li></ul><p><strong>根据接口的特点，综合举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/************  一个类可以实现多个无关的接口  ************/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Runner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;<span class="comment">//jdk8之前只能声明非static和defult的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;<span class="comment">//jdk8之后可以定义static和defult的方法，不能声明，必须给出方法体</span></span><br><span class="line">        System.out.println(<span class="string">"interface Runner static fun2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.a);<span class="comment">//可以使用this,但是不能更改其值，因为默认缺省public static final</span></span><br><span class="line">        System.out.println(<span class="string">"interface Runner default fun3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Swimmer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">swim</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"interface Swimmer default fun3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">skip</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"interface Swimmer default skip"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">skip</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"class Creator skip"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Creator</span> <span class="keyword">implements</span> <span class="title">Runner</span> ,<span class="title">Swimmer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"swim"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.1</span>d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"class Man  fun3"</span>);<span class="comment">//类覆盖两个接口中默认的方法fun3()</span></span><br><span class="line">        Runner.<span class="keyword">super</span>.fun3();<span class="comment">//调用原接口中默认的方法</span></span><br><span class="line">        Swimmer.<span class="keyword">super</span>.fun3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        Man m = <span class="keyword">new</span> Man();</span><br><span class="line">        t.m1(m);<span class="comment">//接口多态引用，与继承关系类似，接口与实现类之间存在多态性</span></span><br><span class="line">        t.m2(m);</span><br><span class="line">        t.m3(m);</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        Runner.fun2();</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        System.out.println(Runner.a);</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        m.fun3();</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        m.skip();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">(Runner f)</span> </span>&#123;<span class="comment">//接口多态引用</span></span><br><span class="line">        f.run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">(Swimmer s)</span> </span>&#123;<span class="comment">//接口多态引用</span></span><br><span class="line">        s.swim();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">(Creator a)</span> </span>&#123;<span class="comment">//接口多态引用</span></span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">run</span><br><span class="line">swim</span><br><span class="line">eat</span><br><span class="line">-----------</span><br><span class="line">interface Runner static fun2</span><br><span class="line">-----------</span><br><span class="line"><span class="number">10</span></span><br><span class="line">-----------</span><br><span class="line">class Man  fun3</span><br><span class="line"><span class="number">10</span></span><br><span class="line">interface Runner default fun3</span><br><span class="line">interface Swimmer default fun3</span><br><span class="line">-----------</span><br><span class="line">class Creator skip</span><br></pre></td></tr></table></figure><h2 id="6-接口面试题"><a href="#6-接口面试题" class="headerlink" title="6.接口面试题"></a>6.接口面试题</h2><p><strong>题一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(x);<span class="comment">//Error</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.x);<span class="comment">//1</span></span><br><span class="line">        System.out.println(A.x);<span class="comment">//0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().pX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-抽象类与接口的对比"><a href="#7-抽象类与接口的对比" class="headerlink" title="7.抽象类与接口的对比"></a>7.抽象类与接口的对比</h2><p> <img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200808195958.png" alt="image-20200808195958458"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽象类 </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static &amp; main &amp; final</title>
      <link href="/posts/725e9ca.html"/>
      <url>/posts/725e9ca.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><ul><li>本篇文章主要介绍Java语言中的两大关键字satic和final，还有main方法与static的<code>渊源</code>。</li><li>static的中文意思是静态的,final的中文意思是最终的，不可更改的。</li></ul><p><strong>我们将从以下三大主线讲解：</strong></p><ol><li>static 修饰属性、方法、代码块、内部类</li><li>main 方法与 static 的渊源</li><li>final 修饰类、变量和方法</li></ol><h2 id="2-简介JVM内存模型的虚拟机栈，堆和方法区"><a href="#2-简介JVM内存模型的虚拟机栈，堆和方法区" class="headerlink" title="2. 简介JVM内存模型的虚拟机栈，堆和方法区"></a>2. 简介JVM内存模型的虚拟机栈，堆和方法区</h2><p>这里只介绍<code>虚拟机栈，堆和方法区</code>,因为这篇文章需要使用到。</p><ul><li><p>通常所说的<code>栈(Stack)</code> ，是指<code>虚拟机栈</code>。虚拟机栈用于<code>存储局部变量</code>等。局部变量表存放了编译期可知长度的各种基本数据类型(boolean、byte、char、short、int、float、long、double )，对象引用( reference类型，它不等同于对象本身，是对象在堆内存的首地址)。方法执行完， 自动释放，从栈中弹出。</p></li><li><p><code>堆(Heap)</code>，此内存区域的唯一目的就是<code>存放对象实例</code>，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：<code>所有的对象实例以及数组都要在堆上分配</code>。</p></li><li><p><code>方法区(Method Area)</code>，用于存储已被虚拟机加载的<code>类信息、常量、静态变量、即时编译器编译后的代码等数据</code>。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200803180340.png" alt="image-20200803180340086"></p><h2 id="3-static"><a href="#3-static" class="headerlink" title="3.static"></a>3.static</h2><h3 id="2-1-为什么需要static"><a href="#2-1-为什么需要static" class="headerlink" title="2.1 为什么需要static?"></a>2.1 为什么需要static?</h3><ul><li>有时候我们想要让所有同一个类的实例对象共享同一个数据，那么我们就需要用到类变量，也就是static修饰的变量。</li><li>这个数据可以是属性、方法、代码块、内部类</li></ul><h3 id="2-2-static修饰的属性、方法、代码块、内部类的特点"><a href="#2-2-static修饰的属性、方法、代码块、内部类的特点" class="headerlink" title="2.2 static修饰的属性、方法、代码块、内部类的特点"></a>2.2 static修饰的属性、方法、代码块、内部类的特点</h3><ol><li>随着类的加载而加载；无论是否产生对象，static修饰的属性、方法、代码块、内部类都会在JVM内存区的方法区存在一份</li><li>优先于对象存在，类加载时static域已经在内存中加载了，加载到了JVM内存的<code>方法区</code></li><li>修饰的成员，被同一个类实例的所有对象共享</li><li>访问权限允许时，可不创建对象，直接被类调用，即通过类名访问static修饰的成员，classname.staticmember</li></ol><h3 id="2-2-static-属性"><a href="#2-2-static-属性" class="headerlink" title="2.2 static 属性"></a>2.2 static 属性</h3><ul><li>static修饰的类变量（类属性）由该类的所有实例共享</li><li>static修饰的属性可以被继承</li><li>当某一个实例改变了static修饰的属性的值时，其它实例变量使用时是修改后的值，如下图所举例子所示：</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200803175420.png" alt="image-20200803175417929"></p><h3 id="2-3-static-方法"><a href="#2-3-static-方法" class="headerlink" title="2.3 static 方法"></a>2.3 static 方法</h3><ul><li><p>static修饰的方法简称类方法</p></li><li><p>没有对象的实例时，可以用 <code>类名. 方法名()</code>的形式访问由static修饰的类方法。</p></li><li><p>在<code>static 方法内部只能访问类的static 修饰的属性或方法， 不能访问类的非static 的结构</code>。</p></li><li><p>因为不需要实例就可以访问static 方法，因此static 方法内部不能有this 。当然也不能有super</p></li><li><p><code>static修饰的方法不可以重写</code>,重写的定义是：<strong>方法名、返回值类型、参数列表</strong> 与父类中某个方法一样。经检验子类必须写的和父类一模一样加static才可以覆盖static方法，而这不满足重写的定义，所以不能叫重写</p></li><li><p><code>static修饰的属性和方法可以继承，可以使用子类类名访问，但是不能通过子类对象访问。</code></p></li></ul><h3 id="2-4-static的属性和方法在父类与子类之间的继承和重写关系"><a href="#2-4-static的属性和方法在父类与子类之间的继承和重写关系" class="headerlink" title="2.4  static的属性和方法在父类与子类之间的继承和重写关系"></a>2.4  static的属性和方法在父类与子类之间的继承和重写关系</h3><p><strong>下面一个例子测试了static的属性和方法在父类与子类之间的继承和重写关系：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s=<span class="string">"Person"</span>;<span class="comment">//测试重写</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;<span class="comment">//测试重写</span></span><br><span class="line">        System.out.println(<span class="string">"Person display"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ss=<span class="string">"Person two"</span>; <span class="comment">//测试继承性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayPerson</span><span class="params">()</span> </span>&#123;<span class="comment">////测试继承性</span></span><br><span class="line">        System.out.println(<span class="string">"Person displayPerson"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s=<span class="string">"Man"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;<span class="comment">//将static去掉报错</span></span><br><span class="line">        System.out.println(<span class="string">"Man display"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        total++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotalPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//id++; //静态方法不能访问非静态属性和方法</span></span><br><span class="line">        <span class="comment">//displayA();</span></span><br><span class="line">        <span class="comment">//this.total=10;</span></span><br><span class="line">        <span class="comment">//this.id=10;</span></span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/************  打印Person的属性和方法做对比  ************/</span></span><br><span class="line">        System.out.println(Person.s);</span><br><span class="line">        System.out.println(Person.ss);</span><br><span class="line">        Person.display();</span><br><span class="line">        Person.displayPerson();</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  测试继承性  ************/</span></span><br><span class="line">        System.out.println(Man.ss);</span><br><span class="line">        Man.displayPerson();</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  测试重写性  ************/</span></span><br><span class="line">        System.out.println(Man.s);</span><br><span class="line">        Man.display();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  测试多态性  ************/</span></span><br><span class="line">        Person p=<span class="keyword">new</span> Man();<span class="comment">//不能调用Person和Man的任何属性方法，只能调用Object的属性和方法</span></span><br><span class="line"></span><br><span class="line">        Man mm=<span class="keyword">new</span> Man();<span class="comment">//mm不能访问Person的static属性和static方法</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"total is "</span> + Man.getTotalPerson());</span><br><span class="line">        Man p1 = <span class="keyword">new</span> Man();<span class="comment">//执行构造器total+1</span></span><br><span class="line">        System.out.println(<span class="string">"total is "</span> + Man.getTotalPerson());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Person</span><br><span class="line">Person two</span><br><span class="line">Person display</span><br><span class="line">Person displayPerson</span><br><span class="line">---------</span><br><span class="line">Person two</span><br><span class="line">Person displayPerson</span><br><span class="line">---------</span><br><span class="line">Man</span><br><span class="line">Man display</span><br><span class="line">---------</span><br><span class="line">total is <span class="number">1</span></span><br><span class="line">total is <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="2-5-static代码块与非static代码块"><a href="#2-5-static代码块与非static代码块" class="headerlink" title="2.5  static代码块与非static代码块"></a>2.5  static代码块与非static代码块</h3><p><strong>既然已经说到了代码块，那么就一次性把静态和非静态代码块一次性尽量总结完叭</strong></p><ul><li>代码块(或初始化块)的作用：<br>  对Java 类或对象进行初始化</li><li>代码块(或初始化块)的分类：<br> 一个类中代码块若有修饰符，则<code>只能被static修饰</code>，称为<code>静态代码块</code>(static block)，没有使用static修饰的，为<code>非静态代码块</code> 。</li><li>static 代码块化 通常用于初始化static</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> total;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">total = <span class="number">100</span>;<span class="comment">// 为total 赋初值</span></span><br><span class="line">&#125;</span><br><span class="line">…… <span class="comment">//其它属性或方法声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>静态代码块：用static 修饰的代码块</strong></p><ol><li>可以有输出语句。</li><li>可以对类的属性、类的声明进行初始化操作。</li><li>不可以对非静态的属性初始化。即：不可以调用非静态的属性和方法。</li><li>若有多个静态的代码块，那么按照从上到下的顺序依次执行。</li><li>静态代码块的执行要先于非静态代码块。</li><li><code>静态代码块随着类的加载而加载，且只执行一次</code>。</li></ol><p><strong>非静态代码块：没有static 修饰的代码块</strong></p><ol><li>可以有输出语句。</li><li>可以对类的属性、类的声明进行初始化操作。</li><li>除了调用非静态的结构外，还可以调用静态的变量或方法。</li><li>若有多个非静态的代码块，那么按照从上到下的顺序依次执行。</li><li><code>每次创建对象的时候，都会执行一次。且先于构造器执行</code>。</li></ol><ul><li>静态代码块不可以继承，只随类的加载执行一次</li><li>非静态代码块可继承，每次创建对象的时候，都会执行一次。且先于构造器执行</li></ul><p>下面看个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    Person()&#123;</span><br><span class="line">        System.out.println(<span class="string">"person construct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">    &#123;<span class="comment">//`每次创建对象的时候，都会执行一次。且先于构造器执行`</span></span><br><span class="line">        a++;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            int b=2;//不能在嵌套的两个&#123;&#123;&#125;&#125;定义相同的变量</span></span><br><span class="line">            a++;</span><br><span class="line">        &#125;</span><br><span class="line">        a++;</span><br><span class="line">        System.out.println(<span class="string">"no static Person a="</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">int</span> c=<span class="number">1</span>,d=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;<span class="comment">//`静态代码块随着类的加载而加载，且只执行一次`</span></span><br><span class="line">        c++;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> yy=<span class="number">20</span>;</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            int b=2;//不能在嵌套的两个&#123;&#123;&#125;&#125;定义相同的变量</span></span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">        c++;</span><br><span class="line">        System.out.println(<span class="string">"static Person c="</span>+c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    Man()&#123;</span><br><span class="line">        <span class="keyword">this</span>.a=<span class="number">10</span>;<span class="comment">//不能this.c this.d</span></span><br><span class="line">        <span class="keyword">this</span>.b=<span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"Man a="</span>+a);</span><br><span class="line">        System.out.println(<span class="string">"Man b="</span>+b);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p=<span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        Man m=<span class="keyword">new</span> Man();</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">        System.out.println(Man.c);</span><br><span class="line">        System.out.println(Man.d);</span><br><span class="line">        System.out.println(m.a);</span><br><span class="line">        System.out.println(m.b);<span class="comment">//没有m.c m.d</span></span><br><span class="line">        <span class="comment">//m.xx 报错，就像方法里面的局部变量一样不可以使用对象或类名访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static Person c=<span class="number">4</span></span><br><span class="line">no static Person a=<span class="number">4</span></span><br><span class="line">person construct</span><br><span class="line">-----------</span><br><span class="line">no static Person a=<span class="number">4</span></span><br><span class="line">person construct</span><br><span class="line">Man a=<span class="number">10</span></span><br><span class="line">Man b=<span class="number">10</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="2-6-程序中成员变量赋值的执行顺序"><a href="#2-6-程序中成员变量赋值的执行顺序" class="headerlink" title="2.6  程序中成员变量赋值的执行顺序"></a>2.6  程序中成员变量赋值的执行顺序</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200804212544.png" alt="image-20200804212542646"></p><h3 id="2-7-静态内部类"><a href="#2-7-静态内部类" class="headerlink" title="2.7 静态内部类"></a>2.7 静态内部类</h3><ul><li>关于静态内部类可参考此篇文章里面写到的静态内部类：<a href="https://www.bithachi.cn/posts/bf7b3e18.html">https://www.bithachi.cn/posts/bf7b3e18.html</a></li></ul><h2 id="4-static与main"><a href="#4-static与main" class="headerlink" title="4.static与main"></a>4.static与main</h2><h3 id="4-1-static与main方法简介"><a href="#4-1-static与main方法简介" class="headerlink" title="4.1 static与main方法简介"></a>4.1 static与main方法简介</h3><ul><li><p>由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public，又因为Java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。</p></li><li><p>又<code>因为main() 方法是静态的，我们不能直接访问该类中的非静态成员</code>，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员。</p></li></ul><p><strong>命令行参数用法举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandPara</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"args["</span> + i + <span class="string">"] = "</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200804215629.png" alt="image-20200804215628963"></p><h3 id="4-2-面试题"><a href="#4-2-面试题" class="headerlink" title="4.2 面试题"></a>4.2 面试题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">此处，Something类的文件名叫OtherThing.java</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] something_to_do)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Do something ..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">上述程序是否可以正常编译、运行？</span><br></pre></td></tr></table></figure><p><code>答案是可以正常编译执行</code></p><h2 id="5-final"><a href="#5-final" class="headerlink" title="5.final"></a>5.final</h2><p><strong>在Java中声明类、变量和方法时，可使用关键字final来修饰,表示“最终的”。</strong></p><ol><li>final 标记的类不能被继承 。提高安全性，提高程序的可读性。<br>String类、System类、StringBuffer类</li><li>final 标记的方法不能被子类重写。<br>比如：Object类中的getClass()。</li><li>final 标记的变量( 成员变量或局部变量) 即称为常量 。名称大写，且只能被赋值一次。</li><li>final标记的成员变量必须在声明时或在每个构造器中或代码块中显式赋值，然后才能使用。<br>final double MY_PI = 3.14;</li></ol><h3 id="5-1-final-修饰变量——-常量"><a href="#5-1-final-修饰变量——-常量" class="headerlink" title="5.1 final 修饰变量—— 常量"></a>5.1 final 修饰变量—— 常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String INFO = <span class="string">"BitHachi"</span>; <span class="comment">//声明常量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//The final field A.INFO cannot be assigned</span></span><br><span class="line">    <span class="comment">//INFO = "Hachi";//Error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-final修饰类"><a href="#5-2-final修饰类" class="headerlink" title="5.2 final修饰类"></a>5.2 final修饰类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; <span class="comment">//错误，不能被继承。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-final修饰方法"><a href="#5-3-final修饰方法" class="headerlink" title="5.3 final修饰方法"></a>5.3 final修饰方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="comment">// 错误，不能被重写。</span></span><br><span class="line">    System.out.println(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-static-final—全局常量"><a href="#5-4-static-final—全局常量" class="headerlink" title="5.4  static final—全局常量"></a>5.4  static final—全局常量</h3><ul><li>static final：全局常量</li><li>static修饰的属性强调它们只有一个，final修饰的属性表明是一个常数（创建后不能被修改）。</li><li>static final修饰的属性表示一旦给值，就不可修改，并且可以通过类名访问</li></ul><h3 id="5-5-面试题"><a href="#5-5-面试题" class="headerlink" title="5.5 面试题"></a>5.5 面试题</h3><p><strong>面试一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addOne</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++x;<span class="comment">//Error</span></span><br><span class="line">    <span class="comment">// return x + 1;//OK</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用addOne方法时，不能对<span class="keyword">final</span>常量改变值，只能使用其值</span><br></pre></td></tr></table></figure><p><strong>面试二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Other o = <span class="keyword">new</span> Other();</span><br><span class="line">    <span class="keyword">new</span> Something().addOne(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">(<span class="keyword">final</span> Other o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// o = new Other();//o是常量不可以再变</span></span><br><span class="line">    o.i++;<span class="comment">//i是变量可以变</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> static </tag>
            
            <tag> main </tag>
            
            <tag> final </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八大基本数据类型对应的八大包装类（含对应面试题解析）</title>
      <link href="/posts/a852be86.html"/>
      <url>/posts/a852be86.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么我们需要包装类？"><a href="#1-为什么我们需要包装类？" class="headerlink" title="1.为什么我们需要包装类？"></a>1.为什么我们需要包装类？</h2><p>因为Java是面向对象编程的，那么我们想让基本数据类型可以有对象的特征，调用一些方法，那么Java就提供了包装类，实现基本数据类型转换成包装类，进而使得基本数据类型有了类的特点，可以调用类中的方法。</p><h2 id="2-包装类都有哪些呢？"><a href="#2-包装类都有哪些呢？" class="headerlink" title="2. 包装类都有哪些呢？"></a>2. 包装类都有哪些呢？</h2><p>话不多说，直接上图</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731200506.png" alt="image-20200731200506011"></p><h2 id="3-装箱与拆箱"><a href="#3-装箱与拆箱" class="headerlink" title="3.装箱与拆箱"></a>3.装箱与拆箱</h2><p>在我们正式使用包装类之前，我们先了解一下什么是装箱与拆箱。</p><ol><li>装箱：将基本数据类型包装成对应的包装类，比如 int-&gt;Integer</li><li>拆箱：将包装类拆解成对应的基本数据类型，比如 Character-&gt;char</li></ol><h2 id="4-基本类型、包装类与String之间的转换"><a href="#4-基本类型、包装类与String之间的转换" class="headerlink" title="4. 基本类型、包装类与String之间的转换"></a>4. 基本类型、包装类与String之间的转换</h2><p>现在我们先看看基本类型、包装类与String之间的转换，然后依次代码测试这些转换</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731201545.png" alt="image-20200731201544760"></p><h2 id="5-代码测试"><a href="#5-代码测试" class="headerlink" title="5.代码测试"></a>5.代码测试</h2><p><strong>我们以上图的序号依次测试这些转换方式，1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestMain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-31 20:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试基本数据类型、包装类与String之间的转换</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/************  1：基本数据类型-&gt;包装类 ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 1 -------"</span>);</span><br><span class="line">        <span class="keyword">int</span> i1=<span class="number">100</span>;</span><br><span class="line">        Integer t1=<span class="keyword">new</span> Integer(i1);<span class="comment">//通过构造器</span></span><br><span class="line">        Float f1=<span class="keyword">new</span> Float(<span class="string">"32.1F"</span>);<span class="comment">//通过字符串参数</span></span><br><span class="line">        Character ch1=<span class="string">'A'</span>;<span class="comment">//自动装箱</span></span><br><span class="line">        System.out.println(t1+<span class="string">","</span>+f1+<span class="string">",ch1"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/************  2.包装类-&gt;基本数据类型  ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 2 ------"</span>);</span><br><span class="line">        <span class="keyword">int</span> i2=t1.intValue();<span class="comment">//调用包装类的方法</span></span><br><span class="line">        <span class="keyword">char</span> ch2=ch1;<span class="comment">//自动拆箱</span></span><br><span class="line">        System.out.println(i2+<span class="string">","</span>+ch2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  3.String类-&gt;基本数据类型  ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 3 ----------"</span>);</span><br><span class="line">        String s3=<span class="string">"123"</span>;</span><br><span class="line">        <span class="keyword">int</span> i3=Integer.parseInt(s3);<span class="comment">//调用相应的包装类的parseXxx（String）静态方法</span></span><br><span class="line">        <span class="keyword">boolean</span> b3=<span class="keyword">new</span> Boolean(<span class="string">"true"</span>);<span class="comment">//通过包装类的构造器</span></span><br><span class="line">        System.out.println(i3+<span class="string">","</span>+b3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  4. 基本数据类型-&gt;String类 ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 4 ----------"</span>);</span><br><span class="line">        String s4=String.valueOf(<span class="number">3.4F</span>);<span class="comment">//String的valueOf(x);</span></span><br><span class="line">        String d4=<span class="number">5.2</span>D+<span class="number">3.4</span>d+<span class="string">""</span>;<span class="comment">//String + 自动转换</span></span><br><span class="line">        System.out.println(s4+<span class="string">","</span>+d4);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/************  5.String类-&gt;包装类  ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 5 ----------"</span>);</span><br><span class="line">        String s5=<span class="string">"142.35D"</span>;</span><br><span class="line">        Double d5=<span class="keyword">new</span> Double (s5);<span class="comment">//通过字符串参数</span></span><br><span class="line">        System.out.println(s5);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  6.包装类-&gt;String类  ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 6 ----------"</span>);</span><br><span class="line">        Float f6=<span class="number">123.456f</span>;</span><br><span class="line">        String s6=f6.toString();<span class="comment">//对应包装类对象的toString()方法</span></span><br><span class="line">        String sf=Float.toString(f6);<span class="comment">//调用对应包装类的toString(x)方法</span></span><br><span class="line">        System.out.println(s6+<span class="string">","</span>+sf);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">------- <span class="number">1</span> -------</span><br><span class="line"><span class="number">100</span>,<span class="number">32</span>.<span class="number">1</span>,ch1</span><br><span class="line">------- <span class="number">2</span> ------</span><br><span class="line"><span class="number">100</span>,A</span><br><span class="line">------- <span class="number">3</span> ----------</span><br><span class="line"><span class="number">123</span>,true</span><br><span class="line">------- <span class="number">4</span> ----------</span><br><span class="line"><span class="number">3</span>.<span class="number">4</span>,<span class="number">8</span>.<span class="number">6</span></span><br><span class="line">------- <span class="number">5</span> ----------</span><br><span class="line"><span class="number">142</span>.<span class="number">35</span>D</span><br><span class="line">------- <span class="number">6</span> ----------</span><br><span class="line"><span class="number">123</span>.<span class="number">456</span>,<span class="number">123</span>.<span class="number">456</span></span><br></pre></td></tr></table></figure><h2 id="6-面试题"><a href="#6-面试题" class="headerlink" title="6.面试题"></a>6.面试题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FaceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/************  1  ************/</span></span><br><span class="line">        <span class="comment">//比较情况下，编译时将Integer统一编译成Double,与位数多的单位保持一致</span></span><br><span class="line">        Object o1 = <span class="keyword">true</span> ? <span class="keyword">new</span> Integer(<span class="number">1</span>) : <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">        System.out.println(o1);<span class="comment">//1.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  2  ************/</span></span><br><span class="line">        <span class="comment">//这里没有比较，只有条件判断</span></span><br><span class="line">        Object o2;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>)</span><br><span class="line">            o2 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            o2 = <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">        System.out.println(o2);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  3  ************/</span></span><br><span class="line">        <span class="comment">//Integer内部定义了IntegerCache类结构，IntegerCache中定义了 Integer[],</span></span><br><span class="line">        <span class="comment">//保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在</span></span><br><span class="line">        <span class="comment">//- 128~127范围内时，可以直接使用数组中的元素，不用再去new了.目的:提高效率</span></span><br><span class="line">        Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        Integer j = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        System.out.println(i == j);<span class="comment">//false</span></span><br><span class="line">        Integer m = <span class="number">1</span>;</span><br><span class="line">        Integer n = <span class="number">1</span>;</span><br><span class="line">        System.out.println(m == n);<span class="comment">//true</span></span><br><span class="line">        Integer x = <span class="number">128</span>;</span><br><span class="line">        Integer y = <span class="number">128</span>;</span><br><span class="line">        System.out.println(x == y);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 包装类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object与equals</title>
      <link href="/posts/a501ac60.html"/>
      <url>/posts/a501ac60.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Object"><a href="#1-Object" class="headerlink" title="1. Object"></a>1. Object</h2><ul><li>Object类是所有Java类的根父类</li><li>如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">等价于：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以使用 Object 类型的变量引用任何类型的对象：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method(Object obj)&#123;…&#125; <span class="comment">//可以接收任何类作为其参数</span></span><br><span class="line">Person o=<span class="keyword">new</span> Person();</span><br><span class="line">method(o);</span><br></pre></td></tr></table></figure><ul><li><p>Object中的方法：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200512001544984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>Object 类型的变量只能用于作为各种值的通用持有者。要想对其中的内容进行具体的 操作，还需要清楚对象的原始类型， 并进行相应的类型转换：</p></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200511233922386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200511233900840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>所有的数组类型，不管是对象数组还是基本类型的数组都扩展了 Object 类。</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200511234412434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-equals"><a href="#2-equals" class="headerlink" title="2. equals"></a>2. equals</h2><ul><li><p>基本类型比较值:只要两个变量的值相等，即为true。<br>int a=5; if(a==5){…}</p></li><li><p>引用类型比较引用(是否指向同一个对象地址)：只有指向同一个对象地址时，==才返回true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">        Person p2=<span class="keyword">new</span> Person();</span><br><span class="line">        Person p3=p2;</span><br><span class="line">        Object o=p2;</span><br><span class="line">        <span class="keyword">if</span>(p1==p2)</span><br><span class="line">            System.out.println(<span class="string">"p1==p2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(p1.equals(p2))</span><br><span class="line">            System.out.println(<span class="string">"p1 is equals p2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(p3.equals(p2))</span><br><span class="line">            System.out.println(<span class="string">"p3 is equals p2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(o.equals(p2))</span><br><span class="line">            System.out.println(<span class="string">"o is equals p2"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p3 is equals p2</span><br><span class="line">o is equals p2</span><br></pre></td></tr></table></figure><p>内存分析：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731122930.png" alt="image-20200731122930031"></p><p><strong>Object源码中equals:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123; <span class="comment">//子类可重写</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* 我们可以知道比较的是引用指向的对象地址是否相同，相同则返回true，不相同则返回false */</span></span><br></pre></td></tr></table></figure></li><li><p><code>特例</code> ：当用equals() 方法进行比较时 ，对类File 、String 、Date 及包装类（ （Wrapper Class） ） 来说 ， 是比较类型及内容而不考虑引用的是否是同一个对象 ；<br>  原因：在这些类中重写了Object 类的equals() 方法 。</p><p>  看看String的equals：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compares this string to the specified object.  The result is &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     * true&#125; if and only if the argument is not &#123;<span class="doctag">@code</span> null&#125; and is a &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     * String&#125; object that represents the same sequence of characters as this</span></span><br><span class="line"><span class="comment">     * object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  anObject</span></span><br><span class="line"><span class="comment">     *         The object to compare this &#123;<span class="doctag">@code</span> String&#125; against</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the given object represents a &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment">     *          equivalent to this string, &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>  #compareTo(String)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>  #equalsIgnoreCase(String)</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>当自定义使用equals()时 时 ， 可以重写 。 用于比较两个对象的 “ 内容 ” 是否都相等</li></ul><p><strong>重写equals() 方法的原则:</strong></p><ol><li><p>对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。</p></li><li><p>自反性：x.equals(x)必须返回是“true”。</p></li><li><p>传递性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</p></li><li><p>一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。</p></li></ol><blockquote><p>任何情况下，x.equals(null)，永远返回是“false”；</p><p>x.equals(和x不同类型的对象)永远返回是“false”</p></blockquote><p><strong>面试题：== 和equals 的区别注意事项:</strong></p><ol><li><p>== 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址</p></li><li><p>equals 的话，它是属于java.lang.Object 类里面的方法，如果该方法没有被重写过默认也是==; </p><p>我们可以到 看到String类 等类的 的equals 方法是被重写过的，而且String 类在日常开发中了 用的比较多，久而久之，形成了equals 是比较值的错误观点。</p></li><li><p>具体要看自定义类里有没有重写Object 的equals 方法来判断。</p></li><li><p>通常情况下，重写equals 方法，会比较类中的相应属性是否都相等</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(<span class="string">"str1和str2是否相等？"</span>+ (str1 == str2));<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">"str1是否equals str2？"</span>+(str1.equals(str2)));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object </tag>
            
            <tag> equals </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this与super大详解</title>
      <link href="/posts/720ba9d4.html"/>
      <url>/posts/720ba9d4.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-this"><a href="#1-this" class="headerlink" title="1.this"></a>1.this</h2><h3 id="1-1-this是什么？"><a href="#1-1-this是什么？" class="headerlink" title="1.1. this是什么？"></a>1.1. this是什么？</h3><ul><li>this是Java中的关键字，它的作用和其词义很接近,<code>这个</code>。<br>它在方法内部使用，即这个方法所属对象的引用；<br>它在构造器内部使用，表示该构造器正在初始化的对象。</li><li>this 可以调用类的属 性、方法和构造器</li><li>什么时候使用this关键字呢？<br>当在方法内需要用到调用该方法的对象时，就用this。<br>具体的：我们可以用this来区分属性和局部变量。<br>比如：this.name = name;</li></ul><h3 id="1-2-this调用对象中的属性、构造器和方法"><a href="#1-2-this调用对象中的属性、构造器和方法" class="headerlink" title="1.2 this调用对象中的属性、构造器和方法"></a>1.2 this调用对象中的属性、构造器和方法</h3><p><strong>规则：</strong></p><ol><li>在任意方法或构造器内，如果使用当前类的成员变量或成员方法可以在其前面添加this，增强程序的阅读性。不过，通常我们都习惯省略this。</li><li>当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量</li><li>使用this访问属性和方法时，如果在本类中未找到，会从父类中查找</li><li>this可以在一个类中相互调用构造器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123; <span class="comment">// 无参构造器</span></span><br><span class="line">        System.out.println(<span class="string">"新对象实例化"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(); <span class="comment">// 调用本类中的无参构造器</span></span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name) ; <span class="comment">// 调用有一个参数的构造器</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象的姓名："</span> + name);</span><br><span class="line">        <span class="keyword">this</span>.speak();<span class="comment">//this指代当前操作的对象p1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age=<span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">"局部变量年龄： "</span>+age);</span><br><span class="line">        System.out.println(<span class="string">"对象的年龄："</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"王五"</span>, <span class="number">18</span>);</span><br><span class="line">        p1.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新对象实例化</span><br><span class="line">对象的姓名：王五</span><br><span class="line">局部变量年龄： <span class="number">20</span></span><br><span class="line">对象的年龄：<span class="number">18</span></span><br></pre></td></tr></table></figure><h2 id="2-super"><a href="#2-super" class="headerlink" title="2.super"></a>2.super</h2><h3 id="2-1-super是什么？"><a href="#2-1-super是什么？" class="headerlink" title="2.1 super是什么？"></a>2.1 super是什么？</h3><ul><li><p>super是Java的关键字</p></li><li><p>在Java类中使用super来调用父类中的指定操作：</p><ol><li><p>super可用于访问父类中定义的<code>属性</code>，protected,public,default</p></li><li><p>super可用于调用父类中定义的<code>成员方法</code></p></li><li><p>super可用于在子类构造器中调用<code>父类的构造器</code></p><ul><li><p>当父类中没有空参数的构造器时，子类的构造器必须通过<code>this(参数列表</code>或者<code>super( 参数列表)</code>语句指定调用本类或者父类中相应的构造器。同时，<code>只能”二选一”，且必须放在构造器的首行</code></p></li><li><p><code>子类</code>中所有的<code>构造器默认</code>都会<code>访问父类</code>中 <code>空参数</code>的<code>构造器</code></p></li><li><p>如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则<code>编译出错</code></p></li></ul></li></ol></li></ul><p><strong>注意：</strong></p><ol><li>当子父类出现同名成员时，可以用super表明调用的是父类中的成员</li><li>super的追溯不仅限于<code>直接父类</code></li><li>super和this的用法相像，this代表本类对象的引用，super代表父类的内存空间的标识</li></ol><h3 id="2-2-super调用父类的属性、构造器、方法"><a href="#2-2-super调用父类的属性、构造器、方法" class="headerlink" title="2.2 super调用父类的属性、构造器、方法"></a>2.2 super调用父类的属性、构造器、方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Person</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-30 18:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String isPublic=<span class="string">"isPublic"</span>;</span><br><span class="line">    <span class="keyword">protected</span> String isProtected=<span class="string">"isProtected"</span>;</span><br><span class="line">    <span class="keyword">private</span> String isPrivate=<span class="string">"isProtected"</span>;</span><br><span class="line">    String isDefault=<span class="string">"isDefault"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfopublic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getInfopublic：Name: "</span> + name + <span class="string">"  age: "</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getInfoPrivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getInfoPrivate：Name: "</span> + name + <span class="string">"  age: "</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getInfoProtected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getInfoProtected：Name: "</span> + name + <span class="string">"  age: "</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function">String <span class="title">getInfoDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getInfoDefault：Name: "</span> + name + <span class="string">"  age: "</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, Date d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthDate = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name, age, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Date d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name, <span class="number">22</span>, d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name, <span class="number">22</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Studnet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-30 20:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        school = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);<span class="comment">//调用父类的构造器</span></span><br><span class="line">        school = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//this和super测试调用父类的属性和方法,不能调用父类的private修饰的属性和方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="keyword">this</span>.isDefault);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.isProtected);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.isPublic);</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.isDefault);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.isProtected);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.isPublic);</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getInfoDefault());</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getInfoProtected());</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getInfopublic());</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.getInfoDefault());</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.getInfoProtected());</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.getInfopublic());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译出错: 没有 super(),系统将调用父类无参数的构造器。</span></span><br><span class="line">    <span class="comment">// Person没有无参数的构造器</span></span><br><span class="line"><span class="comment">//    public Student(String s) &#123;</span></span><br><span class="line"><span class="comment">//        school = s;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s=<span class="keyword">new</span> Student(<span class="string">"BitHachi"</span>,<span class="string">"加里敦大学"</span>);</span><br><span class="line">        s.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">isDefault</span><br><span class="line">isProtected</span><br><span class="line">isPublic</span><br><span class="line">----------------</span><br><span class="line">isDefault</span><br><span class="line">isProtected</span><br><span class="line">isPublic</span><br><span class="line">----------------</span><br><span class="line">getInfoDefault：Name: BitHachi  age: <span class="number">22</span></span><br><span class="line">getInfoProtected：Name: BitHachi  age: <span class="number">22</span></span><br><span class="line">getInfopublic：Name: BitHachi  age: <span class="number">22</span></span><br><span class="line">----------------</span><br><span class="line">getInfoDefault：Name: BitHachi  age: <span class="number">22</span></span><br><span class="line">getInfoProtected：Name: BitHachi  age: <span class="number">22</span></span><br><span class="line">getInfopublic：Name: BitHachi  age: <span class="number">22</span></span><br></pre></td></tr></table></figure><h2 id="3-this与super-比较"><a href="#3-this与super-比较" class="headerlink" title="3. this与super 比较"></a>3. this与super 比较</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730205424.png" alt="image-20200730205424453"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
            <tag> this </tag>
            
            <tag> super </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象OOP三大特性：继承、封装、多态</title>
      <link href="/posts/c72fe2cc.html"/>
      <url>/posts/c72fe2cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-继承"><a href="#1-继承" class="headerlink" title="1.继承"></a>1.继承</h2><p>继承是<strong>类与类的一种关系</strong>，子类拥有父类的所有(public,default,protected)属性和方法，从而实现了代码的复用。**</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730195024.png" alt="image-20200730195023660"></p><p><strong>继承与实现的区别：</strong></p><ol><li>概念不同</li></ol><p>​    继承：子类与父类的继承。如果多个类的某个部分的功能相同，那么可以抽象出一个类出来，把他们的相同部分都放到父类里，让他们都继承这个类。</p><p>​    实现：接口的实现。如果多个类都有一个行为，但是处理的方法方式不同，那么就定义一个接口，也就是一个标准，让各个类分别实现这个接口，各自实现自己具体的处理方法。</p><ol start="2"><li>关键词不同</li></ol><p>​    继承：extends，实现：implements</p><ol start="3"><li>数量不同</li></ol><p>​    单继承，多实现。</p><ol start="4"><li>属性不同</li></ol><p>​    在接口中只能定义全局常量（<strong>public static final</strong> ）,和空的方法体；而在继承中可以定义属性,方法等…</p><blockquote><p><strong>注*</strong>：JDK 1.8 以后，接口里可以有静态方法和方法体了。*</p></blockquote><ol start="5"><li>限制不同</li></ol><p>​    某个接口被类实现时,在类中一定要实现接口中的抽象方法；而继承则无需。</p><h2 id="2-封装"><a href="#2-封装" class="headerlink" title="2.封装"></a>2.封装</h2><ol><li><p>为什么需要封装？<br> 我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内部的结构吗？有必要碰电动机吗？<br> 如果我们把洗衣机的内部结构暴露出来，当我们使用的时候可能会误操作，碰到一些核心部件更改了配置，导致洗衣机功能出现问题，不能正常工作，所以封装就显得很有必要，把需要暴露的暴露出来，比如洗衣机的一些按钮和加水的地方，不需要的隐藏起来，比如发动机，内部芯片电线等，这样就保证了洗衣机的稳定工作和安全性。</p></li><li><p>封装性的设计思想：<code>隐藏</code>对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。<code>把该隐藏的隐藏起来，该暴露的暴露出来</code>。</p></li><li><p>封装的程序设计意义：为了实现程序设计的“高内聚，低耦合”。</p><ul><li>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；</li><li>低耦合 ：仅对外暴露少量的方法用于使用。</li></ul><blockquote><p>例如：通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx() 和setXxx()实现对该属性的操作,以实现高内聚与低耦合。</p></blockquote></li></ol><h2 id="3-多态"><a href="#3-多态" class="headerlink" title="3.多态"></a>3.多态</h2><p>Java中的多态主要指<code>引用多态</code>和<code>方法多态</code>。</p><p> <code>引用多态</code>：父类引用可以指向本类对象，也可指向子类对象。引用多态的强大主要体现在调用属性、方法时，可以根据引用具体指向的对象去调用，例如：子类中<code>重写</code>了父类方法。子类重写父类的方法，在调用方法时根据引用指向的子类对象决定调用哪个具体的方法。</p><p>  <code>方法多态</code>：方法多态的强大主要体现在可以根据调用时参数的不同，而自主匹配调用的方法，例如：<code>重载</code>。</p><p>  方法<code>重写与重载</code>的区别：</p><p><code>重写</code>：一般发生在有继承关系的子类中，子类中定义了一个方法，其<strong>方法名、返回值类型、参数列表</strong> 与父类中某个方法一样，此时就是子类中重写(覆盖)了父类的同名方法。</p><ul><li>子类重写的方法访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li><li>子类方法抛出的异常不能大于父类被重写方法的异常</li><li>子类不能重写父类中声明为private权限的方法</li></ul><p><code>重载</code>(Overloading)：发生在同一个类中，存在 多个方法的<strong>方法名相同，参数列表不同</strong>。参数列表不同指的是参数个数、参数类型或者参数的顺序不同。</p><ul><li>被重载的方法可以声明新的或更广的检查异常；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法返回类型可以不同；</li></ul><blockquote><p>子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为<br>static的（不是重写）。因为static方法是属于类的，子类无法覆盖父类的方法。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730200939.png" alt="image-20200730200939545"></p><p><strong>注意：</strong></p><p><strong>这里我们讨论多态调用属性和方法的规则：</strong></p><p>这里假设两个类Student extends Person ，父类是Person，子类是Student</p><blockquote><p>Person 引用指向子类对象Student，<code>Person p=new Student()</code></p></blockquote><blockquote><p>当p调用属性时：p只能调用Person类的属性，即使Student定义了一模一样的属性，p实际调用的也是Person类的属性</p></blockquote><blockquote><p>当p调用方法时：</p><pre><code>1. Student 没有重写Person的方法，那么p只能调用Person类里面的方法 2. Student 重写了 Person的方法，那么p调用被子类重写的方法时，p在编译时是Person的方法，运行时是Student重写的方法。</code></pre></blockquote><p><strong>关于多态这里还要说明一点，关于对象的类型转换：</strong></p><ul><li>从子类到父类的类型转换可以自动进行; Person p=new Student()</li><li>从父类到子类的类型转换必须通过 <code>强制类型转换</code>实现；Student s=(Student)Person;</li><li>无继承关系的引用类型间的转换是非法的</li><li>在强制类型转换之前可以使用<code>instanceof</code></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731103859.png" alt="image-20200731103858655"></p><p>一段代码体会一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Object obj = <span class="string">"Hello"</span>;<span class="comment">//向上转型</span></span><br><span class="line">       String objStr = (String) obj;<span class="comment">//向下转型</span></span><br><span class="line">       System.out.println(objStr);</span><br><span class="line">       </span><br><span class="line">       Object objPri = <span class="keyword">new</span> Integer(<span class="number">5</span>);<span class="comment">//向上转型</span></span><br><span class="line">       <span class="comment">// 下面代码运行时引发 ClassCastException 异常，</span></span><br><span class="line">       <span class="comment">// 因为 objPri 分配的对象不是String而是 new Integer(5)</span></span><br><span class="line">       String str = (String) objPri;<span class="comment">//向下转型失败</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">Exception <span class="keyword">in</span> thread "main" java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span><br><span class="line"><span class="built_in">at</span> Random_name.sgm.thisandsuper.Student.main(Student.java:<span class="number">64</span>)</span><br></pre></td></tr></table></figure><p>​    因为在对象强制类型转换时，有可能会出现类型转换异常ClassCastException，所以我们在向下转型时需要检查，我们可以使用instanceof进行检查。</p><p>​    <strong>x instanceof A ：检验x 是否为类A 的对象，返回值为boolean</strong></p><blockquote><ol><li>要求x所属的类与类A必须是子类和父类的关系，否则编译错误。</li><li>如果x属于类A的子类B，x instanceof A值也为true。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果检查为true就可以进行向下转型，将父类强制类型转换为子类</span></span><br><span class="line"><span class="comment">//Object为所有类的父类，所以可以引用任何类对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Object)&#123;</span><br><span class="line">        Object ob=(Object)o;</span><br><span class="line">        System.out.println(<span class="string">"Object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">        Person p=(Person)o;</span><br><span class="line">        System.out.println(<span class="string">"Person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">        Student s=(Student)o;</span><br><span class="line">        System.out.println(<span class="string">"Student"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Object o1=<span class="keyword">new</span> Person();</span><br><span class="line">  fun(o1);</span><br><span class="line">  System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"></span><br><span class="line">  Object o2=<span class="keyword">new</span> Student();</span><br><span class="line">  fun(o2);</span><br><span class="line">  System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"></span><br><span class="line">  Person p=<span class="keyword">new</span> Student();</span><br><span class="line">  fun(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Object</span><br><span class="line">Person</span><br><span class="line">-------------</span><br><span class="line">Object</span><br><span class="line">Person</span><br><span class="line">Student</span><br><span class="line">-------------</span><br><span class="line">Object</span><br><span class="line">Person</span><br><span class="line">Student</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 继承 </tag>
            
            <tag> 封装 </tag>
            
            <tag> 多态 </tag>
            
            <tag> 重写 </tag>
            
            <tag> 重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10+PicGo+七牛云+Typora搭建写作环境与图床</title>
      <link href="/posts/641e0332.html"/>
      <url>/posts/641e0332.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-需要的环境工具"><a href="#1-需要的环境工具" class="headerlink" title="1.需要的环境工具"></a>1.需要的环境工具</h2><ul><li>Typora : markdown 文档写作工具，使用PicGo<code>间接</code>将图片上传到七牛云</li><li>PicGo : 图床工具，负责<code>直接</code>上传图片到七牛云</li><li>七牛云：存储从PicGo上传来的图片，为什么选择七牛云，因为每个月有10G的免费流量和存储空间，可以白嫖（哈哈）</li><li>域名：需要一个域名绑定七牛云的CDN，以访问图片，域名可以从阿里云，腾讯云等平台购买，域名需要备案。</li></ul><h2 id="2-下载软件"><a href="#2-下载软件" class="headerlink" title="2.下载软件"></a>2.下载软件</h2><h3 id="2-1-Typora"><a href="#2-1-Typora" class="headerlink" title="2.1 Typora"></a>2.1 Typora</h3><ul><li>下载地址：<a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a>，下载后直接安装next默认就行了，可以根据自己喜好更改安装路径</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729204003.png" alt="image-20200729204003283"></p><h3 id="2-2-PicGo"><a href="#2-2-PicGo" class="headerlink" title="2.2 PicGo"></a>2.2 PicGo</h3><ul><li>下载地址：<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/picgo/releases</a>,下载后直接安装next默认就行了，可以根据自己喜好更改安装路径</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729204412.png" alt="image-20200729204412318"></p><h3 id="2-3软件图标"><a href="#2-3软件图标" class="headerlink" title="2.3软件图标"></a>2.3软件图标</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729204635.png" alt="image-20200729204635137"></p><h2 id="3-正式开始配置"><a href="#3-正式开始配置" class="headerlink" title="3.正式开始配置"></a>3.正式开始配置</h2><h3 id="3-1-注册七牛云"><a href="#3-1-注册七牛云" class="headerlink" title="3.1 注册七牛云"></a>3.1 注册七牛云</h3><ul><li>点击<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云官网</a> → 点击右上角免费注册 → 按步骤填写相关信息-&gt;进行相关的实名认证</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729205616.png" alt="image-20200729205616919"></p><h3 id="3-2-配置对象存储"><a href="#3-2-配置对象存储" class="headerlink" title="3.2 配置对象存储"></a>3.2 配置对象存储</h3><blockquote><p>七牛云对象存储就是存储你图片的地方</p></blockquote><ul><li>打开七牛云控制台-&gt;点击对象存储</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729205747.png" alt="image-20200729205747005"></p><ul><li>点击新建空间</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729205811.png" alt="image-20200729205811290"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729205924.png" alt="image-20200729205924364"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729210009.png" alt="image-20200729210009650"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729210128.png" alt="image-20200729210128499"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729210401.png" alt="image-20200729210401673"></p><h3 id="3-3-DNS配置"><a href="#3-3-DNS配置" class="headerlink" title="3.3 DNS配置"></a>3.3 DNS配置</h3><ul><li>绑定cname</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729211649.png" alt="image-20200729211649079"></p><ul><li>前往你域名购买的服务商平台进行CNAME配置</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729211451.png" alt="image-20200729211451426"></p><p>以上配置成功之后，就可以上传图片，并通过你的域名来访问图片了</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729211812.png" alt="image-20200729211812258"></p><h3 id="3-4-配置PicGo"><a href="#3-4-配置PicGo" class="headerlink" title="3.4 配置PicGo"></a>3.4 配置PicGo</h3><ul><li><p>上面我们已经可以通过七牛云配置来访问图片了，但是上传图片和使用链接到Typora还是比较麻烦的，于是我们使用PicGo软件来简化这一步骤。</p></li><li><p>接下来进行配置</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729212326.png" alt="image-20200729212326328"></p></li><li><p>上面的AK和SK就是下面图片所显示的的缩写</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729212232.png" alt="image-20200729212232427"></p><ul><li>关于存储区域，根据你当初申请对象存储空间时的地区来写代号</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729212533.png" alt="image-20200729212533624"></p><h3 id="3-5-配置Typora"><a href="#3-5-配置Typora" class="headerlink" title="3.5 配置Typora"></a>3.5 配置Typora</h3><ul><li>以上配置完毕，接下来我们配置Typora，可以实现截屏图片，粘贴复制直接生成mrakdown格式，简化PicGo上传步骤</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213020.png" alt="image-20200729213020743"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213111.png" alt="image-20200729213111212"></p><p>然后就可以在PicGo里面看到你上传的Typora测试图片了</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213318.png" alt="image-20200729213317978"></p><h2 id="4-PicGo上传图片的几种方式和格式"><a href="#4-PicGo上传图片的几种方式和格式" class="headerlink" title="4. PicGo上传图片的几种方式和格式"></a>4. PicGo上传图片的几种方式和格式</h2><ol><li>直接在Typoar里面粘贴或拖拽你需要的图片，会自动生成mrakdown方式链接到文档中，我个人最喜欢这种方式，简介快速</li></ol><ol start="2"><li>其它方式，直接见图叭</li></ol><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213525.png" alt="image-20200729213525180"></p><h2 id="5-相关问题"><a href="#5-相关问题" class="headerlink" title="5. 相关问题"></a>5. 相关问题</h2><ol><li>最近遇到一个问题，PicGo不能上传图片到七牛云，我这里的解决方案是查看日志然后修改PicGo的配置解决的，希望诸君遇到的时候，能给大家一个参考叭</li><li>我这里遇到的问题就是我明明配置的七牛云图床，日志文件里面居然是smms图床，不知道是不是PicGo的问题，我后来改了一下，重新启动PicGo才搞定。</li></ol><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213726.png" alt="image-20200729213726459"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213945.png" alt="image-20200729213944978"></p><ul><li>修改配置文件</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729214003.png" alt="image-20200729214003794"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729214059.png" alt="image-20200729214059442"></p><blockquote><p>OK，完工，尽情享受Typora+PicGo+七牛云的写作环境叭。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解：面向对象与面向过程的比较 &amp; 类之间的关系：泛化、实现、依赖、关联、聚合、组合</title>
      <link href="/posts/769cd987.html"/>
      <url>/posts/769cd987.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-面向对象程序设计概述"><a href="#1-面向对象程序设计概述" class="headerlink" title="1.面向对象程序设计概述"></a>1.面向对象程序设计概述</h2><ul><li>面向对象程序设计（简称 OOP) 是当今主流的程序设计范型， 它已经取代了 20 世纪 70 年代的“ 结构化” 过程化程序设计开发技术。</li></ul><h3 id="1-1-面向对象程序设计"><a href="#1-1-面向对象程序设计" class="headerlink" title="1.1 面向对象程序设计"></a>1.1 面向对象程序设计</h3><ul><li><code>Java 是完全面向对象的， 必须熟悉 OOP 才能 够编写 Java 程序</code>。 </li><li>面向对象的程序是由对象组成的， 每个对象包含对用户公开的特定功能部分和隐藏的实 现部分。程序中的很多对象来自标准库，还有一些是自定义的。</li></ul><h3 id="1-2-传统结构化程序设计"><a href="#1-2-传统结构化程序设计" class="headerlink" title="1.2 传统结构化程序设计"></a>1.2 传统结构化程序设计</h3><ul><li><code>传统的结构化程序设计</code>通过设计一系列的过程（即算法）来求解问题。一旦确定了这些 过程， 就要开始考虑存储数据的方式。这就是 Pascal 语言的设计者 Niklaus Wirth将其著作命 名为《算法 + 数据结构 = 程序》 </li><li>在 Wirth命名的书名中， <code>算法是第一位的，数据结构是第二位的</code>，这就明确地表述了程序员的工作方式。 先要确定如何操作数据， 然后再决定如何组织数据， 以便于数据操作。 而 <code>OOP 却调换了这个次序， 将数据放在第一位，然后再考虑操作数据的算法</code>。 </li></ul><h3 id="1-3-面向对象与面向过程举例"><a href="#1-3-面向对象与面向过程举例" class="headerlink" title="1.3 面向对象与面向过程举例"></a>1.3 面向对象与面向过程举例</h3><p><strong>举个例子简单说明面向过程开发与面向对象oop开发的不同：</strong></p><blockquote><ul><li>对于一些规模较小的问题， 将其分解为过程的开发方式比较理想。</li><li>而面向对象更加适用 于解决规模较大的问题。</li><li>要想实现一个简单的 Web 浏览器可能需要大约 2000 个过程，这些<code>过程</code>可能需要对一组<code>全局数据</code>进行操作。</li><li>采用<code>面向对象</code>的设计风格， 可能只需要<code>大约 100 个 类</code>，每个类平均包含 20 个方法（如图 4-丨所示)。</li><li>后者更易于程序员掌握， 也容易找到 bug 假设给定对象的数据出错了，在访问过这个数据项的 20 个方法中查找错误要比在 2000 个过 程中查找容易得多<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200418220221214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h2 id="2-类之间的关系"><a href="#2-类之间的关系" class="headerlink" title="2.类之间的关系"></a>2.类之间的关系</h2><p><strong>在类之间， 最常见的关系有：</strong></p><ol><li>泛化/继承（Generalization）</li><li>实现（Realization）</li><li>依赖(Dependency)</li><li>关联（Association)</li><li>聚合（Aggregation）</li><li>组合(Composition)</li></ol><blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200419122034743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="2-1-泛化-继承"><a href="#2-1-泛化-继承" class="headerlink" title="2.1   泛化/继承"></a>2.1   泛化/继承</h3><ul><li>含义：继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。</li><li>代码体现：在Java中继承关系通过关键字<code>extends</code>明确标识</li><li>箭头指向：继承用一条带空心三角箭头的实线表示，从子类指向父类，或者子接口指向父接口。 </li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730233912.png" alt="image-20200730233912528"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235837.png" alt="image-20200730235837723"></p><h3 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2  实现"></a>2.2  实现</h3><ul><li>含义：实现指的是一个class类实现interface接口（可以是多个）的功能，实现是类与接口之间最常见的关系。</li><li>代码体现：在Java中此类关系通过关键字<code>implements</code>明确标识</li><li>箭头指向：实现用一条带空心三角箭头的虚线表示，从类指向实现的接口。 </li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730234024.png" alt="image-20200730234024499"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235911.png" alt="image-20200730235911565"></p><h3 id="2-3-依赖"><a href="#2-3-依赖" class="headerlink" title="2.3 依赖"></a>2.3 依赖</h3><ul><li><p>含义：一种使用的关系，即一个类的实现需要另一个类的协助，要尽量不使用双向的互相依赖.</p><p>这种使用关系是具有偶然性的、临时性的、非常弱的，类B的变化会影响到类A。</p></li><li><p>代码表现：<code>局部变量、方法的参数或者对静态方法的调用；</code>类B作为方法参数(局部变量)被类A在某个method方法中使用</p></li><li><p>箭头指向：用带箭头的虚线表示，指向被使用者</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730234318.png" alt="image-20200730234318100"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235930.png" alt="image-20200730235930003"></p><h3 id="2-4-关联"><a href="#2-4-关联" class="headerlink" title="2.4 关联"></a>2.4 关联</h3><ul><li><p>含义：是一种拥有的关系，它使一个类知道另一个类的属性和方法；</p><p>这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。</p><p>如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p></li><li><p>代码体现：<code>成员变量。</code>被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。</p></li><li><p>箭头指向： 带普通箭头的实心线，指向被拥有者</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235106.png" alt="image-20200730235106481"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235804.png" alt="image-20200730235804652"></p><h3 id="2-5-聚合"><a href="#2-5-聚合" class="headerlink" title="2.5 聚合"></a>2.5 聚合</h3><ul><li><p>含义：聚合是关联关系的一种特例，它体现的是整体与部分的关系，即has-a的关系。</p><p>此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。</p><p>比如计算机与CPU、公司与员工的关系等，比如一个航母编队包括海空母舰、驱护舰艇、舰载飞机及核动力攻击潜艇等。</p></li><li><p>代码体现：成员变量；和关联关系是一致的，只能从语义级别来区分</p></li><li><p>箭头指向：带空心菱形的实心线，菱形指向整体</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235742.png" alt="image-20200730235741993"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235750.png" alt="image-20200730235750830"></p><h3 id="2-5-组合"><a href="#2-5-组合" class="headerlink" title="2.5  组合"></a>2.5  组合</h3><ul><li><p>含义：组合也是关联关系的一种特例，它体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。<br>它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，</p><p>比如人和人的大脑。比如公司和部门是整体和部分的关系，没有公司就不存在部门。</p></li><li><p>代码体现：成员变量；和关联关系是一致的，只能从语义级别来区分</p></li><li><p>箭头指向：带实心菱形的实线，菱形指向整体</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731000327.png" alt="image-20200731000327025"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731000334.png" alt="image-20200731000334893"></p><h3 id="2-6-强弱顺序"><a href="#2-6-强弱顺序" class="headerlink" title="2.6 强弱顺序"></a>2.6 强弱顺序</h3><p>各种关系的强弱顺序：<strong>泛化/继承 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</strong></p><h3 id="2-7-一张图融会贯通"><a href="#2-7-一张图融会贯通" class="headerlink" title="2.7 一张图融会贯通"></a>2.7 一张图融会贯通</h3><p>下面这张UML图，比较形象地展示了各种类图关系：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731001326.png" alt="image-20200731001326493"></p><h2 id="3-参考文献"><a href="#3-参考文献" class="headerlink" title="3. 参考文献"></a>3. 参考文献</h2><ul><li><a href="http://www.uml.org.cn/oobject/201609062.asp#" target="_blank" rel="noopener">http://www.uml.org.cn/oobject/201609062.asp#</a></li><li><a href="https://www.cnblogs.com/liuling/archive/2013/05/03/classrelation.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuling/archive/2013/05/03/classrelation.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> OOP </tag>
            
            <tag> POP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复制数组的四种方法以及时间效率比较</title>
      <link href="/posts/de8ce5fb.html"/>
      <url>/posts/de8ce5fb.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://blog.csdn.net/qq_33591903/article/details/82532626" target="_blank" rel="noopener">https://blog.csdn.net/qq_33591903/article/details/82532626</a></p></blockquote><h2 id="零、数组复制效率的比较"><a href="#零、数组复制效率的比较" class="headerlink" title="零、数组复制效率的比较"></a>零、数组复制效率的比较</h2><p>java中数组复制的方式，有以下几种</p><p>（1）System.arraycopy（）；</p><p>（2）Arrays.copyOf（）；</p><p>（3）clone（）；</p><p>（4）for循环</p><p>今天我们比较一下这四者的效率</p><hr><h2 id="一、System-arraycopy（）"><a href="#一、System-arraycopy（）" class="headerlink" title="一、System.arraycopy（）"></a>一、System.arraycopy（）</h2><p>此方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,Object dest, <span class="keyword">int</span> destPos,<span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure><p>可见此方法是一个本地方法，方法对应的实现不在当前文件里，而是在其他语言实现的的文件的，比如C、C++中。</p><p>使用本地方法，案例来说效率应该最高，稍后进行效率测试。</p><hr><h2 id="二、Arrays-copyOf（）"><a href="#二、Arrays-copyOf（）" class="headerlink" title="二、Arrays.copyOf（）"></a>二、Arrays.copyOf（）</h2><p>此方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   T[] copy = ((Object)newType == (Object)Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">? (T[]) new Object[newLength]</span><br><span class="line">: (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">      </span><br><span class="line">      System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">   Math.min(original.length, newLength));</span><br><span class="line"><span class="keyword">return</span> copy;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看得出来，本质上调用的是System.arraycopy（）方法，也就是前一种方法，那么效率肯定比不上前一种数组复制方法。</p><hr><h2 id="三、clone（）"><a href="#三、clone（）" class="headerlink" title="三、clone（）"></a>三、clone（）</h2><p>此方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure><p>这个方法是Object类中的一个本地方法，这里虽然返回Object，看着需要强制类型转换，但Object子类重写了这个方法，会返回相应的类型。</p><hr><h2 id="四、for循环"><a href="#四、for循环" class="headerlink" title="四、for循环"></a>四、for循环</h2><p>最简单粗暴的一种方式，循环原始数组并直接赋值到目标数组中。</p><hr><h2 id="五、四种的比较"><a href="#五、四种的比较" class="headerlink" title="五、四种的比较"></a>五、四种的比较</h2><p>他们之间的效率比较需要从原始数组的大小出发。</p><p>先贴出比较的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day0908;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSystemArrayCopy</span><span class="params">(String[] orginal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start_time = System.nanoTime();</span><br><span class="line">        String[] target = <span class="keyword">new</span> String[orginal.length];</span><br><span class="line">        System.arraycopy(orginal, <span class="number">0</span>, target, <span class="number">0</span>, target.length);</span><br><span class="line">        <span class="keyword">long</span> end_time = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">"使用System.arraycopy方法耗时:"</span> + (end_time - start_time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testArraysCopyOf</span><span class="params">(String[] orginal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start_time = System.nanoTime();</span><br><span class="line">        String[] target = <span class="keyword">new</span> String[orginal.length];</span><br><span class="line">        target = Arrays.copyOf(orginal, orginal.length);</span><br><span class="line">        <span class="keyword">long</span> end_time = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">"使用Arrays.copyOf方法耗时:"</span> + (end_time - start_time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testClone</span><span class="params">(String[] orginal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start_time = System.nanoTime();</span><br><span class="line">        String[] target = <span class="keyword">new</span> String[orginal.length];</span><br><span class="line">        target = orginal.clone();</span><br><span class="line">        <span class="keyword">long</span> end_time = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">"使用clone方法耗时:"</span> + (end_time - start_time));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFor</span><span class="params">(String[] orginal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start_time = System.nanoTime();</span><br><span class="line">        String[] target = <span class="keyword">new</span> String[orginal.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; orginal.length; i++) &#123;</span><br><span class="line">            target[i] = orginal[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end_time = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">"使用for循环耗时:"</span> + (end_time - start_time));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需要改变原始数组的大小</span></span><br><span class="line">        String[] original = <span class="keyword">new</span> String[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; original.length; i++) &#123;</span><br><span class="line">            original[i] = <span class="string">"abcd"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"原始数组的大小:"</span> + original.length);</span><br><span class="line">        testSystemArrayCopy(original);</span><br><span class="line">        testArraysCopyOf(original);</span><br><span class="line">        testClone(original);</span><br><span class="line">        testFor(original);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较他们之间的效率需要从目标数组的大小出发。</p><p>【1】目标数组是个小数组，长度在200以内</p><p>四种方式的效率：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729191821.png" alt="image-20200729191820741"></p><p>可以看得出：Arrays.copyOf（）的效率最差，其余三种效率差异不大。</p><hr><p>【2】目标是个中等数组，长度以千为单位。</p><p>四种方式的效率：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729191857.png" alt="image-20200729191857013"></p><p>可以看得出，System.arraycopy（）与clone（）方式差异不大，使用for循环的方式，耗时比之前的情况变得严重起来。</p><hr><p>【3】目标数组是个大型数组，长度以万为单位。</p><p>四种方式的效率：</p><p> <img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729192436.png" alt="image-20200729192436700"></p><p>可以看得出，此时System.arraycopy（）方法的效率最高，且数组长度在此基础增加时，此方法效率还是最高，而for循环的效率在这种情况下表现得十分糟糕。</p><hr><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>（1）原始数组长度不管是多少的时候，Arrays.copyOf（）的效率都比System.arraycopy（）差。</p><p>（2）原始数组长度比较小的时候，几百以内，for循环表现十分优异，并随着数组长度的增加，效率越来越低，因此，for循环适合于小型数组。</p><p>（3）原始数组长度中等的时候，比如几千的时候，两个本地方法的效率差不多。</p><p>（4）原始数组长度比较大的时候，以万为单位，这时候本地方法System.arraycopy（）方法的优势体现出来了，力压其他三种方式。</p><p>因此，需要根据操作的数组的长度，灵活地选择数组复制方式，会使得我们的程序得到性能的略微提升。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用传递与值传递？</title>
      <link href="/posts/255ba281.html"/>
      <url>/posts/255ba281.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-方法参数的两种类型"><a href="#1-方法参数的两种类型" class="headerlink" title="1.方法参数的两种类型"></a>1.方法参数的两种类型</h2><ul><li>形参是基本数据类型：将实参基本数据类型变量的“数据值”传递给形参</li><li>形参是引用数据类型：将实参引用数据类型变量的“地址值”传递给形参</li></ul><blockquote><p>严格点说其实只有一种：值传递。 即将实际参数(基本数据类型或引用数据类型)值的副本传入方法内，而参数本身不受影响。</p></blockquote><h2 id="2-方法参数的规则"><a href="#2-方法参数的规则" class="headerlink" title="2.方法参数的规则"></a>2.方法参数的规则</h2><ul><li>一个方法不能修改一个基本数据类型的参数（byte,short,int,long,float,double,char,boolean）</li><li>一个方法可以改变一个对象参数的状态</li><li>一个方法不能让对象引用一个新的对象</li></ul><h2 id="3-代码验证"><a href="#3-代码验证" class="headerlink" title="3.代码验证"></a>3.代码验证</h2><h3 id="3-1一个方法不能修改一个基本数据类型的参数"><a href="#3-1一个方法不能修改一个基本数据类型的参数" class="headerlink" title="3.1一个方法不能修改一个基本数据类型的参数"></a>3.1一个方法不能修改一个基本数据类型的参数</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422105221571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>说明：</strong></p><blockquote><p>调用tripleValue这个方法之 后，percent 的值还是 10。<br>下面看一下具体的执行 过程：</p><ul><li>1 ) x 被初始化为 percent 值的一个拷贝（也就 是 10 ) </li><li>2 ) x 被乘以 3后等于 30。 但是 percent 仍然 是 10 </li><li>3 ) 这个方法结束之后，参数变量 X 不再使用。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422105822332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h3 id="3-2一个方法可以改变一个对象参数的状态"><a href="#3-2一个方法可以改变一个对象参数的状态" class="headerlink" title="3.2一个方法可以改变一个对象参数的状态"></a>3.2一个方法可以改变一个对象参数的状态</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422110319630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>说明：</strong></p><blockquote><p>具体的执行过程为：</p><ul><li>1 ) X 被初始化为 harry 值的拷贝，这里是一个对象的引用。 </li><li>2 ) raiseSalary 方法应用于这个对象引用。x 和 harry 同时引用的那个 Employee 对象的薪金提高了 200%。 </li><li>3 ) 方法结束后，参数变量 x 不再使用。</li><li>当然，对象变量 harry 继续引用那个薪金增至 3 倍的雇员对象<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422111030995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h3 id="3-3一个方法不能让对象引用一个新的对象"><a href="#3-3一个方法不能让对象引用一个新的对象" class="headerlink" title="3.3一个方法不能让对象引用一个新的对象"></a>3.3一个方法不能让对象引用一个新的对象</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422112207577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>说明：</strong></p><blockquote><ul><li>方法并没有改变存储在变量 a 和 b 中的对象引用。</li><li>swap 方法的参数 x 和 y 被初始 化为两个对象引用的拷贝，这个方法交换的是这两个拷贝。 </li><li>在方法结束时局部变量变量 X 和 y 从栈区出栈，被丢弃了。原来的变量 a 和 b 仍然引用 这个方法调用之前所引用的对象<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422112508900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><strong>这个过程说明：</strong><code>Java 程序设计语言对对象采用的不是引用调用，实际上， 对象引用是按值传递的。</code><br>对象引用按值传递，即方法传递的是这两个对象引用的值，可以理解为地址，就像基本数据类型一样，我们不能改变着两个引用值/地址，但是我们却可以改变这两个引用值指向的对应对象的状态值</p></blockquote><h2 id="4-一个案例进一步理解方法调用"><a href="#4-一个案例进一步理解方法调用" class="headerlink" title="4.一个案例进一步理解方法调用"></a>4.一个案例进一步理解方法调用</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730112803.png" alt="image-20200730112803505"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">second</span><span class="params">(Value v, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        v.i = <span class="number">20</span>;</span><br><span class="line">        Value val = <span class="keyword">new</span> Value();</span><br><span class="line">        v = val;</span><br><span class="line">        System.out.println(v.i + <span class="string">" "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        Value v = <span class="keyword">new</span> Value();</span><br><span class="line">        v.i = <span class="number">25</span>;</span><br><span class="line">        second(v, i);</span><br><span class="line">        System.out.println(v.i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.first();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块作用域block与流程控制</title>
      <link href="/posts/5093c0c3.html"/>
      <url>/posts/5093c0c3.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-块作用域—block"><a href="#1-块作用域—block" class="headerlink" title="1.块作用域—block"></a>1.块作用域—block</h2><ul><li><code>块（即复合语句）是指由一对大括号括起来的若干条简单的 Java 语句</code>。块确定了变量的作用域。一个块可以嵌套在另一个块中，块内可以写很多语句,。</li><li><code>不能在嵌套的两个块中声明同名的变量</code>。</li><li>例如，下面的代码就有错误，而无法通过编译<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412223608354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="2-条件语句—if-else"><a href="#2-条件语句—if-else" class="headerlink" title="2.条件语句—if/else"></a>2.条件语句—if/else</h2><ul><li>在 Java 中，条件语句的格式为：<br><code>if (condition) statement</code></li><li>条件必须用括号括起来</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412223810579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>在 Java 中， 更一般的条件语句格式如下所示<br><code>if (condition) statement1 else statement2</code></li><li>其中 else 部分是可选的。else 子句与最邻近的 if 构成一组<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224309110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224035550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224402591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224147443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-循-环"><a href="#3-循-环" class="headerlink" title="3.循 环"></a>3.循 环</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><ul><li>当条件为 true 时，while 循环执行一条语句（也可以是一个语句块）。一般格式为:<br><code>while { condition ) statement</code><ul><li>如果开始循环条件的值就为 false, 则 while 循环体一次也不执行<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224534785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224924379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ul><h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><ul><li>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</li><li>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">       <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure><blockquote><p>注意：布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p></blockquote></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412225503968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-确定-amp-通用循环"><a href="#4-确定-amp-通用循环" class="headerlink" title="4.确定&amp;通用循环"></a>4.确定&amp;通用循环</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><ul><li>虽然所有循环结构都可以用 while 或者 do…while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。</li><li>for循环执行的次数是在执行前就确定的。</li><li>for 语句的第 1 部分通常用于对计数器<code>初始化</code>；第 2 部分给出每次新一轮循环执行前要<code>检测的循环条件</code>；第 3 部分指示如何<code>更新计数器</code>。</li><li>语法格式如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>关于 for 循环有以下几点说明：</strong></p><ul><li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li><li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li><li>执行一次循环后，更新循环控制变量。</li><li>再次检测布尔表达式。循环执行上面的过程。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412230138839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><strong>注意：</strong></p><ul><li>当在 for 语句的第 1 部分中声明了一个变量之后，这个变量的作用域就为 for 循环的整个循环体。</li><li>如果在 for 语句内部定义一个变量， 这个变量就不能在循环体之外使用</li></ul><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><ul><li>Java5 引入了一种主要用于数组的增强型 for 循环。</li><li>Java 增强 for 循环语法格式如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>声明语句</code>：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</li><li><code>表达式</code>：表达式是要访问的数组名，或者是返回值为数组的方法。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412230816520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="5-多重选择—switch"><a href="#5-多重选择—switch" class="headerlink" title="5.多重选择—switch"></a>5.多重选择—switch</h2><ul><li>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</li><li>一般语句格式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>switch case 语句有如下规则：</strong></p><ul><li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li><li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。</li><li>case 语句中的<code>值value的数据类型必须与变量expression的数据类型相同</code>，而且只能是常量或者字面常量。</li><li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li><li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li><li>switch 语句可以包含一个 <code>default 分支</code>，该分支一般是 switch 语句的最后一个分支（<code>可以在任何位置，但建议在最后一个</code>）。<code>default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句</code>。</li><li>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412232055751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020041223224851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412232350833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412232451347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="6-中断控制流程语句"><a href="#6-中断控制流程语句" class="headerlink" title="6.中断控制流程语句"></a>6.中断控制流程语句</h2><h3 id="不带标签的break"><a href="#不带标签的break" class="headerlink" title="不带标签的break"></a>不带标签的break</h3><ul><li>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</li><li>break <code>跳出最里层的循环，并且继续执行该循环下面的语句</code>。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412233108706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="带标签的break"><a href="#带标签的break" class="headerlink" title="带标签的break"></a>带标签的break</h3><ul><li><p>Java 提供了一种带标签的 break语句，用于<code>跳出多重嵌套的循环语句</code>。</p></li><li><p>有时候，在嵌套很深的循环语句中会发生一些不可预料的事情。此时可能更加希望跳到嵌套的所有循环语句之外。通过添加一些额外的条件判断实现各层循环的检测很不方便。</p></li><li><p>这里有一个示例说明了 break 语句的工作状态。请注意，<code>标签必须放在希望跳出的最外层循环之前， 并且必须紧跟一个冒号</code>。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724202200519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><blockquote><p>事实上，可以将标签应用到任何语句中， 甚至可以应用到 if语句或者块语句中</p></blockquote><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><ul><li>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</li><li>在 for 循环中，continue 语句使程序立即跳转到更新语句。</li><li>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</li><li>简单点说，就是跳过本次循环，执行下一次循环<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412235313606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算术运算符、自增自减运算符、关系&amp;逻辑运算符、位运算符、括号及运算符级别</title>
      <link href="/posts/48045e04.html"/>
      <url>/posts/48045e04.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729110103.png" alt="image-20200729110103144"></p><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h2><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>%</td><td>求余/取模</td></tr></tbody></table><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408141052246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-结合赋值与运算符"><a href="#2-结合赋值与运算符" class="headerlink" title="2.结合赋值与运算符"></a>2.结合赋值与运算符</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020040817315972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-自增与自减运算符"><a href="#3-自增与自减运算符" class="headerlink" title="3.自增与自减运算符"></a>3.自增与自减运算符</h2><ul><li>x为+|-</li><li>axx后缀和前缀xxa形式都会使变量值加 1 或减 1。但用在表达式中时，二者就有区别了。前缀形式会先完成加 1; 而后缀形式会使用变量原来的值。</li><li>切记不可以以纯数字来使用，比如6++就是错的<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408174904958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="4-关系运算符与逻辑boolean运算符"><a href="#4-关系运算符与逻辑boolean运算符" class="headerlink" title="4.关系运算符与逻辑boolean运算符"></a>4.关系运算符与逻辑boolean运算符</h2><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>检查如果两个操作数的值是否相等，如果相等则条件为真。</td></tr><tr><td>!=</td><td>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td></tr><tr><td>&gt;=</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td></tr><tr><td>&lt;=</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td></tr><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td></tr><tr><td>||</td><td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td></tr><tr><td>!</td><td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td></tr><tr><td>ex1?:ex2:ex3</td><td>如果ex1为true，则取ex2的值，否则取ex3的值</td></tr></tbody></table><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408182932144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408183011698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724174950589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5.位运算符"></a>5.位运算符</h2><ul><li><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p></li><li><p>位运算符作用在所有的位上，并且按位运算。</p></li><li><p>假设a = 60，b = 13;它们的二进制格式表示将如下：</p><blockquote><p>A = 0011 1100<br>B = 0000 1101<br>A&amp;B = 0000 1100<br>A | B = 0011 1101<br>A ^ B = 0011 0001<br>~A= 1100 0011</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020072417504479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408185241210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="6-括号与运算符级别"><a href="#6-括号与运算符级别" class="headerlink" title="6.括号与运算符级别"></a>6.括号与运算符级别</h2><ul><li>当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。</li><li>下表中具有<code>最高优先级的运算符在的表的最上面，最低优先级的在表的底部</code>。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724175216908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408202533924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String概述</title>
      <link href="/posts/cbe8e8d0.html"/>
      <url>/posts/cbe8e8d0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-字符串简介"><a href="#1-字符串简介" class="headerlink" title="1.字符串简介"></a>1.字符串简介</h2><ul><li>从概念上讲， Java 字符串就是 Unicode 字符序列。 例如， 串“ Java\u2122” 由 5 个Unicode 字符 J、a、 v、a 和™。</li><li>Java 没有内置的字符串类型， 而是在标准 Java 类库中提供了一个预定义类，很自然地叫做 String。</li><li>每个用双引号括起来的字符串都是 String类的一个实例<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200411175428894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="2-子串—substring-begin-end"><a href="#2-子串—substring-begin-end" class="headerlink" title="2.子串—substring(begin,end)"></a>2.子串—substring(begin,end)</h2><ul><li>String 类的 substring 方法可以从一个较大的字符串提取出一个子串<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200411180542424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="3-拼接—“-”"><a href="#3-拼接—“-”" class="headerlink" title="3.拼接—“+”"></a>3.拼接—“+”</h2><ul><li>Java语言允许使用 + 号连接（拼接）两个字符串。</li><li>当将一个字符串与一个非字符串的值进行拼接时，<code>后者被转换成字符串</code>，任何一个java对象都可以转换成字符串</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729123255.png" alt="image-20200729123253985"></p><h2 id="4-不可变字符串"><a href="#4-不可变字符串" class="headerlink" title="4.不可变字符串"></a>4.不可变字符串</h2><ul><li>String 类没有提供用于修改字符串的方法6 如果希望将 greeting=”Hello” 的内容修改为“ Help!”，不能直接地将 greeting 的最后两个位置的字符修改为‘p ’ 和‘!’</li><li>如何修改这个字符串呢？ 在 Java中实现这项操作非常容易。首先提取需要的字符， 然后再拼接上替换的字符串：</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200411183037166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>当然，可以修改字符串变量 greeting， 让它引用另外一个字符串， 这就如同可以将存放 3 的数值变量改成存放 4 一样。但是这样效率并不高</li><li>当我们修改greeting=“Help!”时，这样做会不会产生内存遗漏呢？ 毕竞， <code>原始字符串放置在堆中</code>。十分幸运，Java 将自动地进行<code>垃圾回收</code>。 如果一块内存不再使用了， 系统最终会将其回收。</li><li>不可变字符串有一个优点：<code>编译器可以让字符串共享</code>。</li><li>可以想象将各种字符串存放在<code>公共的存储池</code>中。字符串变量指向存储池中相应的位置。如果复制一个字符串变量， 原始字符串与复制的字符串共享相同的字符。</li></ul><h2 id="5-检测字符串是否相等—equals"><a href="#5-检测字符串是否相等—equals" class="headerlink" title="5.检测字符串是否相等—equals()"></a>5.检测字符串是否相等—equals()</h2><ul><li>可以使用 equals 方法检测两个字符串是否相等。</li><li>也可以使用 if (greeti ng.compareTo(“Hel1oH) == 0} . . ,不过， 使用equals 看起来更为清晰。</li><li>要想检测两个字符串是否相等，而不区分大小写， 可以使用equalsIgnoreCase 方法。</li><li>一定不要使用=运算符检测两个字符串是否相等！ 这个运算符只能够确定两个字串是否放置在同一个位置上。当然， 如果字符串放置在同一个位置上， 它们必然相等。但是，完全有可能将内容相同的多个字符串的拷贝放置在不同的位置上。</li><li>如果虚拟机始终将相同的字符串共享， 就可以使用=运算符检测是否相等。但实际上只有字符串常量是共享的，而 + 或 substring 等操作产生的结果并不是共享的。因此，千万不要使甩== 运算符测试字符串的相等性， 以免在程序中出现糟糕的 bug。从表面上看， 这种bug 很像随机产生的间歇性错误。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200411190645619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="6-空串与Null串"><a href="#6-空串与Null串" class="headerlink" title="6.空串与Null串"></a>6.空串与Null串</h2><ul><li><p>空串 “” 是长度为 0 的字符串。</p></li><li><p>空串是一个 Java 对象， 有自己的串长度（ 0 ) 和内容（空）。</p></li><li><p>可以调用以下代码检查一个字符串是否为空：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.length() = <span class="number">0</span>)</span><br><span class="line">或</span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">""</span>))</span><br></pre></td></tr></table></figure></li><li><p>String 变量还可以存放一个特殊的值， 名为 null, 这表示目前没有任何对象与该变量关联（关于 null 的更多信息后面博文会提到)。</p></li><li><p>要检查一个字符串是否为 null, 要使用以下条件：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br></pre></td></tr></table></figure><ul><li>有时要检查一个字符串既不是 null 也不为空串，这种情况下就需要使用以下条件：</li><li>首先要检查 str 不为 null。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.lengthO != <span class="number">0</span>)</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412002454951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="7-码点和代码单元"><a href="#7-码点和代码单元" class="headerlink" title="7.码点和代码单元"></a>7.码点和代码单元</h2><blockquote><p><a href="https://www.jianshu.com/p/668356dd8089" target="_blank" rel="noopener">https://www.jianshu.com/p/668356dd8089</a>这篇文章对理解码点和代码单元有帮助</p></blockquote><ul><li>Java 字符串由 char 值序列组成。从 3.3.3 节“ char 类型” 已经看到， char 数据类型是一个采用 UTF-16 编码表示 Unicode 码点的代码单元。大多数的常用 Unicode 字符使用一个代码单元就可以表示，而辅助字符需要一对代码单元表示。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200411200614186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt=" "></li><li>如果想要遍历一个字符串，并且依次査看每一个码点， 可以使用下列语句：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cp = sentence.codePointAt(i);</span><br><span class="line"><span class="keyword">if</span> (Character.isSupplementaryCodePoint(cp)) i+= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> i++;</span><br></pre></td></tr></table></figure></li><li>可以使用下列语句实现回退操作：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i--;</span><br><span class="line"><span class="keyword">if</span> (CharacterssSurrogate(sentence.charAt(i))) i ;</span><br><span class="line"><span class="keyword">int</span> cp = sentence.codePointAt(i);</span><br></pre></td></tr></table></figure></li><li>显然， 这很麻烦。更容易的办法是使用 codePoints 方法， 它会生成一个 int 值的“ 流”，每个 int 值对应一个码点。 可以将它转换为一个数组，再完成遍历。<br><code>int[] codePoints = str.codePointsO.toArray()；</code></li><li>反之，要把一个码点数组转换为一个字符串， 可以使用构造函数<br><code>String str = new String(codePoints, 0, codePoints.length);</code></li></ul><h2 id="8-常见的String-API"><a href="#8-常见的String-API" class="headerlink" title="8.常见的String API"></a>8.常见的String API</h2><p>String类方法有很多，详情可参考API文档</p><blockquote><p><a href="http://www.matools.com/api/java8" target="_blank" rel="noopener">http://www.matools.com/api/java8</a></p></blockquote><blockquote><p><a href="https://www.runoob.com/java/java-string.html" target="_blank" rel="noopener">菜鸟教程中列举的常用String类的API方法</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> Stringbuilder </tag>
            
            <tag> Stringbuffer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八大基本数据类型及其转换</title>
      <link href="/posts/abf8abd7.html"/>
      <url>/posts/abf8abd7.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-思维导图总览"><a href="#0-思维导图总览" class="headerlink" title="0.思维导图总览"></a>0.思维导图总览</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020031115504948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-整型"><a href="#1-整型" class="headerlink" title="1.整型"></a>1.整型</h2><ul><li>整型用于表示没有小数部分的数值， 它允许是负数。<code>默认的整型为int型</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311155123643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>byte 和 short 类型主要用于特定的应用场合，例如，底层的文件处理或者需要控制占用<br>存储空间量的大数组。</li><li>在 Java 中， 整型的范围与运行 Java 代码的机器无关。这就解决了软件从一个平台移植到<br>另一个平台，或者在同一个平台中的不同操作系统之间进行移植给程序员带来的诸多问题。</li><li>长整型数值有一个后缀 L 或 l ( 如 4000000000L。) </li><li>十六进制数值有一个前缀 0x 或 0X (如0xCAFEL </li><li>八进制有一个前缀 0 , 例如， 010 对应八进制中的 8。</li><li>很显然， 八进制表示法比较容易混淆， 所以建议最好不要使用八进制常数。 </li><li>从 Java 7 开始， 加上前缀 0b 或 0B 就可以写二进制数。例如，0bl001就是 9。</li><li>从 Java 7 开始，还可以为数字字面量加下划线，如用 1_000_000(或者0b1111_0100_0010_10 00_0000 )表示一百万。这些下划线只是为了让人更易读。·<code>Java 编译器会去除这些下划线</code>。</li><li>在 Java 中， 所有的数值类型所占据的字节数量与平台无关。</li><li>注意： Java 没有任何无符号（unsigned) 形式的 int、 long、short 或 byte 类型。</li><li>代码测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 十六进制  0x或0X都可行</span></span><br><span class="line">        <span class="keyword">int</span> a0 = <span class="number">0xa0</span>;  <span class="comment">// a0的十进制值为160</span></span><br><span class="line">        <span class="keyword">short</span> b0 = <span class="number">0Xa0</span>;</span><br><span class="line">        <span class="keyword">long</span> c0 = <span class="number">0xa0</span>;</span><br><span class="line">        <span class="keyword">byte</span> d0 = <span class="number">0X10</span>; <span class="comment">// 10对应十进制16,不能用0xa0因为超过了byte数值范围</span></span><br><span class="line">        System.out.println(a0 + <span class="string">"  "</span> + b0 + <span class="string">"  "</span> + c0 + <span class="string">"  "</span> + d0);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 八进制  0开头</span></span><br><span class="line">        <span class="keyword">int</span> a1 = <span class="number">010</span>; <span class="comment">// 10的十进制为8</span></span><br><span class="line">        <span class="keyword">short</span> b2 = <span class="number">010</span>;</span><br><span class="line">        <span class="keyword">long</span> c2 = <span class="number">010</span>;</span><br><span class="line">        <span class="keyword">byte</span> d2 = <span class="number">010</span>;</span><br><span class="line">        System.out.println(a1 + <span class="string">"  "</span> + b2 + <span class="string">"  "</span> + c2 + <span class="string">"  "</span> + d2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//二进制  0b或0B都行</span></span><br><span class="line">        <span class="keyword">int</span> a3 = <span class="number">0b100</span>; <span class="comment">// 100十进制的值为4</span></span><br><span class="line">        <span class="keyword">short</span> b3 = <span class="number">0B100</span>;</span><br><span class="line">        <span class="keyword">long</span> c3 = <span class="number">0B100</span>;</span><br><span class="line">        <span class="keyword">byte</span> d3 = <span class="number">0b100</span>;</span><br><span class="line">        System.out.println(a3 + <span class="string">"  "</span> + b3 + <span class="string">"  "</span> + c3 + <span class="string">"  "</span> + d3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> long1 = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">long</span> long2 = <span class="number">100l</span>;</span><br><span class="line">        <span class="keyword">long</span> long3 = <span class="number">100L</span>;</span><br><span class="line">        System.out.println(long1 + <span class="string">"  "</span> + long2 + <span class="string">"  "</span> + long3);</span><br><span class="line">        <span class="comment">//从结果可以看出不加l或L对结果无影响</span></span><br><span class="line">        <span class="comment">//当数值超过int的范围时必须加上L</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以为数字字面量加下划线,Java 编译器会去除这些下划线</span></span><br><span class="line">        <span class="keyword">int</span> a4 = <span class="number">1____00___00</span>;</span><br><span class="line">        <span class="keyword">short</span> b4 = <span class="number">2_0_3_0</span>;</span><br><span class="line">        <span class="keyword">long</span> c4 = <span class="number">19____00</span>;</span><br><span class="line">        <span class="keyword">byte</span> d4 = <span class="number">10_1</span>;</span><br><span class="line">        System.out.println(a4 + <span class="string">"   "</span> + b4 + <span class="string">"   "</span> + c4 + <span class="string">"   "</span> + d4);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311162756389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-浮点型"><a href="#2-浮点型" class="headerlink" title="2.浮点型"></a>2.浮点型</h2><ul><li>浮点类型用于表示有小数部分的数值,<code>默认的浮点型为double型</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311162835476.png" alt="在这里插入图片描述"></li><li>double 表示这种类型的数值精度是 float 类型的两倍（有人称之为双精度数值)</li><li>实际上，只有很少的情况适合使用 float 类型，例如，需要单精度数据的库， 或者需要存储大量数据。</li><li>float 类型的数值有一个后缀 F 或 f (例如，3.14F。) 没有后缀 F 的浮点数值（如 3.14 ) 默认为 double 类型。</li><li>当然，也可以在浮点数值double后面添加后缀 D 或 d (例如，3.14D),不加也可以。</li><li>可以使用十六进制表示浮点数值。例如，0.125=2^-3^ 可以表示成 0x1.0p^-3^。在十六进制表示法中， 使用 p 表示指数， 而不是 e。 <code>注意， 尾数采用十六进制，指数采用十进制。指数的基数是 2，而不是 10。</code><font color=red> 对于十六进制表示我没怼出来，还请大佬多多指教，留个言教教我，抱拳了！</font></li><li>所有的浮点数值计算都遵循 <code>IEEE 754</code> 规范。具体来说，下面是用于表示<code>溢出和出错</code>情况的三个特殊的浮点数值：<br>•正无穷大<br>•负无穷大<br>•NaN (不是一个数字）<br>例如， 一 正整数除以 0 的结果为正无穷大。计算 0/0 或者负数的平方根结果为 NaN。<br>常量 <code>Double.POSITIVE_INFINITY、 Double.NEGATIVE_INFINITY 和 Double.NaN</code><br>( 以及相应的 Float 类型的常量） 分别表示<code>这三个特殊的值</code>， 但在实际应用中很少遇到。</li><li>特别要说明的是， 不能这样检测一个特定值是否等于<code>Double.NaN</code>:</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x = Double.NaN) <span class="comment">// is never true</span></span><br></pre></td></tr></table></figure><ul><li>所有“ 非数值” 的值都认为是不相同的。然而，可以使用 Double.isNaN 方法：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Double.isNaN(x)) <span class="comment">// check whether x is "not a number"</span></span><br></pre></td></tr></table></figure><ul><li><p>浮点数值<code>不适用于无法接受舍入误差的金融计算中</code>。</p></li><li><p>例如，命令 System.out.println( 2.0-1.1 ) 将打印出 0.8999999999999999, 而不是人们想象的 0.9。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311163957316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>这种舍入误差的主要原因是浮点数值采用二进制系统表示， 而在二进制系统中无法精确地表示分数 1/10。 这就好像十进制无法精确地表示分数 1/3—样。</p></li><li><p>如果在数值计算中<code>不允许有任何舍入误差</code>，就应该使用 BigDecimal类</p></li><li><p>代码测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> a = <span class="number">100.111f</span>;</span><br><span class="line">        <span class="keyword">float</span> b = <span class="number">100.111F</span>;</span><br><span class="line">        <span class="keyword">double</span> c = <span class="number">100.111</span>;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">100.111</span>D;</span><br><span class="line">        <span class="keyword">double</span> e = <span class="number">100.111</span>d;</span><br><span class="line">        System.out.println(a + <span class="string">"   "</span> + b + <span class="string">"   "</span> + c + <span class="string">"   "</span> + d + <span class="string">"   "</span> + e);</span><br><span class="line">        System.out.println(Double.POSITIVE_INFINITY);</span><br><span class="line">        System.out.println(Double.NEGATIVE_INFINITY);</span><br><span class="line">        System.out.println(Double.NaN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311175055588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="3-char型"><a href="#3-char型" class="headerlink" title="3.char型"></a>3.char型</h2><ul><li>char 类型原本用于表示单个字符。不过，现在情况已经有所变化。 如今，有些 Unicode<br>字符可以用一个 char值描述，另外一些 Unicode 字符则需要两个 char 值。</li><li>char 类型的字面量值要用<code>单引号</code>括起来。</li><li>char a=’’，什么都不写报错，可以存个空格。</li><li>char 类型的值可以表示为十六进制值，其范围从 \u0000 到 \Uffff。例如：  \u03C0 表示希腊字母 π。</li><li>除了转义序列 \u 之外， <code>还有一些用于表示特殊字符的转义序列</code>。所有这些转义序列都可以出现在加引号的字符字面量或字符串中。例如，’\u2122’ 或 “Hello\n”。</li><li></li><li>转义序列 \u还可以出现在加引号的<code>字符常量或字符串之外</code>（而其他所有转义序列不可以）。例 如：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String\u005B\ u00SD args)</span><br></pre></td></tr></table></figure><p>就完全符合语法规则， \u005B 和 \u005D 是 [ 和 ] 的编码</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311180337755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311181305507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311181416181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//   \u000A   asdasda</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Look inside c:\users</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311181532607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020031118161161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>抱着玩的兴趣测试了一下\u转义序列</li><li>Unicode转义字符序列的官网  <a href="http://www.52unicode.com/" target="_blank" rel="noopener">http://www.52unicode.com/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311182811687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-boolean型"><a href="#4-boolean型" class="headerlink" title="4.boolean型"></a>4.boolean型</h2><ul><li>boolean (布尔）类型有两个值：<code>false 和 true</code>, 用来判定逻辑条件 整型值和布尔值之间<br>不能进行相互转换。</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311183101733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-java内置常量对应数据类型的取值范围"><a href="#5-java内置常量对应数据类型的取值范围" class="headerlink" title="5.java内置常量对应数据类型的取值范围"></a>5.java内置常量对应数据类型的取值范围</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// byte</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：byte 二进制位数："</span> + Byte.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Byte"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Byte.MIN_VALUE="</span> + Byte.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Byte.MAX_VALUE="</span> + Byte.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// short</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：short 二进制位数："</span> + Short.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Short"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Short.MIN_VALUE="</span> + Short.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Short.MAX_VALUE="</span> + Short.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// int</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：int 二进制位数："</span> + Integer.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Integer"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Integer.MIN_VALUE="</span> + Integer.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Integer.MAX_VALUE="</span> + Integer.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// long</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：long 二进制位数："</span> + Long.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Long"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Long.MIN_VALUE="</span> + Long.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Long.MAX_VALUE="</span> + Long.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// float</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：float 二进制位数："</span> + Float.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Float"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Float.MIN_VALUE="</span> + Float.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Float.MAX_VALUE="</span> + Float.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// double</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：double 二进制位数："</span> + Double.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Double"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Double.MIN_VALUE="</span> + Double.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Double.MAX_VALUE="</span> + Double.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// char</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：char 二进制位数："</span> + Character.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Character"</span>);</span><br><span class="line">                <span class="comment">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span></span><br><span class="line">                System.out.println(<span class="string">"最小值：Character.MIN_VALUE="</span></span><br><span class="line">                        + (<span class="keyword">int</span>) Character.MIN_VALUE);</span><br><span class="line">                <span class="comment">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台</span></span><br><span class="line">                System.out.println(<span class="string">"最大值：Character.MAX_VALUE="</span></span><br><span class="line">                        + (<span class="keyword">int</span>) Character.MAX_VALUE);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020031119152014.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-数据类型默认值"><a href="#6-数据类型默认值" class="headerlink" title="6.数据类型默认值"></a>6.数据类型默认值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> bool;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span> by;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> d;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> l;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">short</span> sh;</span><br><span class="line">    <span class="keyword">static</span> String str;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bool :"</span> + bool);</span><br><span class="line">        System.out.println(<span class="string">"Byte :"</span> + by);</span><br><span class="line">        System.out.println(<span class="string">"Character:"</span> + ch);</span><br><span class="line">        System.out.println(<span class="string">"Double :"</span> + d);</span><br><span class="line">        System.out.println(<span class="string">"Float :"</span> + f);</span><br><span class="line">        System.out.println(<span class="string">"Integer :"</span> + i);</span><br><span class="line">        System.out.println(<span class="string">"Long :"</span> + l);</span><br><span class="line">        System.out.println(<span class="string">"Short :"</span> + sh);</span><br><span class="line">        System.out.println(<span class="string">"String :"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311191720101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-数值类型之间的转换"><a href="#7-数值类型之间的转换" class="headerlink" title="7.数值类型之间的转换"></a>7.数值类型之间的转换</h2><h3 id="（1）定义数据类型后自动转换"><a href="#（1）定义数据类型后自动转换" class="headerlink" title="（1）定义数据类型后自动转换"></a>（1）定义数据类型后自动转换</h3><ul><li>数值类型之间的转换就是自动将一种数据类型转换成另一种数据类型</li><li>数值类型之间自动转换时的表：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408153958379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter3.Section35.cs352;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mains</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*可能会出现信息丢失的转换情况*/</span></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1234567899</span>;</span><br><span class="line">    <span class="keyword">long</span> b=<span class="number">1234567891234567891L</span>;</span><br><span class="line">    <span class="keyword">float</span> fa=a,fb=b;<span class="comment">//单精度浮点型只保留8位小数</span></span><br><span class="line">    <span class="keyword">double</span> da=a,db=b;    <span class="comment">//双精度浮点型只保留16位小数</span></span><br><span class="line">    System.out.println(fa);</span><br><span class="line">    System.out.println(fb);</span><br><span class="line">    System.out.println(da);</span><br><span class="line">    System.out.println(db);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*不会出现信息丢失的转换情况*/</span></span><br><span class="line">        <span class="keyword">byte</span> b1=<span class="number">123</span>;</span><br><span class="line">        <span class="keyword">short</span> s1=b1;</span><br><span class="line">        <span class="keyword">int</span> i1=b1;</span><br><span class="line">        <span class="keyword">long</span> l1=b1;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        System.out.println(l1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">short</span> s2=<span class="number">12345</span>;</span><br><span class="line">        <span class="keyword">int</span> i2=s2;</span><br><span class="line">        <span class="keyword">long</span> l2=s2;</span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        System.out.println(l2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i3=<span class="number">1234567891</span>;</span><br><span class="line">        <span class="keyword">long</span> l3=i3;</span><br><span class="line">        <span class="keyword">double</span> d3=i3;</span><br><span class="line">        System.out.println(l3);</span><br><span class="line">        System.out.println(d3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c1=<span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">int</span> i4=c1;</span><br><span class="line">        System.out.println(i4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> f1=<span class="number">123.12345f</span>;</span><br><span class="line">        <span class="keyword">double</span> d4=f1;</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">        System.out.println(d4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020040816310291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>这里浮点型取值范围与计算机组成原理里面讲的IEEE754标准有关</li></ul><h3 id="（2）二元运算时的自动转换"><a href="#（2）二元运算时的自动转换" class="headerlink" title="（2）二元运算时的自动转换"></a>（2）二元运算时的自动转换</h3><ul><li>此外两种不同类型的数据进行二元运算时，比如加减乘除，数据转换从位数少的数据类型向位数多的数据类型转换，然后再进行二元运算。</li><li>比如char是1个字节，int是4个字节，char+int，两种数据类型相加，得到的是一个整数。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch2=<span class="string">'A'</span>;</span><br><span class="line">      <span class="keyword">int</span>  i=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">double</span> d1=<span class="number">100.11</span>d;</span><br><span class="line">      System.out.println(ch2+i);</span><br><span class="line">      System.out.println(d1+i);</span><br><span class="line">      System.out.println(d1+ch2);</span><br></pre></td></tr></table></figure></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408164202519.png" alt="在这里插入图片描述"></p><h3 id="（3）强制类型转换"><a href="#（3）强制类型转换" class="headerlink" title="（3）强制类型转换"></a>（3）强制类型转换</h3><ul><li>比如说将double转换为int型，即不按照上面所提到的转换表表进行合法转换</li><li>强制类型转换将小数部分截去，将浮点值转换为整型值</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408170650185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>如果试图将一个数值从一种类型强制转换为另一种类型， 而又超出了目标类型的表示范围，结果就会截断成一个完全不同的值<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408171338790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>不要将boolean与其它数据类型进行转换</li><li>可以用条件转换<code>x? 1:0</code>代替</li></ul><h2 id="8-参考"><a href="#8-参考" class="headerlink" title="8.参考"></a>8.参考</h2><ul><li><a href="https://www.runoob.com/java/java-basic-datatypes.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-basic-datatypes.html</a></li><li>《java核心技术卷一第十版》</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基本数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装jdk配置环境、cmd命令行运行java程序、安装IDEA编写代码测试</title>
      <link href="/posts/c3aae306.html"/>
      <url>/posts/c3aae306.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装jdk配置环境"><a href="#1-安装jdk配置环境" class="headerlink" title="1.安装jdk配置环境"></a>1.安装jdk配置环境</h2><ul><li>首先打开官网Oracle <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308130724110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308130803535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>下载完毕到本地安装，配置环境变量JAVA_HOME和Path<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308131449239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308131009983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308131112644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308131125210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308132105618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308132229797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><ul><li>cmd测试是否配置成功</li><li>window+R<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020030813240593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>有下图上的信息则代表配置环境变量正确<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308132505607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ul><h2 id="2-cmd命令行测试环境变量配置是否正确及运行java程序"><a href="#2-cmd命令行测试环境变量配置是否正确及运行java程序" class="headerlink" title="2.cmd命令行测试环境变量配置是否正确及运行java程序"></a>2.cmd命令行测试环境变量配置是否正确及运行java程序</h2><ul><li><p>首先我们建立一个A.text文件夹，然后修改后缀为java。改为A.java文件</p></li><li><p>可能有时候电脑默认不会显示后缀名可以修改一下系统设置，就可以看见后缀名进行更改了<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308133239941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>A.java中写入测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World !"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再次打开cmd，找到A.java目录<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308134024335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>测试A.java代码</p></li><li><p>首先javac 先编译A.java源代码文件，生成A.class字节码文件</p></li><li><p>再用java虚拟机运行A.class 字节码文件<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308134924270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="3-安装IDEA编写代码测试"><a href="#3-安装IDEA编写代码测试" class="headerlink" title="3.安装IDEA编写代码测试"></a>3.安装IDEA编写代码测试</h2><ul><li>打开IDEA官网下载界面 <a href="https://www.jetbrains.com/idea/download" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download</a><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308135801256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>然后点击安装包安装就可以了<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308135953484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>后续步骤都默认next</li><li>现在我们来新建一个文件来测试java代码<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308140320218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308140425338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308140453319.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308140520801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308141122409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308141324993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308141352871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> IDEA </tag>
            
            <tag> CMD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE、JavaEE、JavaME、jdk、jre、jvm、java主要的11个特性</title>
      <link href="/posts/42a4578.html"/>
      <url>/posts/42a4578.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-JavaSE、JavaEE、JavaME是什么？"><a href="#1-JavaSE、JavaEE、JavaME是什么？" class="headerlink" title="1.JavaSE、JavaEE、JavaME是什么？"></a>1.JavaSE、JavaEE、JavaME是什么？</h2><ul><li>JavaSE（J2SE）（Java2 Platform Standard Edition，java平台标准版）</li><li>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</li><li>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。</li><li>Java SE是标准版，包含标准的JVM和标准库</li><li>Java EE是企业版，在Java SE的基础上加上了大量的API和库，以便方便开发Web应用、数据库、消息服务等，Java EE的应用使用的虚拟机和Java SE完全相同。</li><li>Java ME和Java SE不同，它是一个针对嵌入式设备的“瘦身版”，Java SE的标准库无法在Java ME上使用，Java ME的虚拟机也是“瘦身版”。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308230636304.png" alt="在这里插入图片描述"></li><li>Java大致学习方向如下：</li></ul><ol><li>首先要学习Java SE，掌握Java语言本身、Java核心开发技术以及Java标准库的使用；</li><li>如果继续学习Java EE，那么Spring框架、数据库开发、分布式架构就是需要学习的；</li><li>如果要学习大数据开发，那么Hadoop、Spark、Flink这些大数据平台就是需要学习的，他们都基于Java或Scala开发；</li><li>如果想要学习移动开发，那么就深入Android平台，掌握Android App开发。</li></ol><ul><li>无论怎么选择，Java SE的核心技术是基础，必须学好！</li></ul><h2 id="2-jdk、jre、jvm是什么？"><a href="#2-jdk、jre、jvm是什么？" class="headerlink" title="2.jdk、jre、jvm是什么？"></a>2.jdk、jre、jvm是什么？</h2><ul><li>JDK：Java Development Kit 是针对Java开发员的产品，是整个Java的核心，包括了Java运行环境<br>JRE、Java工具和Java基础类库。</li><li>JRE：Java Runtime Environment 是运行JAVA程序所必须的环境的集合，包含JVM标准实现及Java核心类库。</li><li>JVM：Java Virtual Machine （Java虚拟机）的缩写，是整个java实现跨平台的最核心的部分，能够运行以Java语言编写的软件程序。</li><li>来自oracle官方的结构图，jvm虚拟机在最底层。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020030823200043.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>一个java程序的执行过程，首先jdk中的编译器javac将源代码编译成字节码class文件，然后jre中的java虚拟机jvm执行字节码文件class运行程序。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308231749362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="3-java主要的11个特性"><a href="#3-java主要的11个特性" class="headerlink" title="3.java主要的11个特性"></a>3.java主要的11个特性</h2><ul><li><p>Java语言是简单的：<br>Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。</p></li><li><p>Java语言是面向对象的：<br>Java语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。Java语言全面支持动态绑定，而C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。</p></li><li><p>Java语言是分布式的：<br>Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。</p></li><li><p>Java语言是健壮的：<br>Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。Java的安全检查机制使得Java更具健壮性。</p></li><li><p>Java语言是安全的：<br>Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。除了Java语言具有的许多安全特性以外，Java对通过网络下载的类具有一个安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类SecurityManager）让Java应用设置安全哨兵。</p></li><li><p>Java语言是体系结构中立的：<br>Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。</p></li><li><p>Java语言是可移植的：<br>这种可移植性来源于体系结构中立性，另外，Java还严格规定了各个基本数据类型的长度。Java系统本身也具有很强的可移植性，Java编译器是用Java实现的，Java的运行环境是用ANSI C实现的。</p></li><li><p>Java语言是解释型的：<br>如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。在运行时，Java平台中的Java解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。</p></li><li><p>Java是高性能的：<br>与那些解释型的高级脚本语言相比，Java的确是高性能的。事实上，Java的运行速度随着JIT(Just-In-Time）编译器技术的发展越来越接近于C++。</p></li><li><p>Java语言是多线程的：<br>在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为Thread(Runnable)的构造子类将一个实现了Runnable接口的对象包装成一个线程，其二，从Thread类派生出子类并重写run方法，使用该子类创建的对象即为线程。值得注意的是Thread类已经实现了Runnable接口，因此，任何一个线程均有它的run方法，而run方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为synchronized）。</p></li><li><p>Java语言是动态的：<br>Java语言的设计目标之一是适应于动态变化的环境。Java程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java中的类有一个运行时刻的表示，能进行运行时刻的类型检查。</p></li></ul><p>参考：</p><ul><li>《java核心技术卷一原书第10版》</li><li>《head first java》</li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255876875896416" target="_blank" rel="noopener">廖雪峰的官方网站</a></li><li><a href="https://www.runoob.com/java/java-intro.html" target="_blank" rel="noopener">菜鸟教程</a></li><li><a href="https://docs.oracle.com/javase/8/docs/" target="_blank" rel="noopener">Oracl官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概述：标识符、访问修饰符、变量、数组、枚举、注释、空行、继承、接口、（对象、类、方法、实例变量）、关键字表</title>
      <link href="/posts/5812e9ad.html"/>
      <url>/posts/5812e9ad.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1.标识符"></a>1.标识符</h2><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p><p>关于 Java 标识符，有以下几点需要注意：</p><ul><li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）<code>开始</code></li><li>首字符<code>之后</code>可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary</li></ul><h2 id="2-标识符命名规范"><a href="#2-标识符命名规范" class="headerlink" title="2.标识符命名规范"></a>2.标识符命名规范</h2><p>编写 Java 程序时，应注意以下几点：</p><ul><li>大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz ，<code>驼峰命名法</code>。</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</li><li>源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存，文件名的后缀为 .java。</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li><li>主方法入口：所有的 Java 程序由 public static void main(String []args) 方法开始执行。</li><li>包名：多单词组成时所有字母都小写：xxxyyyzzz</li></ul><h2 id="3-访问修饰符"><a href="#3-访问修饰符" class="headerlink" title="3.访问修饰符"></a>3.访问修饰符</h2><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p><ul><li>访问控制修饰符 : default, public , protected, private</li><li>非访问控制修饰符 : final, abstract, static, synchronized</li></ul><p><strong>可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</strong></p><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><p>我们可以通过以下表来说明访问权限：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200808172940.png" alt="image-20200808172939930"></p><h2 id="4-变量"><a href="#4-变量" class="headerlink" title="4.变量"></a>4.变量</h2><p> <strong>变量的概念：</strong></p><ul><li>内存中的一个存储区域</li><li>该区域的数据可以在同一类型范围内不断变化</li><li>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</li></ul><p><strong>变量的作用：</strong></p><ul><li>用于在内存中保存数据</li></ul><p><strong>使用变量注意：</strong></p><ul><li><p>Java中每个变量必须先声明，后使用</p></li><li><p>使用变量名来访问这块区域的数据</p></li><li><p>变量的作用域：其定义所在的一对{ }内</p></li><li><p>变量只有在其作用域内才有效</p></li><li><p>同一个作用域内，不能定义重名的变量</p></li></ul><p><strong>声明变量：</strong><br>语法：&lt;数据类型&gt; &lt;变量名称&gt;<br>例如：int var;</p><p><strong>变量的赋值</strong><br> 语法：&lt;变量名称&gt; = &lt;值&gt;<br> 例如：var = 10;</p><p><strong>声明和赋值变量</strong><br>语法： &lt;数据类型&gt; &lt;变量名&gt; = &lt;初始化值&gt;<br>例如：int var = 10;</p><p><strong>变量的分类- 按数据类型：</strong></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724173603447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724173713517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730103212.png" alt="image-20200730103212337"></p><p> <strong>类变量、成员变量和局部变量内存分析：</strong></p><ol><li><p>类变量(静态变量)：用static修饰的变量称为静态变量，其内容被该类的所有对象共享，<strong>所有对象中这个类变量的值都指向相同的一处内存</strong>，随便一个对象修改了此处内存的值都会影响其他对象。</p></li><li><p>成员变量：在类定义时声明的变量，随着对象的建立而建立，随着对象的消失而消失，存在于对象所在的<strong>堆内存</strong>中。</p></li><li><p>局部变量：在函数中声明的变量，只定义在局部范围内，只在所属的区域有效。存在于<strong>栈内存</strong>中，作用的范围结束，栈帧释放，变量就消失。</p></li></ol><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h2><ul><li>数组是储存在<code>堆</code>上的<code>对象</code>，可以保存多个同类型变量。数组名引用是存在栈区，实际new分配的内存在堆区。</li></ul><h2 id="6-枚举"><a href="#6-枚举" class="headerlink" title="6. 枚举"></a>6. 枚举</h2><ul><li>Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</li><li>注意：<code>枚举可以单独声明或者声明在类里面 。方法、变量、构造函数也可以在枚举中定义</code>。</li><li>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreshJuice</span> </span>&#123;</span><br><span class="line">   <span class="keyword">enum</span> FreshJuiceSize&#123; SMALL, MEDIUM , LARGE &#125;</span><br><span class="line">   FreshJuiceSize size;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreshJuiceTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">      FreshJuice juice = <span class="keyword">new</span> FreshJuice();</span><br><span class="line">      juice.size = FreshJuice.FreshJuiceSize.MEDIUM  ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-注释"><a href="#7-注释" class="headerlink" title="7.注释"></a>7.注释</h2><ul><li>类似于 C/C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">   <span class="comment">/* 这是第一个Java程序</span></span><br><span class="line"><span class="comment">    *它将打印Hello World</span></span><br><span class="line"><span class="comment">    * 这是一个多行注释的示例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">       <span class="comment">// 这是单行注释的示例</span></span><br><span class="line">       <span class="comment">/* 这个也是单行注释的示例 */</span></span><br><span class="line">       System.out.println(<span class="string">"Hello World"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-空行"><a href="#8-空行" class="headerlink" title="8.空行"></a>8.空行</h2><ul><li>空白行或者有注释的行，Java 编译器都会忽略掉。</li></ul><h2 id="9-继承"><a href="#9-继承" class="headerlink" title="9.继承"></a>9.继承</h2><ul><li><p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p></li><li><p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。<code>被继承的类称为超类（super class），派生类称为子类（subclass）</code>。</p></li></ul><h2 id="10-接口"><a href="#10-接口" class="headerlink" title="10.接口"></a>10.接口</h2><ul><li>在 Java 中，<code>接口可理解为对象间相互通信的协议</code>。接口在继承中扮演着很重要的角色。</li><li><code>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类</code>。</li></ul><h2 id="11-对象、类、方法、实例"><a href="#11-对象、类、方法、实例" class="headerlink" title="11.对象、类、方法、实例"></a>11.对象、类、方法、实例</h2><ul><li>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</li><li>对象：<code>对象是类的一个实例</code>，有状态和行为，状态即属性，行为即方法。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li><li>类：<code>类是一个模板，它描述一类对象的行为和状态</code>,它具有属性、构造器、普通方法、或代码块。</li><li>实例变量：非static修饰的变量，在类的内部，方法外部的变量。</li><li>方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。<code>方法通过方法名被调用，且只有被调用才会执行。</code></li></ul><p>方法调用的过程分析:</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730103612.png" alt="image-20200730103612875"></p><h2 id="12-关键字表"><a href="#12-关键字表" class="headerlink" title="12.关键字表"></a>12.关键字表</h2><ul><li>下面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724172810844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724172821303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="13-保留字-reserved-word"><a href="#13-保留字-reserved-word" class="headerlink" title="13.保留字(reserved word)"></a>13.保留字(reserved word)</h2><ul><li>现有Java版本尚未使用，但以后版本可能会作为关键字使<br>用。自己命名标识符时要避免使用这些保留字<br><code>goto 、const</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射详解</title>
      <link href="/posts/6e3bcb10.html"/>
      <url>/posts/6e3bcb10.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>Java的反射机制是Java特性之一，反射机制是构建框架技术的基础所在。灵活掌握Java反射机制，对以后学习框架技术有很大的帮助。</li><li>本篇文章用到的代码在我的github上面：<a href="https://github.com/BitHachi/Java_core_book/tree/master/src/JavaSE/Chapter5/Section57" target="_blank" rel="noopener">BitHachi/JJava_core_book/tree/master/src/JavaSE/Chapter5/Section57</a>。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200722195924629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h1 id="1-什么是Java的反射呢？"><a href="#1-什么是Java的反射呢？" class="headerlink" title="1.什么是Java的反射呢？"></a>1.什么是Java的反射呢？</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大家都知道，要让Java程序能够运行，那么就得让Java类要被Java虚拟机加载。Java类如果不被Java虚拟机加载，是不能正常运行的。现在我们运行的所有的程序都是在编译期的时候就已经知道了你所需要的那个类的已经被加载了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java的反射机制是在编译并不确定是哪个类被加载了，而是在程序运行的时候才加载、探知、自审。使用在编译期并不知道的类。这样的特点就是反射。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，属性、构造器、方法，并可以调用对应的属性和方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reflection（反射）是被视为<code>动态语言</code>的关键。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为： 反射</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813154207.png" alt="image-20200813154206826"></p><p><strong>补充：动态语言 vs 静态语言</strong></p><p><strong>动态语言</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>是一类在运行时可以改变其结构的语言</code>：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是 <code>在运行时代码可以根据某些条件改变自身结构</code>。主要动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。<br><strong>静态语言</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与动态语言相对应的，<code>运行时结构不可变的语言就是静态语言</code>。如Java、C、C++。</p><blockquote><p>Java不是动态语言，但Java可以称之为<code>“准动态语言”</code>。即Java有一定的动态性，我们可以利用<code>反射机制、字节码操作获得类似动态语言的特性</code>。Java的动态性让编程的时候更加灵活！</p></blockquote><h1 id="2-Java反射有什么作用呢？"><a href="#2-Java反射有什么作用呢？" class="headerlink" title="2.Java反射有什么作用呢？"></a>2.Java反射有什么作用呢？</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假如我们有两个程序员，一个程序员在写程序的时候，需要使用第二个程序员所写的类，但第二个程序员并没完成他所写的类。那么第一个程序员的代码能否通过编译呢？这是不能通过编译的。利用Java反射的机制，就可以让第一个程序员在没有得到第二个程序员所写的类的时候，来完成自身代码的编译。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Java的反射机制它知道类的基本结构，这种对Java类结构探知的能力，我们称为Java类的“自审”。</code>大家都用过IDEA和eclipse。当我们构建出一个对象的时候，去调用该对象的方法和属性的时候。一按点，编译工具就会自动的把该对象能够使用的所有的方法和属性全部都列出来，供用户进行选择。这就是利用了Java反射的原理，是对我们创建对象的探知、自审。(反射是一种功能强大且复杂的机制。使用它的主要人员是工具构造者，而不是应用程序员。)</p><p><strong>Java 反射机制提供的功能:</strong></p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul><p><strong>反射相关的主要API：</strong></p><ul><li>java.lang.Class: 代表一 个类，用来描述类的类</li><li>java.lang.reflect.Method: 代表类 的 方法</li><li>java.lang.reflect.Field: 代表类的 成员 变量</li><li>java.lang.reflect.Constructor: 代表类 的 构造 </li><li>… …</li></ul><h1 id="3-Class类"><a href="#3-Class类" class="headerlink" title="3.Class类"></a>3.Class类</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要正确使用Java反射机制就得使用java.lang.Class这个类。它是Java反射机制的起源。当一个类被加载以后，Java虚拟机就会自动产生一个Class对象。通过这个Class对象我们就能获得加载到虚拟机当中这个Class对象对应的方法、成员变量以及构造方法的声明和定义等信息。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个结构(class/interface/enum/annotation/primitive type/void/[])的有关信息。</p><ul><li>Class本身也是一个类</li><li>Class 对象只能由系统建立对象</li><li>一个加载的类在 JVM 中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813165351.png" alt="image-20200813165350109"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813165419.png" alt="image-20200813165419078"></p><h1 id="4-获取class类对象"><a href="#4-获取class类对象" class="headerlink" title="4.获取class类对象"></a>4.获取class类对象</h1><p><strong>首先我们得知道哪些类型可以有Class类对象？</strong></p><p>（1）class：<br>外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类<br>（2）interface：接口<br>（3）[]：数组<br>（4）enum：枚举<br>（5）annotation：注解@interface<br>（6）primitive type：基本数据类型<br>（7）void</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Class c1 = Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c2 = Comparable<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c3 = String[]<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c4 = <span class="keyword">int</span>[][]<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c5 = ElementType<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c6 = Override<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c7 = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c8 = <span class="keyword">void</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c9 = Class<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">       System.out.println(c1);</span><br><span class="line">       System.out.println(c2);</span><br><span class="line">       System.out.println(c3);</span><br><span class="line">       System.out.println(c4);</span><br><span class="line">       System.out.println(c5);</span><br><span class="line">       System.out.println(c6);</span><br><span class="line">       System.out.println(c7);</span><br><span class="line">       System.out.println(c8);</span><br><span class="line">       System.out.println(c9);</span><br><span class="line">       System.out.println(<span class="string">"--------"</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">       <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">       Class c10 = a.getClass();</span><br><span class="line">       Class c11 = b.getClass();</span><br><span class="line">       <span class="comment">// 只要数组的元素类型与维度一样，就是同一个Class</span></span><br><span class="line">       System.out.println(c10 == c11);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class java.lang.Object</span><br><span class="line">interface java.lang.Comparable</span><br><span class="line">class [Ljava.lang.String;</span><br><span class="line">class [[I</span><br><span class="line">class java.lang.annotation.ElementType</span><br><span class="line">interface java.lang.Override</span><br><span class="line">int</span><br><span class="line">void</span><br><span class="line">class java.lang.Class</span><br><span class="line">--------</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>那么我们如何获取class对象呢？这里有四种方法：</strong> </p><h2 id="4-1-使用类对象的getClass-方法"><a href="#4-1-使用类对象的getClass-方法" class="headerlink" title="4.1  使用类对象的getClass()方法"></a>4.1  使用类对象的getClass()方法</h2><ul><li>使用类对象的getClass()方法<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721223506271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="4-2-Class-forName-classname"><a href="#4-2-Class-forName-classname" class="headerlink" title="4.2 Class.forName(classname)"></a>4.2 Class.forName(classname)</h2><ul><li><p>使用 Class.forName(classname) 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象</p></li><li><p>如果className不是类名或接口名，则forname抛出一个checked exception异常所以应该给这个方法提供一个异常处理器</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721224056665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-3-class"><a href="#4-3-class" class="headerlink" title="4.3 .class"></a>4.3 .class</h2></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721224339711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-4-类的加载器：ClassLoader"><a href="#4-4-类的加载器：ClassLoader" class="headerlink" title="4.4 类的加载器：ClassLoader"></a>4.4 类的加载器：ClassLoader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader cl = 类名.getClass().getClassLoader();</span><br><span class="line">Class clazz4 = cl.loadClass(<span class="string">"类的全类名"</span>);</span><br></pre></td></tr></table></figure><h1 id="5-通过反射创建类对象"><a href="#5-通过反射创建类对象" class="headerlink" title="5.通过反射创建类对象"></a>5.通过反射创建类对象</h1><ul><li>既然通过上文我们知道了如何获取class对象，那么我们是不是就可以根据这个类对象来创建实例对象呢？当然可以</li><li>通过反射创建类对象主要有两种方式：通过 Class 对象的 newInstance() 方法、通过 Constructor 对象的 newInstance() 方法。</li></ul><h2 id="5-1-Class-对象的-newInstance-方法"><a href="#5-1-Class-对象的-newInstance-方法" class="headerlink" title="5.1 Class 对象的 newInstance() 方法"></a>5.1 Class 对象的 newInstance() 方法</h2><ul><li>newlnstance方法调用默认的构造器（没有参数的构造器）初始化新创建的对象。如果这个类没有默认的构造器， 就会抛出一个异常。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721230954365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="5-2-Constructor-对象的-newInstance-方法"><a href="#5-2-Constructor-对象的-newInstance-方法" class="headerlink" title="5.2  Constructor 对象的 newInstance() 方法"></a>5.2  Constructor 对象的 newInstance() 方法</h2><ul><li>通过 Constructor 对象创建类对象可以选择特定构造方法，而通过 Class 对象则只能使用默认的无参数构造方法。</li><li>这里getConstructor和newInstance使用时需要设置异常处理，我这里是直接在main后面throws了<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721231841616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h1 id="6-获取类属性、方法、构造器的结构"><a href="#6-获取类属性、方法、构造器的结构" class="headerlink" title="6.获取类属性、方法、构造器的结构"></a>6.获取类属性、方法、构造器的结构</h1><ul><li>我们已经成功获取了class类对象，并学会了如何创建对象，现在我们还可以看看对象内部的结构是什么样的，比如属性、方法和构造器。</li><li>在java.lang.reflect 包中有三个类 Field、Method 和 Constructor分别用于描述类的属性、 方法和构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br></pre></td></tr></table></figure><p><strong>下面介绍一下 Field、Method 和 Constructor三个类的常用方法</strong></p><ul><li>Field类的getType 方法， 用来返回属性所属类型的 Class 对象</li><li>Method 类有一个getReturnType方法，返回return值所属类型的Class对象</li><li>Method 和 Constructor 类有一个共同的方法getParameterTypes，返回方法参数所属类型的Class对象</li><li>Field、Method 和 Constructor都有一个getName 方法，返回方法名的字符串</li><li>Field、Method 和 Constructor都有一个getModifiers方法，它将返回一个整型数值，用不同的位开关描述 public 和 static 这样 的修饰符使用状况。可以利用 Modifier.toString方法将 修饰符打印出来。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">String modifiers = Modifier.toString(m.getModifiers());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该修饰符是java.lang.reflect.Modifier的静态属性。这里是用十进制表示的，源码里面是十六进制表示的。<br>对应表如下：<br>PUBLIC: 1<br>PRIVATE: 2<br>PROTECTED: 4<br>STATIC: 8<br>FINAL: 16<br>SYNCHRONIZED: 32<br>VOLATILE: 64<br>TRANSIENT: 128<br>NATIVE: 256<br>INTERFACE: 512<br>ABSTRACT: 1024<br>STRICT: 2048</p></blockquote><ul><li>可以使用Modifiei类中的 isPublic、 isPrivate 或 isFinal 判断方法或构造器是否是 public、 private 或 final</li><li>Class类中的 getFields、 getMethods 和 getConstructors方 法将 分 别 返 回 类 提 供 的 所有public 属性、 方法和构造器数组， 其中<code>包括超类的公有成员</code>。</li><li>Class 类的 getDeclareFields、 getDeclareMethods 和getDeclaredConstructors方法将分别返回类中声明的全部属性、 方法和构 造器， 其中包括private和protected成员，但<code>不包括超类的成员</code>。</li></ul><p><strong>下面是一个代码案例,显示了如何打印一个类的全部信息的方法。<br>这个程序提醒用户输入一个类名，然后输出类中所有的属性、方法、构造器。里面有一些数字是我用来测试，类似-m8-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter5.Section57.cs573;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This program uses reflection to print all features of a class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cay Horstmann</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.1 2004-02-21</span></span><br><span class="line"><span class="comment"> * 利用反射分析类的能力，查看属性、构造器、方法的结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           String name = <span class="string">"JavaSE.Chapter5.Section57.cs571.Employee"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取输入字符串的类对象</span></span><br><span class="line">            Class cl = Class.forName(name);</span><br><span class="line">            System.out.println(cl + <span class="string">"-1-"</span>);</span><br><span class="line">            <span class="comment">//获取父类对象</span></span><br><span class="line">            Class supercl = cl.getSuperclass();</span><br><span class="line">            System.out.println(supercl + <span class="string">"-2-"</span>);</span><br><span class="line">            <span class="comment">//获取类的访问修饰符和属于public、private、还是final</span></span><br><span class="line">            String modifiers = Modifier.toString(cl.getModifiers());</span><br><span class="line">            System.out.println(cl.getModifiers() + <span class="string">"-----cl.getModifiers"</span>);</span><br><span class="line">            System.out.println(modifiers + <span class="string">"-4-"</span>);</span><br><span class="line">            <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) System.out.print(modifiers + <span class="string">" "</span>);</span><br><span class="line">            System.out.print(<span class="string">"class "</span> + name);</span><br><span class="line">            if (supercl != null &amp;&amp; supercl != Object.class) System.out.print(" extends "</span><br><span class="line">                    + supercl.getName());</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">"\n&#123;\n"</span>);</span><br><span class="line">            System.out.println(<span class="string">"------------打印构造器方法-----------"</span>);</span><br><span class="line">            printConstructors(cl);</span><br><span class="line">            System.out.println(<span class="string">"------------打印非构造器方法-----------"</span>);</span><br><span class="line">            printMethods(cl);</span><br><span class="line">            System.out.println(<span class="string">"------------打印属性信息-----------"</span>);</span><br><span class="line">            printFields(cl);</span><br><span class="line">            System.out.println(<span class="string">"&#125;"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prints all constructors of a class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConstructors</span><span class="params">(Class cl)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*返回反映Constructor对象表示的类声明的所有Constructor对象的数组类 。</span></span><br><span class="line"><span class="comment">         这些是public，protected，default（package）访问和私有构造函数。</span></span><br><span class="line"><span class="comment">         返回的数组中的元素不会排序，并且不是任何特定的顺序。</span></span><br><span class="line"><span class="comment">         如果类有一个默认构造函数，它将包含在返回的数组中。</span></span><br><span class="line"><span class="comment">         如果类对象表示接口，原始类型，数组类或空值，则此方法返回长度为0的数组。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Constructor[] constructors = cl.getDeclaredConstructors();</span><br><span class="line">        System.out.println(Arrays.toString(constructors) + <span class="string">"-c5-"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Constructor c : constructors) &#123;</span><br><span class="line">            String name = c.getName();</span><br><span class="line">            System.out.print(<span class="string">"   "</span>);</span><br><span class="line">            String modifiers = Modifier.toString(c.getModifiers());</span><br><span class="line">            System.out.println(c.getModifiers() + <span class="string">"-----Counstructor.getModifiers"</span>);</span><br><span class="line">            <span class="comment">//打印构造方法的访问修饰符</span></span><br><span class="line">            <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) System.out.print(modifiers + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">//打印构造方法的名字</span></span><br><span class="line">            System.out.print(name + <span class="string">"("</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取类构造器的参数类型数组</span></span><br><span class="line">            Class[] paramTypes = c.getParameterTypes();</span><br><span class="line">            System.out.println(<span class="string">"-6-"</span> + Arrays.toString(paramTypes) + <span class="string">"-c6-"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; paramTypes.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>) System.out.print(<span class="string">", "</span>);</span><br><span class="line">                <span class="comment">//打印参数类型名字</span></span><br><span class="line">                System.out.print(paramTypes[j].getName());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">");"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prints all methods of a class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMethods</span><span class="params">(Class cl)</span> </span>&#123;</span><br><span class="line">        Method[] methods = cl.getDeclaredMethods();</span><br><span class="line">        System.out.println(Arrays.toString(methods) + <span class="string">"-m7-"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            Class retType = m.getReturnType();</span><br><span class="line">            System.out.println(retType + <span class="string">"-m8-"</span>);</span><br><span class="line">            String name = m.getName();</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">"   "</span>);</span><br><span class="line">            <span class="comment">// print modifiers, return type and method name</span></span><br><span class="line">            String modifiers = Modifier.toString(m.getModifiers());</span><br><span class="line">            System.out.println(m.getModifiers() + <span class="string">"-----Method.getModifiers"</span>);</span><br><span class="line">            <span class="comment">//打印方法的访问修饰符</span></span><br><span class="line">            <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) System.out.print(modifiers + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">//打印方法返回类型和方法名</span></span><br><span class="line">            System.out.print(retType.getName() + <span class="string">" "</span> + name + <span class="string">"("</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// print parameter types</span></span><br><span class="line">            Class[] paramTypes = m.getParameterTypes();</span><br><span class="line">            System.out.println(<span class="string">"-m9-"</span> + Arrays.toString(paramTypes) + <span class="string">"-m9-"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; paramTypes.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>) System.out.print(<span class="string">", "</span>);</span><br><span class="line">                <span class="comment">//打印方法参数类型</span></span><br><span class="line">                System.out.print(paramTypes[j].getName());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">");"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prints all fields of a class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFields</span><span class="params">(Class cl)</span> </span>&#123;</span><br><span class="line">        Field[] fields = cl.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            Class type = f.getType();<span class="comment">//返回属性所属类型的 Class 对象</span></span><br><span class="line">            System.out.println(type + <span class="string">"-f10-"</span>);</span><br><span class="line">            String name = f.getName();</span><br><span class="line">            System.out.print(<span class="string">"   "</span>);</span><br><span class="line">            String modifiers = Modifier.toString(f.getModifiers());</span><br><span class="line">            System.out.println(f.getModifiers() + <span class="string">"-----Field.getModifiers"</span>);</span><br><span class="line">            <span class="comment">//打印属性的访问修饰符</span></span><br><span class="line">            <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) System.out.print(modifiers + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">//打印属性的类型名和属性名字</span></span><br><span class="line">            System.out.println(type.getName() + <span class="string">" "</span> + name + <span class="string">";"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200722195702267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200722195718811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200722195729203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="7-获取或设置类对象的属性值"><a href="#7-获取或设置类对象的属性值" class="headerlink" title="7.获取或设置类对象的属性值"></a>7.获取或设置类对象的属性值</h1><ul><li>在编写程序时， 如果知道想要査看的属性和类型，查看指定的属性值是一件很容易的事情。而利用反射机制可以查看在编译时还不清楚的属性值。</li><li><code>Class t = f.getType();</code>//获取属性类型,f为Field对象。</li><li>我们可以用<code>f.get(obj)</code>获取 obj 属性的当前值。f为Field对象，obj是一个Object对象。</li><li>可以获得就可以设置。调用<code>f.set(obj，value)</code>可以将 obj 对象的 f 属性设置成新值。f为Field对象。<ul><li>（1）如果我们要查看某个private属性的值，由于受限于java的访问机制，我们需要调用Field、Method 或 Constructor 对象的 setAccessible 方法，来设置private的值的可访问性，<code>x. setAccessible(true);</code>，x为Field、Method 或 Constructor的对象。<br>（2）也可以使用<code>AccessibleObject.setAccessible(x, true);</code>来设置private值的可访问性，它是 Field、 Method 和 Constructor 类的公共超类，x为Field、Method 或 Constructor 对象的数组引用。</li></ul></li></ul><p><strong>接下来的一个例子将使用上面所说的方法，来查看访问对象的属性值</strong></p><p>如下一个可供任意类使用的通用 toString方法。 其中使用 getDeclaredFileds 获得所有的数据属性， 然后使用 setAccessible 将所有的属性设置为可访问的。 对于每个属性，获得了名字和值。递归调用 toString方法，将每个值转换成字符串。(这个例子是java核心技术卷一里面的，这个例子看懂我感觉还是需要花时间的，有的地方我还没看懂……)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter5.Section57.cs574;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> JavaSE.Chapter5.Section57.cs571.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在运行时使用反射分析对象，查看对象当前的各个属性值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAnalyzerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchFieldException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Employee s = <span class="keyword">new</span> Employee();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> ObjectAnalyzer().toString(s));</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">        String[] str = &#123;<span class="string">"str11"</span>, <span class="string">"str22"</span>, <span class="string">"str33"</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> ObjectAnalyzer().toString(str));</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Class em = s.getClass();</span><br><span class="line">        Object obj = em.newInstance();</span><br><span class="line">        Field f = em.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object val = f.get(obj);<span class="comment">//获取属性的值</span></span><br><span class="line">        System.out.println(val);</span><br><span class="line">        f.set(obj, <span class="string">"BitHachi"</span>);</span><br><span class="line">        Employee em2 = (Employee) obj;</span><br><span class="line">        System.out.println(em2.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter5.Section57.cs574;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.AccessibleObject;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAnalyzer</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> ArrayList&lt;Object&gt; visited = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (obj == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">      <span class="keyword">if</span> (visited.contains(obj)) <span class="keyword">return</span> <span class="string">"..."</span>;</span><br><span class="line">      visited.add(obj);</span><br><span class="line">      Class cl = obj.getClass();</span><br><span class="line">      <span class="comment">//如果对象是一个字符串对象，则直接打印其值</span></span><br><span class="line">      <span class="keyword">if</span> (cl == String<span class="class">.<span class="keyword">class</span>) <span class="title">return</span> (<span class="title">String</span>) <span class="title">obj</span></span>;</span><br><span class="line">      <span class="comment">//判断类对象是否是一个数组</span></span><br><span class="line">      <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">         <span class="comment">//getComponentType返回对象数组的的Class类对象。 如果此类不表示数组类，则此方法返回null。</span></span><br><span class="line">         String r = cl.getComponentType() + <span class="string">"[]&#123;"</span>;</span><br><span class="line">         System.out.println(r + <span class="string">"-1-"</span>);</span><br><span class="line">         <span class="comment">//返回指定数组对象的长度Array.getLength(obj)</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Array.getLength(obj); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) r += <span class="string">","</span>;</span><br><span class="line">            <span class="comment">//返回指定数组对象中的索引组件的值。</span></span><br><span class="line">            Object val = Array.get(obj, i);</span><br><span class="line">            System.out.println(val + <span class="string">" -val -2-"</span>);</span><br><span class="line">            <span class="comment">/*确定指定类对象表示一个基本类型。</span></span><br><span class="line"><span class="comment">            有九个预定类对象代表八个原始类型和void。</span></span><br><span class="line"><span class="comment">            这些是由Java虚拟机创建，并且具有相同的名称为他们所代表的基本类型，</span></span><br><span class="line"><span class="comment">            即boolean ， byte ， char ， short ， int ， long ， float和double 。</span></span><br><span class="line"><span class="comment">            isPrimitive返回一个boolean值*/</span></span><br><span class="line">            <span class="keyword">if</span> (cl.getComponentType().isPrimitive()) r += <span class="string">"@"</span> + val + <span class="string">"@"</span>;</span><br><span class="line">            <span class="keyword">else</span> r += toString(val);</span><br><span class="line">            System.out.println(r + <span class="string">"-3-"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> r + <span class="string">"&#125;"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      String r = cl.getName();</span><br><span class="line">      System.out.println(r + <span class="string">"-4-"</span>);</span><br><span class="line">      <span class="comment">// 检查此类和所有超类的字段</span></span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">         r += <span class="string">"["</span>;</span><br><span class="line">         <span class="comment">//获取类的所有属性得一个数组</span></span><br><span class="line">         Field[] fields = cl.getDeclaredFields();</span><br><span class="line">         <span class="comment">/*setAccessible()为反射对象设置可访问标志。 true 表明屏蔽 Java语言的访问检查，</span></span><br><span class="line"><span class="comment">         使得对象的 private私有属性也可以被査询和设置。 */</span></span><br><span class="line">         AccessibleObject.setAccessible(fields, <span class="keyword">true</span>);</span><br><span class="line">         <span class="comment">//获取所有属性的名字和值</span></span><br><span class="line">         <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isStatic(f.getModifiers())) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!r.endsWith(<span class="string">"["</span>)) r += <span class="string">","</span>;</span><br><span class="line">               r += f.getName() + <span class="string">"="</span>;</span><br><span class="line">               System.out.println(r + <span class="string">"-5-"</span>);</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  Class t = f.getType();<span class="comment">//获取属性类型</span></span><br><span class="line">                  Object val = f.get(obj);<span class="comment">//获取属性的值</span></span><br><span class="line">                  System.out.println(val + <span class="string">" -val -6-"</span>);</span><br><span class="line">                  <span class="keyword">if</span> (t.isPrimitive()) &#123;</span><br><span class="line">                     r += val;</span><br><span class="line">                     System.out.println(r + <span class="string">"-7-"</span>);</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     r += toString(val);</span><br><span class="line">                     System.out.println(r + <span class="string">"-7-"</span>);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         r += <span class="string">"]"</span>;</span><br><span class="line">         cl = cl.getSuperclass();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (cl != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> r;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200722195249588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="8-利用反射调用任意方法"><a href="#8-利用反射调用任意方法" class="headerlink" title="8.利用反射调用任意方法"></a>8.利用反射调用任意方法</h1><p><strong>通过反射，调用类中的方法，通过Method类完成。步骤：</strong></p><ol><li>通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对象，并设置此方法操作时所需要的参数类型。</li><li>之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息。</li></ol><p><strong>Object invoke(Object obj, Object … args)</strong></p><p><strong>说明：</strong></p><ol><li>Object 对应原方法的返回值，若原方法无返回值，此时返回null</li><li>若原方法若为静态方法，此时形参Object obj可为null</li><li>若原方法形参列表为空，则Object[] args为null</li><li>若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的setAccessible(true)方法，将可访问private的方法。</li></ol><p><strong>下面是一个代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter5.Section57.cs576;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTableTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 获取相应方法的Method对象，通过类对象来获取方法对象</span></span><br><span class="line">      Method square = MethodTableTest.class.getMethod("square", double.class);</span><br><span class="line">      Method sqrt = Math.class.getMethod("sqrt", double.class);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 打印x和y值表</span></span><br><span class="line">      printTable(<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>, square);</span><br><span class="line">      printTable(<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>, sqrt);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x * x;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Prints a table with x- and y-values for a method</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> from the lower bound for the x-values 上限</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> to   the upper bound for the x-values  下限</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> n    the number of rows in the table   个数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> f    a method with a double parameter and double return value</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTable</span><span class="params">(<span class="keyword">double</span> from, <span class="keyword">double</span> to, <span class="keyword">int</span> n, Method f)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// print out the method as table header</span></span><br><span class="line">      System.out.println(<span class="string">"方法： "</span> + f);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">double</span> dx = (to - from) / (n - <span class="number">1</span>);<span class="comment">//按上下限设置每次加的值</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">double</span> x = from; x &lt;= to; x += dx) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> y = (Double) f.invoke(<span class="keyword">null</span>, x);<span class="comment">//调用这个方法对象进行计算</span></span><br><span class="line">            System.out.printf(<span class="string">"%10.4f | %10.4f%n"</span>, x, y);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020072220232476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="9-使用反射编写泛型数组代码，复制数组"><a href="#9-使用反射编写泛型数组代码，复制数组" class="headerlink" title="9. 使用反射编写泛型数组代码，复制数组"></a>9. 使用反射编写泛型数组代码，复制数组</h1><ul><li>我们可以利用反射来扩充一个数组的容量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter5.Section57.cs575;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOfTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">      a = (<span class="keyword">int</span>[]) goodCopyOf(a, <span class="number">10</span>);</span><br><span class="line">      System.out.println(Arrays.toString(a));</span><br><span class="line">      System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">      String[] b = &#123;<span class="string">"Tom"</span>, <span class="string">"Dick"</span>, <span class="string">"Harry"</span>&#125;;</span><br><span class="line">      b = (String[]) goodCopyOf(b, <span class="number">10</span>);</span><br><span class="line">      System.out.println(Arrays.toString(b));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">goodCopyOf</span><span class="params">(Object a, <span class="keyword">int</span> newLength)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//第一步：获取a数组的类对象</span></span><br><span class="line">      Class cl = a.getClass();</span><br><span class="line">      System.out.println(cl + <span class="string">"---1"</span>);</span><br><span class="line">      <span class="comment">//第二步：判断a数组的类对象是否是一个数组</span></span><br><span class="line">      <span class="keyword">if</span> (!cl.isArray()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//第三步：使用Class类的getComponentType方法确定数组对应的类型</span></span><br><span class="line">      Class componentType = cl.getComponentType();</span><br><span class="line">      System.out.println(componentType + <span class="string">"---2"</span>);</span><br><span class="line">      <span class="comment">//获取数组的长度</span></span><br><span class="line">      <span class="keyword">int</span> length = Array.getLength(a);</span><br><span class="line">      System.out.println(length + <span class="string">"---3"</span>);</span><br><span class="line">      <span class="comment">//构造新数组newInstance方法</span></span><br><span class="line">      <span class="comment">//返回一个具有给定类型、给定长度的新数组</span></span><br><span class="line">      Object newArray = Array.newInstance(componentType, newLength);</span><br><span class="line">      <span class="comment">/*arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</span></span><br><span class="line"><span class="comment">      将指定源数组中的数组从指定位置复制到目标数组的指定位置。*/</span></span><br><span class="line">      System.arraycopy(a, <span class="number">0</span>, newArray, <span class="number">0</span>, Math.min(length, newLength));</span><br><span class="line">      <span class="keyword">return</span> newArray;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020072220285340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="10-可以用-比较两个Class对象"><a href="#10-可以用-比较两个Class对象" class="headerlink" title="10. 可以用==比较两个Class对象"></a>10. 可以用==比较两个Class对象</h1><ul><li>虚拟机为每个类型管理一个 Class 对象。因此， 可以利用== 运算符实现两个类对象比较的操作。 例如:</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200617213040641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="11-类的加载与ClassLoader理解"><a href="#11-类的加载与ClassLoader理解" class="headerlink" title="11. 类的加载与ClassLoader理解"></a>11. 类的加载与ClassLoader理解</h1><h2 id="11-1-了解类的加载过程"><a href="#11-1-了解类的加载过程" class="headerlink" title="11.1 了解类的加载过程"></a>11.1 了解类的加载过程</h2><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813173019.png" alt="image-20200813173019571"></p><p><code>加载</code>：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。</p><p><code>链接</code>：将Java类的二进制代码合并到JVM的运行状态之中的过程。</p><ul><li>验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题</li><li>准备：正式为类变量（static）分配内存并 <code>设置类变量默认初始值的阶段</code>，这些内存都将在方法区中进行分配。</li><li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li></ul><p><code>初始化</code>：</p><ul><li>执行<code>类构造器&lt;clinit&gt;()方法</code>的过程。<code>类构造器&lt;clinit&gt;()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的</code>。（类构造器是构造类信息的，不是构造该类对象的构造器）。</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoadingTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(A.m);<span class="comment">//100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一步：将A.class读入内存，并创建一个Class对象，此过程有ClassLoader完成</span></span><br><span class="line"><span class="comment">//第二步：链接结束后m=0</span></span><br><span class="line"><span class="comment">//第三步：初始化后，m的值由&lt;clinit&gt;()方法执行决定</span></span><br><span class="line"><span class="comment">// 这个A的类构造器&lt;clinit&gt;()方法由类变量的赋值和静态代码块中的语句按照**顺序**合并产生，类似于</span></span><br><span class="line"><span class="comment">// &lt;clinit&gt;()&#123;</span></span><br><span class="line"><span class="comment">// m = 300;</span></span><br><span class="line"><span class="comment">// m = 100;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="11-2-什么时候会发生类初始化-？"><a href="#11-2-什么时候会发生类初始化-？" class="headerlink" title="11.2  什么时候会发生类初始化 ？"></a>11.2  什么时候会发生类初始化 ？</h2><p> <strong>类的主动引用 （ 一定会发生类的初始化 ）</strong></p><ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul><p><strong>类的被动引用 （ 不会发生类的初始化 ）</strong></p><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化</li><li>当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoadingTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 主动引用：一定会导致A和Father的初始化</span></span><br><span class="line">        <span class="comment">// A a = new A();</span></span><br><span class="line">        <span class="comment">// System.out.println(A.m);</span></span><br><span class="line">        <span class="comment">// Class.forName("xxxx");</span></span><br><span class="line">        <span class="comment">// 被动引用</span></span><br><span class="line">        A[] array = <span class="keyword">new</span> A[<span class="number">5</span>];<span class="comment">//不会导致A和Father的初始化</span></span><br><span class="line">        <span class="comment">// System.out.println(A.b);//只会初始化Father</span></span><br><span class="line">        <span class="comment">// System.out.println(A.M);//不会导致A和Father的初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"main所在的类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"父类被加载"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"子类被加载"</span>);</span><br><span class="line">    m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-3-类加载器的作用"><a href="#11-3-类加载器的作用" class="headerlink" title="11.3 类加载器的作用"></a>11.3 类加载器的作用</h2><p><strong>类加载器的作用：</strong></p><ul><li><code>类加载的作用</code>：将class文件字节码内容加载到内存中，并将这些<code>静态数据转换成方法区的运行时数据结构</code>，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</li><li><code>类缓存</code>：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813190848.png" alt="image-20200813190848622"></p><p><strong>JVM 规范定义了如下类型的类的加载器。</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813190918.png" alt="image-20200813190918140"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对于自定义类，使用系统类加载器进行加载</span></span><br><span class="line">        ClassLoader classLoader = ClassLoaderTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        <span class="comment">//调用系统类加载器的getParent()：获取扩展类加载器</span></span><br><span class="line">        ClassLoader classLoader1 = classLoader.getParent();</span><br><span class="line">        System.out.println(classLoader1);</span><br><span class="line">        <span class="comment">//调用扩展类加载器的getParent()：无法获取引导类加载器</span></span><br><span class="line">        <span class="comment">//引导类加载器主要负责加载java的核心类库，无法加载自定义类的。</span></span><br><span class="line">        ClassLoader classLoader2 = classLoader1.getParent();</span><br><span class="line">        System.out.println(classLoader2);</span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader3 = String<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@<span class="number">1</span>d44bcfa</span><br><span class="line">null</span><br><span class="line">null</span><br></pre></td></tr></table></figure><h1 id="12-收获与感受"><a href="#12-收获与感受" class="headerlink" title="12.收获与感受"></a>12.收获与感受</h1><ul><li>反射里面用到了多态的特性，这一点真的很重要，特别是Object与其它对象之间的互转，不懂得话，很容易懵圈</li><li>4-8的应用是反射里面的核心点，当然还有很多的API没办法一次性讲完，其实只要懂了核心的部分，其它的API就比较好懂了</li><li>关于反射的内容和应用还有很多，以后在工作中遇到了相关内容再进行补充叭，现在作为初学者，先总结整理这么多叭。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html#%E5%8F%8D%E5%B0%84%E5%B8%B8%E7%94%A8api" target="_blank" rel="noopener">https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html#%E5%8F%8D%E5%B0%84%E5%B8%B8%E7%94%A8api</a></li><li><a href="https://www.iteye.com/blog/762626559-qq-com-395402" target="_blank" rel="noopener">https://www.iteye.com/blog/762626559-qq-com-395402</a></li><li><a href="https://blog.csdn.net/qq_40434646/article/details/82351488" target="_blank" rel="noopener">https://blog.csdn.net/qq_40434646/article/details/82351488</a></li><li><a href="https://blog.csdn.net/kjfcpua/article/details/8496911" target="_blank" rel="noopener">https://blog.csdn.net/kjfcpua/article/details/8496911</a></li><li><a href="http://yuncode.net/code/c_56768be18995515" target="_blank" rel="noopener">http://yuncode.net/code/c_56768be18995515</a></li><li><a href="https://www.cnblogs.com/fengmao/p/8609855.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengmao/p/8609855.html</a></li><li><a href="https://www.cnblogs.com/daimajun/p/6545533.html" target="_blank" rel="noopener">https://www.cnblogs.com/daimajun/p/6545533.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《MySQL必知必会》所有SQL语句图表集合（可作为查询表使用）---持续更新</title>
      <link href="/posts/dfcd7c37.html"/>
      <url>/posts/dfcd7c37.html</url>
      
        <content type="html"><![CDATA[<ul><li>本篇文章是对《MySQL必知必会》所有语句知识点的图表集合，适合快速查询遗忘的SQL语句，<code>原创不易，转载请注明出处</code>。</li><li>本文的脉络结构，首先先给出《MySQL必知必会》的目录，有一个全局的认识，方便查找，然后依次列出三张表。</li><li>SQL语句图表集合总共分为三张，<code>第一张</code>的内容是书中3-13章的内容，<code>第二张</code>是14-22章的内容，<code>第三张</code>是23-28章的内容，希望对大家学习MySQL的SQL语句有所帮助叭！</li></ul><h1 id="1-《MySQL必知必会》目录"><a href="#1-《MySQL必知必会》目录" class="headerlink" title="1.《MySQL必知必会》目录"></a>1.《MySQL必知必会》目录</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721140609365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721140403664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721140427144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721140449494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721140510256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-第一张"><a href="#2-第一张" class="headerlink" title="2.第一张"></a>2.第一张</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721141746353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="3-第二张"><a href="#3-第二张" class="headerlink" title="3.第二张"></a>3.第二张</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020100713375151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="4-第三张"><a href="#4-第三张" class="headerlink" title="4. 第三张"></a>4. 第三张</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20201007133818313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类详解(使用场景和好处、相关内部类的笔试面试题)</title>
      <link href="/posts/bf7b3e18.html"/>
      <url>/posts/bf7b3e18.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>此篇文章作者为：Matrix海子　　　　<br>出处：<a href="http://www.cnblogs.com/dolphin0520/" target="_blank" rel="noopener">http://www.cnblogs.com/dolphin0520/</a></p></blockquote><p>最近也是在学习java，看的是《java核心技术卷一》jdk8，看到内部类的知识点有一点模糊不清，偶然间看到作者写的这篇文章，把我在书中没有完全理解和疑惑的地方全讲清楚了，虽然关于字节码那部分对我这个初学者来说有一些参数看不懂，但是大致通过作者的叙述和自己的思考，可以理解大部分，相信对我以后学习jvm会很有帮助，能看到这篇文章，万分荣幸，感谢作者的心血付出，膜拜。</p><p><strong>进入正文：</strong><br>说起内部类这个词，想必很多人都不陌生，但是又会觉得不熟悉。原因是平时编写代码时可能用到的场景不多，用得最多的是在有事件监听的情况下，并且即使用到也很少去总结内部类的用法。今天我们就来一探究竟。</p><h1 id="1-内部类基础"><a href="#1-内部类基础" class="headerlink" title="1.内部类基础"></a>1.内部类基础</h1><p>在Java中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。广泛意义上的内部类一般来说包括这四种：成员内部类、局部内部类、匿名内部类和静态内部类。下面就先来了解一下这四种内部类的用法。</p><h2 id="1-1-成员内部类"><a href="#1-1-成员内部类" class="headerlink" title="1.1 成员内部类"></a>1.1 成员内部类</h2><p><strong>成员内部类作为类的成员的角色：</strong></p><ol><li>和外部类不同，Inner class还可以声明为private或protected；</li><li>可以调用外部类的结构</li><li>Inner class 可以声明为<code>static</code>的，但此时就不能再使用外层类的非static的成员变量；</li><li>可以在内部定义属性、方法、构造器等结构</li><li>可以声明为<code>abstract</code>类 ，因此可以被其它的内部类继承</li><li>可以声明为<code>final</code>的</li><li>编译以后生成OuterClass$InnerClass.class字节码文件（也适用于局部内部类）</li></ol><p><strong>成员内部类是最普通的内部类，它的定义为位于另一个类的内部，形如下面的形式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//成员内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"drawshape"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看起来，类Draw像是类Circle的一个成员，Circle称为外部类。成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">            System.out.println(count);   <span class="comment">//外部类的静态成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过要注意的是，当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，即默认情况下访问的是成员内部类的成员。如果要访问外部类的同名成员，需要以下面的形式进行访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类.<span class="keyword">this</span>.成员变量</span><br><span class="line">外部类.<span class="keyword">this</span>.成员方法</span><br></pre></td></tr></table></figure><p>虽然成员内部类可以无条件地访问外部类的成员，而外部类想访问成员内部类的成员却不是这么随心所欲了。在外部类中如果要访问成员内部类的成员，必须先创建一个成员内部类的对象，再通过指向这个对象的引用来访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        getDrawInstance().drawSahpe();   <span class="comment">//必须先创建成员内部类的对象，再进行访问</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Draw <span class="title">getDrawInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Draw();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成员内部类是依附外部类而存在的，也就是说，如果要创建成员内部类的对象，前提是必须存在一个外部类的对象。创建成员内部类对象的一般方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//第一种方式：</span></span><br><span class="line">        Outter outter = <span class="keyword">new</span> Outter();</span><br><span class="line">        Outter.Inner inner = outter.<span class="keyword">new</span> Inner();  <span class="comment">//必须通过Outter对象来创建</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二种方式：</span></span><br><span class="line">        Outter.Inner inner1 = outter.getInnerInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Inner inner = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInnerInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inner == <span class="keyword">null</span>)</span><br><span class="line">            inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        <span class="keyword">return</span> inner;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限。比如上面的例子，如果成员内部类Inner用private修饰，则只能在外部类的内部访问，如果用public修饰，则任何地方都能访问；如果用protected修饰，则只能在同一个包下或者继承外部类的情况下访问；如果是默认访问权限，则只能在同一个包下访问。这一点和外部类有一点不一样，外部类只能被public和包访问两种权限修饰。我个人是这么理解的，由于成员内部类看起来像是外部类的一个成员，所以可以像类的成员一样拥有多种权限修饰。</p><blockquote><p>这里插入作者当时版本没有考虑到的一个问题：<br>“<code>局部内部类和匿名内部类</code>只能访问局部final变量”<br>从JDK 1.8开始，会默认给这两种内部类访问的field 加上final(隐式地)，所以你可能会在编译器中看到可以访问没有加final的变量，只有你去<code>修改</code>它时，编译器才会<code>报错</code>。</p></blockquote><h2 id="1-2-局部内部类"><a href="#1-2-局部内部类" class="headerlink" title="1.2 局部内部类"></a>1.2 局部内部类</h2><p><strong>局部内部类的特点:</strong></p><ol><li>内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号，以及数字编号。</li><li>只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类。</li><li>局部内部类可以使用外部类的成员，包括私有的。</li><li><code>局部内部类可以使用外部方法的局部变量，但是必须是final的</code>。由局部内部类和局部变量的声明周期不同所致。</li><li>局部内部类和局部变量地位类似，不能使用public,protected,缺省,private </li><li>局部内部类不能使用static修饰，因此也不能包含静态成员</li></ol><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">getWoman</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;   <span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">int</span> age =<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Woman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-匿名内部类"><a href="#1-3-匿名内部类" class="headerlink" title="1.3 匿名内部类"></a>1.3 匿名内部类</h2><ul><li><p>匿名内部类不能定义任何静态成员、方法和类，只能创建匿名内部类的一个实例。一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类。</p></li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类构造器（实参列表）| 实现接口()&#123;</span><br><span class="line"><span class="comment">// 匿名内部类的类体部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名内部类的特点</p><ol><li>匿名内部类必须继承父类或实现接口</li><li>匿名内部类只能有一个对象</li><li>匿名内部类对象只能使用多态形式引用</li></ol></li></ul><p>匿名内部类应该是平时我们编写代码时用得最多的，在编写事件监听的代码时使用匿名内部类不但方便，而且使代码更加容易维护。下面这段代码是一段Android事件监听代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scan_bt.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">         </span><br><span class="line">        history_bt.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这段代码为两个按钮设置监听器，这里面就使用了匿名内部类。这段代码中的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>就是匿名内部类的使用。代码中需要给按钮设置监听器对象，使用匿名内部类能够在实现父类或者接口中的方法情况下同时产生一个相应的对象，但是前提是这个父类或者接口必须先存在才能这样使用。当然像下面这种写法也是可以的，跟上面使用匿名内部类达到效果相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan_bt.setOnClickListener(<span class="keyword">new</span> Listener1());       </span><br><span class="line">    history_bt.setOnClickListener(<span class="keyword">new</span> Listener2());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listener1</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">             </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listener2</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">             </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法虽然能达到一样的效果，但是既冗长又难以维护，所以一般使用匿名内部类的方法来编写事件监听代码。同样的，匿名内部类也是不能有访问修饰符和static修饰符的。</p><p>　　匿名内部类是唯一一种没有构造器的类。正因为其没有构造器，所以匿名内部类的使用范围非常有限，大部分匿名内部类用于接口回调。匿名内部类在编译的时候由系统自动起名为Outter$1.class。一般来说，匿名内部类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的实现或是重写。</p><h2 id="1-4-静态内部类"><a href="#1-4-静态内部类" class="headerlink" title="1.4 静态内部类"></a>1.4 静态内部类</h2><p>静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。静态内部类是不需要依赖于外部类的，这点和类的静态成员属性有点类似，并且它不能使用外部类的非static成员变量或者方法，这点很好理解，因为在没有外部类的对象的情况下，可以创建静态内部类的对象，如果允许访问外部类的非static成员就会产生矛盾，因为外部类的非static成员必须依附于具体的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Outter.Inner inner = <span class="keyword">new</span> Outter.Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200720231313280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-深入理解内部类"><a href="#2-深入理解内部类" class="headerlink" title="2.深入理解内部类"></a>2.深入理解内部类</h1><h2 id="2-1-为什么成员内部类可以无条件访问外部类的成员？"><a href="#2-1-为什么成员内部类可以无条件访问外部类的成员？" class="headerlink" title="2.1 为什么成员内部类可以无条件访问外部类的成员？"></a>2.1 为什么成员内部类可以无条件访问外部类的成员？</h2><p>　　在此之前，我们已经讨论过了成员内部类可以无条件访问外部类的成员，那具体究竟是如何实现的呢？下面通过反编译字节码文件看看究竟。事实上，编译器在进行编译的时候，会将成员内部类单独编译成一个字节码文件，下面是Outter.java的代码：　　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Inner inner = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInnerInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inner == <span class="keyword">null</span>)</span><br><span class="line">            inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        <span class="keyword">return</span> inner;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译之后，出现了两个字节码文件：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200720231435730.png" alt="在这里插入图片描述"></p><p>反编译Outter$Inner.class文件得到下面信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">E:\Workspace\Test\bin\com\cxh\test2&gt;javap -v Outter$Inner</span><br><span class="line">Compiled from <span class="string">"Outter.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">cxh</span>.<span class="title">test2</span>.<span class="title">Outter</span>$<span class="title">Inner</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line">  SourceFile: "Outter.java"</span><br><span class="line">  InnerClass:</span><br><span class="line">   #24= #1 of #22; //Inner=class com/cxh/test2/Outter$Inner of class com/cxh/tes</span><br><span class="line">t2/Outter</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">50</span></span><br><span class="line">  Constant pool:</span><br><span class="line">const #1 = class        #2;     //  com/cxh/test2/Outter$Inner</span><br><span class="line">const #2 = Asciz        com/cxh/test2/Outter$Inner;</span><br><span class="line">const #3 = class        #4;     //  java/lang/Object</span><br><span class="line">const #4 = Asciz        java/lang/Object;</span><br><span class="line">const #5 = Asciz        this$0;</span><br><span class="line">const #6 = Asciz        Lcom/cxh/test2/Outter;;</span><br><span class="line">const #7 = Asciz        &lt;init&gt;;</span><br><span class="line">const #8 = Asciz        (Lcom/cxh/test2/Outter;)V;</span><br><span class="line">const #9 = Asciz        Code;</span><br><span class="line">const #10 = Field       #1.#11; //  com/cxh/test2/Outter$Inner.this$0:Lcom/cxh/t</span><br><span class="line">est2/Outter;</span><br><span class="line">const #11 = NameAndType #5:#6;//  this$0:Lcom/cxh/test2/Outter;</span><br><span class="line">const #12 = Method      #3.#13; //  java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">const #13 = NameAndType #7:#14;//  "&lt;init&gt;":()V</span><br><span class="line">const #14 = Asciz       ()V;</span><br><span class="line">const #15 = Asciz       LineNumberTable;</span><br><span class="line">const #16 = Asciz       LocalVariableTable;</span><br><span class="line">const #17 = Asciz       this;</span><br><span class="line">const #18 = Asciz       Lcom/cxh/test2/Outter$Inner;;</span><br><span class="line">const #19 = Asciz       SourceFile;</span><br><span class="line">const #20 = Asciz       Outter.java;</span><br><span class="line">const #21 = Asciz       InnerClasses;</span><br><span class="line">const #22 = class       #23;    //  com/cxh/test2/Outter</span><br><span class="line">const #23 = Asciz       com/cxh/test2/Outter;</span><br><span class="line">const #24 = Asciz       Inner;</span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">final</span> com.cxh.test2.Outter <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> com.cxh.test2.Outter$Inner(com.cxh.test2.Outter);</span><br><span class="line">  Code:</span><br><span class="line">   Stack=<span class="number">2</span>, Locals=<span class="number">2</span>, Args_size=<span class="number">2</span></span><br><span class="line">   <span class="number">0</span>:   aload_0</span><br><span class="line">   <span class="number">1</span>:   aload_1</span><br><span class="line">   2:   putfield        #10; //Field this$0:Lcom/cxh/test2/Outter;</span><br><span class="line">   <span class="number">5</span>:   aload_0</span><br><span class="line">   6:   invokespecial   #12; //Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   <span class="number">9</span>:   <span class="keyword">return</span></span><br><span class="line">  LineNumberTable:</span><br><span class="line">   line <span class="number">16</span>: <span class="number">0</span></span><br><span class="line">   line <span class="number">18</span>: <span class="number">9</span></span><br><span class="line"> </span><br><span class="line">  LocalVariableTable:</span><br><span class="line">   Start  Length  Slot  Name   Signature</span><br><span class="line">   <span class="number">0</span>      <span class="number">10</span>      <span class="number">0</span>    <span class="keyword">this</span>       Lcom/cxh/test2/Outter$Inner;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第11行到35行是常量池的内容，下面逐一第38行的内容：<br><code>final com.cxh.test2.Outter this$0;</code></p><p>　这行是一个指向外部类对象的指针，看到这里想必大家豁然开朗了。也就是说编译器会默认为成员内部类添加了一个指向外部类对象的引用，那么这个引用是如何赋初值的呢？下面接着看内部类的构造器：<br>　<br><code>public com.cxh.test2.Outter$Inner(com.cxh.test2.Outter);</code></p><p>从这里可以看出，虽然我们在定义的内部类的构造器是无参构造器，编译器还是会默认添加一个参数，该参数的类型为指向外部类对象的一个引用，所以成员内部类中的Outter this&amp;0 指针便指向了外部类对象，因此可以在成员内部类中随意访问外部类的成员。从这里也间接说明了成员内部类是依赖于外部类的，如果没有创建外部类的对象，则无法对Outter this&amp;0引用进行初始化赋值，也就无法创建成员内部类的对象了。</p><h2 id="2-2-为什么局部内部类和匿名内部类只能访问局部final变量？"><a href="#2-2-为什么局部内部类和匿名内部类只能访问局部final变量？" class="headerlink" title="2.2 为什么局部内部类和匿名内部类只能访问局部final变量？"></a>2.2 为什么局部内部类和匿名内部类只能访问局部final变量？</h2><p>想必这个问题也曾经困扰过很多人，在讨论这个问题之前，先看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码会被编译成两个class文件：Test.class和Test1.class。默认情况下，编译器会为匿名内部类和局部内部类起名为Outterx.class（x为正整数）。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200720231625870.png" alt="在这里插入图片描述"></p><p>根据上图可知，test方法中的匿名内部类的名字被起为 Test$1。</p><p>　　上段代码中，如果把变量a和b前面的任一个final去掉，这段代码都编译不过。我们先考虑这样一个问题：</p><p>　　当test方法执行完毕之后，变量a的生命周期就结束了，而此时Thread对象的生命周期很可能还没有结束，那么在Thread的run方法中继续访问变量a就变成不可能了，但是又要实现这样的效果，怎么办呢？Java采用了 <code>复制</code>  的手段来解决这个问题。将这段代码的字节码反编译可以得到下面的内容：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020072023164318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们看到在run方法中有一条指令：</p><p><code>bipush 10</code></p><p>这条指令表示将操作数10压栈，表示使用的是一个本地局部变量。这个过程是在编译期间由编译器默认进行，如果这个变量的值在编译期间可以确定，则编译器默认会在匿名内部类（局部内部类）的常量池中添加一个内容相等的字面量或直接将相应的字节码嵌入到执行字节码中。这样一来，匿名内部类使用的变量是另一个局部变量，只不过值和方法中局部变量的值相等，因此和方法中的局部变量完全独立开。</p><p><strong>下面再看一个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译得到：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200720231732185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们看到匿名内部类Test$1的构造器含有两个参数，一个是指向外部类对象的引用，一个是int型变量，很显然，这里是将变量test方法中的形参a以参数的形式传进来对匿名内部类中的拷贝（变量a的拷贝）进行赋值初始化。</p><p>　<code>也就说如果局部变量的值在编译期间就可以确定，则直接在匿名内部里面创建一个拷贝。如果局部变量的值无法在编译期间确定，则通过构造器传参的方式来对拷贝进行初始化赋值。</code></p><p>　　从上面可以看出，在run方法中访问的变量a根本就不是test方法中的局部变量a。这样一来就解决了前面所说的 生命周期不一致的问题。但是新的问题又来了，既然在run方法中访问的变量a和test方法中的变量a不是同一个变量，当在run方法中改变变量a的值的话，会出现什么情况？</p><p>　　<code>对，会造成数据不一致性，这样就达不到原本的意图和要求。</code>为了解决这个问题，java编译器就限定必须将变量a限制为final变量，不允许对变量a进行更改（对于引用类型的变量，是不允许指向新的对象），这样数据不一致性的问题就得以解决了。</p><p>　　到这里，想必大家应该清楚为何 方法中的局部变量和形参都必须用final进行限定了。</p><h2 id="2-3-静态内部类有特殊的地方吗？"><a href="#2-3-静态内部类有特殊的地方吗？" class="headerlink" title="2.3 静态内部类有特殊的地方吗？"></a>2.3 静态内部类有特殊的地方吗？</h2><p>　　从前面可以知道，静态内部类是不依赖于外部类的，也就说可以在不创建外部类对象的情况下创建内部类的对象。另外，静态内部类是不持有指向外部类对象的引用的，这个读者可以自己尝试反编译class文件看一下就知道了，是没有Outter this&amp;0引用的。</p><h1 id="3-内部类的使用场景和好处"><a href="#3-内部类的使用场景和好处" class="headerlink" title="3.内部类的使用场景和好处"></a>3.内部类的使用场景和好处</h1><p>为什么在Java中需要内部类？总结一下主要有以下四点：</p><p>　　1.每个内部类都能独立的继承一个接口的实现，所以无论外部类是否已经继承了某个(接口的)实现，对于内部类都没有影响。内部类使得多继承的解决方案变得完整，</p><p>　　2.方便将存在一定逻辑关系的类组织在一起，又可以对外界隐藏。</p><p>　　3.方便编写事件驱动程序</p><p>　　4.方便编写线程代码</p><p>　　个人觉得第一点是最重要的原因之一，内部类的存在使得Java的多继承机制变得更加完善。</p><h1 id="4-常见的与内部类相关的笔试面试题"><a href="#4-常见的与内部类相关的笔试面试题" class="headerlink" title="4.常见的与内部类相关的笔试面试题"></a>4.常见的与内部类相关的笔试面试题</h1><p><strong>1.根据注释填写(1)，(2)，(3)处的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">           <span class="comment">// 初始化Bean1</span></span><br><span class="line">           (<span class="number">1</span>)</span><br><span class="line">           bean1.I++;</span><br><span class="line">           <span class="comment">// 初始化Bean2</span></span><br><span class="line">           (<span class="number">2</span>)</span><br><span class="line">           bean2.J++;</span><br><span class="line">           <span class="comment">//初始化Bean3</span></span><br><span class="line">           (<span class="number">3</span>)</span><br><span class="line">           bean3.k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Bean1</span></span>&#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">int</span> I = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2</span></span>&#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">int</span> J = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bean</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Bean3</span></span>&#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从前面可知，对于成员内部类，必须先产生外部类的实例化对象，才能产生内部类的实例化对象。而静态内部类不用产生外部类的实例化对象即可产生内部类的实例化对象。</p><p><code>创建静态内部类对象的一般形式为：  外部类类名.内部类类名 xxx = new 外部类类名.内部类类名()</code></p><p>　<code>创建成员内部类对象的一般形式为：  外部类类名.内部类类名 xxx = 外部类对象名.new 内部类类名()</code><br>　<br>因此，（1），（2），（3）处的代码分别为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1)</span></span><br><span class="line">Test test = <span class="keyword">new</span> Test();    </span><br><span class="line">Test.Bean1 bean1 = test.<span class="keyword">new</span> Bean1();  </span><br><span class="line"><span class="comment">//(2)</span></span><br><span class="line">Test.Bean2 b2 = <span class="keyword">new</span> Test.Bean2();   </span><br><span class="line"><span class="comment">//(3)</span></span><br><span class="line">Bean bean = <span class="keyword">new</span> Bean();     </span><br><span class="line">Bean.Bean3 bean3 =  bean.<span class="keyword">new</span> Bean3();</span><br></pre></td></tr></table></figure><p><strong>2.下面这段代码的输出结果是什么？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Outter outter = <span class="keyword">new</span> Outter();</span><br><span class="line">        outter.<span class="keyword">new</span> Inner().print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">            System.out.println(<span class="string">"局部变量："</span> + a);</span><br><span class="line">            System.out.println(<span class="string">"内部类变量："</span> + <span class="keyword">this</span>.a);</span><br><span class="line">            System.out.println(<span class="string">"外部类变量："</span> + Outter.<span class="keyword">this</span>.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>最后补充一点知识：关于成员内部类的继承问题。一般来说，内部类是很少用来作为继承用的。但是当用来继承的话，要注意两点：</strong></p><p>1）成员内部类的引用方式必须为 Outter.Inner.<br>2）构造器中必须有指向外部类对象的引用，并通过这个引用调用super()。这段代码摘自《Java编程思想》</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithInner</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">WithInner</span>.<span class="title">Inner</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// InheritInner() 是不能通过编译的，一定要加上形参</span></span><br><span class="line">    InheritInner(WithInner wi) &#123;</span><br><span class="line">        wi.<span class="keyword">super</span>(); <span class="comment">//必须有这句调用</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WithInner wi = <span class="keyword">new</span> WithInner();</span><br><span class="line">        InheritInner obj = <span class="keyword">new</span> InheritInner(wi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 参考资料：</p><p>　　《java编程思想》</p><p>　　<a href="http://www.cnblogs.com/chenssy/p/3388487.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenssy/p/3388487.html</a></p><p>　　<a href="http://blog.csdn.net/zhangjg_blog/article/details/20000769" target="_blank" rel="noopener">http://blog.csdn.net/zhangjg_blog/article/details/20000769</a></p><p>　　<a href="http://blog.csdn.net/zhangjg_blog/article/details/19996629" target="_blank" rel="noopener">http://blog.csdn.net/zhangjg_blog/article/details/19996629</a></p><p>　　<a href="http://blog.csdn.net/zhaoqianjava/article/details/6849812" target="_blank" rel="noopener">http://blog.csdn.net/zhaoqianjava/article/details/6849812</a></p><p>　　<a href="http://www.cnblogs.com/nerxious/archive/2013/01/24/2875649.html" target="_blank" rel="noopener">http://www.cnblogs.com/nerxious/archive/2013/01/24/2875649.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 内部类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《算法》1.1习题解析</title>
      <link href="/posts/801dfee5.html"/>
      <url>/posts/801dfee5.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-0-0"><a href="#0-0-0" class="headerlink" title="0.0.0"></a>0.0.0</h2><blockquote><p>答案解析代码在我的github：<a href="https://github.com/BitHachi/Algorithm-Four/tree/master/src/Chapter1/Section11" target="_blank" rel="noopener">BitHachi/Algorithm-Four</a></p></blockquote><h2 id="1-1-1"><a href="#1-1-1" class="headerlink" title="1.1.1"></a>1.1.1</h2><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506222538908.png" alt="在这里插入图片描述"><br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506223432556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-2"><a href="#1-1-2" class="headerlink" title="1.1.2"></a>1.1.2</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506223536342.png" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506223834110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-3"><a href="#1-1-3" class="headerlink" title="1.1.3"></a>1.1.3</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506223941397.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020050622484954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-4"><a href="#1-1-4" class="headerlink" title="1.1.4"></a>1.1.4</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506225140427.png" alt="在这里插入图片描述"></p><h2 id="1-1-5"><a href="#1-1-5" class="headerlink" title="1.1.5"></a>1.1.5</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506225333374.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506225824366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-6"><a href="#1-1-6" class="headerlink" title="1.1.6"></a>1.1.6</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020050622585965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/202005062305466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-7"><a href="#1-1-7" class="headerlink" title="1.1.7"></a>1.1.7</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506230611779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506234546578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-8"><a href="#1-1-8" class="headerlink" title="1.1.8"></a>1.1.8</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506234805247.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506235146144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-9"><a href="#1-1-9" class="headerlink" title="1.1.9"></a>1.1.9</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506235214761.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506235850705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-10"><a href="#1-1-10" class="headerlink" title="1.1.10"></a>1.1.10</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507224406603.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507224745954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-11"><a href="#1-1-11" class="headerlink" title="1.1.11"></a>1.1.11</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507224823974.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507230540533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-12"><a href="#1-1-12" class="headerlink" title="1.1.12"></a>1.1.12</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507230614343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507232456787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-13"><a href="#1-1-13" class="headerlink" title="1.1.13"></a>1.1.13</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507232513716.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507234201494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507235204735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507235242960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-14"><a href="#1-1-14" class="headerlink" title="1.1.14"></a>1.1.14</h2><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200510205619314.png" alt="在这里插入图片描述"><br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200510211543862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-15"><a href="#1-1-15" class="headerlink" title="1.1.15"></a>1.1.15</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200510211620446.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200510220324195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200510222014334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-16"><a href="#1-1-16" class="headerlink" title="1.1.16"></a>1.1.16</h2><blockquote><p>给出exR1(6)的返回值</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200614164138629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020061416410416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-17"><a href="#1-1-17" class="headerlink" title="1.1.17"></a>1.1.17</h2><blockquote><p>见书，书上有解析</p></blockquote><h2 id="1-1-18"><a href="#1-1-18" class="headerlink" title="1.1.18"></a>1.1.18</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620164559420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620164619850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-19"><a href="#1-1-19" class="headerlink" title="1.1.19"></a>1.1.19</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (N==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (N==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> f(N-<span class="number">1</span>)+F(N-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> N=<span class="number">0</span>;N&lt;<span class="number">100</span>;N++)</span><br><span class="line">StdOut.println(N+<span class="string">" "</span>+F(N));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发F(N)，用数组保存已经计算过的值。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620171709387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-20"><a href="#1-1-20" class="headerlink" title="1.1.20"></a>1.1.20</h2><p>编写一个递归的静态方法计算ln(N!)的值。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620182642589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-21"><a href="#1-1-21" class="headerlink" title="1.1.21"></a>1.1.21</h2><p>编写一段程序，从标准输入按行读取数据，其中每行都包含一个名字和两个整数。然后用printf()打印一张表格，每行的若干列数据包括名字、两个整数和第一个整数除以第二个整数的结果，精确到保留小数点后三位。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620193828271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-22"><a href="#1-1-22" class="headerlink" title="1.1.22"></a>1.1.22</h2><p>使用1.1.6.4节中的rank(递归方法重新实现BinarySearch并跟踪该方法的调用。每当该方法被调用时，打印出它的参数1o和hi并按照递归的深度缩进。提示:为递归方法添加一个参数来保存递归的深度。</p><h2 id="1-1-23"><a href="#1-1-23" class="headerlink" title="1.1.23"></a>1.1.23</h2><p>为BinarySearch的测试用例添加一个<code>参数</code>:<br><code>+</code> 打印出标准输人中不在白名单上的值;<br><code>-</code>则打印出标准输人中在白名单上的值。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020062021433961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-24"><a href="#1-1-24" class="headerlink" title="1.1.24"></a>1.1.24</h2><ul><li>给出使用欧几里德算法计算105和24的最大公约数的过程中得到的一系列p 和q的值。</li><li>扩展该算法中的代码得到一个程序Euclid, 从命令行接受两个参数，计算它们的最大公约数并打印出每次调用递归方法时的两个参数。</li><li>使用你的程序计算111 111和1 234 567的最大公约数。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620215330207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620215146740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="1-1-26"><a href="#1-1-26" class="headerlink" title="1.1.26"></a>1.1.26</h2><blockquote><p>将三个数字排序。假设a,b,c和t都是同一种原始数字类型的变量。证明以下代码能够将a,b,c按照升序排列。 </p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194539687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h2 id="1-1-27"><a href="#1-1-27" class="headerlink" title="1.1.27"></a>1.1.27</h2><blockquote><p><strong>二项分布。</strong> 估计用以下代码计算binomial(100，50，0.25)将会产生的递归调用次数。<br>将已经计算过的值保存在数组中并给出一个更好的实现。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194606590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194614287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194621212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-28"><a href="#1-1-28" class="headerlink" title="1.1.28"></a>1.1.28</h2><blockquote><p><strong>删除重复元素。</strong> 修改BinarySearch类中的测试用例来删去排序后白名单中的所有元素。</p></blockquote><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194628449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194635683.png" alt="在这里插入图片描述"></p><h2 id="1-1-29"><a href="#1-1-29" class="headerlink" title="1.1.29"></a>1.1.29</h2><blockquote><p>等值键。为BinarySearch类添加一个静态方法rank(),它接受一个键和一个整型有序数组(可能存在重复键)作为参数并返回数组中小于该键的元素数量，以及一个类似的方法count()来返回数组中等于该键的元素的数量。<br>注意:如果i和j分别是rank(key,a)和count(key ,a)的返回值，那么a[i..i+j-1]就是数组中所有和key相等的元素。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705113200761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-30"><a href="#1-1-30" class="headerlink" title="1.1.30"></a>1.1.30</h2><blockquote><p>数组练习。编写一段程序，创建一个NxN的布尔数组a[][]。其中当i和j互质时(没有相同因子)，a[i][j] 为true,否则为false。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705120246318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705120319416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-31"><a href="#1-1-31" class="headerlink" title="1.1.31"></a>1.1.31</h2><blockquote><p>随机连接。编写一段程序，从命令行接受一个整数N和double值p (0到1之间)作为参数，在一个圆上画出大小为0.05且间距相等的N个点，然后将每对点按照概率p用灰线连接。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705190728583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705190951755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-32"><a href="#1-1-32" class="headerlink" title="1.1.32"></a>1.1.32</h2><blockquote><p>直方图。假设标准输人流中含有一系列double值。编写-段程序， 从命令行接受一个整数 N和两个double值l和r。将(I, r)分为N段并使用StdDraw画出输人流中的值落人每段的数量的直方图。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020070520313565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705204328949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-33"><a href="#1-1-33" class="headerlink" title="1.1.33"></a>1.1.33</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706193841425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706214051197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020070620163198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706201841453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706201847238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-35"><a href="#1-1-35" class="headerlink" title="1.1.35"></a>1.1.35</h2><blockquote><p>模拟掷骰子。以下代码能够计算每种两个骰子之和的准确概率分布：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> SIDES = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">double</span>[] dist = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span> * SIDES + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= SIDES; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= SIDES; j++)</span><br><span class="line">        dist[i+j] += <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= <span class="number">2</span>*SIDES; k++)</span><br><span class="line">    dist[k] /= <span class="number">36.0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>dist[i] 的值就是两个骰子之和为i 的概率。用实验模拟N 次掷骰子，并在计算两个1 到 6 之间的随机整数之和时记录每个值的出现频率以验证它们的概率。N 要多大才能够保证你的经验数据和准确数据的吻合程度达到小数点后三位？</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706221728346.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706221351149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020070622160387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706221612755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-36"><a href="#1-1-36" class="headerlink" title="1.1.36"></a>1.1.36</h2><blockquote><p>乱序检查。通过实验检查表1.1.10中乱序代码是否能够产生预期的效果。编写一个程序ShuffleTest,接受命令行参数M和N,将大小为M的数组打乱N次且每次打乱之前都将数组重新初始化为a[i]=i.打印一个MXM的表格，对于所有的列j,行i表示的是i在打乱后落到j的位置的次数。数组中的所有元素的值都应该接近于N/M。</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> Chapter1.Section11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: Algorithm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EX36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-16 19:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 练习题1.1.36</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参考：https://www.cnblogs.com/longjin2018/p/9848742.html</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EX36</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="comment">//        int M=Integer.parseInt(args[0]);</span></span><br><span class="line"><span class="comment">//        int N=Integer.parseInt(args[1]);</span></span><br><span class="line">        <span class="keyword">int</span> M=<span class="number">6</span>,N=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">        <span class="keyword">int</span>[][] Info=<span class="keyword">new</span> <span class="keyword">int</span>[M][M];</span><br><span class="line">        <span class="comment">//N次打乱</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//每次打乱前数组重新初始化为a[i]=i</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">                a[i]=i;</span><br><span class="line">            <span class="comment">//打乱</span></span><br><span class="line">            shuffle(a);</span><br><span class="line">            <span class="comment">//打乱后i行的值落到j列的次数增1</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">                Info[a[i]][i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印M*M数组</span></span><br><span class="line">        printArray(Info);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打乱数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(<span class="keyword">int</span>[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N=a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r=i+ StdRandom.uniform(N-i);<span class="comment">//返回0~N-i之间的整数再加i</span></span><br><span class="line">            <span class="keyword">int</span> temp=a[i];</span><br><span class="line">            a[i]=a[r];</span><br><span class="line">            a[r]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//结束打乱</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[][] array)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rowLen=array.length;</span><br><span class="line">        <span class="keyword">int</span> colLen=array[<span class="number">0</span>].length;</span><br><span class="line">        StdOut.printf(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col=<span class="number">0</span>;col&lt;colLen;col++)</span><br><span class="line">            StdOut.printf(<span class="string">"%5d"</span>,col);</span><br><span class="line">        StdOut.printf(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row=<span class="number">0</span>;row&lt;rowLen;row++)</span><br><span class="line">        &#123;</span><br><span class="line">            StdOut.printf(<span class="string">"%d"</span>,row);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col=<span class="number">0</span>;col&lt;colLen;col++)</span><br><span class="line">                StdOut.printf(<span class="string">"%5d"</span>,array[row][col]);</span><br><span class="line">            StdOut.printf(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-37"><a href="#1-1-37" class="headerlink" title="1.1.37"></a>1.1.37</h2><blockquote><p>糟糕的打乱。假设在我们的乱序代码中你选择的是一个0 到N-1 而非i 到N-1 之间的随机整数。证明得到的结果并非均匀地分布在N! 种可能性之间。用上一题中的测试检验这个版本。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chapter1.Section11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: Algorithm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EX37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-16 19:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 练习题1.1.37</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EX37</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = StdRandom.uniform(N); <span class="comment">//  [0,N)</span></span><br><span class="line">            <span class="keyword">int</span> temp = a[i];</span><br><span class="line">            a[i] = a[r];</span><br><span class="line">            a[r] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        if (args.length &lt; 2) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("Error");</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        int M = Integer.parseInt(args[0]), N = Integer.parseInt(args[1]);</span></span><br><span class="line">        <span class="keyword">int</span> M=<span class="number">6</span>,N=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">        <span class="keyword">int</span>[][] Info=<span class="keyword">new</span> <span class="keyword">int</span>[M][M];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//每次打乱前数组重新初始化为a[i]=i</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">                a[i]=i;</span><br><span class="line">            <span class="comment">//打乱</span></span><br><span class="line">            shuffle(a);</span><br><span class="line">            <span class="comment">//打乱后i行的值落到j列的次数增1</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">                Info[a[i]][i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> []i : Info) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j:i)</span><br><span class="line">                System.out.print(j + <span class="string">" "</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-38"><a href="#1-1-38" class="headerlink" title="1.1.38"></a>1.1.38</h2><blockquote><p>二分查找与暴力查找。根据1.1.10.4 节给出的暴力查找法编写一个程序bruteForceSearch，在你的计算机上比较它和BinarySearch 处理largeW.txt 和largeT.txt 所需的时间。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020071619491540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200716194926353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-39"><a href="#1-1-39" class="headerlink" title="1.1.39"></a>1.1.39</h2><blockquote><p>随机匹配。编写一个使用BinarySearch 的程序，它从命令行接受一个整型参数T，并会分别针对N=10^3、10^4、10^5 和10^6 将以下实验运行 T 遍：生成两个大小为N 的随机6 位正整数数组并找出同时存在于两个数组中的整数的数量。打印一个表格，对于每个N，给出T 次实验中该数量的平均值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chapter1.Section11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: Algorithm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EX39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-16 19:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 练习题1.1.39</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EX39</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        int T = Integer.parseInt(args[0]);</span></span><br><span class="line">        <span class="keyword">int</span> T=<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;<span class="comment">//对N为10^3 10^4 10^5 10^6运行T遍</span></span><br><span class="line">            <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                N *= <span class="number">10</span>; <span class="comment">//对N为10^3 10^4 10^5 10^6运行T遍</span></span><br><span class="line">                <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">                <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++) &#123;</span><br><span class="line">                    a[k] = StdRandom.uniform(<span class="number">100000</span>, <span class="number">1000000</span>);<span class="comment">//[100000, 1000000)</span></span><br><span class="line">                    b[k] = StdRandom.uniform(<span class="number">100000</span>, <span class="number">1000000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Arrays.sort(a);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++) &#123;</span><br><span class="line">                    <span class="comment">//二分循环查找一个数组中的值是否在另一个数组中</span></span><br><span class="line">                    <span class="keyword">if</span> (BinarySearch.indexOf(a, b[k]) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        num[j]++; <span class="comment">//对于每个N，N为10^3 10^4 10^5 10^6</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"N\t\tAverage"</span>);</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            N *= <span class="number">10</span>;<span class="comment">//N为10^3 10^4 10^5 10^6</span></span><br><span class="line">            System.out.printf(<span class="string">"%d\t%f\n"</span>, N, (<span class="keyword">double</span>) num[i] / T);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考：</strong></p><ul><li>《百科》</li><li><a href="https://www.cnblogs.com/gotodsp/p/4319865.html" target="_blank" rel="noopener">《算法：第四版》课后练习 1.1 答案</a></li><li>github: <a href="https://github.com/jimmysuncpt/Algorithms" target="_blank" rel="noopener">https://github.com/jimmysuncpt/Algorithms</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《算法》 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
