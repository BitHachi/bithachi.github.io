<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Oracle12c与Oracle11g采用触发器与存储过程实现同步更新（代码+图解）</title>
      <link href="/posts/198e6f50.html"/>
      <url>/posts/198e6f50.html</url>
      
        <content type="html"><![CDATA[<h2 id="一、保证两台笔记本网络互通"><a href="#一、保证两台笔记本网络互通" class="headerlink" title="一、保证两台笔记本网络互通"></a>一、保证两台笔记本网络互通</h2><p>关于连接，详情见之前写的：<a href="https://blog.csdn.net/weixin_43914604/article/details/109089438" target="_blank" rel="noopener">WIFI网络，两台笔记本互联Oracle，一台是11g,一台是12c</a></p><p>现在测试的ip地址：</p><ul><li>A: 10.65.252.84</li><li>B: 10.82.156.248</li></ul><h2 id="二、用户简单架构图及权限设计"><a href="#二、用户简单架构图及权限设计" class="headerlink" title="二、用户简单架构图及权限设计"></a>二、用户简单架构图及权限设计</h2><ul><li>A机的DBA账户是shj_dba，B机的DBA账户是c##hachi</li><li>中间的为连接名，标明连接的名字，对应权限的用户使用对方跟自己权限相同的账号，通过连接名访问对方数据库。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023004617.png" alt="image-20201023004617075"></p><ul><li>各个用户的权限</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023021653.png" alt="image-20201023021653854"></p><h2 id="三、表结构"><a href="#三、表结构" class="headerlink" title="三、表结构"></a>三、表结构</h2><ul><li>这里双方都采用以下语句创建表，表就建立在各自sys创建的DBA的模式下，不建立任何外键和索引，以免发生同步触发器更新异常，初学先入个门吧！</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023011006.png" alt="image-20201023011006150"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023011048.png" alt="image-20201023011048816"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "part"                                                */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"part"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"p_id"</span>               <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"p_name"</span>             <span class="built_in">VARCHAR2</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"p_size"</span>             <span class="built_in">VARCHAR2</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"p_price"</span>            <span class="built_in">FLOAT</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"p_desc"</span>             <span class="built_in">VARCHAR2</span>(<span class="number">50</span>),</span><br><span class="line">   <span class="keyword">constraint</span> PK_PART primary <span class="keyword">key</span> (<span class="string">"p_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "project"                                             */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"project"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"pj_id"</span>              <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"pj_money"</span>           <span class="built_in">FLOAT</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"pj_date"</span>            <span class="built_in">DATE</span>,</span><br><span class="line">   <span class="keyword">constraint</span> PK_PROJECT primary <span class="keyword">key</span> (<span class="string">"pj_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "staff"                                               */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"staff"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"sf_id"</span>              <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"s_id"</span>               <span class="built_in">INTEGER</span>,</span><br><span class="line">   <span class="string">"sta_sf_id"</span>          <span class="built_in">INTEGER</span>,</span><br><span class="line">   <span class="string">"sf_name"</span>            <span class="built_in">VARCHAR2</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"sf_age"</span>             <span class="built_in">SMALLINT</span>,</span><br><span class="line">   <span class="string">"sf_xname"</span>           <span class="built_in">VARCHAR2</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="keyword">constraint</span> PK_STAFF primary <span class="keyword">key</span> (<span class="string">"sf_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "storage"                                             */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"storage"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"s_id"</span>               <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"s_area"</span>             <span class="built_in">FLOAT</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"s_phone"</span>            <span class="built_in">VARCHAR2</span>(<span class="number">11</span>),</span><br><span class="line">   <span class="keyword">constraint</span> PK_STORAGE primary <span class="keyword">key</span> (<span class="string">"s_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "storage_info"                                        */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"storage_info"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"s_id"</span>               <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"p_id"</span>               <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"sf_num"</span>             <span class="built_in">INTEGER</span>,</span><br><span class="line">   <span class="keyword">constraint</span> PK_STORAGE_INFO primary <span class="keyword">key</span> (<span class="string">"s_id"</span>, <span class="string">"p_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "supplier"                                            */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"supplier"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"sp_id"</span>              <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"sp_name"</span>            <span class="built_in">VARCHAR2</span>(<span class="number">10</span>),</span><br><span class="line">   <span class="string">"sp_address"</span>         <span class="built_in">VARCHAR2</span>(<span class="number">30</span>),</span><br><span class="line">   <span class="string">"sp_phone"</span>           <span class="built_in">VARCHAR2</span>(<span class="number">11</span>),</span><br><span class="line">   <span class="string">"sp_acount"</span>          <span class="built_in">VARCHAR2</span>(<span class="number">15</span>),</span><br><span class="line">   <span class="keyword">constraint</span> PK_SUPPLIER primary <span class="keyword">key</span> (<span class="string">"sp_id"</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="comment">/* Table: "supply_info"                                         */</span></span><br><span class="line"><span class="comment">/*==============================================================*/</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">"supply_info"</span> </span><br><span class="line">(</span><br><span class="line">   <span class="string">"p_id"</span>               <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"pj_id"</span>              <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"sp_id"</span>              <span class="built_in">INTEGER</span>              <span class="keyword">not</span> <span class="literal">null</span>,</span><br><span class="line">   <span class="string">"sp_num"</span>             <span class="built_in">INTEGER</span>,</span><br><span class="line">   <span class="keyword">constraint</span> PK_SUPPLY_INFO primary <span class="keyword">key</span> (<span class="string">"p_id"</span>, <span class="string">"pj_id"</span>, <span class="string">"sp_id"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h2 id="四、sys授予系统权限，创建DBA账户"><a href="#四、sys授予系统权限，创建DBA账户" class="headerlink" title="四、sys授予系统权限，创建DBA账户"></a>四、sys授予系统权限，创建DBA账户</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--------------------------   一些可能用得上的查询调试语句   ------------------------------------------ </span></span><br><span class="line"><span class="comment">-- 命令行查看是否有远程连接权限</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> user_sys_privs <span class="keyword">where</span> privilege <span class="keyword">like</span> <span class="keyword">upper</span>(<span class="string">'%DATABASE LINK%'</span>); </span><br><span class="line"><span class="comment">-- 命令行窗口使用system管理员去grant授权远程连接</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">LINK</span> <span class="keyword">to</span> <span class="keyword">public</span>; </span><br><span class="line"><span class="comment">-- 查看远程连接</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> dba_db_links;  </span><br><span class="line"> <span class="comment">-- 创建同义词</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">public</span> <span class="keyword">synonym</span> stu <span class="keyword">for</span> student;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> stu;</span><br><span class="line"><span class="comment">--删除同义词</span></span><br><span class="line"><span class="keyword">drop</span>  <span class="keyword">synonym</span> remote ;</span><br><span class="line"><span class="comment">-- 删除远程连接</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">link</span> linkname;</span><br><span class="line"><span class="comment">-- ORACLE 查找所有同义词</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> SYS.ALL_SYNONYMS t <span class="keyword">WHERE</span> t.owner <span class="keyword">in</span> (<span class="string">'C##HACHI'</span>);</span><br><span class="line"><span class="comment">----------------------------------------------------------------------------------</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">------------------------------------   A机   ---------------------------------------------- </span></span><br><span class="line">conn sys/a123456 as sysdba; </span><br><span class="line"><span class="comment">-- 授予所有用户连接权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- 授予所有用户创建远程连接权限，这样所有用户都可以创建和删除远程连接 database link</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">LINK</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- 授予所有用户创建同义词的权限,这样所有用户都可以创建和删除同义词 synonym</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">CREATE</span> <span class="keyword">synonym</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- DBA用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> shj_dba <span class="keyword">IDENTIFIED</span> <span class="keyword">by</span> a123456;</span><br><span class="line"><span class="keyword">grant</span> dba,<span class="keyword">connect</span>,<span class="keyword">resource</span> <span class="keyword">to</span> shj_dba;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">------------------------------------   B机   ---------------------------------------------- </span></span><br><span class="line">conn sys/a123456 as sysdba; </span><br><span class="line"><span class="comment">-- 授予所有用户连接权限</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">connect</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- 授予所有用户创建远程连接权限，这样所有用户都可以创建和删除远程连接 database link</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> <span class="keyword">LINK</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- 授予所有用户创建同义词的权限,这样所有用户都可以创建和删除同义词 synonym</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">CREATE</span> <span class="keyword">synonym</span> <span class="keyword">to</span> <span class="keyword">public</span>;</span><br><span class="line"><span class="comment">-- DBA用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> c<span class="comment">##hachi IDENTIFIED by a123456;</span></span><br><span class="line"><span class="keyword">grant</span> dba,<span class="keyword">connect</span>,<span class="keyword">resource</span> <span class="keyword">to</span> c<span class="comment">##hachi;</span></span><br></pre></td></tr></table></figure><h2 id="五、双方各自创建的DBA账户再创建其他用户，以及私有同义词"><a href="#五、双方各自创建的DBA账户再创建其他用户，以及私有同义词" class="headerlink" title="五、双方各自创建的DBA账户再创建其他用户，以及私有同义词"></a>五、双方各自创建的DBA账户再创建其他用户，以及私有同义词</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">------------------------------------   B机   ---------------------------------------------- </span></span><br><span class="line">conn c<span class="comment">##hachi/a123456;</span></span><br><span class="line"><span class="comment">-- 供应商用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> c<span class="comment">##supplier IDENTIFIED by a123456 ;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span>  <span class="string">"supplier"</span> <span class="keyword">to</span> c<span class="comment">##supplier;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span> <span class="string">"supply_info"</span> <span class="keyword">to</span> c<span class="comment">##supplier;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"part"</span> <span class="keyword">to</span> c<span class="comment">##supplier;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"project"</span> <span class="keyword">to</span> c<span class="comment">##supplier;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 领导用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> c<span class="comment">##leader IDENTIFIED by a123456 ;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span> <span class="string">"staff"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"supplier"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"supply_info"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"project"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"part"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"storage"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"storage_info"</span> <span class="keyword">to</span> c<span class="comment">##leader;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 职工用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> c<span class="comment">##staff IDENTIFIED by a123456;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"staff"</span> <span class="keyword">to</span> c<span class="comment">##staff;</span></span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"storage"</span> <span class="keyword">to</span> c<span class="comment">##staff;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建4个不同用户权限的远程连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">conn</span> c<span class="comment">##hachi/a123456;</span></span><br><span class="line"><span class="comment">-- 本机DBA用户c##hachi，使用对方的DBA账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  shj0dba   <span class="keyword">connect</span> <span class="keyword">to</span> shj_dba <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"a123456"</span> <span class="keyword">using</span> <span class="string">'10.65.252.84/orcl'</span>;</span><br><span class="line"><span class="comment">-- 创建同义词</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> <span class="string">"part"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> <span class="string">"project"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> <span class="string">"staff"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> <span class="string">"storage"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage_info <span class="keyword">for</span> <span class="string">"storage_info"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> <span class="string">"supplier"</span>@shj0dba;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> <span class="string">"supply_info"</span>@shj0dba;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">conn c<span class="comment">##leader/a123456;</span></span><br><span class="line"><span class="comment">-- 本机领导用户c##leader，使用对方的领导账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  shj0leader   <span class="keyword">connect</span> <span class="keyword">to</span> shj_leader <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"a123456"</span> <span class="keyword">using</span> <span class="string">'10.65.252.84/orcl'</span>;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> shj_dba.<span class="string">"part"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> shj_dba.<span class="string">"project"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> shj_dba.<span class="string">"staff"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> shj_dba.<span class="string">"storage"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage_info <span class="keyword">for</span> shj_dba.<span class="string">"storage_info"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> shj_dba.<span class="string">"supplier"</span>@shj0leader;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> shj_dba.<span class="string">"supply_info"</span>@shj0leader;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"> <span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">conn c<span class="comment">##supplier/a123456;</span></span><br><span class="line"><span class="comment">-- 本机供应商用户c##supplier，使用对方的供应商账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  shj0supplier   <span class="keyword">connect</span> <span class="keyword">to</span> shj_supplier <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"a123456"</span> <span class="keyword">using</span> <span class="string">'10.65.252.84/orcl'</span>;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> shj_dba.<span class="string">"part"</span>@shj0supplier;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> shj_dba.<span class="string">"project"</span>@shj0supplier;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> shj_dba.<span class="string">"supplier"</span>@shj0supplier;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> shj_dba.<span class="string">"supply_info"</span>@shj0supplier;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"> <span class="keyword">commit</span>;</span><br><span class="line"> </span><br><span class="line">conn c<span class="comment">##staff/a123456;</span></span><br><span class="line"><span class="comment">-- 本机员工用户c##staff，使用对方的员工账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  shj0staff   <span class="keyword">connect</span> <span class="keyword">to</span> shj_staff <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"a123456"</span> <span class="keyword">using</span> <span class="string">'10.65.252.84/orcl'</span>;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> shj_dba.<span class="string">"staff"</span>@shj0staff ;</span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> shj_dba.<span class="string">"storage"</span>@shj0staff;</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_staff;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023011729.png" alt="image-20201023011729623"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">------------------------------------   A机   ---------------------------------------------- </span></span><br><span class="line">conn shj_dba/a123456;</span><br><span class="line"><span class="comment">-- 供应商用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> shj_supplier <span class="keyword">IDENTIFIED</span> <span class="keyword">by</span> a123456 ;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span>  <span class="string">"supplier"</span> <span class="keyword">to</span> shj_supplier;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span> <span class="string">"supply_info"</span> <span class="keyword">to</span> shj_supplier;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"part"</span> <span class="keyword">to</span> shj_supplier;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"project"</span> <span class="keyword">to</span> shj_supplier;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 领导用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> shj_leader <span class="keyword">IDENTIFIED</span> <span class="keyword">by</span> a123456 ;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span> <span class="keyword">on</span> <span class="string">"staff"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"supplier"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"supply_info"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>  <span class="keyword">on</span> <span class="string">"project"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"part"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"storage"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span>,<span class="keyword">INSERT</span>,<span class="keyword">DELETE</span>,<span class="keyword">UPDATE</span>  <span class="keyword">on</span> <span class="string">"storage_info"</span> <span class="keyword">to</span> shj_leader;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 职工用户创建及授权</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> shj_staff <span class="keyword">IDENTIFIED</span> <span class="keyword">by</span> a123456;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"staff"</span> <span class="keyword">to</span> shj_staff;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">SELECT</span> <span class="keyword">on</span> <span class="string">"storage"</span> <span class="keyword">to</span> shj_staff;</span><br><span class="line"> <span class="keyword">commit</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 删除同名同义词与连接</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_part;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_project;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_staff;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_storage;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_storage_info;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_supplier;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">SYNONYM</span> remote_supply_info;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">link</span> c<span class="comment">##0hachi;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建4个不同用户权限的远程连接</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">conn</span> shj_dba/a123456;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 本机DBA用户shj_dba，使用对方的DBA账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  c<span class="comment">##0hachi connect to "c##hachi" identified by "a123456" using '10.82.156.248/orcl';</span></span><br><span class="line"><span class="comment">-- 创建同义词</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> <span class="string">"part"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> <span class="string">"project"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> <span class="string">"staff"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> <span class="string">"storage"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage_info <span class="keyword">for</span> <span class="string">"storage_info"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> <span class="string">"supplier"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> <span class="string">"supply_info"</span>@c<span class="comment">##0hachi;</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"><span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">conn shj_leader/a123456;</span><br><span class="line"><span class="comment">-- 本机领导用户shj_leader，使用对方的领导账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  c<span class="comment">##0leader   connect to "c##leader" identified by "a123456" using '10.82.156.248/orcl';</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> c<span class="comment">##hachi."part"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> c<span class="comment">##hachi."project"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> c<span class="comment">##hachi."staff"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> c<span class="comment">##hachi."storage"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage_info <span class="keyword">for</span> c<span class="comment">##hachi."storage_info"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> c<span class="comment">##hachi."supplier"@c##0leader;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> c<span class="comment">##hachi."supply_info"@c##0leader;</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"> <span class="keyword">commit</span>;</span><br><span class="line"></span><br><span class="line">conn shj_supplier/a123456;</span><br><span class="line"><span class="comment">-- 本机供应商用户shj_supplier，使用对方的供应商账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  c<span class="comment">##0supplier   connect to "c##supplier" identified by "a123456" using '10.82.156.248/orcl';</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_part <span class="keyword">for</span> c<span class="comment">##hachi."part"@c##0supplier;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_project <span class="keyword">for</span> c<span class="comment">##hachi."project"@c##0supplier;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supplier <span class="keyword">for</span> c<span class="comment">##hachi."supplier"@c##0supplier;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_supply_info <span class="keyword">for</span> c<span class="comment">##hachi."supply_info"@c##0supplier;</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_supply_info;</span><br><span class="line"> <span class="keyword">commit</span>;</span><br><span class="line"> </span><br><span class="line">conn shj_staff/a123456;</span><br><span class="line"><span class="comment">-- 本机员工用户shj_staff，使用对方的员工账户登录远程连接</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">database</span> <span class="keyword">link</span>  c<span class="comment">##0staff   connect to "c##staff" identified by "a123456" using '10.82.156.248/orcl';</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_staff <span class="keyword">for</span> c<span class="comment">##hachi."staff"@c##0staff ;</span></span><br><span class="line"><span class="keyword">create</span>  <span class="keyword">synonym</span> remote_storage <span class="keyword">for</span> c<span class="comment">##hachi."storage"@c##0staff;</span></span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> remote_staff;</span><br><span class="line"><span class="keyword">commit</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023011822.png" alt="image-20201023011822446"></p><blockquote><p>因为使用的wifi网络，采用DHCP协议动态分配IP地址，所以每一次两台笔记本的IP地址是不一样的，所以连接得删了再重新建立，同义词不用删了重新建立，重新创建一下database link连接就行了。<br>我这里建的都是私有连接，私有同义词，只有创建该连接的用户才可以使用，其他用户没有使用权限，是透明的，所以设置同名的同义词不影响。</p></blockquote><ul><li>同义词创建后就可以使用同义词去增删改查对方的表了，这里贴两张图，各自私有建的连接，不影响各自的同名同义词。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023012624.png" alt="image-20201023012624628">)<img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023012748.png" alt="image-20201023012748914"></p><h2 id="六、创建同步触发器与存储过程"><a href="#六、创建同步触发器与存储过程" class="headerlink" title="六、创建同步触发器与存储过程"></a>六、创建同步触发器与存储过程</h2><ol><li>可能由于版本问题，B机12C可以创建触发器同步备份A机的上的表，而A机不行。同时B机创建存储过程，执行存储过程，会触发B机的触发器去同步更新A机上的表。</li><li>A机可以使用连接更新B机的数据，同时触发触发器更新A机自己的表。</li></ol><p>下面以图文结合方式说明以上两点。</p><p><code>这里触发器和存储过程都建在c##hachi用户模式下。</code></p><h3 id="6-1-触发器"><a href="#6-1-触发器" class="headerlink" title="6.1 触发器"></a>6.1 触发器</h3><p>触发器代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">------------------------------------   B机 c##hachi模式下创建   ---------------------------------------------- </span></span><br><span class="line"><span class="comment">-- 增删改part</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_part;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_part <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"part"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span>  </span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_part(<span class="string">"p_id"</span>,<span class="string">"p_name"</span>,<span class="string">"p_size"</span>,<span class="string">"p_price"</span>,<span class="string">"p_desc"</span>) <span class="keyword">values</span>(:new.<span class="string">"p_id"</span>,:new.<span class="string">"p_name"</span>,:new.<span class="string">"p_size"</span>,:new.<span class="string">"p_price"</span>,:new.<span class="string">"p_desc"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_part <span class="keyword">set</span>  remote_part.<span class="string">"p_name"</span>=:new.<span class="string">"p_name"</span>,remote_part.<span class="string">"p_size"</span>=:new.<span class="string">"p_size"</span>,remote_part.<span class="string">"p_price"</span>=:new.<span class="string">"p_price"</span>,remote_part.<span class="string">"p_desc"</span>=:new.<span class="string">"p_desc"</span> <span class="keyword">where</span> remote_part.<span class="string">"p_id"</span>=:new.<span class="string">"p_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_part <span class="keyword">where</span> remote_part.<span class="string">"p_id"</span>=:old.<span class="string">"p_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"part"</span> <span class="keyword">values</span>(<span class="number">9</span>,<span class="string">'eeeee'</span>,<span class="number">22</span>,<span class="number">12</span>,<span class="string">'eeeeee'</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"part"</span> <span class="keyword">set</span> <span class="string">"p_name"</span>=<span class="string">'abc'</span>,<span class="string">"p_size"</span>=<span class="number">11</span>,<span class="string">"p_price"</span>=<span class="number">11</span>,<span class="string">"p_desc"</span>=<span class="string">'abc'</span> <span class="keyword">where</span> <span class="string">"p_id"</span>=<span class="number">9</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"part"</span> <span class="keyword">where</span> <span class="string">"p_id"</span>=<span class="number">9</span>;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 增删改project</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_project;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_project <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"project"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_project(<span class="string">"pj_id"</span>,<span class="string">"pj_money"</span>,<span class="string">"pj_date"</span>) <span class="keyword">values</span>(:new.<span class="string">"pj_id"</span>,:new.<span class="string">"pj_money"</span>,:new.<span class="string">"pj_date"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_project <span class="keyword">set</span>  remote_project.<span class="string">"pj_money"</span>=:new.<span class="string">"pj_money"</span>,remote_project.<span class="string">"pj_date"</span>=:new.<span class="string">"pj_date"</span> <span class="keyword">where</span> remote_project.<span class="string">"pj_id"</span>=:new.<span class="string">"pj_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_project <span class="keyword">where</span> remote_project.<span class="string">"pj_id"</span>=:old.<span class="string">"pj_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"project"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100</span>,<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"project"</span> <span class="keyword">set</span> <span class="string">"pj_money"</span>=<span class="number">200</span>,<span class="string">"pj_date"</span>=<span class="literal">null</span> <span class="keyword">where</span> <span class="string">"pj_id"</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"project"</span> <span class="keyword">where</span> <span class="string">"pj_id"</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增删改staff</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_staff;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_staff <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"staff"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_staff(<span class="string">"sf_id"</span>,<span class="string">"s_id"</span>,<span class="string">"sta_sf_id"</span>,<span class="string">"sf_name"</span>,<span class="string">"sf_age"</span>,<span class="string">"sf_xname"</span>) <span class="keyword">values</span>(:new.<span class="string">"sf_id"</span>,:new.<span class="string">"s_id"</span>,:new.<span class="string">"sta_sf_id"</span>,:new.<span class="string">"sf_name"</span>,:new.<span class="string">"sf_age"</span>,:new.<span class="string">"sf_xname"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_staff <span class="keyword">set</span>  remote_staff.<span class="string">"sf_name"</span>=:new.<span class="string">"sf_name"</span>,remote_staff.<span class="string">"sf_age"</span>=:new.<span class="string">"sf_age"</span>,remote_staff.<span class="string">"sf_xname"</span>=:new.<span class="string">"sf_xname"</span> <span class="keyword">where</span> remote_staff.<span class="string">"sf_id"</span>=:new.<span class="string">"sf_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_staff <span class="keyword">where</span> remote_staff.<span class="string">"sf_id"</span>=:old.<span class="string">"sf_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"staff"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="string">'Hachi'</span>,<span class="number">10</span>,<span class="string">'Bit'</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"staff"</span> <span class="keyword">set</span> <span class="string">"sf_name"</span>=<span class="string">'BitHachi'</span>,<span class="string">"sf_xname"</span>=<span class="string">'bithachi'</span> <span class="keyword">where</span> <span class="string">"sf_id"</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"staff"</span> <span class="keyword">where</span> <span class="string">"sf_id"</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增删改storage</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_storage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_storage <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"storage"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_storage(<span class="string">"s_id"</span>,<span class="string">"s_area"</span>,<span class="string">"s_phone"</span>) <span class="keyword">values</span>(:new.<span class="string">"s_id"</span>,:new.<span class="string">"s_area"</span>,:new.<span class="string">"s_phone"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_storage <span class="keyword">set</span>  remote_storage.<span class="string">"s_area"</span>=:new.<span class="string">"s_area"</span>,remote_storage.<span class="string">"s_phone"</span>=:new.<span class="string">"s_phone"</span> <span class="keyword">where</span> remote_storage.<span class="string">"s_id"</span>=:new.<span class="string">"s_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_storage <span class="keyword">where</span> remote_storage.<span class="string">"s_id"</span>=:old.<span class="string">"s_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"storage"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">100</span>,<span class="string">'17683738511'</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"storage"</span> <span class="keyword">set</span> <span class="string">"s_area"</span>=<span class="number">200</span>,<span class="string">"s_phone"</span>=<span class="string">'17683838555'</span> <span class="keyword">where</span> <span class="string">"s_id"</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"storage"</span> <span class="keyword">where</span> <span class="string">"s_id"</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增删改storage_info</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_storage_info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_storage_info <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"storage_info"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_storage_info(<span class="string">"s_id"</span>,<span class="string">"p_id"</span>,<span class="string">"sf_num"</span>) <span class="keyword">values</span>(:new.<span class="string">"s_id"</span>,:new.<span class="string">"p_id"</span>,:new.<span class="string">"sf_num"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_storage_info <span class="keyword">set</span>  remote_storage_info.<span class="string">"sf_num"</span>=:new.<span class="string">"sf_num"</span>  <span class="keyword">where</span> remote_storage_info.<span class="string">"s_id"</span>=:new.<span class="string">"s_id"</span> <span class="keyword">and</span> remote_storage_info.<span class="string">"p_id"</span>=:new.<span class="string">"p_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_storage_info <span class="keyword">where</span> remote_storage_info.<span class="string">"s_id"</span>=:old.<span class="string">"s_id"</span> <span class="keyword">and</span> remote_storage_info.<span class="string">"p_id"</span>=:old.<span class="string">"p_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"storage_info"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"storage_info"</span> <span class="keyword">set</span> <span class="string">"sf_num"</span>=<span class="number">200</span>  <span class="keyword">where</span> <span class="string">"s_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"p_id"</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"storage_info"</span> <span class="keyword">where</span> <span class="string">"s_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"p_id"</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增删改supplier</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_supplier;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_supplier <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"supplier"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_supplier(<span class="string">"sp_id"</span>,<span class="string">"sp_name"</span>,<span class="string">"sp_address"</span>,<span class="string">"sp_phone"</span>,<span class="string">"sp_acount"</span>) <span class="keyword">values</span>(:new.<span class="string">"sp_id"</span>,:new.<span class="string">"sp_name"</span>,:new.<span class="string">"sp_address"</span>,:new.<span class="string">"sp_phone"</span>,:new.<span class="string">"sp_acount"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_supplier <span class="keyword">set</span>  remote_supplier.<span class="string">"sp_name"</span>=:new.<span class="string">"sp_name"</span>  <span class="keyword">where</span> remote_supplier.<span class="string">"sp_id"</span>=:new.<span class="string">"sp_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_supplier <span class="keyword">where</span> remote_supplier.<span class="string">"sp_id"</span>=:old.<span class="string">"sp_id"</span> ;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"supplier"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">'BitHachi'</span>,<span class="string">'中国湖北'</span>,<span class="string">'17683738511'</span>,<span class="string">'1000001'</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"supplier"</span> <span class="keyword">set</span> <span class="string">"sp_name"</span>=<span class="string">'Hachi'</span>  <span class="keyword">where</span> <span class="string">"sp_id"</span>=<span class="number">1</span>  ;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"supplier"</span> <span class="keyword">where</span>  <span class="string">"sp_id"</span>=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增删改supply_info</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">trigger</span> insert_update_delete_supply_info;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">or</span> <span class="keyword">replace</span> <span class="keyword">trigger</span> insert_update_delete_supply_info <span class="keyword">after</span> <span class="keyword">insert</span> <span class="keyword">or</span> <span class="keyword">update</span> <span class="keyword">or</span> <span class="keyword">delete</span></span><br><span class="line"><span class="keyword">on</span>  <span class="string">"supply_info"</span> <span class="keyword">for</span> <span class="keyword">each</span> <span class="keyword">row</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line"><span class="keyword">if</span> inserting <span class="keyword">then</span></span><br><span class="line"> <span class="keyword">insert</span> <span class="keyword">into</span> remote_supply_info(<span class="string">"p_id"</span>,<span class="string">"pj_id"</span>,<span class="string">"sp_id"</span>,<span class="string">"sp_num"</span>) <span class="keyword">values</span>(:new.<span class="string">"p_id"</span>,:new.<span class="string">"pj_id"</span>,:new.<span class="string">"sp_id"</span>,:new.<span class="string">"sp_num"</span>);</span><br><span class="line">elsif updating then</span><br><span class="line">  <span class="keyword">update</span> remote_supply_info <span class="keyword">set</span>  remote_supply_info.<span class="string">"sp_num"</span>=:new.<span class="string">"sp_num"</span>  <span class="keyword">where</span> remote_supply_info.<span class="string">"p_id"</span>=:new.<span class="string">"p_id"</span> <span class="keyword">and</span> remote_supply_info.<span class="string">"pj_id"</span>=:new.<span class="string">"pj_id"</span> <span class="keyword">and</span> remote_supply_info.<span class="string">"sp_id"</span>=:new.<span class="string">"sp_id"</span>;</span><br><span class="line">elsif deleting then </span><br><span class="line"> <span class="keyword">delete</span> <span class="keyword">from</span> remote_supply_info <span class="keyword">where</span> remote_supply_info.<span class="string">"p_id"</span>=:old.<span class="string">"p_id"</span> <span class="keyword">and</span> remote_supply_info.<span class="string">"pj_id"</span>=:old.<span class="string">"pj_id"</span> <span class="keyword">and</span> remote_supply_info.<span class="string">"sp_id"</span>=:old.<span class="string">"sp_id"</span>;</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">"supply_info"</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">100</span>);</span><br><span class="line"><span class="keyword">update</span> <span class="string">"supply_info"</span> <span class="keyword">set</span> <span class="string">"sp_num"</span>=<span class="number">200</span>  <span class="keyword">where</span> <span class="string">"p_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"pj_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"sp_id"</span>=<span class="number">1</span> ;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> <span class="string">"supply_info"</span> <span class="keyword">where</span> <span class="string">"p_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"pj_id"</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="string">"sp_id"</span>=<span class="number">1</span> ;</span><br></pre></td></tr></table></figure><ul><li><p>这里触发器很多，我就演示一个。见下图：</p><p>这张图是B机创建一个触发器实现remote_part同义词表示的A机的part表的同步更新。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023014536.png" alt="image-20201023014536530"></p><p>现在我们在A机上使用同义词进行插入、修改、删除，会触发B机的触发器同步更新B机和A机的表数据。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023015836.png" alt="img"></p><h3 id="6-3-存储过程"><a href="#6-3-存储过程" class="headerlink" title="6.3 存储过程"></a>6.3 存储过程</h3><p>这里B机创建了一个存储过程，B机调用存储过程可以实现B机和A机的同步更新。</p><p>先贴代码再放截图流程</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询数据</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> select_data;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> select_data </span><br><span class="line">(var_datas <span class="keyword">out</span> sys_refcursor) <span class="keyword">AS</span>  </span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line"><span class="keyword">OPEN</span> var_datas <span class="keyword">for</span> <span class="keyword">select</span> * <span class="keyword">from</span> <span class="string">"part"</span>; </span><br><span class="line"><span class="keyword">end</span> select_data;</span><br><span class="line">var datas refcursor;</span><br><span class="line">exec select_data(:datas);</span><br><span class="line">print:datas;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加数据</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> insert_data;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> insert_data</span><br><span class="line">(var_id <span class="string">"part"</span>.<span class="string">"p_id"</span>%<span class="keyword">TYPE</span>,var_name <span class="string">"part"</span>.<span class="string">"p_name"</span>%<span class="keyword">TYPE</span>,var_size <span class="string">"part"</span>.<span class="string">"p_size"</span>%<span class="keyword">TYPE</span>,var_price <span class="string">"part"</span>.<span class="string">"p_price"</span>%<span class="keyword">TYPE</span>,var_desc <span class="string">"part"</span>.<span class="string">"p_desc"</span>%<span class="keyword">TYPE</span>) </span><br><span class="line"><span class="keyword">AS</span>   </span><br><span class="line"><span class="keyword">begin</span>  </span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">"part"</span> <span class="keyword">values</span>(var_id,var_name,var_size,var_price,var_desc);</span><br><span class="line"><span class="keyword">end</span> insert_data;</span><br><span class="line">exec insert_data(2,'ANIVJO',22,15,'DFGDG');</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改数据</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> update_data;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> update_data</span><br><span class="line">(var_id <span class="string">"part"</span>.<span class="string">"p_id"</span>%<span class="keyword">TYPE</span>,var_name <span class="string">"part"</span>.<span class="string">"p_name"</span>%<span class="keyword">TYPE</span>)  </span><br><span class="line"><span class="keyword">AS</span>  </span><br><span class="line"><span class="keyword">begin</span>  </span><br><span class="line"><span class="keyword">UPDATE</span> <span class="string">"part"</span> <span class="keyword">SET</span> <span class="string">"p_name"</span>=var_name  <span class="keyword">WHERE</span> <span class="string">"p_id"</span>=var_id;</span><br><span class="line"><span class="keyword">end</span> update_data;</span><br><span class="line">exec update_data(2,'BitHachi');</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除数据</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">procedure</span> delete_data;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> delete_data</span><br><span class="line">(var_id <span class="string">"part"</span>.<span class="string">"p_id"</span>%<span class="keyword">TYPE</span>)  </span><br><span class="line"><span class="keyword">AS</span>  </span><br><span class="line"><span class="keyword">begin</span>  </span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="string">"part"</span> <span class="keyword">WHERE</span> <span class="string">"p_id"</span>=var_id;</span><br><span class="line"><span class="keyword">end</span> delete_data;</span><br><span class="line">exec delete_data(2);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20201023020723.png" alt="image-20201023020723206"></p>]]></content>
      
      
      <categories>
          
          <category> Oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oracle </tag>
            
            <tag> Database </tag>
            
            <tag> trigger </tag>
            
            <tag> procedure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后台json交互，以及数据库json转换——PHP&amp;Thinkphp5.1</title>
      <link href="/posts/50fa6455.html"/>
      <url>/posts/50fa6455.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h2><p>最近在做一个项目，一个考试系统。后台采用的核心技术是PHP+Thinkhp5.1+Mysql。</p><ul><li><p>要求前后台之间用json数据交互，后台需要将前台json关键字段接收，然后查询数据库，返回相应的json数据。</p></li><li><p>前台会调用<code>上传答题情况的接口</code>将卷子答题情况的json传给后台,后台要将此json存入数据库，在前台再次调用<code>查看卷子答题情况的接口</code>时能再从数据库中把json数据返还给前台。</p></li></ul><p>这篇文章主要记录的就是以上两点的前后台json数据的转换方法，以及如何将json存入数据库再取出来传给前台。</p><p>此篇文章需要一些基础，比如json基本格式，PHP数组与json转换等dump打印数据信息等函数方法，Thinkphp5.1框架的基本理解和使用。</p><h2 id="1-前台POST提交json数据给后台，后台保存为json格式存储到数据库"><a href="#1-前台POST提交json数据给后台，后台保存为json格式存储到数据库" class="headerlink" title="1. 前台POST提交json数据给后台，后台保存为json格式存储到数据库"></a>1. 前台POST提交json数据给后台，后台保存为json格式存储到数据库</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前台post方式传给后台json数据,后台将其作为json数据存在数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">indexPostaAdmin</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    $data = Request::post();</span><br><span class="line">    dump($data);<span class="comment">//经检验前台传过来的json数据自动被转换成了数组类型</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//将前台传过来的数据作为json格式存入某张表的某个字段中</span></span><br><span class="line">    $datas[<span class="string">'paper'</span>] = $data;</span><br><span class="line">    Db::table(<span class="string">'paper'</span>)</span><br><span class="line">        -&gt;json([<span class="string">'paper'</span>])</span><br><span class="line">        -&gt;insert($datas);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915171105.png" alt="image-20200915171059833"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915171219.png" alt="image-20200915171219186"></p><h2 id="2-前台GET方式传关键参数id，后台返回存储在数据库中的json数据给前台"><a href="#2-前台GET方式传关键参数id，后台返回存储在数据库中的json数据给前台" class="headerlink" title="2. 前台GET方式传关键参数id，后台返回存储在数据库中的json数据给前台"></a>2. 前台GET方式传关键参数id，后台返回存储在数据库中的json数据给前台</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前台GET方式传关键参数id，后台返回存储在数据库中的json数据给前台</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">adminReturnDataToIndex</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $id=Request::param(<span class="string">"id"</span>);</span><br><span class="line">    $selectdata= Db::table(<span class="string">'paper'</span>)</span><br><span class="line">        -&gt;json([<span class="string">'paper'</span>])</span><br><span class="line">        -&gt;where(<span class="string">"id"</span>,$id)</span><br><span class="line">        -&gt;select();</span><br><span class="line">    $data[<span class="string">"test"</span>]=$selectdata[<span class="number">0</span>];</span><br><span class="line">    $data[<span class="string">"name"</span>]=<span class="string">"zhangsan"</span>;</span><br><span class="line">    <span class="keyword">return</span> json($data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915181240.png" alt="image-20200915181240115"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915181307.png" alt="image-20200915181307904"></p><h2 id="3-前台POST方式传json数据给后台，后台存储为普通数据"><a href="#3-前台POST方式传json数据给后台，后台存储为普通数据" class="headerlink" title="3. 前台POST方式传json数据给后台，后台存储为普通数据"></a>3. 前台POST方式传json数据给后台，后台存储为普通数据</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前台POST方式传json数据给后台，后台存储为普通数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span>  <span class="function"><span class="keyword">function</span>  <span class="title">indexPostCommonDataToAdmin</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $indexdata=Request::post();</span><br><span class="line">    dump($indexdata);</span><br><span class="line">    Db::table(<span class="string">"test"</span>)-&gt;insert($indexdata);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915200509.png" alt="image-20200915200508389"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915200800.png" alt="image-20200915200800813"></p><h2 id="4-前台GET方式传关键字段num-后台将数据库中非json数据转换为json数据传给前台"><a href="#4-前台GET方式传关键字段num-后台将数据库中非json数据转换为json数据传给前台" class="headerlink" title="4. 前台GET方式传关键字段num,后台将数据库中非json数据转换为json数据传给前台"></a>4. 前台GET方式传关键字段num,后台将数据库中非json数据转换为json数据传给前台</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 前台GET方式传关键字段num,后台将数据库中非json数据转换为json数据传给前台</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">indexGetCommonDataFromAdmin</span><span class="params">()</span></span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      $num=Request::get(<span class="string">"num"</span>);</span><br><span class="line">      $selectdata = Db::table(<span class="string">"test"</span>)-&gt;limit($num)-&gt;select();</span><br><span class="line">      <span class="keyword">return</span> json($selectdata);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915202744.png" alt="image-20200915202743937"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200915202804.png" alt="image-20200915202803990"></p><h2 id="5-MySQL-8-x-设置json字段存储json数据和转换"><a href="#5-MySQL-8-x-设置json字段存储json数据和转换" class="headerlink" title="5. MySQL 8.x 设置json字段存储json数据和转换"></a>5. MySQL 8.x 设置json字段存储json数据和转换</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200919215252.png" alt="image-20200919215252662"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">testjson</span><span class="params">()</span></span>&#123;</span><br><span class="line">    $posts=<span class="keyword">$this</span>-&gt;request-&gt;post();<span class="comment">//$posts前台穿过来的json,自动转为数组</span></span><br><span class="line">    $data[<span class="string">"ac_id"</span>]=<span class="number">2</span>;</span><br><span class="line">    $data[<span class="string">"content"</span>]=$posts;</span><br><span class="line">    $data[<span class="string">"score"</span>]=<span class="number">100</span>;</span><br><span class="line">    $data[<span class="string">"flag"</span>]=<span class="number">2</span>;</span><br><span class="line">    Db::table(<span class="string">"exam_paper"</span>)-&gt;insert($data);<span class="comment">//数组插进去为json类型</span></span><br><span class="line">    $datas=Db::table(<span class="string">"exam_paper"</span>)-&gt;json([<span class="string">"content"</span>])-&gt;where(<span class="string">"exam_id"</span>,<span class="number">1</span>)-&gt;select();<span class="comment">//查出来为json自动转为数组</span></span><br><span class="line">    <span class="keyword">return</span> json($datas);<span class="comment">//将数组转为json发给前台</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200919215458.png" alt="image-20200919215458065"></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Thinkphp5.1 </tag>
            
            <tag> json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我在疫情期间的思考与总结</title>
      <link href="/posts/89ce7fdb.html"/>
      <url>/posts/89ce7fdb.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>现在是2020年8月27日晚20:13分，从未想过有一天我会对我最不喜欢的文字相关的东西会上心。</p><p>在我的记忆中，我是非常不喜欢与文字相关的东西，更别提写文章或是写心得了。也不知从何时起走上了这条路，我相信我会一直坚持下去，将此博客至少写十年，将这十年的技术积累与程序人生记录下来，目前已申请<a href="https://www.foreverblog.cn/treaty.html" target="_blank" rel="noopener">十年之约</a>。一来作为自己的业余爱好，二来开源分享，希望所写文章能够帮助更多的人。</p><p>这是我第一次写总结。本来我是想在年末写一篇总结的，但因为这一次由于疫情原因在家呆了这大半年，学到很多，收获很多，感触很多，所以想记录下来，作为我这大半年在家的总结，让短暂存在的思维灵感得以保存下来，也希望能够通过自己的经历和分享对有需要的人有所帮助叭。</p><p>这篇文章可能比较杂，会分为几个标题来写，内容包含学习收获以及人生的思考。</p><h1 id="2-为什么写博客？"><a href="#2-为什么写博客？" class="headerlink" title="2. 为什么写博客？"></a>2. 为什么写博客？</h1><p>其实原因很简单，经常有时候会碰见一些问题，这些问题我曾经解决过，但是再次碰到时我却不记得怎么解决了。再次搜博客叭，花费很多时间，有时候大多数的解决方案又是错的，而且很多文章复制来复制去连错误都一模一样。再就是有时候对一个知识点理解的比较深刻，但是当时没有记录下来，导致下一次去使用这个知识点去写东西的时候一脸懵逼，没有头绪，感觉忘光了，不知道为什么这么写，为什么会报错。</p><p>因为上述问题，写笔记写博客就变得无比重要了，其实单纯的写笔记就可以了，但是为什么要写博客了。我的想法是这样的：笔记是私人的，博客是开源的。我们在享受他人分享知识成果、解决方案的同时我们是否也可以为这个开源的世界贡献一点，去分享自己的所得所感，让更多的人受益。</p><p>因为博客是写给别人看的，所以写博客会比较费时，要组织语言和行文结构，要搜索查询各种资料，有时候甚至要花掉好几个小时或者几天时间去写一篇文章。但是就是在这样不知不觉中潜移默化的提高了自己的语言表达能力，也对所学的知识理解的更加深刻，也便于日后回顾，对他人对自己都是有好处的。同时写的博客有人看，有人点赞，有粉丝，也会正向的激励自己去写博客，去记录，去分享。而私人笔记则没有这样的正向激励，也就自己写写看看，比较随意。</p><p>我在疫情期间，跟着学校课程就写了很多的博客笔记，虽然只是简单的把知识点总结归纳了一下，刚开始写一般都入门级，等慢慢积累沉淀多了，再写更加高级的深入原理部分，比如手撕源码，徒手写框架，哈哈，梦想还是要有的，万一实现了了。虽然刚开始写的简单点，但是对我日后看相关的书籍和提高奠定了基础，有时候想到某个知识点时我也可以快速回顾复习。这段时间也收获了不少的粉丝，帮助了一些正在学习相关知识的同学们，这也正向激励着我不断将博客持续写下去，感谢各位老铁的支持。</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIxNDQ1OS5wbmc?x-oss-process=image/format,png" alt="image-20200827214459076"></p><h1 id="3-聊聊我对学习方法的感悟"><a href="#3-聊聊我对学习方法的感悟" class="headerlink" title="3. 聊聊我对学习方法的感悟"></a>3. 聊聊我对学习方法的感悟</h1><p>我自认为自己不是一个很会学习的人，毕竟我没考上一本、985或211，这是事实。我在这段时间对自己的学习方法也进行过思考，我对此还特地看了一本书，名为《学习之道》，也看过一些讲学习方法的文章和视频。</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIyMjIyMy5wbmc?x-oss-process=image/format,png" alt="image-20200827222223613"></p><p>这里我先说一下我看<code>《学习之道》</code>的收获和感受叭。这本书是美国一位女性作家写的，她起初对数理化是无比厌恶的，唯恐避之不及，但是后来经过她在军队等一些经历之后她渐渐的学习了数理化相关的知识，而且最后还成为了工程学教授。</p><p>这本书从心理学和脑科学讲解了人的大脑在面对一些场景时做出的反应，以及如何去应对，还讲解了一些学习理论、学习工具、学习方法等。我印象最深刻的是里面提到的<code>发散/专注模式</code>，当我们在某一事情上专注很长时间而没有成效时，不妨休息一下转为发散模式，让大脑休息一下，或许会有不一样的灵感迸发，其实这里总结就是简单的四个字：<code>劳逸结合</code>    。当我们专注在某一事情太长时间而没有头绪，很可能陷入了思维定式，这时候就难以跳跃思维定式，去大脑的其它区域寻找答案了。而适当休息一下，进入发散模式，则可以让大脑跳出思维定式，从大脑其它相关跨度大的知识区域寻找答案。</p><p>这里谈到了劳逸结合，书中也提到了帮助学习的工具和方法，比如<code>番茄工作法</code>，番茄工作法是我现在正在使用的方法，感觉还不错。番茄工作法其实就是利用了劳逸结合的思想，在专注/发散模式之间相互转换，更加高效的学习。使用番茄工作法，需要计时工具，我使用的是”番茄to do”，可以倒计时番茄钟，而且可以记录自己的学习时间，统计学习数据信息等。值得一用哦！下面放几张在这段时间学习的一个大致情况叭，截图来自<code>“番茄to do”</code>，让你爱上这个软件，帮助你学习。时长并不代表一切，专注时学习到的东西才是属于自己的。</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIyNDc0MS5wbmc?x-oss-process=image/format,png" alt="image-20200827224741621"></p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIyNDc1NC5qcGc?x-oss-process=image/format,png" alt="img"></p><p>接下来还有一种方法，叫做<code>费曼学习法</code>，这个方法与上面提到的<code>番茄工作法</code>方法是相辅相成的，其主要思想就是<code>将自己所学进行实践总结，简单易懂的教授给他人，比如写博客，录视频，口授等方式</code>。这里不得不放上一张学习金字塔来感受费曼学习法的魅力。</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIyNTQwMy5wbmc?x-oss-process=image/format,png" alt="image-20200827225403490"></p><h1 id="4-看书还是看视频学习？"><a href="#4-看书还是看视频学习？" class="headerlink" title="4. 看书还是看视频学习？"></a>4. 看书还是看视频学习？</h1><p>对于这个问题我之前也纠结过，在这段实践我也进行过思考和实践。</p><p>我的感受是对于一门陌生的技术知识，最好是看视频先入门，如果一来就看书，可能掌握不住重点，容易跑偏，而且看书很枯燥，很可能坚持不下去。一般好的学习视频，里面的讲师都是行业有一定经验的人，他们会对重要知识进行总结，他们会告诉你哪些知识点重要，哪些知识点不重要，哪些可以以后再学，哪些现阶段不用太死扣，以免陷入自闭进而放弃。</p><p>入门看视频可以，但是要想提高技术，成为大牛，最终都要回归于书本，书本虽然枯燥，但是它成体系，系统全面，再难啃也得啃。</p><p>我现在就挺喜欢看书的，特别是已经学习了操作系统、数据库、计算机网络之后，看相关的书籍，能看懂，而且有时候会感到兴奋，恨怎么这么晚才发现这本书，真有一种相见恨晚的感觉。这里放一下我现在正在看的书叭，这张图是我在这段时间在闲鱼买书时截的图。足足用了我380RMB，这还算便宜的，在正规店买估计翻倍。</p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIzMDkxNC5qcGc?x-oss-process=image/format,png" alt="img"></p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIzMDkwOC5qcGc?x-oss-process=image/format,png" alt="img"></p><h1 id="5-对于日益繁杂的公众号与博客文章"><a href="#5-对于日益繁杂的公众号与博客文章" class="headerlink" title="5. 对于日益繁杂的公众号与博客文章"></a>5. 对于日益繁杂的公众号与博客文章</h1><p>这段时间也看了很多博客文章，有技术的，有程序人生相关的，但是总感觉如昙花一现般看完就没了，脑子也记不住多少。</p><p>有些文章或零散视频平常没事看看就好，感觉没必要专门去看公众号和博客文章去零散的学习，看了也记不住多少，最好还是看完整视频或者书籍系统的进行入门学习和提高。</p><p>面对一些正在学习不懂的知识点或遇到的难题，看一下别人的博客借鉴一下是可以的，但是没必要完全靠这个去零散的学习，如果博客文章或视频作者的水平参差不齐，搞不好很容易带偏，导致你对某一知识点产生误解，陷入死循环。</p><p>这里推荐几个我偶尔没事看看的公众号和关注的大牛：</p><ul><li>公众号：CodeSheep、三太子敖丙、码农翻身、GitHub社区、Java社区、JavaGuide、技术胖、马士兵</li><li>大牛网站：<a href="https://coolshell.cn/" target="_blank" rel="noopener">左耳朵耗子</a>、<a href="https://www.liaoxuefeng.com/" target="_blank" rel="noopener">廖雪峰</a></li></ul><p>其实我之前也考虑过把文章发布在公众号里面，但是看了左耳朵耗子写的文章：<a href="https://coolshell.cn/articles/17391.html" target="_blank" rel="noopener">为什么我不在微信公众号上写文章</a>，我觉得还是写博客好，我希望我的文章可以被搜索引擎所检索到，能被修改，因为文章会有错误，也会需要时常更新等。</p><p>耗子叔和《码农翻身》作者刘欣真的对我的影响非常大，改变了我很多，特别是让我意识到计算机专业理论基础的重要性，虽然枯燥，但是无比重要，就如同九阳神功，以不变应万变。这里非常感谢师兄告诉我关注这两位大佬，让我受益无穷。</p><h1 id="6-修炼九阳神功，打通任督二脉"><a href="#6-修炼九阳神功，打通任督二脉" class="headerlink" title="6. 修炼九阳神功，打通任督二脉"></a>6. 修炼九阳神功，打通任督二脉</h1><p>所谓的九阳神功指的就是计算机专业理论基础知识，这些知识在我大一大二上学期时，说实话学的都没啥体会，就感觉学了没啥用，后来看的大牛的博客文章多了，都提到了专业基础知识的重要性，我才开始关注这些知识在应用层技术语言、框架等的重要性。</p><p>这里必须得推荐一个视频，是左耳朵耗子在极客时间的直播录屏，视频内容格局很高，内涵丰富，具有深度。非常推荐大家看看，里面就提到了理论基础的重要性：<a href="https://www.bilibili.com/video/BV1C7411F7x3?from=search&seid=2558119300487211833" target="_blank" rel="noopener">直面问题，咱谈焦虑，谈烦恼，谈怎么成长</a>，耗子叔还在自己的博客对视频内容简述写成了一篇文章：<a href="https://coolshell.cn/articles/20977.html" target="_blank" rel="noopener">程序员如何把控自己的职业</a></p><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZS5iaXRoYWNoaS5jbi8yMDIwMDgyNzIzNTExMC5wbmc?x-oss-process=image/format,png" alt="image-20200827235110416"></p><p>我通过自己的学习，也对计算机基础知识做了一个比喻。</p><p>我们可以把计算机专业理论基础知识比如树干，语言、框架、工具比作枝叶，我们知道枝叶是很快就会凋谢更新换代的，而树干不会，只要有树干存在，就会有源源不断的新枝叶生长出来。怎么样？看到这里有没有感受到理论知识的魅力。我也忘记这个比喻是不是来自于院长的启发了，有点忘了，嘿嘿😁。</p><p>我最近在学习Java多线程和网络编程时是真的再一次感受到了专业理论基础知识的魅力，比如我看了一个100行左右的死锁示例代码，其实从操作系统的知识来说，就是一个P,V操作顺序不一致，导致双方都拿到了对方下一步需要的锁(临界资源)，导致互相等待产生死锁。</p><p>在网络编程中比如套接字、TCP/IP协议栈、HTTP、UDP等知识点，都是网络原理里面的知识，如果不懂的话，应用层编程将举步维艰，学习起来就慢，但若是掌握了理论基础知识，那么学习周期就可以缩短，更快的掌握知识，并且比别人理解的更深刻，在面对同样类似的技术时可以以不变应万变，一眼看到本质。</p><p>还有之前在学习PHP和ThinkPHP5写一个校demo时，用到的MVC设计模式，也让我感受到了设计模式这门理论学科的魅力，一定要好好学一学。</p><p>还有学习Java时，不明白一点JVM内存分配，比如堆、栈、方法区等，很难理解一些引用赋值操作到底是咋回事。</p><p>还有一次测试工作室开发的后台API，当时也没学计算机网络，我当时把项目代码弄到了本地，本地测试访问域名和实际测试上线的域名搞得一样的，我把本地开发环境打开后测试没问题，但是不打开本地开发环境就无法正确测试，原因是因为本地hosts里面域名对应的IP地址写的是本地主机127.0.0.1，不打开开发环境是无法测试本地代码接口的，因为域名解析指向本机，同样肯定是不可以测试上线的代码接口的。</p><p>其实这里面就涉及到计算机网络里面的DNS解析，域名解析首先是在本地hosts文件里面找，看找不找得到对应域名的IP，如果找不到就找离本机最近的DNS服务器，然后先在DNS服务器高速缓存里面找，找不到再去找根服务器，后面步骤还有很多，这里就不一一描述了。</p><p>如果当时学了计算机网络也就不用浪费两三个小时去解决这个问题了，而且当时解决了还不明所以。现在回想起来，真是越来越感受到理论学科的魅力了。</p><p>虽然学校教的理论课程知识很枯燥，学起来感觉没什么用，也没有直接敲代码所见即所得那么有意思，但是仔细想想，为什么考研要考408（操作系统，计算机网络，组成原理，数据结构与算法），而且多年来亘古不变，我想一定是有原因的。这些理论课程是许多专家学者，教育部经过多次研究讨论共同制定的学习课程，为什么学习这些课程，肯定是非常重要才要去学习。</p><h1 id="7-关于爱情，只字不提？"><a href="#7-关于爱情，只字不提？" class="headerlink" title="7. 关于爱情，只字不提？"></a>7. 关于爱情，只字不提？</h1><p>这是一个比较硬核的话题了。<br>目前单身，宁缺毋滥，洁身自好。<br>前几天不是七夕节嘛，如果不是朋友圈我还真没把这节日记心里。害。<br>我还随手想了一个段子，估计也只有面向对象编程的程序员听得懂了。</p><p>听我娓娓道来，如果有一个人问我有没有对象，我会告诉他/她：有，而且后宫佳丽三千。<code>海王</code>已经不能形容我的身份，应该叫<code>海皇</code>!。不过啊，对象多了也不好，因为很容易身心俱疲。虽然对象都不一样，有不同的的状态和行为，每个对象都挺有意思的，各有各的特色。但是有时候对象多了，老是给我报错，说我错了，唉，这可把我累的，不断在想我哪错了，怎么改。导致我经常熬夜通宵啊，头发都掉了不少了，可把我累坏了。所以啊，对象还是一个的好，一个好维护。估计要是渣男海王看到这里，估计要把我打死。</p><p>说实在的，大一下学期还真追过一女孩，不过以失败而告终，为此近一年都不在状态，很多工作都不是很上心，自我感觉一团糟，没有好好上课，没有好好规划，虽然也拿过一些或大或小的奖项等一些还可以的成绩，但是只有我自己知道，我并没有为此付出全力，没有开满状态，总是感觉畏手畏脚的，小心翼翼，没有以前那种自信了。所幸自己没有挂科，期末考试平均分86分，估计是卷子太简单了，然后老师还画了重点，所以啊，挂科其实也挺难的。也许有人会说为个女人至于吗？我想说的是没什么值不值得的，人生没有白走的路，每一步都算数。世界这么大：宇宙-&gt;已知宇宙-&gt;银河系-&gt;太阳系-&gt;地球-&gt;亚洲-&gt;中国-&gt;湖北-&gt;某市-&gt;某校-&gt;某院，总言之能遇见不容易，好聚好散叭，人生如逆旅，我亦是行人！</p><p>现在想想，当时还真的是勇敢，无所畏惧，一往无前，只因单纯的喜欢去追别人女生，现在想想，其实自己对待爱情还没有准备好，不知道咋个谈恋爱，回想起来细思极恐，好在对方没答应，不然我还真不知道咋办勒，手足无措……。</p><h1 id="8-聊聊班级工作与学生会工作"><a href="#8-聊聊班级工作与学生会工作" class="headerlink" title="8. 聊聊班级工作与学生会工作"></a>8. 聊聊班级工作与学生会工作</h1><p>先说说班级工作吧！和许多怀揣理想，想着在大学好好磨练自己的大一新生们一样，在大一的时候我也积极去竞选了班干部，我竞选的职位是班级团支书，那时候大家都不太熟，很意外，竟然有半数的同学投票给了我，也不知道那时候咋那会忽悠勒！开个玩笑哈！</p><p>既然大家那么多人相信我，我自然也不能闲着，在做好学院下达的团支部工作的同时，积极开展团建活动。很多次团支部主题讲解和团建活动都是生平第一次，每一次都生怕捅了篓子，开始前都会好好想想准备要说些什么。</p><p>其实很多同学都各自有各自的事情要做，有的要学习，有的要打游戏，有的要谈恋爱，还有的只想躺着休息，每次开会或搞活动，最怕的就是没人来参加会议，没人来参加活动。我有时候都在想如果没有PU校园实践要求，没有PU分，或许参加的人会很少叭，或是没有，因为从我自己来说叭。我就比较少参加活动，身边人参加活动的也不多，大多数的人都是各自在忙着自己的事，有着自己的节奏，如上面列举的那些事等等。</p><p>做为团支书工作已经两年了，现在想想有时候一些工作和活动都感觉非常形式主义，好像没什么太大的意义，但不得不做，对此也是很无奈啊！</p><p>聊完了班级工作再聊聊学生会工作叭。其实刚来大一的我感觉自己好像做班干部应该会挺忙的，所以就没有去竞选学院的学生会，参加学生会也纯属于偶然，或许是特别的缘分与机遇让我加入了学生会大家庭。说到这里，我就聊聊我是咋个加入学生会的叭，这还得从秋季运动会说起，那时候我们班级有很多同学参加了运动会项目，我那时是没有参加(自我认知-&gt;运动非我强项)，所以勒，我就全操场满地跑，给我们班的同学和学院的同学加油助威，也拿出手机记录一些精彩时刻，其实那时也是随便拍拍，没认真去拍照。</p><p>说来也巧了，当时学院负责学院学生工作的团总支书记是我们班的职业规划老师，因为当时上职业规划这门课程是要求分组然后进行一些课堂互动等等的，具体的忘记了，我吧，就应小组成员的要求与信任做了这组长，然后组长必须得跟老师发一些信息沟通交流，就加了老师，然后刚好运动会的某天我把拍的照片全部发到了空间，老师刚好看见了我拍的照片，感觉可能拍的还不错叭，就评论了一句：小伙子，来新宣部。于是我就这样加入了新宣部，再后来参加竞选晋升新宣部副部。这里非常感谢我的老师给予我这个机会让我有了一段不一样的经历与体验，从中学到很多，收获很多。</p><p>说实在的，团支书工作与新宣部工作，两个一起搞有时候真的累的够呛，特别是有时候工作与学习在同一段时间内，经常熬夜，压榨自己想自由学习和休息的时间，熬夜搞学习补作业。有时候真想不干了，但是我的内心告诉我：我不可以临阵退缩，既然干就干到底。于是很多时候我都坚持了下来，既把工作做好了，学习也没落下。</p><p>我发现在学习与工作之间来回奔波，对我产生了很多潜移默化的影响，比如渐渐学会了一些办公软件，视频剪辑，图片编辑，公众号排版发布，摄影，与人交流，收获友谊，增长见识，合理安排学习与工作的时间，抗压能力，解决问题的能力等等。</p><p>人生没有白走的路，每一步都算数。我们所经历的每一件事情，或多或少总会对你的身心产生一些影响，不论好的坏的，都会有所收获与感悟。</p><p>最近学生会换届，我没有选择继续留任在学生会工作了。我想两年多来为学生会奉献自己的时间与精力，也该退休了，让新鲜血液涌入学生会大家庭，虽然人不在学生会，但部门遇到一些问题时，我还会给予指导和帮助，毕竟这是我曾待过的部门，怎么说都会有一些感情存在吧，也希望我们新宣部能越来越好！</p><p>选择退休不再竞选更多的可能是我接下来要说的目标了。现在马上大三了，虽然之前也学了不少知识，也做过一些小的demo，但是没有知识归档记录，学的比较分散，有很多已记不清了，或是完全忘记了，最主要的还是对计算机领域不了解，对基础理论学科，一些专业思想不了解，导致学的东西理解不深刻，记不牢。感觉是时候要系统认真，全力以赴的学一些技能为就业做准备了，做一些自己喜欢的事情，比如写写博客，分享知识等等。通过自己的努力，从一个小白向架构师一步一步进军。</p><p>虽然离开了学生会，但是班级团支书的工作还是会去做。说实在的我个人其实不是蛮喜欢与人交流，经常出去聚会啥的。如果全都去搞学习搞技术的话，估计都会很少与人交流了。</p><p>继续选择团支书这份工作：一是真的想为大家服务，希望能够帮到大家。二是希望自己可以有更多的机会与同学们交流，不然光去搞学习，可能与同学们的交流就少了，那个感情就淡了啊。三是拿了一些奖学金，助学金，咱钱不能白拿哈，作为一个有担当的有志青年，我们应该去回报这个社会，也为这个社会做出贡献，投我以桃，报之以李，知恩图报。</p><h1 id="9-尾声"><a href="#9-尾声" class="headerlink" title="9. 尾声"></a>9. 尾声</h1><p>不知不觉已经码了七千多字了，这里小小总结一下叭！</p><ul><li><p>写博客很重要，不要觉得写博客耗费时间，写博客的过程中就是重新深度思考知识点的过程，通过记录回想能够学得更扎实，而且有正向的激励，会忍不住去学习去积累。</p></li><li><p>掌握正确的学习方法很重要，它可以让你事半功倍，学习知识更有效率，学的更好，不妨试试番茄工作法和费曼学习法，还有相应的学习工具番茄to do 。</p></li><li><p>对于一项陌生的技术刚开始还是以视频为主，以书为辅，先入门之后再说提高，要想提高的话后期必须得看书，看大牛写的书，经典的书，再难啃也得啃。</p></li><li><p>对于日益繁杂的公众号和博客文章，偶尔看看就好，真的不要指望能拿这些去系统的学习一门技术，因为作者的水平参差不齐，搞不好被带偏，还是看真大牛录制的系统性的技术学习视频或者书籍为上，对于一些不太懂的知识点或BUG不能解决的可以用搜索引擎搜一下。</p></li><li><p>专业理论基础真的很重要，如同枝干与树叶，树叶总是更新换代，不断萌生新的枝丫，但是树干与树根总是存在的，学习好专业理论基础才能以不变应万变，学习新技术时，一眼望穿本质，更快更好更有深度的掌握一门新技术。</p></li><li><p>关于爱情，俺虽然也不懂，不过我还是相信爱情，我相信某个偶然的那瞬间，我与未知的她终会相遇。</p></li><li><p>虽然学生工作挺累的，但请一定要坚持下去。请相信我们所经历的每一件事情，或多或少总会对你的身心产生一些影响，不论好的坏的，都会有所收获与感悟。</p></li></ul><p>希望上面所写的一些想法与经历能够给一些大一的科班小白些许帮助叭。</p><p>大三的钟声已经敲响，我已整装待发，明日即将开赴学校而去，这一次火力全开，状态打满，奥利给！！！</p>]]></content>
      
      
      <categories>
          
          <category> 程序人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 程序人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>集合全家桶</title>
      <link href="/posts/6d5520b0.html"/>
      <url>/posts/6d5520b0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么使用集合？"><a href="#1-为什么使用集合？" class="headerlink" title="1. 为什么使用集合？"></a>1. 为什么使用集合？</h2><p>首先我们回顾一下数组的优缺点，然后解释为什么要引入集合。</p><p><strong>数组在内存存储方面的特点：</strong></p><ul><li><p>数组初始化以后，长度就确定了。</p></li><li><p>数组声明的类型，就决定了进行元素初始化时的类型</p><p><strong>数组在存储数据方面的弊端：</strong></p></li><li><p>数组初始化以后，长度就不可变了，不便于扩展。</p></li><li><p>数组中提供的属性和方法少，不便于进行添加、删除、插入等操作，且效率不高。同时无法直接获取存储元素的个数。</p></li><li><p>数组存储的数据是有序的、可以重复的。—-&gt;存储数据的特点单一。</p></li></ul><p>我们可以看到数组的一些弊端，为了解决这些弊端，让数组可扩展，有增删改查等方法，让数据可以无序也可以有序，Java就提供了集合来弥补数组的。Java 集合类可以用于存储数量不等的多个对象，还可用于保存具有映射关系的关联数组。Java 集合就像一种容器，可以动态地把多个对象的引用放入容器中。</p><h2 id="2-集合框架体系"><a href="#2-集合框架体系" class="headerlink" title="2. 集合框架体系"></a>2. 集合框架体系</h2><p><strong>Java 集合可分为 <code>Collection 和 Map</code> 两种体系：</strong></p><ul><li><code>Collection</code>接口 ：单列数据，定义了存取一组对象的方法的集合<br><code>List</code>接口：元素有序、可重复的集合<br><code>Set</code>接口：元素无序、不可重复的集合</li><li><code>Map</code> 接口：双列数据，保存具有映射关系“key-value对”的集合</li></ul><p><strong>JDK提供的集合API位于java.util包内</strong></p><p><strong>下面放一张集合结构图，来全局认知集合的继承和实现体系：</strong></p><ul><li><p>‘——’ ：实线边框的是实现类，比如ArrayList，LinkedList，HashMap等</p></li><li><p>‘- - -’ ：折线边框的是抽象类，比如AbstractCollection，AbstractList，AbstractMap等</p></li><li><p>‘· · · ：’点线边框的是接口，比如Collection，Iterator，List等。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200903174201.png" alt="image-20200903174200772"></p><h2 id="3-Collection接口方法"><a href="#3-Collection接口方法" class="headerlink" title="3. Collection接口方法"></a>3. Collection接口方法</h2><ul><li>Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的方法既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合。</li><li>JDK不提供Collection 接口的任何直接实现，而是提供更具体的子接口(如：Set和List)实现。</li><li>在 Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都当成 Object 类型处理；从 JDK 5.0 增加了 <code>泛型</code>以后，Java 集合可以记住容器中对象的数据类型。</li></ul><p>接下来我们用代码示例测试一下Collection接口中的方法：</p><p>1、添加<br>  add(Object obj)<br>  addAll(Collection coll)<br>2、获取有效元素的个数<br>  int size()<br>3、清空集合<br> void clear()<br>4、是否是空集合<br>  boolean isEmpty()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多态引用，父类接口引用</span></span><br><span class="line">    Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//add(Object e):将元素e添加到集合coll中</span></span><br><span class="line">    coll.add(<span class="string">"AA"</span>);</span><br><span class="line">    coll.add(<span class="string">"BB"</span>);</span><br><span class="line">    coll.add(<span class="number">123</span>);<span class="comment">//自动装箱</span></span><br><span class="line">    coll.add(System.nanoTime());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//size():获取添加的元素的个数</span></span><br><span class="line">    System.out.println(coll.size());<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//addAll(Collection coll1): 将coll1集合中的元素添加到当前的集合中</span></span><br><span class="line">    Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll1.add(<span class="number">456</span>);</span><br><span class="line">    coll1.add(<span class="string">"CC"</span>);</span><br><span class="line">    coll.addAll(coll1);</span><br><span class="line"></span><br><span class="line">    System.out.println(coll.size());<span class="comment">//6</span></span><br><span class="line">    System.out.println(coll);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//clear():清空集合元素</span></span><br><span class="line">    coll.clear();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//isEmpty():判断当前集合是否为空</span></span><br><span class="line">    System.out.println(coll.isEmpty());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line">[AA, BB, <span class="number">123</span>, <span class="number">12560089811300</span>, <span class="number">456</span>, CC]</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>5、是否包含某个元素</p><ul><li>boolean contains(Object obj)：是通过元素的equals方法来判断是否是同一个对象</li><li>boolean containsAll(Collection c)：也是调用元素的equals方法来比较的。拿两个集合的元素挨个比较。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>);</span><br><span class="line">        coll.add(p);</span><br><span class="line">        System.out.println(coll.contains(p)); <span class="comment">//true，这里查找的就是p地址了，所以为true</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"abc"</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.contains(Object obj):判断当前集合中是否包含obj</span></span><br><span class="line">        <span class="comment">//我们在判断时会调用obj对象所在类的equals()。</span></span><br><span class="line">        <span class="keyword">boolean</span> contains = coll.contains(<span class="number">123</span>);</span><br><span class="line">        System.out.println(contains);<span class="comment">//true</span></span><br><span class="line">        <span class="comment">//这里因为String已经重写了equals方法，所以显示为true</span></span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> String(<span class="string">"Tom"</span>)));<span class="comment">//true</span></span><br><span class="line">        System.out.println(coll.contains(<span class="keyword">new</span> Person(<span class="string">"abc"</span>,<span class="number">20</span>)));<span class="comment">//false,Person没有重写equals方法</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.containsAll(Collection coll1):判断形参coll1中的所有元素是否都存在于当前集合中。</span></span><br><span class="line">        Collection coll1 = Arrays.asList(<span class="number">123</span>,<span class="number">4567</span>);</span><br><span class="line">        System.out.println(coll.containsAll(coll1));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public boolean equals(Object o) &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println("Person equals()....");</span></span><br><span class="line"><span class="comment">//        if (this == o) return true;</span></span><br><span class="line"><span class="comment">//        if (o == null || getClass() != o.getClass()) return false;</span></span><br><span class="line"><span class="comment">//        Person person = (Person) o;</span></span><br><span class="line"><span class="comment">//        return age == person.age &amp;&amp;</span></span><br><span class="line"><span class="comment">//                Objects.equals(name, person.name);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">true</span><br><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure><p>6、删除</p><ul><li>boolean remove(Object obj) ：通过元素的equals方法判断是否是要删除的那个元素。只会删除找到的第一个元素</li><li>boolean removeAll(Collection coll)：取当前集合的差集</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//3.remove(Object obj):从当前集合中移除obj元素。</span></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        coll.remove(<span class="number">1234</span>);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        coll.remove(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4. removeAll(Collection coll1):差集：从当前集合中移除coll1中所有的元素。</span></span><br><span class="line">        Collection coll1 = Arrays.asList(<span class="number">123</span>,<span class="number">456</span>);</span><br><span class="line">        coll.removeAll(coll1);</span><br><span class="line">        System.out.println(coll);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person equals()...."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">123</span>, <span class="number">456</span>, Person&#123;name='Jerry', age=<span class="number">20</span>&#125;, Tom, false]</span><br><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">[<span class="number">123</span>, <span class="number">456</span>, Tom, false]</span><br><span class="line">[Tom, false]</span><br></pre></td></tr></table></figure><p>7、boolean retainAll(Collection c)：把交集的结果存在当前集合中，不影响c集合。</p><p>8、boolean equals(Object obj)：判断两个集合是否相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll.add(<span class="number">123</span>);</span><br><span class="line">    coll.add(<span class="number">456</span>);</span><br><span class="line">    coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">    coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">    coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.retainAll(Collection coll1):交集：获取当前集合和coll1集合的交集，并返回给当前集合</span></span><br><span class="line">    Collection coll1 = Arrays.asList(<span class="number">123</span>,<span class="number">456</span>,<span class="number">789</span>);</span><br><span class="line">    coll.retainAll(coll1);</span><br><span class="line">    System.out.println(coll);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//6.equals(Object obj):要想返回true，需要当前集合和形参集合的元素都相同。</span></span><br><span class="line">    Collection coll2 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    coll2.add(<span class="number">123</span>);</span><br><span class="line">    coll2.add(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(coll2);</span><br><span class="line">    System.out.println(coll.equals(coll2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">Person equals()....</span><br><span class="line">[<span class="number">123</span>, <span class="number">456</span>]</span><br><span class="line">[<span class="number">123</span>, <span class="number">456</span>]</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>9、转成对象数组： Object[] toArray()<br>10、获取集合对象的哈希值： hashCode()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll);</span><br><span class="line">        <span class="comment">//7.hashCode():返回当前对象的哈希值</span></span><br><span class="line">        System.out.println(coll.hashCode());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//8.集合 ---&gt;数组：toArray()</span></span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length;i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拓展：数组 ---&gt;集合:调用Arrays类的静态方法asList()</span></span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(<span class="keyword">new</span> String[]&#123;<span class="string">"AA"</span>, <span class="string">"BB"</span>, <span class="string">"CC"</span>&#125;);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        List arr1 = Arrays.asList(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr1.size());<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        List arr2 = Arrays.asList(<span class="keyword">new</span> Integer[]&#123;<span class="number">123</span>, <span class="number">456</span>&#125;);</span><br><span class="line">        System.out.println(arr2.size());<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">123</span>, <span class="number">456</span>, Person&#123;name='Jerry', age=<span class="number">20</span>&#125;, Tom, false]</span><br><span class="line">-<span class="number">1200490100</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Person&#123;name='Jerry', age=<span class="number">20</span>&#125;</span><br><span class="line">Tom</span><br><span class="line">false</span><br><span class="line">[AA, BB, CC]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><p>11、遍历： iterator()：返回迭代器对象，用于集合遍历</p><p>关于这个方法，接下来另开一个主题进行演示讲解。</p><h2 id="4-Iterator迭代器接口"><a href="#4-Iterator迭代器接口" class="headerlink" title="4. Iterator迭代器接口"></a>4. Iterator迭代器接口</h2><ul><li><p>Iterator对象称为<code>迭代器</code>(设计模式的一种)，<code>主要用于遍历 Collection 集合中的元素</code>。</p></li><li><p><code>GOF</code>(<strong>GoF（Gang of Four），中文名——四人组，设计模式鼻祖。</strong>)给迭代器模式的定义为：提供一种方法访问一个容器(container)对象中各个元素，而又不需暴露该对象的内部细节。 迭代器模式，就是为容器而生。类似于“公交车上的售票员”、“火车上的乘务员”、“空姐”。</p></li><li><p><code>Collection接口继承了java.lang.Iterable接口，该接口有一个iterator()方法，那么所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象</code>。</p></li><li><p>Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。<code>如果需要创建Iterator 对象，则必须有一个被迭代的集合</code>。</p></li><li><p>集合对象每次调用iterator()方法都得到一个全新的迭代器对象，<code>默认游标都在集合的第一个元素之前</code>。</p><p><strong>Iterator接口的方法：</strong></p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905093244.png" alt="image-20200905093243976"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905093448.png" alt="image-20200905093448818"></p><h3 id="4-1-Iterator-遍历集合"><a href="#4-1-Iterator-遍历集合" class="headerlink" title="4.1 Iterator 遍历集合"></a>4.1 Iterator 遍历集合</h3><p><strong>代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        //报异常：NoSuchElementException,越界了</span></span><br><span class="line"><span class="comment">//        System.out.println(iterator.next());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：不推荐</span></span><br><span class="line"><span class="comment">//        for(int i = 0;i &lt; coll.size();i++)&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(iterator.next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式三：推荐</span></span><br><span class="line">        <span class="comment">////hasNext():判断是否还有下一个元素</span></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="comment">//next():①指针下移 ②将下移以后集合位置上的元素返回</span></span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Person&#123;name='Jerry', age=<span class="number">20</span>&#125;</span><br><span class="line">Tom</span><br><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="4-2-Iterator-两种错误的遍历方式"><a href="#4-2-Iterator-两种错误的遍历方式" class="headerlink" title="4.2 Iterator 两种错误的遍历方式"></a>4.2 Iterator 两种错误的遍历方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>,<span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="keyword">new</span> String(<span class="string">"Tom"</span>));</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式一：跳着输出，越界异常：NoSuchElementException</span></span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        <span class="keyword">while</span>((iterator.next()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//错误方式二：</span></span><br><span class="line">        <span class="comment">//集合对象每次调用iterator()方法都得到一个全新的迭代器对象，默认游标都在集合的第一个元素之前。</span></span><br><span class="line"><span class="comment">//        while (coll.iterator().hasNext())&#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(coll.iterator().next());</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">456</span></span><br><span class="line">Tom</span><br><span class="line"></span><br><span class="line">java.util.NoSuchElementException…………</span><br></pre></td></tr></table></figure><h3 id="4-3-Iterator-接口remove-方法"><a href="#4-3-Iterator-接口remove-方法" class="headerlink" title="4.3 Iterator 接口remove()方法"></a>4.3 Iterator 接口remove()方法</h3><p> <strong>注意：</strong></p><ul><li>Iterator可以删除集合的元素，但是是遍历过程中通过迭代器对象的remove方法，不是集合对象的remove方法。</li><li>如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，再调用remove都会报IllegalStateException。</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">   //测试Iterator中的remove()</span><br><span class="line">    //如果还未调用next()或在上一次调用 next 方法之后已经调用了 remove 方法，</span><br><span class="line">    // 再调用remove都会报IllegalStateException。</span><br><span class="line">    @Test</span><br><span class="line">    public void test3()&#123;</span><br><span class="line">        Collection coll = new ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(new Person("Jerry",<span class="number">20</span>));</span><br><span class="line">        coll.add(new String("Tom"));</span><br><span class="line">        coll.add(false);</span><br><span class="line"></span><br><span class="line">        //删除集合中"Tom"</span><br><span class="line">        Iterator iterator = coll.iterator();</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">//            iterator.remove();  IllegalStateException</span><br><span class="line">            Object obj = iterator.next();</span><br><span class="line">            <span class="keyword">if</span>("Tom".equals(obj))&#123;</span><br><span class="line">                iterator.remove();</span><br><span class="line">//                iterator.remove(); IllegalStateException</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        //遍历集合</span><br><span class="line">        iterator = coll.iterator();</span><br><span class="line">        while (iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Person&#123;name='Jerry', age=<span class="number">20</span>&#125;</span><br><span class="line">false</span><br></pre></td></tr></table></figure><h3 id="4-4-使用-foreach-循环遍历集合元素"><a href="#4-4-使用-foreach-循环遍历集合元素" class="headerlink" title="4.4 使用 foreach 循环遍历集合元素"></a>4.4 使用 foreach 循环遍历集合元素</h3><ul><li>Java 5.0 提供了 foreach 循环迭代访问<code>Collection和数组</code>。</li><li>遍历操作不需获取Collection或数组的长度，无需使用索引访问元素。</li><li>遍历集合的底层调用Iterator完成操作。</li><li>foreach还可以用来遍历数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ForTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll.add(<span class="number">123</span>);</span><br><span class="line">        coll.add(<span class="number">456</span>);</span><br><span class="line">        coll.add(<span class="keyword">new</span> Person(<span class="string">"Jerry"</span>, <span class="number">20</span>));</span><br><span class="line">        coll.add(<span class="string">"Tom"</span>);</span><br><span class="line">        coll.add(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//for(集合元素的类型 局部变量 : 集合对象)</span></span><br><span class="line">        <span class="comment">//内部仍然调用了迭代器。</span></span><br><span class="line">        <span class="keyword">for</span> (Object obj : coll) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line">Person&#123;name=<span class="string">'Jerry'</span>, age=<span class="number">20</span>&#125;</span><br><span class="line">Tom</span><br><span class="line"><span class="keyword">false</span></span><br><span class="line">----------------------------------------------------</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">//for(数组元素的类型 局部变量 : 数组对象)</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            System.out.println(i+<span class="string">","</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>, </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-List接口"><a href="#5-List接口" class="headerlink" title="5. List接口"></a>5. List接口</h2><ul><li>鉴于Java中数组用来存储数据的局限性，我们通常使用List替代数组</li><li>List集合类中 <code>元素有序、且可重复</code>，集合中的每个元素都有其对应的顺序索引。</li><li>List容器中的元素都对应一个整数型的序号记载其在容器中的位置，可以根据序号存取容器中的元素。</li><li>JDK API中<code>List接口的实现类常用的有：ArrayList、LinkedList和Vector</code>。</li></ul><h3 id="5-1-List接口常用方法"><a href="#5-1-List接口常用方法" class="headerlink" title="5.1 List接口常用方法"></a>5.1 List接口常用方法</h3><p> <strong>List除了从Collection集合继承的方法外，List 集合里添加了一些根据索引来操作集合元素的方法。</strong></p><ul><li>void add(int index, Object ele): 在index 位置插入ele 元素</li><li>boolean addAll(int index, Collection eles): 从index 位置开始将eles中 中的所有元素添加进来</li><li>Object get(int index): 获取指定index 位置的元素</li><li>int indexOf(Object obj): 返回obj 在集合中首次出现的位置</li><li>int lastIndexOf(Object obj): 返回obj 在当前集合中末次出现的位置</li><li>Object remove(int index): 移除指定index 位置的元素，并返回此元素</li><li>Object set(int index, Object ele): 设置指定index 位置的元素为ele</li><li>List subList(int fromIndex, int toIndex): 返回从fromIndex 到toIndex位置的子集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1. List接口框架</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * |----Collection接口：单列集合，用来存储一个一个的对象</span></span><br><span class="line"><span class="comment"> * |----List接口：存储有序的、可重复的数据。  --&gt;“动态”数组,替换原有的数组</span></span><br><span class="line"><span class="comment"> * |----ArrayList：作为List接口的主要实现类；线程不安全的，效率高；底层使用Object[] elementData存储</span></span><br><span class="line"><span class="comment"> * |----LinkedList：对于频繁的插入、删除操作，使用此类效率比ArrayList高；底层使用双向链表存储</span></span><br><span class="line"><span class="comment"> * |----Vector：作为List接口的古老实现类；线程安全（synchronized）的，效率低；底层使用Object[] elementData存储</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void add(int index, Object ele):在index位置插入ele元素</span></span><br><span class="line"><span class="comment">boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line"><span class="comment">Object get(int index):获取指定index位置的元素</span></span><br><span class="line"><span class="comment">int indexOf(Object obj):返回obj在集合中首次出现的位置</span></span><br><span class="line"><span class="comment">int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置</span></span><br><span class="line"><span class="comment">Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class="line"><span class="comment">Object set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class="line"><span class="comment">List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的子集合</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">总结：常用方法</span></span><br><span class="line"><span class="comment">增：add(Object obj)</span></span><br><span class="line"><span class="comment">删：remove(int index) / remove(Object obj)</span></span><br><span class="line"><span class="comment">改：set(int index, Object ele)</span></span><br><span class="line"><span class="comment">查：get(int index)</span></span><br><span class="line"><span class="comment">插：add(int index, Object ele)</span></span><br><span class="line"><span class="comment">长度：size()</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="string">"AA"</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">12</span>));</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">         </span><br><span class="line">        System.out.println(list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int indexOf(Object obj):返回obj在集合中首次出现的位置。如果不存在，返回-1.</span></span><br><span class="line">        <span class="keyword">int</span> index = list.indexOf(<span class="number">4567</span>);</span><br><span class="line">        System.out.println(index);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int lastIndexOf(Object obj):返回obj在当前集合中末次出现的位置。如果不存在，返回-1.</span></span><br><span class="line">        System.out.println(list.lastIndexOf(<span class="number">456</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object remove(int index):移除指定index位置的元素，并返回此元素</span></span><br><span class="line">        Object obj = list.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object set(int index, Object ele):设置指定index位置的元素为ele</span></span><br><span class="line">        list.set(<span class="number">1</span>, <span class="string">"CC"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List subList(int fromIndex, int toIndex):返回从fromIndex到toIndex位置的左闭右开区间的子集合</span></span><br><span class="line">        List subList = list.subList(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        System.out.println(subList);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">123</span>, <span class="number">456</span>, AA, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">[<span class="number">456</span>, AA, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">[<span class="number">456</span>, CC, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">[Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">[<span class="number">456</span>, CC, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]       </span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line">        list.add(<span class="string">"AA"</span>);</span><br><span class="line">        list.add(<span class="keyword">new</span> Person(<span class="string">"Tom"</span>, <span class="number">12</span>));</span><br><span class="line">        list.add(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void add(int index, Object ele):在index位置插入ele元素</span></span><br><span class="line">        list.add(<span class="number">1</span>, <span class="string">"BB"</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//boolean addAll(int index, Collection eles):从index位置开始将eles中的所有元素添加进来</span></span><br><span class="line">        List list1 = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        list.addAll(list1);<span class="comment">//1, 2, 3</span></span><br><span class="line"><span class="comment">//        list.add(list1);//[1, 2, 3]</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line">        System.out.println(list.size());<span class="comment">//9</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Object get(int index):获取指定index位置的元素</span></span><br><span class="line">        System.out.println(list.get(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">运行结果：</span><br><span class="line">[<span class="number">123</span>, <span class="number">456</span>, AA, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">[<span class="number">123</span>, BB, <span class="number">456</span>, AA, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>]</span><br><span class="line">[<span class="number">123</span>, BB, <span class="number">456</span>, AA, Person&#123;name=<span class="string">'Tom'</span>, age=<span class="number">12</span>&#125;, <span class="number">456</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-List-实现类之一：ArrayList"><a href="#5-2-List-实现类之一：ArrayList" class="headerlink" title="5.2 List 实现类之一：ArrayList"></a>5.2 List 实现类之一：ArrayList</h3><ul><li><p>ArrayList 是 List 接口的典型实现类、主要实现类</p></li><li><p>线程不安全的，效率高；底层使用<code>Object[] elementData</code>存储</p></li><li><p>ArrayList 的JDK1.8 之前与之后的实现区别？</p><ol><li><p>JDK1.7：ArrayList像饿汉式，直接底层创建了长度是10的Object[]数组elementData,，如果添加导致底层elementData数组容量不够，则扩容，默认情况下，扩容为原来的容量的1.5倍，同时需要将原有数组中的数据复制到新的数组中。</p></li><li><p>JDK1.8：ArrayList像懒汉式，一开始底层Object[] elementData初始化为{}，并没有创建长度为10的数组，当添加第一个元素时再创建一个始容量为10的数组</p></li><li><p>jdk7中的ArrayList的对象的创建类似于<code>单例的饿汉式</code>，而jdk8中的ArrayList的对象的创建类似于<code>单例的懒汉式</code>，延迟了数组的创建，节省内存。</p></li></ol></li><li><p>Arrays.asList(…) 方法返回的 List 集合，既不是 ArrayList 实例，也不是Vector 实例。 Arrays.asList(…) 返回值是一个固定长度的 List 集合</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">asList</span><span class="params">(T... a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-List-实现类之二：LinkedList"><a href="#5-3-List-实现类之二：LinkedList" class="headerlink" title="5.3 List 实现类之二：LinkedList"></a>5.3 List 实现类之二：LinkedList</h3><ul><li>对于<code>频繁的插入、删除</code>操作，使用此类效率比ArrayList高；底层使用<code>双向链表</code>存储</li><li>LinkedList： 双向链表，内部没有声明数组，而是定义了<code>Node类型的first和last</code>，用于记录首末元素。同时，定义内部类Node，作为LinkedList中保存数据的基本结构。Node除了保存数据，还定义了两个变量：<ol><li>prev变量记录前一个元素的位置</li><li>next变量记录下一个元素的位置 </li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905114128.png" alt="image-20200905114128774"></p><h3 id="5-4-List-实现类之三：Vector"><a href="#5-4-List-实现类之三：Vector" class="headerlink" title="5.4 List 实现类之三：Vector"></a>5.4 List 实现类之三：Vector</h3><ul><li>Vector 是一个古老的集合，JDK1.0就有了。大多数操作与ArrayList相同，区别之处在于<code>Vector是线程安全的</code>。</li><li>在各种list中，最好把ArrayList作为缺省选择。<code>当插入、删除频繁时，使用LinkedList；</code>Vector总是比ArrayList慢，所以尽量避免使用。</li></ul><h3 id="5-5-面试题练练手"><a href="#5-5-面试题练练手" class="headerlink" title="5.5 面试题练练手"></a>5.5 面试题练练手</h3><p><strong>请问ArrayList/LinkedList/Vector的异同？谈谈你的理解？ArrayList底层是什么？扩容机制？Vector和ArrayList的最大区别?</strong></p><ul><li>ArrayList和LinkedList的异同：<ol><li>二者都线程不安全，相对线程安全的Vector，执行效率高。</li><li>此外，ArrayList是实现了基于动态数组的数据结构，LinkedList基于双向链表的数据结构。</li><li>对于随机访问get和set，ArrayList觉得优于LinkedList，因为LinkedList要移动指针。</li><li>对于新增和删除操作add(特指插入)和remove，LinkedList比较占优势，因为ArrayList要移动数据。</li></ol></li><li>ArrayList和Vector的区别：<ol><li>Vector和ArrayList几乎是完全相同的,唯一的区别在于Vector是同步类(synchronized)，属于<br>强同步类。因此开销就比ArrayList要大，访问要慢。</li><li>正常情况下,大多数的Java程序员使用ArrayList而不是Vector,因为同步完全可以由程序员自己来控制。</li><li>Vector每次扩容请求其大小的2倍空间，而ArrayList是1.5倍。Vector还有一个子类Stack。</li></ol></li></ul><h2 id="6-Set接口"><a href="#6-Set接口" class="headerlink" title="6. Set接口"></a>6. Set接口</h2><ul><li>Set接口是Collection的子接口，set接口没有提供额外的方法</li><li>Set 集合<code>不允许包含相同的元素</code>，如果试把两个相同的元素加入同一个Set 集合中，则添加操作失败。</li><li>Set 判断两个对象是否相同不是使用 == 运算符，而是根据 equals() 方法</li></ul><h3 id="6-1-Set-实现类之一：HashSet"><a href="#6-1-Set-实现类之一：HashSet" class="headerlink" title="6.1 Set 实现类之一：HashSet"></a>6.1 Set 实现类之一：HashSet</h3><ul><li><p>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。</p></li><li><p>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取、查找、删除性能。</p></li><li><p><code>HashSet 具有以下特点：</code></p><ol><li>不能保证元素的排列顺序</li><li>HashSet <code>不是线程安全的</code></li><li>集合元素可以是 <code>null</code></li></ol></li><li><p><code>HashSet 集合判断两个元素相等的标准：</code>两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等。</p></li><li><p>对于存放在Set容器中的对象， 对应的类一定要重写equals() 和hashCode(Objectobj) 方法，以实现对象相等规则 。即：<code>“相等的对象必须具有相等的散列码”</code>。</p></li><li><p>向HashSet中添加元素的过程：</p><ol><li><p>当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值，通过某种散列函数决定该对象在 HashSet 底层数组中的存储位置。（这个散列函数会与底层数组的长度相计算得到在数组中的下标，并且这种散列函数计算还尽可能保证能均匀存储元素，越是散列分布，该散列函数设计的越好）</p></li><li><p>如果两个元素的hashCode()值相等，会再继续调用equals方法，如果equals方法结果为true，添加失败；如果为false，那么会保存该元素，但是该数组的位置已经有元素了，那么会通过链表的方式继续链接。</p></li></ol></li><li><p>如果两个元素的 equals() 方法返回 true，但它们的 hashCode() 返回值不相等，hashSet 将会把它们存储在不同的位置，但依然可以添加成功。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905164448.png" alt="image-20200905164446219"></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="string">"AA"</span>);</span><br><span class="line">        set.add(<span class="string">"CC"</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"User equals()...."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        User user = (User) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != user.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(user.name) : user.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; <span class="comment">//return name.hashCode() + age;</span></span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从大到小排列,年龄从小到大排列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user = (User)o;</span><br><span class="line"><span class="comment">//            return -this.name.compareTo(user.name);</span></span><br><span class="line">            <span class="keyword">int</span> compare = -<span class="keyword">this</span>.name.compareTo(user.name);</span><br><span class="line">            <span class="keyword">if</span>(compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.age,user.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User equals()....</span><br><span class="line">AA</span><br><span class="line">CC</span><br><span class="line"><span class="number">129</span></span><br><span class="line"><span class="number">456</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">User&#123;name='Tom', age=<span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="6-2-重写-hashCode-方法的基本原则"><a href="#6-2-重写-hashCode-方法的基本原则" class="headerlink" title="6.2 重写 hashCode() 方法的基本原则"></a>6.2 重写 hashCode() 方法的基本原则</h3><ul><li>在程序运行时，同一个对象多次调用 hashCode() 方法应该返回相同的值。</li><li>当两个对象的 equals() 方法比较返回 true 时，这两个对象的 hashCode()方法的返回值也应相等。</li><li>对象中用作 equals() 方法比较的 Field（属性），都应该用来计算 hashCode 值</li></ul><p><strong>Eclipse/IDEA 工具里hashCode()的 重写</strong></p><p>以Eclipse/IDEA为例，在自定义类中可以调用工具自动重写equals和hashCode。问题：为什么用Eclipse/IDEA复写hashCode方法，有31这个数字？</p><ul><li>选择系数的时候要选择尽量大的系数。因为如果计算出来的hash地址越大，所谓的“冲突”就越少，查找起来效率也会提高。（减少冲突）</li><li>并且31只占用5bits,相乘造成数据溢出的概率较小。</li><li>31可以 由i*31== (i&lt;&lt;5)-1来表示,现在很多虚拟机里面都有做相关优化。（提高算法效率）</li><li>31是一个素数，素数作用就是如果我用一个数字来乘以这个素数，那么最终出来的结果只能被素数本身和被乘数还有1来整除！(减少冲突)</li></ul><h3 id="6-3-重写-equals-方法的基本原则"><a href="#6-3-重写-equals-方法的基本原则" class="headerlink" title="6.3 重写 equals() 方法的基本原则"></a>6.3 重写 equals() 方法的基本原则</h3><ul><li>当一个类有自己特有的“逻辑相等”概念,当改写equals()的时候，总是要改写hashCode()，根据一个类的equals方法（改写后），两个截然不同的实例有可能在逻辑上是相等的，但是，根据Object.hashCode()方法，它们仅仅是两个对象。</li><li>因此，违反了<code>“相等的对象必须具有相等的散列码”</code>。</li><li>结论：复写equals方法的时候一般都需要同时复写hashCode方法。通常参与计算hashCode 的对象的属性也应该参与到equals()</li></ul><h3 id="6-4-Set-实现类之二：LinkedHashSet"><a href="#6-4-Set-实现类之二：LinkedHashSet" class="headerlink" title="6.4 Set 实现类之二：LinkedHashSet"></a>6.4 Set 实现类之二：LinkedHashSet</h3><ul><li>LinkedHashSet 是 HashSet 的子类</li><li>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它<code>同时使用双向链表维护元素的次</code>序，这使得元素看起来是以插入顺序保存的。</li><li>LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。</li><li>LinkedHashSet 不允许集合元素重复。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905171723.png" alt="image-20200905171722947"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LinkedHashSet的使用</span></span><br><span class="line">   <span class="comment">//LinkedHashSet作为HashSet的子类，在添加数据的同时，每个数据还维护了两个引用，记录此数据前一个</span></span><br><span class="line">   <span class="comment">//数据和后一个数据。</span></span><br><span class="line">   <span class="comment">//优点：对于频繁的遍历操作，LinkedHashSet效率高于HashSet，因为不用比较hash值equals</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       Set set = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line">       set.add(<span class="number">456</span>);</span><br><span class="line">       set.add(<span class="number">123</span>);</span><br><span class="line">       set.add(<span class="number">123</span>);</span><br><span class="line">       set.add(<span class="string">"AA"</span>);</span><br><span class="line">       set.add(<span class="string">"CC"</span>);</span><br><span class="line">       set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">       set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">       set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">       Iterator iterator = set.iterator();</span><br><span class="line">       <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">User equals()....</span><br><span class="line"><span class="number">456</span></span><br><span class="line"><span class="number">123</span></span><br><span class="line">AA</span><br><span class="line">CC</span><br><span class="line">User&#123;name='Tom', age=<span class="number">12</span>&#125;</span><br><span class="line"><span class="number">129</span></span><br></pre></td></tr></table></figure><h3 id="6-5-Set-实现类之三：TreeSet"><a href="#6-5-Set-实现类之三：TreeSet" class="headerlink" title="6.5  Set 实现类之三：TreeSet"></a>6.5  Set 实现类之三：TreeSet</h3><ul><li><code>TreeSet 是 SortedSet 接口的实现类，TreeSet 可以确保集合元素处于排序状态。</code></li><li>TreeSet底层使用 <code>红黑树</code>结构存储数据</li><li>TreeSet 两种排序方法： <code>自然排序和 定制排序</code>。默认情况下，TreeSet 采用自然排序。</li><li>TreeSet和TreeMap采用红黑树的存储结构</li><li>特点：有序，查询速度比List快</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905175427.png" alt="image-20200905175427515"></p><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.向TreeSet中添加的数据，要求是相同类的对象。</span></span><br><span class="line"><span class="comment">    2.两种排序方式：自然排序（实现Comparable接口） 和 定制排序（Comparator）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    3.自然排序中，比较两个对象是否相同的标准为：compareTo()返回0.不再是equals().</span></span><br><span class="line"><span class="comment">    4.定制排序中，比较两个对象是否相同的标准为：compare()返回0.不再是equals().</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeSet set = <span class="keyword">new</span> TreeSet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//失败：不能添加不同类的对象</span></span><br><span class="line"><span class="comment">//        set.add(123);</span></span><br><span class="line"><span class="comment">//        set.add(456);</span></span><br><span class="line"><span class="comment">//        set.add("AA");</span></span><br><span class="line"><span class="comment">//        set.add(new User("Tom",12));</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例一：</span></span><br><span class="line">        set.add(<span class="number">34</span>);</span><br><span class="line">        set.add(-<span class="number">34</span>);</span><br><span class="line">        set.add(<span class="number">43</span>);</span><br><span class="line">        set.add(<span class="number">11</span>);</span><br><span class="line">        set.add(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        set.removeAll(set);</span><br><span class="line">        System.out.println(<span class="string">"------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//举例二：</span></span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jerry"</span>,<span class="number">32</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jim"</span>,<span class="number">2</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Mike"</span>,<span class="number">65</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">33</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line">         iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"User equals()...."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        User user = (User) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != user.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(user.name) : user.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; <span class="comment">//return name.hashCode() + age;</span></span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从大到小排列,年龄从小到大排列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user = (User)o;</span><br><span class="line"><span class="comment">//            return -this.name.compareTo(user.name);</span></span><br><span class="line">            <span class="keyword">int</span> compare = -<span class="keyword">this</span>.name.compareTo(user.name);</span><br><span class="line">            <span class="keyword">if</span>(compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;<span class="comment">//姓名相同再比较年龄</span></span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.age,user.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">34</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">34</span></span><br><span class="line"><span class="number">43</span></span><br><span class="line">------------</span><br><span class="line">User&#123;name='Tom', age=<span class="number">12</span>&#125;</span><br><span class="line">User&#123;name='Mike', age=<span class="number">65</span>&#125;</span><br><span class="line">User&#123;name='Jim', age=<span class="number">2</span>&#125;</span><br><span class="line">User&#123;name='Jerry', age=<span class="number">32</span>&#125;</span><br><span class="line">User&#123;name='Jack', age=<span class="number">33</span>&#125;</span><br><span class="line">User&#123;name='Jack', age=<span class="number">56</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="6-5-1-排序—-自然排序"><a href="#6-5-1-排序—-自然排序" class="headerlink" title="6.5.1 排序— 自然排序"></a>6.5.1 排序— 自然排序</h4><ul><li><p><code>自然排序：TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序(默认情况)排列</code></p></li><li><p><code>如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable接口。</code></p><ul><li>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过compareTo(Object obj) 方法的返回值来比较大小。</li></ul></li><li><p>Comparable 的典型实现：</p><ul><li>BigDecimal、BigInteger 以及所有的数值型对应的包装类：按它们对应的数值大小进行比较</li><li>Character：按字符的 unicode值来进行比较</li><li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li><li>String：按字符串中字符的 unicode 值进行比较</li><li>Date、Time：后边的时间、日期比前面的时间、日期大</li></ul></li><li><p>向TreeSet 中添加元素时，只有第一个元素无须比较compareTo()方法，后面添加的所有元素都会调用compareTo()方法进行比较。</p></li><li><p><code>因为只有相同类的两个实例才会比较大小，所以向 TreeSet 中添加的应该是同一个类 的 对象。</code></p></li><li><p>对于 TreeSet 集合而言，它<code>判断两个对象是否相等的唯一标准</code>是：两个对象通过 compareTo(Object obj) 方法比较返回值。</p></li><li><p>当需要把一个对象放入 TreeSet 中，重写该对象对应的 equals() 方法时，应保证该方法与 compareTo(Object obj) 方法有一致的结果：如果两个对象通过<br>equals() 方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0。否则，让人难以理解。</p></li></ul><h4 id="6-5-2-排序—-定制排序"><a href="#6-5-2-排序—-定制排序" class="headerlink" title="6.5.2 排序— 定制排序"></a>6.5.2 排序— 定制排序</h4><ul><li>TreeSet的自然排序要求元素所属的类实现Comparable接口，如果元素所属的类没有实现Comparable接口，或不希望按照升序(默认情况)的方式排列元素或希望按照其它属性大小进行排序，则考虑使用定制排序。定制排序，通过Comparator接口来实现。需要重写compare(T o1,T o2)方法。</li><li>利用int compare(T o1,T o2)方法，比较o1和o2的大小：如果方法返回正整数，则表示o1大于o2；如果返回0，表示相等；返回负整数，表示o1小于o2。</li><li>要实现定制排序，需要<code>将实现Comparator接口的实例作为形参传递给TreeSet的构造器</code>。</li><li>此时，<code>仍然只能向TreeSet中添加类型相同的对象</code>。否则发生ClassCastException异常。</li><li>使用定制排序<code>判断两个元素相等的标准</code>是：通过Comparator比较两个元素返回了0。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">     Comparator com = <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">         <span class="comment">//按照年龄从小到大排列</span></span><br><span class="line">         <span class="meta">@Override</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">             <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                 User u1 = (User)o1;</span><br><span class="line">                 User u2 = (User)o2;</span><br><span class="line">                 <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">             &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的数据类型不匹配"</span>);</span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;;</span><br><span class="line"></span><br><span class="line">     TreeSet set = <span class="keyword">new</span> TreeSet(com);</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">12</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Jerry"</span>,<span class="number">32</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Jim"</span>,<span class="number">2</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Mike"</span>,<span class="number">65</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Mary"</span>,<span class="number">33</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">33</span>));</span><br><span class="line">     set.add(<span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">56</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     Iterator iterator = set.iterator();</span><br><span class="line">     <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">         System.out.println(iterator.next());</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User&#123;name='Jim', age=<span class="number">2</span>&#125;</span><br><span class="line">User&#123;name='Tom', age=<span class="number">12</span>&#125;</span><br><span class="line">User&#123;name='Jerry', age=<span class="number">32</span>&#125;</span><br><span class="line">User&#123;name='Mary', age=<span class="number">33</span>&#125;</span><br><span class="line">User&#123;name='Jack', age=<span class="number">56</span>&#125;</span><br><span class="line">User&#123;name='Mike', age=<span class="number">65</span>&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-面试题"><a href="#6-6-面试题" class="headerlink" title="6.6 面试题"></a>6.6 面试题</h3><p><strong>在List内去除重复数字值，要求尽量简单：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">duplicateList</span><span class="params">(List list)</span> </span>&#123;</span><br><span class="line">    HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    set.addAll(list);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ArrayList(set);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">1</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">2</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">    list.add(<span class="keyword">new</span> Integer(<span class="number">4</span>));</span><br><span class="line">    List list2 = duplicateList(list);</span><br><span class="line">    <span class="keyword">for</span> (Object integer : list2) &#123;</span><br><span class="line">        System.out.println(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><p><strong>面试题：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    HashSet set = <span class="keyword">new</span> HashSet();</span><br><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">"AA"</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="number">1002</span>,<span class="string">"BB"</span>);</span><br><span class="line"></span><br><span class="line">    set.add(p1);</span><br><span class="line">    set.add(p2);</span><br><span class="line">    System.out.println(set);</span><br><span class="line"></span><br><span class="line">    p1.name = <span class="string">"CC"</span>;</span><br><span class="line">    <span class="comment">//因为之前是根据1001 AA的hash值存放的</span></span><br><span class="line">    <span class="comment">//现在改成CC，所以hash值与1001 AA的hash值不一样</span></span><br><span class="line">    <span class="comment">//所以找到的是1001 AA 存放之外的地址，删除的是null</span></span><br><span class="line">    <span class="comment">//原来的两个数据仍在</span></span><br><span class="line">    set.remove(p1);</span><br><span class="line">    System.out.println(set);</span><br><span class="line">    <span class="comment">//因为上面说的删除的是null,所以可以存放在那个位置</span></span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">"CC"</span>));</span><br><span class="line">    System.out.println(set);</span><br><span class="line">    set.add(<span class="keyword">new</span> Person(<span class="number">1001</span>,<span class="string">"AA"</span>));</span><br><span class="line">    System.out.println(set);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Person&#123;id=<span class="number">1002</span>, name='BB'&#125;, Person&#123;id=<span class="number">1001</span>, name='AA'&#125;]</span><br><span class="line">[Person&#123;id=<span class="number">1002</span>, name='BB'&#125;, Person&#123;id=<span class="number">1001</span>, name='CC'&#125;]</span><br><span class="line">[Person&#123;id=<span class="number">1002</span>, name='BB'&#125;, Person&#123;id=<span class="number">1001</span>, name='CC'&#125;, Person&#123;id=<span class="number">1001</span>, name='CC'&#125;]</span><br><span class="line">[Person&#123;id=<span class="number">1002</span>, name='BB'&#125;, Person&#123;id=<span class="number">1001</span>, name='CC'&#125;, Person&#123;id=<span class="number">1001</span>, name='CC'&#125;, Person&#123;id=<span class="number">1001</span>, name='AA'&#125;]</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200905183215.png" alt="image-20200905183215588"></p><h2 id="7-Map接口"><a href="#7-Map接口" class="headerlink" title="7. Map接口"></a>7. Map接口</h2><p>先看看Map接口的继承体系：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200903174201.png" alt="image-20200903174200772"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909161600.png" alt="image-20200909161600032"></p><h3 id="7-1-Map-接口概述"><a href="#7-1-Map-接口概述" class="headerlink" title="7.1 Map 接口概述"></a>7.1 Map 接口概述</h3><ul><li>Map与Collection并列存在。用于保存具有 映射关系的数据:<code>key-value</code></li><li>Map 中的 key 和 value 都可以是任何引用类型的数据</li><li>Map 中的 <code>key 用Set来存放， 不允许重复</code>，即同一个 <code>Map 对象所对应的类，须重写hashCode()和equals()方法</code></li><li>常用String类作为Map的“键-key”</li><li>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value</li><li>Map接口的常用实现类：<code>HashMap、TreeMap、LinkedHashMap和Properties</code>。其中，HashMap是 Map 接口使用频率最高的实现类</li></ul><h3 id="7-2-Map接口常用方法"><a href="#7-2-Map接口常用方法" class="headerlink" title="7.2 Map接口常用方法"></a>7.2 Map接口常用方法</h3><p> <strong>添加 、 删除、修改操作 ：</strong></p><ul><li><p>Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</p></li><li><p>void putAll(Map m):将m中的所有key-value对存放到当前map中</p></li><li><p>Object remove(Object key)：移除指定key的key-value对，并返回value</p></li><li><p>void clear()：清空当前map中的所有数据</p></li></ul><p><strong>元素查询的操作：</strong></p><ul><li><p>Object get(Object key)：获取指定 key对应的value</p></li><li><p>boolean containsKey(Object key)：是否包含指定的key</p></li><li><p>boolean containsValue(Object value)：是否包含指定的value</p></li><li><p>int size()：返回map中key-value对的个数</p></li><li><p>boolean isEmpty()：判断当前map是否为空</p></li><li><p>boolean equals(Object obj)：判断当前map和参数对象obj是否相等</p></li></ul><p><strong>元视图操作的方法：</strong></p><ul><li><p>Set keySet()：返回所有key构成的Set集合</p></li><li><p>Collection values()：返回所有value构成的Collection集合</p></li><li><p>Set entrySet()：返回所有key-value对构成的Set集合</p></li></ul><p>代码测试:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 元视图操作的方法：</span></span><br><span class="line"><span class="comment"> Set keySet()：返回所有key构成的Set集合</span></span><br><span class="line"><span class="comment"> Collection values()：返回所有value构成的Collection集合</span></span><br><span class="line"><span class="comment"> Set entrySet()：返回所有key-value对构成的Set集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"AA"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">1234</span>);</span><br><span class="line">        map.put(<span class="string">"BB"</span>,<span class="number">56</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的key集：keySet()</span></span><br><span class="line">        Set set = map.keySet();</span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">            <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的value集：values()</span></span><br><span class="line">        Collection values = map.values();</span><br><span class="line">        <span class="keyword">for</span>(Object obj : values)&#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历所有的key-value</span></span><br><span class="line">        <span class="comment">//方式一：entrySet()</span></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            <span class="comment">//entrySet集合中的元素都是entry</span></span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"----&gt;"</span> + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        Set keySet = map.keySet();</span><br><span class="line">        Iterator iterator2 = keySet.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator2.hasNext())&#123;</span><br><span class="line">            Object key = iterator2.next();</span><br><span class="line">            Object value = map.get(key);</span><br><span class="line">            System.out.println(key + <span class="string">"====="</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">test5运行结果</span></span><br><span class="line"><span class="comment">AA</span></span><br><span class="line"><span class="comment">BB</span></span><br><span class="line"><span class="comment">45</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">123</span></span><br><span class="line"><span class="comment">56</span></span><br><span class="line"><span class="comment">1234</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">AA----&gt;123</span></span><br><span class="line"><span class="comment">BB----&gt;56</span></span><br><span class="line"><span class="comment">45----&gt;1234</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">AA=====123</span></span><br><span class="line"><span class="comment">BB=====56</span></span><br><span class="line"><span class="comment">45=====1234</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 元素查询的操作：</span></span><br><span class="line"><span class="comment"> Object get(Object key)：获取指定key对应的value</span></span><br><span class="line"><span class="comment"> boolean containsKey(Object key)：是否包含指定的key</span></span><br><span class="line"><span class="comment"> boolean containsValue(Object value)：是否包含指定的value</span></span><br><span class="line"><span class="comment"> int size()：返回map中key-value对的个数</span></span><br><span class="line"><span class="comment"> boolean isEmpty()：判断当前map是否为空</span></span><br><span class="line"><span class="comment"> boolean equals(Object obj)：判断当前map和参数对象obj是否相等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map.put(<span class="string">"AA"</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>, <span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"BB"</span>, <span class="number">56</span>);</span><br><span class="line">        <span class="comment">// Object get(Object key)</span></span><br><span class="line">        System.out.println(map.get(<span class="number">45</span>));<span class="comment">//123</span></span><br><span class="line">        <span class="comment">//containsKey(Object key)</span></span><br><span class="line">        <span class="keyword">boolean</span> isExist = map.containsKey(<span class="string">"BB"</span>);</span><br><span class="line">        System.out.println(isExist);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        isExist = map.containsValue(<span class="number">123</span>);</span><br><span class="line">        System.out.println(isExist);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        map.clear();</span><br><span class="line"></span><br><span class="line">        System.out.println(map.isEmpty());<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     添加、删除、修改操作：</span></span><br><span class="line"><span class="comment"> Object put(Object key,Object value)：将指定key-value添加到(或修改)当前map对象中</span></span><br><span class="line"><span class="comment"> void putAll(Map m):将m中的所有key-value对存放到当前map中</span></span><br><span class="line"><span class="comment"> Object remove(Object key)：移除指定key的key-value对，并返回value</span></span><br><span class="line"><span class="comment"> void clear()：清空当前map中的所有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//添加</span></span><br><span class="line">        map.put(<span class="string">"AA"</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="number">45</span>,<span class="number">123</span>);</span><br><span class="line">        map.put(<span class="string">"BB"</span>,<span class="number">56</span>);</span><br><span class="line">        <span class="comment">//修改</span></span><br><span class="line">        map.put(<span class="string">"AA"</span>,<span class="number">87</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;AA=87, BB=56, 45=123&#125;</span></span><br><span class="line"></span><br><span class="line">        Map map1 = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map1.put(<span class="string">"CC"</span>,<span class="number">123</span>);</span><br><span class="line">        map1.put(<span class="string">"DD"</span>,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        map.putAll(map1);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;AA=87, BB=56, CC=123, DD=123, 45=123&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//remove(Object key)</span></span><br><span class="line">        Object value = map.remove(<span class="string">"CC"</span>);</span><br><span class="line">        System.out.println(value);<span class="comment">//123</span></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;AA=87, BB=56, DD=123, 45=123&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//clear()</span></span><br><span class="line">        map.clear();<span class="comment">//与map = null操作不同</span></span><br><span class="line">        System.out.println(map.size());<span class="comment">//0</span></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap();</span><br><span class="line">        map.put(<span class="number">123</span>,<span class="string">"AA"</span>);</span><br><span class="line">        map.put(<span class="number">345</span>,<span class="string">"BB"</span>);</span><br><span class="line">        map.put(<span class="number">12</span>,<span class="string">"CC"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;123=AA, 345=BB, 12=CC&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Map map = <span class="keyword">new</span> HashMap();</span><br><span class="line">        <span class="comment">//Hashtable不可以存储null的key和value，是线程安全的，有synchronized方法</span></span><br><span class="line"><span class="comment">//        map = new Hashtable();</span></span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="number">123</span>);<span class="comment">//HashMap可以存储null的key和value，是线程不安全的</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-Map-实现类之一：HashMap"><a href="#7-3-Map-实现类之一：HashMap" class="headerlink" title="7.3 Map 实现类之一：HashMap"></a>7.3 Map 实现类之一：HashMap</h3><h4 id="7-3-1-HashMap概述"><a href="#7-3-1-HashMap概述" class="headerlink" title="7.3.1 HashMap概述"></a>7.3.1 HashMap概述</h4><ul><li>HashMap是 Map 接口 使用频率最高的实现类。</li><li><code>允许使用null键和null值，与HashSet一样，不保证映射的顺序。</code></li><li>所有的key构成的集合是Set:无序的、不可重复的。所以，key所在的类要重写：equals()和hashCode()</li><li>所有的value构成的集合是Collection:无序的、可以重复的。所以，value所在的类要重写：equals()</li><li>一个key-value构成一个Entry对象</li><li>所有的entry构成的集合是Set:无序的、不可重复的</li><li>HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</li><li>HashMap 判断两个 value 相等的标准是：两个 value 通过 equals() 方法返回 true。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909162737.png" alt="image-20200909162737364"></p><h4 id="7-3-2-HashMap-源码中的重要常量"><a href="#7-3-2-HashMap-源码中的重要常量" class="headerlink" title="7.3.2 HashMap 源码中的重要常量"></a>7.3.2 HashMap 源码中的重要常量</h4><ul><li>DEFAULT_INITIAL_CAPACITY : HashMap的默认容量，16</li><li>MAXIMUM_CAPACITY ： ： HashMap的最大支持容量，2^30</li><li>DEFAULT_LOAD_FACTOR ：HashMap的默认加载因子</li><li>TREEIFY_THRESHOLD ：Bucket中链表长度大于该默认值，转化为红黑树</li><li>UNTREEIFY_THRESHOLD ：Bucket中红黑树存储的Node小于该默认值，转化为链表</li><li>MIN_TREEIFY_CAPACITY ：桶中的Node被树化时最小的hash表容量。（当桶中Node的数量大到需要变红黑树时，若hash表容量小于MIN_TREEIFY_CAPACITY时，此时应执行resize扩容操作这个MIN_TREEIFY_CAPACITY的值至少是TREEIFY_THRESHOLD的4倍。）</li><li>table ：存储元素的数组，总是2的n次幂</li><li>entrySet： ：存储具体元素的集</li><li>size ：HashMap中存储的键值对的数量</li><li>modCount ：HashMap扩容和结构改变的次数。</li><li>threshold ：扩容的临界值，=容量*填充因子</li><li>loadFactor： ：填充因子</li></ul><h4 id="7-3-3-HashMap-的存储结构"><a href="#7-3-3-HashMap-的存储结构" class="headerlink" title="7.3.3 HashMap 的存储结构"></a>7.3.3 HashMap 的存储结构</h4><p><font size=4 color=red>以jdk7为例说明:</font></p><ul><li><p>HashMap的内部存储结构其实是 <code>数组和链表</code>的结合。</p></li><li><p>当实例化一个HashMap时，系统会创建一个长度为Capacity的Entry数组，这个长度在哈希表中被称为容量(Capacity)，在这个<code>数组中可以存放元素的位置我们称之为“桶”(bucket)</code>，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。</p></li><li><p>每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。而且新添加的元素作为链表的head。</p></li><li><p><code>添加元素的过程</code>：向HashMap中添加entry1(key，value)，需要首先计算entry1中key的哈希值(根据key所在类的hashCode()计算得到)，此哈希值经过处理以后，得到在底层Entry[]数组中要存储的位置i。</p><ol><li><p>如果位置i上没有元素，则entry1直接添加成功。</p></li><li><p>如果位置i上已经存在entry2(或还有链表存在的entry3，entry4)，则需要通过循环的方法，依次比较entry1中key和其他的entry。</p><ul><li><p>如果彼此hash值不同，则直接添加成功。</p></li><li><p>如果hash值相同，继续比较二者是否equals。</p><p>（1）如果返回值为true，则使用entry1的value去替换equals为true的entry的value。</p><p>（2）如果遍历一遍以后，发现所有的equals返回都为false,则entry1仍可添加成功。entry1指向原有的entry元素。</p></li></ul></li></ol></li><li><p><code>HashMap 的扩容:</code><br>当HashMap中的元素越来越多的时候，hash冲突的几率也就越来越高，因为数组的长度是固定的。所以为了提高查询的效率，就要对HashMap的数组进行扩容，而在HashMap数组扩容之后，最消耗性能的点就出现了：<code>原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize</code>。</p></li><li><p><code>那么HashMap 什么时候进行扩容呢 ？</code></p><ul><li>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)loadFactor 时 ， 就 会 进 行 数 组 扩 容 ， loadFactor 的 默 认 值(DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。</li><li>默认情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么当HashMap中元素个数超过16*0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909172608.png" alt="image-20200909172608709"></p><p><font size=4 color=red>以jdk8为例说明:</font></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*      jdk8 相较于jdk7在底层实现方面的不同：</span><br><span class="line">*      <span class="number">1</span>. <span class="keyword">new</span> HashMap():底层没有创建一个长度为<span class="number">16</span>的Entry[]数组</span><br><span class="line">*      <span class="number">2</span>. jdk <span class="number">8</span>底层的数组是：Node[],而非Entry[]</span><br><span class="line">*      <span class="number">3</span>. 首次调用put()方法时，底层创建长度为<span class="number">16</span>的数组</span><br><span class="line">*      <span class="number">4</span>. jdk7底层结构只有：数组+链表。jdk8中底层结构：数组+链表+红黑树。</span><br><span class="line">*         <span class="number">4.1</span> 形成链表时，七上八下（jdk7:新的元素指向旧的元素。jdk8：旧的元素指向新的元素）</span><br><span class="line">*         <span class="number">4.2</span> 当数组的某一个索引位置上的元素以链表形式存在的数据个数 &gt; <span class="number">8</span> 且当前数组的长度 &gt; <span class="number">64</span>时，此时此索引位置上的所数据改为使用红黑树存储。</span><br></pre></td></tr></table></figure><ul><li><p>HashMap的内部存储结构其实是 <code>数组+ 链表+ 树</code> 的结合。</p></li><li><p>当实例化一个HashMap时，会初始化initialCapacity和loadFactor，在首次put第一对映射关系时，系统会创建一个长度为initialCapacity的Node数组，这个长度在哈希表中被称为容量(Capacity)，在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。</p></li><li><p>每个bucket中存储一个元素，即一个Node对象，但每一个Node对象可以带一个引用变量next，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Node链。也可能是一个一个TreeNode对象，每一个TreeNode对象(<code>红黑树</code>)可以有两个叶子结点left和right，因此，在一个桶中，就有可能生成一个TreeNode树。而新添加的元素作为链表的last，或树的叶子结点。</p></li><li><p><code>那么HashMap 什么时候进行扩容和树形化呢 ？</code></p><ul><li>当HashMap中的元素个数超过数组大小(数组总大小length,不是数组中个数size)*loadFactor 时 ， 就 会 进 行 数 组 扩 容 ， loadFactor 的 默 认 值(DEFAULT_LOAD_FACTOR)为0.75，这是一个折中的取值。</li><li>默认情况下，数组大小(DEFAULT_INITIAL_CAPACITY)为16，那么当HashMap中元素个数超过16*0.75=12（这个值就是代码中的threshold值，也叫做临界值）的时候，就把数组的大小扩展为 2*16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预设元素的个数能够有效的提高HashMap的性能。</li><li>当HashMap中的其中一个链的对象个数如果达到了8个，此时如果capacity没有达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链会变成树，结点类型由Node变成TreeNode类型。当然，如果当映射关系被移除后，下次resize方法时判断树的结点个数低于6个，也会把树再转为链表。</li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909174017.png" alt="image-20200909174017532"></p><h4 id="7-3-4-关于映射关系的key-是否可以修改-？"><a href="#7-3-4-关于映射关系的key-是否可以修改-？" class="headerlink" title="7.3.4 关于映射关系的key 是否可以修改 ？"></a>7.3.4 关于映射关系的key 是否可以修改 ？</h4><p><strong>answer ：不要修改</strong></p><ul><li>映射关系存储到HashMap中会存储key的hash值，这样就不用在每次查找时重新计算每一个Entry或Node（TreeNode）的hash值了，因此如果已经put到Map中的映射关系，再修改key的属性，而这个属性又参与hashcode值的计算，那么会导致匹配不上。</li></ul><h4 id="7-3-5-JDK8-相较于之前的变化"><a href="#7-3-5-JDK8-相较于之前的变化" class="headerlink" title="7.3.5 JDK8 相较于之前的变化"></a>7.3.5 JDK8 相较于之前的变化</h4><ol><li>HashMap map = new HashMap();//默认情况下，先不创建长度为16的数组</li><li>.当首次调用map.put()时，再创建长度为16的数组</li><li>数组为Node类型，在jdk7中称为Entry类型</li><li>形成链表结构时，新添加的key-value对在链表的尾部（七上八下）</li><li>当数组指定索引位置的链表长度&gt;8时，<code>且</code>map中的数组的长度&gt; 64时，此索引位置上的所有key-value对使用红黑树进行存储。</li></ol><h4 id="7-3-6-面试题"><a href="#7-3-6-面试题" class="headerlink" title="7.3.6 面试题"></a>7.3.6 面试题</h4><p><strong>面试题：负载因子值的大小，对HashMap 有什么影响?</strong></p><ul><li>负载因子的大小决定了HashMap的数据密度。</li><li>负载因子越大密度越大，发生碰撞的几率越高，数组中的链表越容易长,造成查询或插入时的比较次数增多，性能会下降。</li><li>负载因子越小，就越容易触发扩容，数据密度也越小，意味着发生碰撞的几率越小，数组中的链表也就越短，查询和插入时比较的次数也越小，性能会更高。但是会浪费一定的内容空间。而且经常扩容也会影响性能，建议初始化预设大一点的空间。</li><li>按照其他语言的参考及研究经验，会考虑将负载因子设置为0.7~0.75，此时平均检索长度接近于常数。</li></ul><h3 id="7-4-Map-实现类之二：LinkedHashMap"><a href="#7-4-Map-实现类之二：LinkedHashMap" class="headerlink" title="7.4 Map 实现类之二：LinkedHashMap"></a>7.4 Map 实现类之二：LinkedHashMap</h3><ul><li>LinkedHashMap 是 HashMap 的子类</li><li>在HashMap存储结构的基础上，使用了一对<code>双向链表来记录添加元素的顺序</code></li><li>与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代顺序：迭代<code>顺序与 Key-Value 对的插入顺序一致</code></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909180627.png" alt="image-20200909180627488"></p><h3 id="7-5-Map-实现类之三：TreeMap"><a href="#7-5-Map-实现类之三：TreeMap" class="headerlink" title="7.5 Map 实现类之三：TreeMap"></a>7.5 Map 实现类之三：TreeMap</h3><ul><li>TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。<br>TreeMap 可以保证所有的 Key-Value 对处于 <code>有序</code>状态。</li><li>TreeSet底层使用 <code>红黑树</code>结构存储数据</li><li>TreeMap 的 Key 的排序：<ol><li><code>自然排序</code>：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</li><li><code>定制排序</code>：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现Comparable 接口</li></ol></li><li>TreeMap判断 <code>两个key 相等的标准</code>：两个key通过compareTo()方法或者compare()方法返回0。</li></ul><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeMapTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向TreeMap中添加key-value，要求key必须是由同一个类创建的对象</span></span><br><span class="line">    <span class="comment">//按照key进行排序：自然排序 、定制排序</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//自然排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap();</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">23</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">"Jerry"</span>,<span class="number">32</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">20</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">98</span>);</span><br><span class="line">        map.put(u2,<span class="number">89</span>);</span><br><span class="line">        map.put(u3,<span class="number">76</span>);</span><br><span class="line">        map.put(u4,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"----&gt;"</span> + entry.getValue());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定制排序</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TreeMap map = <span class="keyword">new</span> TreeMap(<span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(o1 <span class="keyword">instanceof</span> User &amp;&amp; o2 <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                    User u1 = (User)o1;</span><br><span class="line">                    User u2 = (User)o2;</span><br><span class="line">                    <span class="comment">//按年龄排序</span></span><br><span class="line">                    <span class="keyword">return</span> Integer.compare(u1.getAge(),u2.getAge());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配！"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        User u1 = <span class="keyword">new</span> User(<span class="string">"Tom"</span>,<span class="number">23</span>);</span><br><span class="line">        User u2 = <span class="keyword">new</span> User(<span class="string">"Jerry"</span>,<span class="number">32</span>);</span><br><span class="line">        User u3 = <span class="keyword">new</span> User(<span class="string">"Jack"</span>,<span class="number">20</span>);</span><br><span class="line">        User u4 = <span class="keyword">new</span> User(<span class="string">"Rose"</span>,<span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        map.put(u1,<span class="number">98</span>);</span><br><span class="line">        map.put(u2,<span class="number">89</span>);</span><br><span class="line">        map.put(u3,<span class="number">76</span>);</span><br><span class="line">        map.put(u4,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        Set entrySet = map.entrySet();</span><br><span class="line">        Iterator iterator1 = entrySet.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext())&#123;</span><br><span class="line">            Object obj = iterator1.next();</span><br><span class="line">            Map.Entry entry = (Map.Entry) obj;</span><br><span class="line">            System.out.println(entry.getKey() + <span class="string">"----&gt;"</span> + entry.getValue());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Comparable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"User equals()...."</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        User user = (User) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != user.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(user.name) : user.name == <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123; <span class="comment">//return name.hashCode() + age;</span></span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照姓名从大到小排列,年龄从小到大排列</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(o <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">            User user = (User)o;</span><br><span class="line">            <span class="keyword">int</span> compare = -<span class="keyword">this</span>.name.compareTo(user.name);</span><br><span class="line">            <span class="keyword">if</span>(compare != <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> compare;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Integer.compare(<span class="keyword">this</span>.age,user.age);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的类型不匹配"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test1：</span><br><span class="line">User&#123;name='Tom', age=<span class="number">23</span>&#125;----&gt;<span class="number">98</span></span><br><span class="line">User&#123;name='Jerry', age=<span class="number">32</span>&#125;----&gt;<span class="number">89</span></span><br><span class="line">User&#123;name='Jack', age=<span class="number">18</span>&#125;----&gt;<span class="number">100</span></span><br><span class="line">User&#123;name='Jack', age=<span class="number">20</span>&#125;----&gt;<span class="number">76</span></span><br><span class="line"></span><br><span class="line">test2：</span><br><span class="line">User&#123;name='Rose', age=<span class="number">18</span>&#125;----&gt;<span class="number">100</span></span><br><span class="line">User&#123;name='Jack', age=<span class="number">20</span>&#125;----&gt;<span class="number">76</span></span><br><span class="line">User&#123;name='Tom', age=<span class="number">23</span>&#125;----&gt;<span class="number">98</span></span><br><span class="line">User&#123;name='Jerry', age=<span class="number">32</span>&#125;----&gt;<span class="number">89</span></span><br></pre></td></tr></table></figure><h3 id="7-6-Map-实现类之四：Hashtable"><a href="#7-6-Map-实现类之四：Hashtable" class="headerlink" title="7.6 Map 实现类之四：Hashtable"></a>7.6 Map 实现类之四：Hashtable</h3><ul><li>Hashtable是个古老的 Map 实现类，JDK1.0就提供了。不同于HashMap，Hashtable是线程安全的(synchronized)。</li><li>Hashtable实现原理和HashMap相同，功能相同。底层都使用<code>哈希表</code>结构，查询速度快，很多情况下可以互用。</li><li>与HashMap不同，Hashtable <code>不允许使用 null 作为 key 和 value</code></li><li>与HashMap一样，Hashtable 也<code>不能保证其中 Key-Value 对的顺序</code></li><li>Hashtable判断两个key相等、两个value相等的标准，与HashMap一致。</li></ul><h3 id="7-7-Map-实现类之五：Properties"><a href="#7-7-Map-实现类之五：Properties" class="headerlink" title="7.7 Map 实现类之五：Properties"></a>7.7 Map 实现类之五：Properties</h3><ul><li>Properties 类是 Hashtable 的子类，该对象用于<code>处理属性文件</code></li><li>由于属性文件里的 key、value 都是字符串类型，所以 <code>Properties 里的 key和 value 都是字符串类型</code></li><li>存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertiesTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Properties:常用来处理配置文件。key和value都是String类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Properties pros = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="string">"jdbc.properties"</span>);</span><br><span class="line">            pros.load(fis);<span class="comment">//加载流对应的文件</span></span><br><span class="line"></span><br><span class="line">            String name = pros.getProperty(<span class="string">"name"</span>);</span><br><span class="line">            String password = pros.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"name = "</span> + name + <span class="string">", password = "</span> + password);</span><br><span class="line">            <span class="comment">//运行结果：name = BitHachi, password = 123456</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fis != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909202341.png" alt="image-20200909202340159"></p><h2 id="8-Collections工具类"><a href="#8-Collections工具类" class="headerlink" title="8. Collections工具类"></a>8. Collections工具类</h2><ul><li><p>Collections 是一个<code>操作 Set、List 和 Map 等集合的工具类</code></p></li><li><p>Collections 中提供了一系列静态的方法<code>对集合元素进行排序、查询和修改</code>等操作，还提供了<code>对集合对象设置不可变、对集合对象实现同步控制等方法</code></p></li><li><p>排序操作：<code>（均为static 方法）</code></p><ol><li>reverse(List)：反转 List 中元素的顺序</li><li>shuffle(List)：对 List 集合元素进行随机排序</li><li>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</li><li>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</li><li>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</li></ol></li><li><p>查找、替换</p><ol><li>Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</li><li>Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</li><li>Object min(Collection)</li><li>Object min(Collection，Comparator)</li><li>int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</li><li>void copy(List dest,List src)：将src中的内容复制到dest中</li><li>boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换List 对象的所有旧值</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Collections:操作Collection、Map的工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionsTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">reverse(List)：反转 List 中元素的顺序</span></span><br><span class="line"><span class="comment">shuffle(List)：对 List 集合元素进行随机排序</span></span><br><span class="line"><span class="comment">sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line"><span class="comment">sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</span></span><br><span class="line"><span class="comment">swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Object max(Collection)：根据元素的自然顺序，返回给定集合中的最大元素</span></span><br><span class="line"><span class="comment">Object max(Collection，Comparator)：根据 Comparator 指定的顺序，返回给定集合中的最大元素</span></span><br><span class="line"><span class="comment">Object min(Collection)</span></span><br><span class="line"><span class="comment">Object min(Collection，Comparator)</span></span><br><span class="line"><span class="comment">int frequency(Collection，Object)：返回指定集合中指定元素的出现次数</span></span><br><span class="line"><span class="comment">void copy(List dest,List src)：将src中的内容复制到dest中</span></span><br><span class="line"><span class="comment">boolean replaceAll(List list，Object oldVal，Object newVal)：使用新值替换 List 对象的所有旧值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(-<span class="number">97</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//报异常：IndexOutOfBoundsException("Source does not fit in dest")</span></span><br><span class="line"><span class="comment">//        List dest = new ArrayList();</span></span><br><span class="line"><span class="comment">//        Collections.copy(dest,list);</span></span><br><span class="line">        <span class="comment">//正确的：</span></span><br><span class="line">        List dest = Arrays.asList(<span class="keyword">new</span> Object[list.size()]);</span><br><span class="line">        System.out.println(dest.size());<span class="comment">//list.size();</span></span><br><span class="line"></span><br><span class="line">        Collections.copy(dest,list);</span><br><span class="line">        System.out.println(dest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Collections 类中提供了多个 synchronizedXxx() 方法，</span></span><br><span class="line"><span class="comment">        该方法可使将指定集合包装成线程同步的集合，从而可以解决</span></span><br><span class="line"><span class="comment">        多线程并发访问集合时的线程安全问题</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//返回的list1即为线程安全的List</span></span><br><span class="line">        List list1 = Collections.synchronizedList(list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">123</span>);</span><br><span class="line">        list.add(<span class="number">43</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(<span class="number">765</span>);</span><br><span class="line">        list.add(-<span class="number">97</span>);</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        Collections.reverse(list);</span><br><span class="line">        System.out.println(list);<span class="comment">//反转 List 中元素的顺序</span></span><br><span class="line"></span><br><span class="line">        Collections.shuffle(list);<span class="comment">//对 List 集合元素进行随机排序</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        Collections.sort(list);<span class="comment">//根据元素的自然顺序对指定 List 集合元素按升序排序</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        Collections.swap(list,<span class="number">1</span>,<span class="number">2</span>);<span class="comment">//将指定 list 集合中的 1 处元素和 2 处元素进行交换</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> frequency = Collections.frequency(list, <span class="number">123</span>);<span class="comment">//返回指定集合中指定元素的出现次数</span></span><br><span class="line">        System.out.println(frequency);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">test2():</span><br><span class="line"><span class="number">5</span></span><br><span class="line">[<span class="number">123</span>, <span class="number">43</span>, <span class="number">765</span>, -<span class="number">97</span>, <span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test1():</span><br><span class="line">[<span class="number">123</span>, <span class="number">123</span>, <span class="number">43</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>, -<span class="number">97</span>, <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span>, -<span class="number">97</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">43</span>, <span class="number">123</span>, <span class="number">123</span>]</span><br><span class="line">[<span class="number">765</span>, <span class="number">123</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">43</span>, <span class="number">0</span>, -<span class="number">97</span>, <span class="number">123</span>]</span><br><span class="line">[-<span class="number">97</span>, <span class="number">0</span>, <span class="number">43</span>, <span class="number">123</span>, <span class="number">123</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>]</span><br><span class="line">[-<span class="number">97</span>, <span class="number">43</span>, <span class="number">0</span>, <span class="number">123</span>, <span class="number">123</span>, <span class="number">765</span>, <span class="number">765</span>, <span class="number">765</span>]</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>Collections 类中提供了多个 <code>synchronizedXxx()</code>方法，该方法可使将指定集合包装成线程同步的集合，从而可以解决多线程并发访问集合时的线程安全问题</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909210720.png" alt="image-20200909210720219"></p><h2 id="9-Enumeration"><a href="#9-Enumeration" class="headerlink" title="9. Enumeration"></a>9. Enumeration</h2><ul><li>Enumeration 接口是 Iterator 迭代器的 “古老版本”</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200909210827.png" alt="image-20200909210827227"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Enumeration stringEnum = <span class="keyword">new</span> StringTokenizer(<span class="string">"a-b*c-d-e-g"</span>, <span class="string">"-"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(stringEnum.hasMoreElements())&#123;</span><br><span class="line">    Object obj = stringEnum.nextElement();</span><br><span class="line">    System.out.println(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> List </tag>
            
            <tag> Set </tag>
            
            <tag> Map </tag>
            
            <tag> HashMap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门网络编程</title>
      <link href="/posts/8bb450e2.html"/>
      <url>/posts/8bb450e2.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么要学习网络编程？"><a href="#1-为什么要学习网络编程？" class="headerlink" title="1. 为什么要学习网络编程？"></a>1. 为什么要学习网络编程？</h1><p>我们初学一门语言时，大多数的时候都是与控制台或者本地主机打交道。如果我们想与其它计算机交流沟通，交换数据，那么我们就需要学习一些网络知识，学习一些网络编程的技术去达到这个目的。</p><p>简单一句话：网络编程可以让你与其它计算机进行交流沟通。</p><h1 id="2-复习一些重要的网络知识"><a href="#2-复习一些重要的网络知识" class="headerlink" title="2. 复习一些重要的网络知识"></a>2. 复习一些重要的网络知识</h1><p>我在之前总结过计算机网络的重要基础知识，忘记的同志可以去看看：<a href="https://blog.csdn.net/weixin_43914604/article/details/104722679" target="_blank" rel="noopener">计算机网络知识总结目录</a>，这里只简述一些在这里用到的知识点。</p><h2 id="2-1-网络通信协议"><a href="#2-1-网络通信协议" class="headerlink" title="2.1 网络通信协议"></a>2.1 网络通信协议</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826221619.png" alt="image-20200826221618034"></p><h3 id="2-1-1-TCP-IP"><a href="#2-1-1-TCP-IP" class="headerlink" title="2.1.1 TCP/IP"></a>2.1.1 TCP/IP</h3><ul><li>传输层协议中有两个非常重要的协议：<br>传输控制协议TCP(Transmission Control Protocol)<br>用户数据报协议UDP(User Datagram Protocol)。</li><li>TCP/IP 以其两个主要协议：传输控制协议(TCP) 和网络互联协议(IP)而得名，实际上是一组协议，包括多个具有不同功能且互为关联的协议。</li><li>IP(Internet Protocol)协议是网络层的主要协议，支持网间互连的数据通信。</li></ul><h3 id="2-1-2-TCP-和-UDP"><a href="#2-1-2-TCP-和-UDP" class="headerlink" title="2.1.2 TCP 和 UDP"></a>2.1.2 TCP 和 UDP</h3><ul><li><p>TCP 协议：</p><ul><li><p>使用TCP协议前，须先建立TCP连 接，形成传输数据通道</p></li><li><p>传输前，采用“ 三次握手”方式，点对点通信，是可靠的</p></li><li><p>TCP协议进行通信的两个应用进程：客户端、服务端。</p></li><li><p>在连接中可进行大数据量的传输</p></li><li><p>传输完毕，需释放已建立的连接，效率低</p></li></ul></li><li><p>UDP 协议：</p><ul><li>将数据、源、目的封装成数据包，不需要建立连接</li><li>每个数据报的大小限制在64K内</li><li>发送不管对方是否准备好，接收方收到也不确认，故是不可靠的</li><li>可以广播发送</li><li>发送数据结束时无需释放资源，开销小，速度快</li></ul></li></ul><h2 id="2-2-IP"><a href="#2-2-IP" class="headerlink" title="2.2 IP"></a>2.2 IP</h2><ul><li>IP 地址：InetAddress</li><li><code>唯一的标识 Internet 上的一台计算机</code></li><li>本地回环地址(hostAddress)：127.0.0.1 ，主机名(hostName)：localhost</li><li>IP地址分类方式1：<code>IPV4 和 IPV6</code><ul><li>IPV4：4个字节组成，4个0-255。大概42亿，30亿都在北美，亚洲4亿。2011年初已经用尽。以点分十进制表示，如192.168.0.1</li><li>IPV6：128位（16个字节），写成8个无符号整数，每个整数用四个十六进制位表示，数之间用冒号（：）分开，如：3ffe:3201:1401:1280:c8ff:fe4d:db39:1984</li></ul></li><li>IP地址分类方式2： <code>公网地址( 万维网使用)和 私有地址( 局域网使用)</code>。192.168.开头的就是私有址址，范围即为192.168.0.0–192.168.255.255，专门为组织机构内部使用</li><li>特点：不易记忆</li></ul><h2 id="2-3-端口"><a href="#2-3-端口" class="headerlink" title="2.3 端口"></a>2.3 端口</h2><ul><li><p><code>端口号标识正在计算机上运行的进程（程序）</code></p></li><li><p>不同的进程有不同的端口号</p></li><li><p>被规定为一个 16 位的整数 0~65535。</p></li><li><p>端口分类：</p><ul><li><p><code>公认端口</code>：0~1023。被预先定义的服务通信占用（如：HTTP占用端口80，FTP占用端口21，Telnet占用端口23）</p></li><li><p><code>注册端口</code>：1024~49151。分配给用户进程或应用程序。（如：Tomcat占用端口8080，MySQL占用端口3306，Oracle占用端口1521等）。</p></li><li><p><code>动态/ 私有端口</code>：49152~65535。</p></li></ul></li><li><p>端口号与IP 地址的组合得出一个网络套接字：<code>Socket</code>,标识某台计算机上的某一进程。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826222340.png" alt="image-20200826222340691"></p><h2 id="2-4-Socket"><a href="#2-4-Socket" class="headerlink" title="2.4 Socket"></a>2.4 Socket</h2><ul><li>网络上具有唯一标识的<code>IP地址和端口号组合</code>在一起才能构成唯一能识别的标识符套接字。</li><li>通信的两端都要有Socket，是两台机器间通信的端点。</li><li>网络通信其实就是Socket间的通信。</li><li>Socket允许程序把网络连接当成一个流，数据在两个Socket间通过IO传输。</li><li>一般主动发起通信的应用程序属<code>客户端</code>，等待通信请求的为<code>服务端</code>。</li><li>Socket分类：<br><code>流套接字</code>（stream socket）：使用<code>TCP</code>提供可依赖的字节流服务<br><code>数据报套接字</code>（datagram socket）：使用<code>UDP</code>提供“尽力而为”的数据报服务</li></ul><p><strong>Java中提供了Socket类：</strong></p><ul><li><p>Socket 类的常用构造 器 ：</p><ol><li>public Socket(InetAddress address,int port)创建一个流套接字并将其连接到指定IP 地址的指定端口号。</li><li>public Socket(String host,int port)创建一个流套接字并将其连接到指定主机上的指定端口号。</li></ol></li><li><p>Socket 类的常用方法：</p><ol><li><p>public InputStream getInputStream()返回此套接字的输入流。可以用于接收网络消息</p></li><li><p>public OutputStream getOutputStream()返回此套接字的输出流。可以用于发送网络消息</p></li><li><p>public InetAddress getInetAddress()此套接字连接到的远程 IP 地址；如果套接字是未连接的，则返回 null。</p></li><li><p>public InetAddress getLocalAddress()获取套接字绑定的本地地址。 即本端的IP地址</p></li><li><p>public int getPort()此套接字连接到的远程端口号；如果尚未连接套接字，则返回0。</p></li><li><p>public int getLocalPort()返回此套接字绑定到的本地端口。 如果尚未绑定套接字，则返回 -1。即本端的端口号。</p></li><li><p>public void close()关闭此套接字。套接字被关闭后，便不可在以后的网络连接中使用（即无法重新连接或重新绑定）。需要创建新的套接字对象。 关闭此套接字也将会关闭该套接字的 InputStream 和OutputStream。</p></li><li><p>public void shutdownInput()如果在套接字上调用 shutdownInput() 后从套接字输入流读取内容，则流将返回 EOF（文件结束符）。即不能在从此套接字的输入流中接收任何数据。</p></li><li><p>public void shutdownOutput()禁用此套接字的输出流。对于 TCP 套接字，任何以前写入的数据都将被发送，并且后跟 TCP 的正常连接终止序列。 如果在套接字上调用 shutdownOutput() 后写入套接字输出流，则该流将抛出 IOException。 即不能通过此套接字的输出流发送任何数据。</p></li></ol></li></ul><h1 id="3-InetAddress类"><a href="#3-InetAddress类" class="headerlink" title="3. InetAddress类"></a>3. InetAddress类</h1><p><strong>InetAddress类是Java中用于标识IP地址的类</strong></p><ul><li><p>Internet上的主机有两种方式表示地址：</p><ol><li><p>域名(hostName)：<a href="www.bithachi.cn">www.bithachi.cn</a> </p></li><li><p>IP 地址(hostAddress)：150.108.35.210</p></li></ol></li><li><p>InetAddress类主要表示IP地址，两个子类：Inet4Address、Inet6Address。</p></li><li><p>InetAddress 类对象含有一个 Internet 主机地址的域名和IP地址：<a href="www.bithachi.cn">www.bithachi.cn</a> 和 150.108.35.210。</p></li><li><p>域名容易记忆，当在连接网络时输入一个主机的域名后，域名服务器(DNS) 负责将域名转化成IP地址，这样才能和主机建立连接。 ——-<code>域名解析</code></p></li><li><p>先找本机hosts文件，是否有输入的域名地址，没有的话，再通过DNS服务器，找主机。</p></li></ul><p><strong>InetAddress类的构造器和方法：</strong></p><ul><li>InetAddress 类没有提供公共的构造器，而是提供 了 如下几个 静态方法来获取InetAddress 实例<br>public static InetAddress getLocalHost()<br>public static InetAddress getByName(String host)</li><li>InetAddress 提供了如下几个常用 的 方法<br>public String getHostAddress() ：返回 IP 地址字符串（以文本表现形式）。<br>public String getHostName() ：获取此 IP 地址的主机名<br>public boolean isReachable(int timeout)： ：测试是否可以达到该地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InetAddressTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            InetAddress inet1 = InetAddress.getByName(<span class="string">"192.168.10.14"</span>);</span><br><span class="line">            System.out.println(inet1);</span><br><span class="line"></span><br><span class="line">            InetAddress inet2 = InetAddress.getByName(<span class="string">"www.bithachi.cn"</span>);</span><br><span class="line">            System.out.println(inet2);</span><br><span class="line"></span><br><span class="line">            InetAddress inet3 = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">            System.out.println(inet3);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取本地ip</span></span><br><span class="line">            InetAddress inet4 = InetAddress.getLocalHost();</span><br><span class="line">            System.out.println(inet4);</span><br><span class="line"></span><br><span class="line">            inet2 = InetAddress.getByName(<span class="string">"www.bithachi.cn"</span>);</span><br><span class="line">            <span class="comment">//getHostName()</span></span><br><span class="line">            System.out.println(inet2.getHostName());</span><br><span class="line">            <span class="comment">//getHostAddress()</span></span><br><span class="line">            System.out.println(inet2.getHostAddress());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/<span class="number">192</span>.<span class="number">168</span>.<span class="number">10</span>.<span class="number">14</span></span><br><span class="line">www.bithachi.cn/<span class="number">150</span>.<span class="number">109</span>.<span class="number">4</span>.<span class="number">162</span></span><br><span class="line">/<span class="number">127</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span></span><br><span class="line">BitHachi/<span class="number">192</span>.<span class="number">168</span>.<span class="number">1</span>.<span class="number">3</span></span><br><span class="line">www.bithachi.cn</span><br><span class="line"><span class="number">150</span>.<span class="number">109</span>.<span class="number">4</span>.<span class="number">162</span></span><br></pre></td></tr></table></figure><h1 id="4-基于Socket-的TCP网络编程"><a href="#4-基于Socket-的TCP网络编程" class="headerlink" title="4.  基于Socket 的TCP网络编程"></a>4.  基于Socket 的TCP网络编程</h1><p> Java语言的基于套接字编程分为服务端编程和客户端编程，其通信模型如图所示：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826234826.png" alt="image-20200826234826836"></p><h2 id="4-1-客户端—Client"><a href="#4-1-客户端—Client" class="headerlink" title="4.1 客户端—Client"></a>4.1 客户端—Client</h2><ul><li>客户端Socket 的工作过程包含以下四个基本的步骤 ：<ol><li>创建 Socket ：根据指定服务端的 IP 地址或端口号构造 Socket 类对象。若服务器端响应，则建立客户端到服务器的通信线路。若连接失败，会出现异常。</li><li>打开连接到 Socket 的输入/ 出流： 使用 getInputStream()方法获得输入流，使用getOutputStream()方法获得输出流，进行数据传输</li><li>按照一定的协议对 Socket 进行读/ 写操作：通过输入流读取服务器放入线路的信息（但不能读取自己放入线路的信息），通过输出流将信息写入线程。</li><li>关闭 Socket： ：断开客户端到服务器的连接，释放线路</li></ol></li><li>客户端程序可以使用Socket类创建对象， 创建的同时会自动向服务器方发起连接。</li></ul><p><strong>Socket的构造器是：</strong></p><ul><li>Socket(String host,int port)throws UnknownHostException,IOException：向服务器(域名是host。端口号为port)发起TCP连接，若成功，则创建Socket对象，否则抛出异常。</li><li>Socket(InetAddress address,int port)throws IOException：根据InetAddress对象所表示的IP地址以及端口号port发起连接。</li></ul><h2 id="4-2-服务端—Server"><a href="#4-2-服务端—Server" class="headerlink" title="4.2 服务端—Server"></a>4.2 服务端—Server</h2><ul><li>服务器 程序的工作过程包含以下四个基本的步骤：<ol><li>调用 ServerSocket(int port) ： ：创建一个服务器端套接字，并绑定到指定端口 上。用于监听客户端的请求。</li><li>调用 accept()： ：监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象。</li><li>调用该Socket 类对象的 getOutputStream() 和 和 getInputStream ()： ：获取输出流和输入流，开始网络数据的发送和接收。</li><li>关闭ServerSocket 和Socket 对象：客户端访问结束，关闭通信套接字。</li></ol></li><li>ServerSocket 对象负责等待客户端请求建立套接字连接，类似邮局某个窗口中的业务员。也就是说，<code>服务器必须事先建立一个等待客户请求建立套接字的 连接的ServerSocket 对象。</code></li><li>所谓“接收”客户的套接字请求，就是accept()方法会返回一个 Socket 对象</li></ul><h2 id="4-3-一个文件传输的例子"><a href="#4-3-一个文件传输的例子" class="headerlink" title="4.3 一个文件传输的例子"></a>4.3 一个文件传输的例子</h2><p><strong>这里举一个例子，在本地有一个服务端和一个客户端，客户端向服务端发送一个文件，服务端保存文件，并对客户端进行信息反馈。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.ServerSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现TCP的网络编程，需先启动服务端再启动客户端</span></span><br><span class="line"><span class="comment"> * 从客户端发送文件给服务端，服务端保存到本地。并返回“发送成功”给客户端。</span></span><br><span class="line"><span class="comment"> * 并关闭相应的连接。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TCPTest3</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">client</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        FileInputStream fis = <span class="keyword">null</span>;</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建Socket对象，指定IP和端口</span></span><br><span class="line">            socket = <span class="keyword">new</span> Socket(InetAddress.getByName(<span class="string">"127.0.0.1"</span>), <span class="number">9090</span>);</span><br><span class="line">            <span class="comment">//2.获取一个输出流，用于发送数据给服务端</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            <span class="comment">//3.选择一个文件发送给服务端，比如hello.txt</span></span><br><span class="line">            fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"hello.txt"</span>));<span class="comment">//这里填写你文件的路径</span></span><br><span class="line">            <span class="comment">//4.将hello.txt以字节方式发送给服务端</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = fis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                os.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//5.关闭数据的输出/发送,不关闭则服务端那边一直read堵塞</span></span><br><span class="line">            socket.shutdownOutput();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//6.接收来自于服务器端的数据，并显示到控制台上</span></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] bufferr = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">            <span class="keyword">int</span> len1;</span><br><span class="line">            <span class="keyword">while</span> ((len1 = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                baos.write(buffer, <span class="number">0</span>, len1);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//6.资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (baos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    baos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ServerSocket ss = <span class="keyword">null</span>;</span><br><span class="line">        Socket socket = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1.创建服务端套接字，并绑定到监听的端口上</span></span><br><span class="line">            ss = <span class="keyword">new</span> ServerSocket(<span class="number">9090</span>);</span><br><span class="line">            <span class="comment">//2.监听连接请求，如果客户端请求连接，则接受连接，返回通信套接字对象</span></span><br><span class="line">            socket = ss.accept();</span><br><span class="line">            <span class="comment">//3.获取输入流，接收客服端发来的数据</span></span><br><span class="line">            is = socket.getInputStream();</span><br><span class="line">            <span class="comment">//4.将客户端发来的文件内容输出到hello3.txt</span></span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"hello3.txt"</span>));<span class="comment">//这里填写你文件的路径</span></span><br><span class="line">            <span class="comment">//5.将客户端发来的文件进行存储，写入指定的hello3.txt文件中</span></span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">                fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"已接收到客户端发来的数据文件，文件传输完成"</span>);</span><br><span class="line">            <span class="comment">//6.服务器端给予客户端反馈</span></span><br><span class="line">            os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">"你好客户端，txt文件已收到！"</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//7.资源的关闭</span></span><br><span class="line">            <span class="keyword">if</span> (fos != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (is != <span class="keyword">null</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (socket != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    socket.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (ss != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ss.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p>服务端正确存储了客户端发来的文件，并有以下信息的交互：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//客户端：</span><br><span class="line">你好客户端，txt文件已收到！</span><br><span class="line"></span><br><span class="line">//服务端：</span><br><span class="line">已接收到客户端发来的数据文件，文件传输完成</span><br></pre></td></tr></table></figure><h1 id="5-UDP网络编程"><a href="#5-UDP网络编程" class="headerlink" title="5. UDP网络编程"></a>5. UDP网络编程</h1><h2 id="5-1-DatagramSocket-与-DatagramPacket"><a href="#5-1-DatagramSocket-与-DatagramPacket" class="headerlink" title="5.1 DatagramSocket 与 DatagramPacket"></a>5.1 DatagramSocket 与 DatagramPacket</h2><ul><li>类<code>DatagramSocket</code>和<code>DatagramPacket</code>实现了基于 UDP 协议网络程序。</li><li>UDP数据报通过<code>数据报套接字 DatagramSocket</code>发送和接收，系统不保证UDP数据报一定能够安全送到目的地，也不能确定什么时候可以抵达。</li><li><code>DatagramPacket 对象封装了UDP数据报，在数据报中包含了发送端的IP地址和端口号以及接收端的IP地址和端口号。</code></li><li>UDP协议中每个数据报都给出了完整的地址信息，因此无须建立发送方和接收方的连接。如同发快递包裹一样。</li></ul><h2 id="5-2-DatagramSocket-类的常用方法"><a href="#5-2-DatagramSocket-类的常用方法" class="headerlink" title="5.2 DatagramSocket 类的常用方法"></a>5.2 DatagramSocket 类的常用方法</h2><ol><li>public DatagramSocket(int port)创建数据报套接字并将其绑定到本地主机上的指定端口。套接字将被绑定到通配符地址，IP 地址由内核来选择。</li><li>public DatagramSocket(int port,InetAddress laddr)创建数据报套接字，将其绑定到指定的本地地址。本地端口必须在 0 到 65535 之间（包括两者）。如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。</li><li>public void close()关闭此数据报套接字。</li><li>public void send(DatagramPacket p)从此套接字发送数据报包。DatagramPacket 包含的信息指示：将要发送的数据、其长度、远程主机的IP 地址和远程主机的端口号。</li><li>public void receive(DatagramPacket p)从此套接字接收数据报包。当此方法返回时，DatagramPacket的缓冲区填充了接收的数据。数据报包也包含发送方的 IP 地址和发送方机器上的端口号。 此方法在接收到数据报前一直阻塞。数据报包对象的 length 字段包含所接收信息的长度。如果信息比包的长度长，该信息将被截短。</li><li>public InetAddress getLocalAddress()获取套接字绑定的本地地址。</li><li>public int getLocalPort()返回此套接字绑定的本地主机上的端口号。</li><li>public InetAddress getInetAddress()返回此套接字连接的地址。如果套接字未连接，则返回null。</li><li>public int getPort()返回此套接字的端口。如果套接字未连接，则返回-1。</li></ol><h2 id="5-3-DatagramPacket-类的常用方法"><a href="#5-3-DatagramPacket-类的常用方法" class="headerlink" title="5.3 DatagramPacket 类的常用方法"></a>5.3 DatagramPacket 类的常用方法</h2><ol><li>public DatagramPacket(byte[] buf,int length)构造 DatagramPacket，用来接收长度为 length 的数据包。 length 参数必须小于等于 buf.length。</li><li>public DatagramPacket(byte[] buf,int length,InetAddress address,int port)构造数据报包，用来将长度为 length 的包发送到指定主机上的指定端口号。length参数必须小于等于 buf.length。</li><li>public InetAddress getAddress()返回某台机器的 IP 地址，此数据报将要发往该机器或者是从该机器接收到的。</li><li>public int getPort()返回某台远程主机的端口号，此数据报将要发往该主机或者是从该主机接收到的。</li><li>public byte[] getData()返回数据缓冲区。接收到的或将要发送的数据从缓冲区中的偏移量 offset 处开始，持续 length 长度。</li><li>public int getLength()返回将要发送或接收到的数据的长度。</li></ol><h2 id="5-4-UDP网络通信流程"><a href="#5-4-UDP网络通信流程" class="headerlink" title="5.4 UDP网络通信流程"></a>5.4 UDP网络通信流程</h2><ul><li>流 程：<ol><li>创建DatagramSocket与DatagramPacket对象</li><li>建立发送端，接收端</li><li>建立数据包</li><li>调用Socket的发送、接收方法</li><li>关闭Socket</li></ol></li><li>发送端与接收端是两个独立的运行程序</li></ul><h2 id="5-5-一个例子"><a href="#5-5-一个例子" class="headerlink" title="5.5 一个例子"></a>5.5 一个例子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Random_name.sgm.day10.src.com.atguigu.java1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramPacket;</span><br><span class="line"><span class="keyword">import</span> java.net.DatagramSocket;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UDPd协议的网络编程</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UDPTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sender</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建数据报套接字 DatagramSocket</span></span><br><span class="line">            <span class="comment">//将其绑定到本地主机上的任何可用端口。</span></span><br><span class="line">            <span class="comment">// 套接字将被绑定到一个由内核选择的IP地址。</span></span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">            <span class="comment">//设置要发送的数据</span></span><br><span class="line">            String str = <span class="string">"我是UDP方式发送的数据"</span>;</span><br><span class="line">            <span class="keyword">byte</span>[] data = str.getBytes();</span><br><span class="line">            <span class="comment">//创建UDP数据报包DatagramPacket对象，在数据报包中包含了发送的数据、其长度，接收端的IP地址和端口号。</span></span><br><span class="line">            InetAddress inet = InetAddress.getLocalHost();</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(data, <span class="number">0</span>, data.length, inet, <span class="number">9090</span>);</span><br><span class="line">            socket.send(packet);<span class="comment">//用数据报套接字的方法发送数据报给接收端</span></span><br><span class="line"></span><br><span class="line">            System.out.println(socket.getInetAddress());<span class="comment">//返回此套接字连接的地址。如果套接字未连接，则返回null。</span></span><br><span class="line">            System.out.println(socket.getPort());<span class="comment">//返回此套接字的端口。如果套接字未连接，则返回-1。</span></span><br><span class="line">            <span class="comment">//获取套接字绑定的本地地址,如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。</span></span><br><span class="line">            System.out.println(socket.getLocalAddress());</span><br><span class="line">            System.out.println(socket.getLocalPort());<span class="comment">//返回此套接字绑定的本地主机上的端口号。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//接收端</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiver</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//创建数据报套接字并将其绑定到本地主机上的指定端口</span></span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(<span class="number">9090</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">100</span>];</span><br><span class="line">            <span class="comment">//用来接收长度为 buffer.length 的数据包</span></span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer, <span class="number">0</span>, buffer.length);</span><br><span class="line">            <span class="comment">//从此套接字接收数据报包</span></span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            <span class="comment">//打印接收到的数据报包中的信息</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(packet.getData(), <span class="number">0</span>, packet.getLength()));</span><br><span class="line"></span><br><span class="line">            System.out.println(socket.getInetAddress());<span class="comment">//返回此套接字连接的地址。如果套接字未连接，则返回null。</span></span><br><span class="line">            System.out.println(socket.getPort());<span class="comment">//返回此套接字的端口。如果套接字未连接，则返回-1。</span></span><br><span class="line">            <span class="comment">//获取套接字绑定的本地地址,如果 IP 地址为 0.0.0.0，套接字将被绑定到通配符地址，IP 地址由内核选择。</span></span><br><span class="line">            System.out.println(socket.getLocalAddress());<span class="comment">//获取套接字绑定的本地地址</span></span><br><span class="line">            System.out.println(socket.getLocalPort());<span class="comment">//返回此套接字绑定的本地主机上的端口号。</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            socket.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//发送端：</span><br><span class="line">null</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>/<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line"><span class="number">55684</span></span><br><span class="line"></span><br><span class="line">//接收端：</span><br><span class="line">我是UDP方式发送的数据</span><br><span class="line">null</span><br><span class="line">-<span class="number">1</span></span><br><span class="line"><span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>/<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span>.<span class="number">0</span></span><br><span class="line"><span class="number">9090</span></span><br></pre></td></tr></table></figure><h1 id="6-URL编程"><a href="#6-URL编程" class="headerlink" title="6. URL编程"></a>6. URL编程</h1><h2 id="6-1-URL类"><a href="#6-1-URL类" class="headerlink" title="6.1 URL类"></a>6.1 URL类</h2><ul><li><code>URL(Uniform Resource Locator)：统一资源定位符，它表示 Internet 上 某一资源的地址。</code></li><li>它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何定位这个资源。</li><li>通过 URL 我们可以访问 Internet 上的各种网络资源，比如最常见的 www，ftp站点。浏览器通过解析给定的 URL 可以在网络上查找相应的文件或其他资源。</li><li>URL的基本结构由5部分组成：<br><code>&lt; 传输协议&gt;://&lt; 主机名&gt;:&lt; 端口号&gt;/&lt; 文件名&gt;# 片段名? 参数列表</code><br>例如: <a href="http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123" target="_blank" rel="noopener">http://192.168.1.100:8080/helloworld/index.jsp#a?username=shkstart&amp;password=123</a><ul><li>#片段名：即锚点，例如看小说，直接定位到章节</li><li>参数列表格式：参数名=参数值&amp;参数名=参数值….</li></ul></li></ul><h2 id="6-2-URL类构造器"><a href="#6-2-URL类构造器" class="headerlink" title="6.2 URL类构造器"></a>6.2 URL类构造器</h2><ul><li>为了表示URL，java.net 中实现了类 URL。我们可以通过下面的构造器来初始化一个 URL 对象：<ul><li>public URL (String spec)：通过一个表示URL地址的字符串可以构造一个URL对象。<br>例如：URL url = new URL (“<a href="http://www" target="_blank" rel="noopener">http://www</a>. bithachi.cn/“);</li><li>public URL(URL context, String spec)：通过基 URL 和相对 URL 构造一个 URL 对象。<br>例如：URL downloadUrl = new URL(url, “download.html”)</li><li>public URL(String protocol, String host, String file);<br>例如：new URL(“https”,”<a href="http://www.bithachi.cn&quot;" target="_blank" rel="noopener">www.bithachi.cn&quot;</a>, “download. html”);</li><li>public URL(String protocol, String host, int port, String file);<br>例如: URL gamelan = new URL(“https”, “<a href="http://www.bithachi.cn&quot;" target="_blank" rel="noopener">www.bithachi.cn&quot;</a>, 80, “download.html”);</li></ul></li><li>URL类的构造器都声明抛出非运行时异常，必须要对这一异常进行处理，通常是用 try-catch 语句进行捕获。</li><li>一个URL对象生成后，其属性是不能被改变的，但可以通过它给定的方法来获取这些属性：<ol><li>public String getProtocol( ) 获取该URL的协议名</li><li>public String getHost( ) 获取该URL的主机名</li><li>public String getPort( ) 获取该URL的端口号</li><li>public String getPath( ) 获取该URL的文件路径</li><li>public String getFile( ) 获取该URL的文件名</li><li>public String getQuery( ) 获取该URL的查询名</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span>  <span class="title">URLTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">"https://www.bithachi.cn:666/abc/123.jpg?username=Tom"</span>);</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"getProtocol() : "</span>+url.getProtocol());<span class="comment">//获取该URL的协议名</span></span><br><span class="line">            System.out.println(<span class="string">"getHost() : "</span>+url.getHost());<span class="comment">//获取该URL的主机名</span></span><br><span class="line">            System.out.println(<span class="string">"getPort() : "</span>+url.getPort());<span class="comment">//获取该URL的端口号</span></span><br><span class="line">            System.out.println(<span class="string">"getPath() : "</span>+url.getPath());<span class="comment">//获取该URL的文件路径</span></span><br><span class="line">            System.out.println(<span class="string">"getFile() : "</span>+url.getFile());<span class="comment">//获取该URL的文件名</span></span><br><span class="line">            System.out.println(<span class="string">"getQuery() : "</span>+url.getQuery());<span class="comment">//获取该URL的查询名</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">getProtocol() : https</span><br><span class="line">getHost() : www.bithachi.cn</span><br><span class="line">getPort() : <span class="number">666</span></span><br><span class="line">getPath() : /abc/<span class="number">123</span>.jpg</span><br><span class="line">getFile() : /abc/<span class="number">123</span>.jpg?username=Tom</span><br><span class="line">getQuery() : username=Tom</span><br></pre></td></tr></table></figure><h2 id="6-2-针对HTTP-协议的URLConnection类"><a href="#6-2-针对HTTP-协议的URLConnection类" class="headerlink" title="6.2 针对HTTP 协议的URLConnection类"></a>6.2 针对HTTP 协议的URLConnection类</h2><ul><li>URL的方法 <code>openStream()</code>：能从网络上读取数据</li><li>若希望输出数据，例如向服务器端的 <code>CGI</code>（<code>公共网关接口-Common GatewayInterface</code>-的简称，是用户浏览器和服务器端的应用程序进行连接的接口）程序发送一些数据，则必须先与URL建立连接，然后才能对其进行读写，此时需要使用URLConnection 。</li><li><code>URLConnection</code>：表示到URL所引用的远程对象的连接。当与一个URL建立连接时，首先要在一个 URL 对象上通过方法 <code>openConnection()</code>生成对应的 URLConnection对象。如果连接过程失败，将产生<code>IOException.</code></li><li>URL netchinaren = new URL (“<a href="https://www.bithachi.cn/index.html&quot;">https://www.bithachi.cn/index.html&quot;</a>);</li><li>URLConnectonn u = netchinaren.openConnection( );</li><li>通过URLConnection对象获取的输入流和输出流，即可以与现有的CGI程序进行交互。<ol><li>public Object getContent( ) throws IOException</li><li>public int getContentLength( )</li><li>public String getContentType( )</li><li>public long getDate( )</li><li>public long getLastModified( )</li><li>public InputStream getInputStream( )throws IOException</li><li>public OutputSteram getOutputStream( )throws IOException</li></ol></li></ul><p><strong>举个例子：下载URL所指的文件到本地</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLTest1</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        HttpURLConnection urlConnection = <span class="keyword">null</span>;</span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        FileOutputStream fos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URL url = <span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/examples/123.jpg"</span>);</span><br><span class="line">            <span class="comment">//获取HttpURLConnection对象</span></span><br><span class="line">            urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">            <span class="comment">//获取连接</span></span><br><span class="line">            urlConnection.connect();</span><br><span class="line">            <span class="comment">//获取输入流</span></span><br><span class="line">            is = urlConnection.getInputStream();</span><br><span class="line">            <span class="comment">//将输入流中的数据保存到abc.jpg中</span></span><br><span class="line">            fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"../abc.jpg"</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = is.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                fos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"下载完成"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(fos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(urlConnection != <span class="keyword">null</span>)&#123;</span><br><span class="line">                urlConnection.disconnect();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-3-URI-、URL-和URN的区别"><a href="#6-3-URI-、URL-和URN的区别" class="headerlink" title="6.3 URI 、URL 和URN的区别"></a>6.3 URI 、URL 和URN的区别</h2><ul><li><p><code>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</code></p></li><li><p>URL是uniform resource locator，统一资源定位符，它是一种具体的URI，即<code>URL可以用来标识一个资源，而且还指明了如何定位这个资源</code>。</p></li><li><p>URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:<a href="mailto:java-net@java.sun.com">java-net@java.sun.com</a>。</p></li><li><p>也就是说，URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。</p><p>URL和URN都是一种URI。</p></li><li><p>在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200827132103.png" alt="image-20200827132102888"></p><h1 id="7-小结"><a href="#7-小结" class="headerlink" title="7. 小结"></a>7. 小结</h1><ul><li>位于网络中的计算机具有唯一的IP地址，这样不同的主机可以互相区分。</li><li><code>客户端-服务器/CS</code>是一种最常见的网络应用程序模型。服务器是一个为其客户端提供某种特定服务的硬件或软件。客户机是一个用户应用程序，用于访问某台服务器提供的服务。</li><li><code>端口号</code>是对一个服务的访问场所，它用于区分同一物理计算机上的多个服务。</li><li><code>套接字</code>用于连接客户端和服务器，客户端和服务器之间的每个通信会话使用一个不同的套接字。</li><li>TCP协议用于实现面向连接的会话。</li><li>Java 中有关网络方面的功能都定义在<code>java.net</code>程序包中。Java 用<code>InetAddress</code>对象表示 IP地址，该对象里有两个字段：<code>主机名(String) 和 IP 地址(int)。</code></li><li>类 <code>Socket</code> 和 <code>ServerSocket</code>实现了基于TCP协议的客户端－服务器程序。Socket是客户端和服务器之间的一个连接，连接创建的细节被隐藏了。这个连接提供了一个安全的数据传输通道，这是因为 TCP 协议可以解决数据在传送过程中的丢失、损坏、重复、乱序以及网络拥挤等问题，它保证数据可靠的传送。</li><li>类 <code>URL</code>和 <code>URLConnection</code>提供了最高级网络应用。URL 的网络资源的位置来同一表示Internet 上各种网络资源。通过URL对象可以创建当前应用程序和 URL 表示的网络资源之间的连接，这样当前程序就可以读取网络资源数据，或者把自己的数据传送到网络上去。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛型的奥妙</title>
      <link href="/posts/dd50572c.html"/>
      <url>/posts/dd50572c.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-为什么要有泛型？"><a href="#1-为什么要有泛型？" class="headerlink" title="1. 为什么要有泛型？"></a>1. 为什么要有泛型？</h1><p>在学习泛型前，我们先了解一下为什么要有泛型，它有什么作用。</p><p>我们知道，在JDK1.5之前，集合容器类在设计阶段/声明阶段不能确定这个容器到底实际存的是什么类型的对象，所以<code>在JDK1.5之前只能把元素类型设计为Object</code>，JDK1.5之后使用<code>泛型</code>来解决。因为这个时候除了元素的类型不确定，其他的部分是确定的，例如关于这个元素如何保存，如何管理等是确定的，因此此时<code>把元素的类型设计成一个参数，这个类型参数叫做泛型</code>。Collection<E>，List<E>，ArrayList<E> 这个<E>就是类型参数，即泛型。</p><p><strong>为什么要有泛型呢 ， 直接Object 不是也可以存储数据吗 ？</strong></p><ol><li>解决元素存储的安全性问题，好比商品、药品标签，不会弄错。</li><li>解决获取数据元素时，需要类型强制转换的问题，好比不用每回拿商品、药品都要辨别。</li></ol><p>Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常。同时，代码更加简洁、健壮。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826092830.png" alt="image-20200826092830230"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826092843.png" alt="image-20200826092843863"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//在集合中使用泛型之前的情况：</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="comment">//需求：存放学生的成绩</span></span><br><span class="line">        list.add(<span class="number">78</span>);</span><br><span class="line">        list.add(<span class="number">76</span>);</span><br><span class="line">        list.add(<span class="number">89</span>);</span><br><span class="line">        list.add(<span class="number">88</span>);</span><br><span class="line">        <span class="comment">//问题一：类型不安全</span></span><br><span class="line"><span class="comment">//        list.add("Tom");</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(Object score : list)&#123;</span><br><span class="line">            <span class="comment">//问题二：强转时，可能出现ClassCastException</span></span><br><span class="line">            <span class="keyword">int</span> stuScore = (Integer) score;<span class="comment">//自动拆箱</span></span><br><span class="line">            System.out.println(stuScore);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在集合中使用泛型的情况：以ArrayList为例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       ArrayList&lt;Integer&gt; list =  <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">        list.add(<span class="number">78</span>);</span><br><span class="line">        list.add(<span class="number">87</span>);</span><br><span class="line">        list.add(<span class="number">99</span>);</span><br><span class="line">        list.add(<span class="number">65</span>);</span><br><span class="line">        <span class="comment">//编译时，就会进行类型检查，保证数据的安全</span></span><br><span class="line"><span class="comment">//        list.add("Tom");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式一：</span></span><br><span class="line"><span class="comment">//        for(Integer score : list)&#123;</span></span><br><span class="line"><span class="comment">//            //避免了强转操作</span></span><br><span class="line"><span class="comment">//            int stuScore = score;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//            System.out.println(stuScore);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="comment">//方式二：</span></span><br><span class="line">        Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            <span class="keyword">int</span> stuScore = iterator.next();</span><br><span class="line">            System.out.println(stuScore);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="2-什么是泛型？"><a href="#2-什么是泛型？" class="headerlink" title="2. 什么是泛型？"></a>2. 什么是泛型？</h1><ul><li><code>所谓泛型，就是允许在定义类、接口时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。这个类型参数将在使用时（例如，继承或实现这个接口，用这个类型声明变量、创建对象时）确定（即传入实际的类型参数，也称为类型实参）。</code></li><li>从JDK1.5以后，Java引入了<code>“参数化类型（Parameterized type）”</code>的概念，允许我们在创建集合时再指定集合元素的类型，正如：List<String>，这表明该List只能保存字符串类型的对象。</li><li>JDK1.5改写了集合框架中的全部接口和类，为这些接口、类增加了泛型支持，从而可以在声明集合变量、创建集合对象时传入类型实参。</li></ul><h1 id="3-在集合中使用泛型"><a href="#3-在集合中使用泛型" class="headerlink" title="3. 在集合中使用泛型"></a>3. 在集合中使用泛型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//在集合中使用泛型的情况：以HashMap为例</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//        Map&lt;String,Integer&gt; map = new HashMap&lt;String,Integer&gt;();</span></span><br><span class="line">        <span class="comment">//jdk7新特性：类型推断,后面可以省略不写或&lt;&gt; </span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"Tom"</span>,<span class="number">87</span>);</span><br><span class="line">        map.put(<span class="string">"Jerry"</span>,<span class="number">87</span>);</span><br><span class="line">        map.put(<span class="string">"Jack"</span>,<span class="number">67</span>);</span><br><span class="line"><span class="comment">//        map.put(123,"ABC");</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//泛型的嵌套</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String,Integer&gt;&gt; entry = map.entrySet();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; iterator = entry.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; e = iterator.next();</span><br><span class="line">            String key = e.getKey();</span><br><span class="line">            Integer value = e.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">"----"</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Tom----<span class="number">87</span></span><br><span class="line">Jerry----<span class="number">87</span></span><br><span class="line">Jack----<span class="number">67</span></span><br></pre></td></tr></table></figure><h1 id="4-自定义泛型结构"><a href="#4-自定义泛型结构" class="headerlink" title="4. 自定义泛型结构"></a>4. 自定义泛型结构</h1><h2 id="4-1-泛型的声明与实例化"><a href="#4-1-泛型的声明与实例化" class="headerlink" title="4.1 泛型的声明与实例化"></a>4.1 泛型的声明与实例化</h2><p><strong>1. 泛型的声明</strong></p><p><code>interface List&lt;T&gt; 和 class GenTest&lt;K,V&gt;</code></p><p>其中，T,K,V不代表值，而是表示类型。这里使用任意字母都可以。常用T表示，是Type的缩写。</p><p><strong>2. 泛型的实例化</strong></p><p>一定要在类名后面指定类型参数的值（类型）。</p><ul><li><p><code>List&lt;String&gt; strList = new ArrayList&lt;String&gt;();</code></p></li><li><p><code>Iterator&lt;Customer&gt; iterator = customers.iterator();</code></p></li><li><p><code>T只能是类，不能用基本数据类型填充。但可以使用包装类填充。</code></p></li><li><p>把一 个 集合中的内容限制为一个特定的数据类型，这就是泛型背后的核心思想。</p></li></ul><h2 id="4-2-自定义泛型类或泛型接口"><a href="#4-2-自定义泛型类或泛型接口" class="headerlink" title="4.2 自定义泛型类或泛型接口"></a>4.2 自定义泛型类或泛型接口</h2><ol><li><p>泛型类可能有多个参数，此时应将多个参数一起放在尖括号内。比如：&lt;E1,E2,E3&gt;</p></li><li><p>泛型类的构造器如下：public GenericClass(){}。<br>这样是错误的：public GenericClass<E>(){}</p></li><li><p>实例化后，操作原来泛型位置的结构必须与指定的泛型类型一致。</p></li><li><p>泛型不同的引用不能相互赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   ArrayList&lt;String&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">   ArrayList&lt;Integer&gt; list2 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">   <span class="comment">//泛型不同的引用不能相互赋值。</span></span><br><span class="line"><span class="comment">//list1 = list2;</span></span><br></pre></td></tr></table></figure></li><li><p>泛型如果不指定，将被擦除，泛型对应的类型均按照Object处理，但不等价于Object。 </p></li><li><p>如果泛型结构是一个接口或抽象类，则不可创建泛型类的对象。</p></li><li><p>jdk1.7，泛型的简化操作：<code>ArrayList&lt;Fruit&gt; flist = new ArrayList&lt;&gt;();</code></p></li><li><p>泛型的指定中不能使用基本数据类型，可以使用包装类替换。</p></li><li><p>在类/接口上声明的泛型，在本类或本接口中即代表某种类型，可以作为非静态属性的类型、非静态方法的参数类型、非静态方法的返回值类型。但在<code>静态方法中不能使用类的泛型。</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//静态方法中不能使用类的泛型。可以把泛型标签当一个变量，static结构不能调用变量</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T orderT)</span></span>&#123;</span><br><span class="line">    System.out.println(orderT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异常类不能是泛型的，不能在try-catch中使用泛型定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异常类不能声明为泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure></li><li><p>不能使用new E[]。但是可以：E[] elements = (E[])new Object[capacity];</p><p>参考：ArrayList源码中声明：Object[] elementData，而非泛型参数类型数组。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//不能创建一个不确定的类对象</span></span><br><span class="line">    <span class="comment">//编译不通过</span></span><br><span class="line"> <span class="comment">//T[] arr = new T[10];</span></span><br><span class="line">    <span class="comment">//编译通过</span></span><br><span class="line">    T[] arr = (T[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个完整代码例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 自定义泛型类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    String orderName;</span><br><span class="line">    <span class="keyword">int</span> orderId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//类的内部结构就可以使用类的泛型</span></span><br><span class="line">    T orderT;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//不能在创建一个不确定的类对象</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        T[] arr = new T[10];</span></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        T[] arr = (T[]) <span class="keyword">new</span> Object[<span class="number">10</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Order</span><span class="params">(String orderName,<span class="keyword">int</span> orderId,T orderT)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderName = orderName;</span><br><span class="line">        <span class="keyword">this</span>.orderId = orderId;</span><br><span class="line">        <span class="keyword">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如下的三个方法都不是泛型方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getOrderT</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderT</span><span class="params">(T orderT)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.orderT = orderT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Order&#123;"</span> +</span><br><span class="line">                <span class="string">"orderName='"</span> + orderName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", orderId="</span> + orderId +</span><br><span class="line">                <span class="string">", orderT="</span> + orderT +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//静态方法中不能使用类的泛型。可以把泛型标签当一个变量，static结构不能调用变量</span></span><br><span class="line"><span class="comment">//    public static void show(T orderT)&#123;</span></span><br><span class="line"><span class="comment">//        System.out.println(orderT);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        try&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;catch(T t)&#123;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系。</span></span><br><span class="line">    <span class="comment">//换句话说，泛型方法所属的类是不是泛型类都没有关系。</span></span><br><span class="line">    <span class="comment">//泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt;  <span class="function">List&lt;E&gt; <span class="title">copyFromArrayToList</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12.父类有泛型，子类可以选择保留泛型也可以选择指定泛型类型：</p><ul><li><p>子类不保留父类的泛型：</p><ul><li><p>没有类型：擦除</p></li><li><p>继承时为父类指定具体类型</p></li></ul></li><li><p>子类保留父类的泛型：泛型子类</p><ul><li>全部保留</li><li>部分保留</li></ul></li></ul><p>结论：子类除了指定或保留父类的泛型，还可以增加自己的泛型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类不保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)没有类型 擦除</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son1</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;<span class="comment">// 等价于class Son extends Father&lt;Object,Object&gt;&#123;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)继承时为父类指定具体类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span> <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)全部保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)部分保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son4</span>&lt;<span class="title">T2</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类不保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)没有类型 擦除</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;<span class="comment">//等价于class Son extends Father&lt;Object,Object&gt;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)继承时为父类指定具体类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>&lt;<span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类保留父类的泛型</span></span><br><span class="line"><span class="comment">// 1)全部保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son3</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>, <span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">T1</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2)部分保留</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son4</span>&lt;<span class="title">T2</span>, <span class="title">A</span>, <span class="title">B</span>&gt; <span class="keyword">extends</span> <span class="title">Father</span>&lt;<span class="title">Integer</span>, <span class="title">T2</span>&gt; </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-自定义泛型方法"><a href="#4-3-自定义泛型方法" class="headerlink" title="4.3 自定义泛型方法"></a>4.3 自定义泛型方法</h2><ul><li>方法，也可以被泛型化，不管此时定义在其中的类是不是 泛型类。 在泛型方法中可以定义泛型参数，此时，参数的类型就是传入数据的 类型 。</li><li>泛型方法的格式：<code>[ 访问权限] &lt; 泛型&gt; 型 返回类型 名 方法名([ 泛型标识 称 参数名称]) 抛出的异常</code></li><li>泛型方法声明泛型时也可以指定上限</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//泛型方法：在方法中出现了泛型的结构，泛型参数与类的泛型参数没有任何关系。</span></span><br><span class="line">    <span class="comment">//换句话说，泛型方法所属的类是不是泛型类都没有关系。</span></span><br><span class="line">    <span class="comment">//泛型方法，可以声明为静态的。原因：泛型参数是在调用方法时确定的。并非在实例化类时确定。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt;  <span class="function">List&lt;E&gt; <span class="title">copyFromArrayToList</span><span class="params">(E[] arr)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;E&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(E e : arr)&#123;</span><br><span class="line">            list.add(e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Order&lt;String&gt; order = <span class="keyword">new</span> Order&lt;&gt;();</span><br><span class="line">        Integer[] arr = <span class="keyword">new</span> Integer[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="comment">//泛型方法在调用时，指明泛型参数的类型。</span></span><br><span class="line">        List&lt;Integer&gt; list = order.copyFromArrayToList(arr);</span><br><span class="line">        System.out.println(list);<span class="comment">//[1, 2, 3, 4]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">fromArrayToCollection</span><span class="params">(T[] a, Collection&lt;T&gt; c)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (T o : a) &#123;</span><br><span class="line">    c.add(o);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Object[] ao = <span class="keyword">new</span> Object[<span class="number">100</span>];</span><br><span class="line">    Collection&lt;Object&gt; co = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">    fromArrayToCollection(ao, co);</span><br><span class="line">    </span><br><span class="line">    String[] sa = <span class="keyword">new</span> String[<span class="number">20</span>];</span><br><span class="line">    Collection&lt;String&gt; cs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    fromArrayToCollection(sa, cs);</span><br><span class="line">    </span><br><span class="line">    Collection&lt;Double&gt; cd = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 下面代码中T是Double类，但sa是String类型，编译错误。</span></span><br><span class="line">     fromArrayToCollection(sa, cd);</span><br><span class="line">    <span class="comment">// 下面代码中T是Object类型，sa是String类型，可以赋值成功。</span></span><br><span class="line">    fromArrayToCollection(sa, co);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-泛型在继承上的体现"><a href="#5-泛型在继承上的体现" class="headerlink" title="5.泛型在继承上的体现"></a>5.泛型在继承上的体现</h1><ul><li>如果B是A的一个子类型（子类或者子接口），而G是具有泛型声明的类或接口，G<B>并不是G<A>的子类型！</li><li>比如：String是Object的子类，但是List<String >并不是List<Object>的子类。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200826111613.png" alt="image-20200826111613650"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGenericAndSubClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Person[] persons = <span class="keyword">null</span>;</span><br><span class="line">    Man[] mans = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// Person是 Man的父类.</span></span><br><span class="line">    persons = mans;</span><br><span class="line">    Person p = mans[<span class="number">0</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在泛型的集合上</span></span><br><span class="line">    List&lt;Person&gt; personList = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;Man&gt; manList = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// personList = manList;(报错)</span></span><br><span class="line">    </span><br><span class="line">    List&lt;Object&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">    <span class="comment">//此时的list1和list2的类型不具有子父类关系</span></span><br><span class="line">    <span class="comment">//编译不通过</span></span><br><span class="line">    <span class="comment">//list1 = list2;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-通配符的使用"><a href="#6-通配符的使用" class="headerlink" title="6. 通配符的使用"></a>6. 通配符的使用</h1><h2 id="6-1-通配符-？"><a href="#6-1-通配符-？" class="headerlink" title="6.1 通配符 ？"></a>6.1 通配符 ？</h2><ul><li><p>使用类型 <code>通配符：？</code><br>比如：List<?> ，Map<?,?><br><code>List&lt;?&gt;是List&lt;String&gt;、List&lt;Object&gt;等各种泛型List的父类。</code></p></li><li><p><code>读取</code>List&lt;?&gt;的对象list中的元素时，永远是安全的，因为不管list的真实类型是什么，它包含的都是Object。</p></li><li><p><code>写入list中的元素时，不行。</code>因为我们不知道c的元素类型，我们不能向其中添加对象。</p><ul><li><p>唯一的例外是null，它是所有类型的成员。</p></li><li><p>将任意元素加入到其中不是类型安全的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;?&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">c.add(<span class="keyword">new</span> Object()); <span class="comment">// 编译时错误</span></span><br></pre></td></tr></table></figure><p>因为我们不知道c的元素类型，我们不能向其中添加对象。add方法有类型参数E作为集合的元素类型。我们传给add的任何参数都必须是一个未知类型的子类。因为我们不知道那是什么类型，所以我们无法传任何东西进去。</p></li><li><p>另一方面，我们可以调用get() 方法并使用其返回值。返回值是一个未知的类型，但是我们知道，它总是一个Object。</p></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;?&gt; list = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    List&lt;Object&gt; list1 = <span class="keyword">null</span>;</span><br><span class="line">    List&lt;String&gt; list2 = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    list = list1;<span class="comment">//编译通过</span></span><br><span class="line">    list = list2;<span class="comment">//编译通过</span></span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; list3 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list3.add(<span class="string">"AA"</span>);</span><br><span class="line">    list3.add(<span class="string">"BB"</span>);</span><br><span class="line">    list3.add(<span class="string">"CC"</span>);</span><br><span class="line">    list = list3;<span class="comment">//编译通过</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加(写入)：对于List&lt;?&gt;就不能向其内部添加数据。</span></span><br><span class="line">    <span class="comment">//除了添加null之外。</span></span><br><span class="line">    <span class="comment">//list.add("DD");//编译错误</span></span><br><span class="line">    <span class="comment">//list.add('?');//编译错误</span></span><br><span class="line">    <span class="comment">//list.add(null);//编译通过</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取(读取)：允许读取数据，读取的数据类型为Object。</span></span><br><span class="line">    Object o = list.get(<span class="number">0</span>);</span><br><span class="line">    System.out.println(o);</span><br><span class="line">    System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">    print(list);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(List&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">    Iterator&lt;?&gt; iterator = list.iterator();</span><br><span class="line">    <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">        Object obj = iterator.next();</span><br><span class="line">        System.out.println(obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AA</span><br><span class="line">----------------</span><br><span class="line">AA</span><br><span class="line">BB</span><br><span class="line">CC</span><br></pre></td></tr></table></figure><p><strong>注意点：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意点1：编译错误：不能用在泛型方法声明上，返回值类型前面&lt;&gt;不能使用?</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;?&gt; <span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意点2：编译错误：不能用在泛型类的声明上</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GenericTypeClass</span>&lt;?&gt;</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意点3：编译错误：不能用在创建对象上，右边属于创建集合对象</span></span><br><span class="line">ArrayList&lt;?&gt; list2 = <span class="keyword">new</span> ArrayList&lt;?&gt;();</span><br></pre></td></tr></table></figure><h2 id="6-2-有限制的通配符"><a href="#6-2-有限制的通配符" class="headerlink" title="6.2 有限制的通配符"></a>6.2 有限制的通配符</h2><ul><li>&lt;?&gt;<br>允许所有泛型的引用调用</li><li>通配符指定上限<br>上限extends：使用时指定的类型必须是继承某个类，或者实现某个接口，即&lt;=</li><li>通配符指定下限<br>下限super：使用时指定的类型不能小于操作的类，即&gt;=</li><li>举例：<ul><li>&lt;? extends Number&gt; ( 无穷小 , Number]<br>只允许泛型为Number及Number子类的引用调用</li><li>&lt;? super Number&gt; [Number , 无穷大)<br>只允许泛型为Number及Number父类的引用调用</li><li>&lt;? extends Comparable&gt;<br>只允许泛型为实现Comparable接口的实现类的引用调用</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用时指定的类型必须是继承某个类，或者实现某个接口，或者自己</span></span><br><span class="line">        List&lt;? extends Person&gt; list1extendsPerson = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//引用时指定的类型必须是它的父类或自己</span></span><br><span class="line">        List&lt;? <span class="keyword">super</span> Person&gt; list2superPerson = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; list3Student = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        List&lt;Person&gt; list4Person = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line">        List&lt;Object&gt; list5Object = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//引用多态</span></span><br><span class="line">        list1extendsPerson = list3Student;</span><br><span class="line">        list1extendsPerson = list4Person;</span><br><span class="line"><span class="comment">//      list1extendsPerson = list5Object;</span></span><br><span class="line"></span><br><span class="line">        list2superPerson = list4Person;</span><br><span class="line">        list2superPerson = list5Object;</span><br><span class="line"><span class="comment">//      list2superPerson = list3Student;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//读取数据：</span></span><br><span class="line">        list1extendsPerson = list3Student;</span><br><span class="line">        Person p = list1extendsPerson.get(<span class="number">0</span>);<span class="comment">//返回Person对象</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//        Student s = list1extendsPerson.get(0);</span></span><br><span class="line"></span><br><span class="line">        list2superPerson = list4Person;</span><br><span class="line">        Object obj = list2superPerson.get(<span class="number">0</span>);<span class="comment">//返回Person的父类对象</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line"><span class="comment">//      Person obj2 = list2superPerson.get(0);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//写入数据：</span></span><br><span class="line">        <span class="comment">//编译不通过</span></span><br><span class="line">        list1extendsPerson = list3Student;</span><br><span class="line"><span class="comment">//        list1extendsPerson.add(new Student());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//编译通过</span></span><br><span class="line">        list2superPerson = list4Person;</span><br><span class="line">        list2superPerson.add(<span class="keyword">new</span> Person());</span><br><span class="line">        list2superPerson.add(<span class="keyword">new</span> Student());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 泛型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常用类操作手册</title>
      <link href="/posts/8f28afe1.html"/>
      <url>/posts/8f28afe1.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0. 前言"></a>0. 前言</h1><p><strong>Java中有许多经常拿来编写程序的常用类，这些常用类有一些常用的方法，学习这些常用类可以方便我们更好的处理数据和实现一些功能。</strong></p><p>常用类有以下几种：</p><ul><li>字符串相关类：String、StringBuffer、StringBuilder</li><li>JDK8之前处理日期时间相关类：System、Date、Calendar、SimpleDateFormat</li><li>JDK8中新增的处理日期时间相关类：LocalDate、LocalTime、LocalDateTime、Instant、DateTimeFormatter、其它类</li><li>比较器：Comparable接口、Comparator接口</li><li>System类单独讲解</li><li>Math类</li><li>处理大数值的类：BigInteger与BigDecimal</li></ul><p>我们的行文路线将根据上面所列常用类进行讲解和演示。</p><h1 id="1-字符串相关"><a href="#1-字符串相关" class="headerlink" title="1.字符串相关"></a>1.字符串相关</h1><h2 id="1-1-String的特性"><a href="#1-1-String的特性" class="headerlink" title="1.1 String的特性"></a>1.1 String的特性</h2><ul><li>String类  ： 代表 字符串。Java 程序中的所有字符串字面值（如 “abc” ）都作为此类的实例实现。</li><li>String是一个final类，代表<code>不可变的字符序列</code>。String的内容不可变，但是可改变其引用指向的地址，从而达到间接改变其值的感觉。</li><li>字符串是常量，用双引号引起来表示。它们的值在创建之后不能更改。</li><li>String对象的字符内容是存储在一个字符数组<code>private final char value[]</code>中的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JDK8部分源码所示</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line"><span class="comment">/** The value is used for character storage. */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];</span><br><span class="line"><span class="comment">/** Cache the hash code for the string */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> hash; <span class="comment">// Default to 0</span></span><br></pre></td></tr></table></figure><h2 id="1-2-字符串对象是如何存储的？"><a href="#1-2-字符串对象是如何存储的？" class="headerlink" title="1.2 字符串对象是如何存储的？"></a>1.2 字符串对象是如何存储的？</h2><p><strong>这里我们通过几个案例切实的感受字符串对象是如何在内存中存储的。以代码和图文结合来分析。</strong></p><p><strong>案例一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"abc"</span>;<span class="comment">// 字面量的定义方式</span></span><br><span class="line">String s2 = <span class="string">"abc"</span>;<span class="comment">//如果字符串常量池已有这个常量则指向它，否则就创建一个新的字符串常量，比如下文的 hello</span></span><br><span class="line">s1 = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817222725.png" alt="image-20200817222725824"></p><p><strong>案例二：</strong></p><p>以下方式创建字符串对象有什么区别？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">"abc"</span>; </span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817223223.png" alt="image-20200817223223583"></p><p><strong>案例三：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String s1 = <span class="string">"javaEE"</span>;</span><br><span class="line">String s2 = <span class="string">"javaEE"</span>;</span><br><span class="line">String s3 = <span class="keyword">new</span> String(<span class="string">"javaEE"</span>);</span><br><span class="line">String s4 = <span class="keyword">new</span> String(<span class="string">"javaEE"</span>);</span><br><span class="line">System.out.println(s1 == s2);<span class="comment">//true</span></span><br><span class="line">System.out.println(s1 == s3);<span class="comment">//false</span></span><br><span class="line">System.out.println(s1 == s4);<span class="comment">//false</span></span><br><span class="line">System.out.println(s3 == s4);<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817223423.png" alt="image-20200817223423566"></p><p><strong>案例四：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    Person p1 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>,<span class="number">12</span>);</span><br><span class="line">    Person p2 = <span class="keyword">new</span> Person(<span class="string">"Tom"</span>,<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(p1.name.equals(p2.name));<span class="comment">//true,内容相等</span></span><br><span class="line">    System.out.println(p1.name == p2.name);<span class="comment">//true,地址相等</span></span><br><span class="line"></span><br><span class="line">    p1.name = <span class="string">"Jerry"</span>;</span><br><span class="line">    System.out.println(p2.name);<span class="comment">//Tom</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817223734.png" alt="image-20200817223734206"></p><p><strong>案例五：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817224123.png" alt="image-20200817224123718"></p><p>结论：</p><ul><li>常量与常量的拼接结果在常量池。且常量池中不会存在相同内容的常量。</li><li>只要+连接中有一个是变量，new出来的对象就在堆中</li><li>如果拼接的结果调用intern()方法，返回值就在常量池中</li></ul><p><strong>案例六：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817224240.png" alt="image-20200817224240918"></p><p><strong>案例七：</strong></p><p>下列程序的运行结果是什么？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//包装类和String都是不可变类型</span></span><br><span class="line">    String str = <span class="keyword">new</span> String(<span class="string">"good"</span>);</span><br><span class="line">    Integer i1=<span class="keyword">new</span> Integer(<span class="number">20</span>);</span><br><span class="line">    <span class="keyword">char</span>[] ch = &#123; <span class="string">'t'</span>, <span class="string">'e'</span>, <span class="string">'s'</span>, <span class="string">'t'</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str, <span class="keyword">char</span> ch[])</span> </span>&#123;</span><br><span class="line">        System.out.println(str.hashCode());</span><br><span class="line">        str = <span class="string">"test ok"</span>;</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">'b'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Integer i1, <span class="keyword">char</span> ch[])</span> </span>&#123;</span><br><span class="line">        i1=<span class="keyword">new</span> Integer(<span class="number">100</span>);</span><br><span class="line">        ch[<span class="number">0</span>] = <span class="string">'b'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringTest ex = <span class="keyword">new</span> StringTest();</span><br><span class="line">        ex.change(ex.str, ex.ch);</span><br><span class="line">        ex.change(ex.i1,ex.ch);</span><br><span class="line">        System.out.println(ex.i1);<span class="comment">//20</span></span><br><span class="line">        System.out.println(ex.str);<span class="comment">//good</span></span><br><span class="line">        System.out.println(ex.ch);<span class="comment">//best</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-String常用方法示例"><a href="#1-3-String常用方法示例" class="headerlink" title="1.3 String常用方法示例"></a>1.3 String常用方法示例</h2><p>这里直接以代码形式展现，附上详细注释，运行结果在每一个打印的注释后面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringMethodTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">替换：</span></span><br><span class="line"><span class="comment">String replace(char oldChar, char newChar)：返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的。</span></span><br><span class="line"><span class="comment">String replace(CharSequence target, CharSequence replacement)：使用指定的字面值替换序列替换此字符串所有匹配字面值目标序列的子字符串。</span></span><br><span class="line"><span class="comment">String replaceAll(String regex, String replacement)：使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串。</span></span><br><span class="line"><span class="comment">String replaceFirst(String regex, String replacement)：使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串。</span></span><br><span class="line"><span class="comment">匹配:</span></span><br><span class="line"><span class="comment">boolean matches(String regex)：告知此字符串是否匹配给定的正则表达式。</span></span><br><span class="line"><span class="comment">切片：</span></span><br><span class="line"><span class="comment">String[] split(String regex)：根据给定正则表达式的匹配拆分此字符串。</span></span><br><span class="line"><span class="comment">String[] split(String regex, int limit)：根据匹配给定的正则表达式来拆分此字符串，最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">"acenlsv"</span>;</span><br><span class="line">        String str2 = str1.replace(<span class="string">'n'</span>, <span class="string">'W'</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(str1);<span class="comment">//acenlsv</span></span><br><span class="line">        System.out.println(str2);<span class="comment">//aceWlsv</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*************************"</span>);</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"12hello34world5java7891mysql456"</span>;</span><br><span class="line">        <span class="comment">//把字符串中的数字替换成,，如果结果中开头和结尾有，的话去掉</span></span><br><span class="line">        System.out.println(str.replaceAll(<span class="string">"\\d+"</span>, <span class="string">","</span>));<span class="comment">//,hello,world,java,mysql,</span></span><br><span class="line">        String string = str.replaceAll(<span class="string">"\\d+"</span>, <span class="string">","</span>).replaceAll(<span class="string">"^,|,$"</span>, <span class="string">""</span>);</span><br><span class="line">        System.out.println(string);<span class="comment">//hello,world,java,mysql</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*************************"</span>);</span><br><span class="line"></span><br><span class="line">        str = <span class="string">"12345"</span>;</span><br><span class="line">        <span class="comment">//判断str字符串中是否全部有数字组成，即有1-n个数字组成</span></span><br><span class="line">        <span class="keyword">boolean</span> matches = str.matches(<span class="string">"\\d+"</span>);</span><br><span class="line">        System.out.println(matches);<span class="comment">//true</span></span><br><span class="line">        String tel = <span class="string">"0321-3214289"</span>;</span><br><span class="line">        <span class="comment">//判断这是否是一个杭州的固定电话</span></span><br><span class="line">        <span class="keyword">boolean</span> result = tel.matches(<span class="string">"0321-\\d&#123;7,8&#125;"</span>);</span><br><span class="line">        System.out.println(result);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*************************"</span>);</span><br><span class="line"></span><br><span class="line">        str = <span class="string">"hello|world|java"</span>;</span><br><span class="line">        String[] strs = str.split(<span class="string">"\\|"</span>);</span><br><span class="line">        System.out.println(Arrays.toString(strs));<span class="comment">//[hello,world,java]</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"*************************"</span>);</span><br><span class="line"></span><br><span class="line">        str2 = <span class="string">"hello.world.java"</span>;</span><br><span class="line">        String[] strs2 = str2.split(<span class="string">"\\."</span>);</span><br><span class="line">        System.out.println(Arrays.toString(strs2));<span class="comment">//[hello,world,java]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">boolean endsWith(String suffix)：测试此字符串是否以指定的后缀结束</span></span><br><span class="line"><span class="comment">boolean startsWith(String prefix)：测试此字符串是否以指定的前缀开始</span></span><br><span class="line"><span class="comment">boolean startsWith(String prefix, int toffset)：测试此字符串从指定索引开始的子字符串是否以指定前缀开始</span></span><br><span class="line"><span class="comment">boolean contains(CharSequence s)：当且仅当此字符串包含指定的 char 值序列时，返回 true</span></span><br><span class="line"><span class="comment">int indexOf(String str)：返回指定子字符串在此字符串中第一次出现处的索引</span></span><br><span class="line"><span class="comment">int indexOf(String str, int fromIndex)：返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</span></span><br><span class="line"><span class="comment">int lastIndexOf(String str)：返回指定子字符串在此字符串中最右边出现处的索引</span></span><br><span class="line"><span class="comment">int lastIndexOf(String str, int fromIndex)：返回指定子字符串在此字符串中最后一次出现处的索引，从指定的索引开始反向搜索</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注：indexOf和lastIndexOf方法如果未找到都是返回-1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">"hellowworld"</span>;</span><br><span class="line">        <span class="keyword">boolean</span> b1 = str1.endsWith(<span class="string">"rld"</span>);</span><br><span class="line">        System.out.println(b1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = str1.startsWith(<span class="string">"He"</span>);</span><br><span class="line">        System.out.println(b2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b3 = str1.startsWith(<span class="string">"ll"</span>,<span class="number">2</span>);</span><br><span class="line">        System.out.println(b3);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        String str2 = <span class="string">"wor"</span>;</span><br><span class="line">        System.out.println(str1.contains(str2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">"lol"</span>));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line">        System.out.println(str1.indexOf(<span class="string">"lo"</span>,<span class="number">5</span>));<span class="comment">//-1</span></span><br><span class="line"></span><br><span class="line">        String str3 = <span class="string">"hellorworld"</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(str3.lastIndexOf(<span class="string">"or"</span>));<span class="comment">//7</span></span><br><span class="line">        System.out.println(str3.lastIndexOf(<span class="string">"or"</span>,<span class="number">6</span>));<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//什么情况下，indexOf(str)和lastIndexOf(str)返回值相同？</span></span><br><span class="line">        <span class="comment">//情况一：存在唯一的一个str。情况二：不存在str</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">int length()：返回字符串的长度： return value.length</span></span><br><span class="line"><span class="comment">char charAt(int index)： 返回某索引处的字符return value[index]</span></span><br><span class="line"><span class="comment">boolean isEmpty()：判断是否是空字符串：return value.length == 0</span></span><br><span class="line"><span class="comment">String toLowerCase()：使用默认语言环境，将 String 中的所有字符转换为小写</span></span><br><span class="line"><span class="comment">String toUpperCase()：使用默认语言环境，将 String 中的所有字符转换为大写</span></span><br><span class="line"><span class="comment">String trim()：返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line"><span class="comment">boolean equals(Object obj)：比较字符串的内容是否相同</span></span><br><span class="line"><span class="comment">boolean equalsIgnoreCase(String anotherString)：与equals方法类似，忽略大小写</span></span><br><span class="line"><span class="comment">String concat(String str)：将指定字符串连接到此字符串的结尾。 等价于用“+”</span></span><br><span class="line"><span class="comment">int compareTo(String anotherString)：比较两个字符串的大小</span></span><br><span class="line"><span class="comment">String substring(int beginIndex)：返回一个新的字符串，它是此字符串的从beginIndex开始截取到最后的一个子字符串。</span></span><br><span class="line"><span class="comment">String substring(int beginIndex, int endIndex) ：返回一个新字符串，它是此字符串从beginIndex开始截取到endIndex(不包含)的一个子字符串。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"HelloWorld"</span>;</span><br><span class="line">        System.out.println(s1.length());<span class="comment">//10</span></span><br><span class="line">        System.out.println(s1.charAt(<span class="number">0</span>));<span class="comment">//H</span></span><br><span class="line">        System.out.println(s1.charAt(<span class="number">9</span>));<span class="comment">//d</span></span><br><span class="line">        System.out.println(s1.isEmpty());<span class="comment">//false</span></span><br><span class="line">        <span class="comment">//s1 = "";</span></span><br><span class="line"><span class="comment">//        System.out.println(s1.isEmpty());//true</span></span><br><span class="line"></span><br><span class="line">        String s2 = s1.toLowerCase();</span><br><span class="line">        System.out.println(s1);<span class="comment">//HelloWorld, s1不可变的，仍然为原来的字符串</span></span><br><span class="line">        System.out.println(s2);<span class="comment">//helloworld,改成小写以后的字符串</span></span><br><span class="line"></span><br><span class="line">        String s3 = <span class="string">"   he  llo   world   "</span>;</span><br><span class="line">        String s4 = s3.trim();<span class="comment">//返回字符串的副本，忽略前导空白和尾部空白</span></span><br><span class="line">        System.out.println(<span class="string">"-----"</span> + s3 + <span class="string">"-----"</span>);<span class="comment">//-----   he  llo   world   -----</span></span><br><span class="line">        System.out.println(<span class="string">"-----"</span> + s4 + <span class="string">"-----"</span>);<span class="comment">//-----he  llo   world-----</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"HelloWorld"</span>;</span><br><span class="line">        String s2 = <span class="string">"helloworld"</span>;</span><br><span class="line">        System.out.println(s1.equals(s2));<span class="comment">//false</span></span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        String s3 = <span class="string">"abc"</span>;</span><br><span class="line">        String s4 = s3.concat(<span class="string">"def"</span>);</span><br><span class="line">        System.out.println(s4);<span class="comment">//abcdef</span></span><br><span class="line"></span><br><span class="line">        String s5 = <span class="string">"abc"</span>;</span><br><span class="line">        String s6 = <span class="keyword">new</span> String(<span class="string">"abe"</span>);</span><br><span class="line">        System.out.println(s5.compareTo(s6));<span class="comment">//-2: e-c=101-99 涉及到字符串排序</span></span><br><span class="line"></span><br><span class="line">        String s7 = <span class="string">"abcdefgh"</span>;</span><br><span class="line">        String s8 = s7.substring(<span class="number">2</span>);<span class="comment">//取子串</span></span><br><span class="line">        System.out.println(s7);<span class="comment">//abcdefgh</span></span><br><span class="line">        System.out.println(s8);<span class="comment">//cdefgh</span></span><br><span class="line"></span><br><span class="line">        String s9 = s7.substring(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">        System.out.println(s9);<span class="comment">//cde</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-4-String与八大包装类型的转换"><a href="#1-4-String与八大包装类型的转换" class="headerlink" title="1.4 String与八大包装类型的转换"></a>1.4 String与八大包装类型的转换</h2><p>这里我之前写过一篇文章讲述过这个问题，详情参考：<a href="https://www.bithachi.cn/posts/a852be86.html">八大基本数据类型对应的八大包装类（含对应面试题解析）</a></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200817225350.png" alt="image-20200817225350479"></p><h2 id="1-5-String-与字符数组转换"><a href="#1-5-String-与字符数组转换" class="headerlink" title="1.5 String 与字符数组转换"></a>1.5 String 与字符数组转换</h2><p><strong>字符数组 -&gt;字符串:</strong></p><ul><li>String 类的构造器：String(char[]) 和 和 String(char[] ，int offset ，int length) 分别用字符数组中的全部字符和部分字符创建字符串对象。</li></ul><p><strong>字符串 -&gt;字符 数组:</strong></p><ul><li>public char[] toCharArray()： 将字符串中的全部字符存放在一个字符数组中的方法。</li><li>public void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)： 提供了将指定索引范围内的字符串存放到数组中的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    String 与 char[]之间的转换</span></span><br><span class="line"><span class="comment">    String --&gt; char[]:调用String的toCharArray()</span></span><br><span class="line"><span class="comment">    char[] --&gt; String:调用String的构造器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1 = <span class="string">"abc123"</span>;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = str1.toCharArray();</span><br><span class="line">        System.out.println(Arrays.toString(charArray));<span class="comment">//[a, b, c, 1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">'h'</span>,<span class="string">'e'</span>,<span class="string">'l'</span>,<span class="string">'l'</span>,<span class="string">'o'</span>&#125;;</span><br><span class="line">        String str2 = <span class="keyword">new</span> String(arr);</span><br><span class="line">        System.out.println(str2);<span class="comment">//hello</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="1-6-String-与字节数组转换"><a href="#1-6-String-与字节数组转换" class="headerlink" title="1.6 String 与字节数组转换"></a>1.6 String 与字节数组转换</h2><p><strong>默认编码一般是Unicode</strong></p><p><strong>字节数组 -&gt;字符串:</strong></p><ul><li><p>String(byte[]) ：通过使用平台的默认字符集解码指定的 byte 数组，构造一个新的 String。</p></li><li><p>String(byte[] ，int offset ，int length) ： 用指定的字节数组的一部分，即从数组起始位置offset开始取length个字节构造一个字符串对象。</p><p><strong>字符串 -&gt;字节数组:</strong></p></li><li><p>public byte[] getBytes() ：使用平台的默认字符集将此 String 编码为byte 序列，并将结果存储到一个新的 byte 数组中。</p></li><li><p>public byte[] getBytes(String charsetName) ： 使用指定的字符集将此 String 编码到 byte 序列，并将结果存储到新的 byte 数组。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   String 与 byte[]之间的转换</span></span><br><span class="line"><span class="comment">   编码：String --&gt; byte[]:调用String的getBytes()</span></span><br><span class="line"><span class="comment">   解码：byte[] --&gt; String:调用String的构造器</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   编码：字符串 --&gt;字节  (看得懂 ---&gt;看不懂的二进制数据)</span></span><br><span class="line"><span class="comment">   解码：编码的逆过程，字节 --&gt; 字符串 （看不懂的二进制数据 ---&gt; 看得懂）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">   说明：解码时，要求解码使用的字符集必须与编码时使用的字符集一致，否则会出现乱码。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line">       String str1 = <span class="string">"abc123中国"</span>;</span><br><span class="line">       <span class="keyword">byte</span>[] bytes = str1.getBytes();<span class="comment">//使用默认的字符集，进行编码。</span></span><br><span class="line">       System.out.println(Arrays.toString(bytes));<span class="comment">//[97, 98, 99, 49, 50, 51, -28, -72, -83, -27, -101, -67]</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">byte</span>[] gbks = str1.getBytes(<span class="string">"gbk"</span>);<span class="comment">//使用gbk字符集进行编码。</span></span><br><span class="line">       System.out.println(Arrays.toString(gbks));<span class="comment">//[97, 98, 99, 49, 50, 51, -42, -48, -71, -6]</span></span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">"******************"</span>);</span><br><span class="line"></span><br><span class="line">       String str2 = <span class="keyword">new</span> String(bytes);<span class="comment">//使用默认的字符集，进行解码。</span></span><br><span class="line">       System.out.println(str2);<span class="comment">//abc123中国</span></span><br><span class="line"></span><br><span class="line">       String str3 = <span class="keyword">new</span> String(gbks);</span><br><span class="line">       <span class="comment">//出现乱码。原因：编码集和解码集不一致！</span></span><br><span class="line">       System.out.println(str3);<span class="comment">//abc123�й�</span></span><br><span class="line"></span><br><span class="line">       String str4 = <span class="keyword">new</span> String(gbks, <span class="string">"gbk"</span>);</span><br><span class="line">       <span class="comment">//没有出现乱码。原因：编码集和解码集一致！</span></span><br><span class="line">       System.out.println(str4); <span class="comment">//abc123中国</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="1-7-StringBuffer与StringBuilder类"><a href="#1-7-StringBuffer与StringBuilder类" class="headerlink" title="1.7 StringBuffer与StringBuilder类"></a>1.7 StringBuffer与StringBuilder类</h2><h3 id="1-7-1-StringBuffer与StringBuilder源码分析"><a href="#1-7-1-StringBuffer与StringBuilder源码分析" class="headerlink" title="1.7.1 StringBuffer与StringBuilder源码分析"></a>1.7.1 StringBuffer与StringBuilder源码分析</h3><p>StringBuilder 和 StringBuffer 非常类似，均代表<code>可变的字符序列</code> ，可以对<code>字符串内容进行增删改，不会产生新的对象</code>， 而且提供相关功能的方法基本也一样，很多方法与String相同。</p><p>他们的源码继承实现关系一样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuffer</span> <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span>&#123;...&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">CharSequence</span></span>&#123;...&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractStringBuilder</span> <span class="keyword">implements</span> <span class="title">Appendable</span>, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The value is used for character storage.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">char</span>[] value; <span class="comment">//没有final声明，可扩容</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The count is the number of characters used.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> count;<span class="comment">//记录有效字符个数</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">String</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span>, <span class="title">Comparable</span>&lt;<span class="title">String</span>&gt;, <span class="title">CharSequence</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** The value is used for character storage. */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">char</span> value[];  <span class="comment">//有final声明，不可扩容，只能新创建再指向新的地址内容</span></span><br></pre></td></tr></table></figure><p>StringBuilder和StringBuffer 类不同于String ，其对象必须使用构造器生成。他们都有以下4个构造 器，这里以StringBuffer 为例 ：</p><ul><li>StringBuffer() ：初始为容量为16 的字符串缓冲区</li><li>StringBuffer(int size) ：构造指定容量的字符串缓冲区</li><li>StringBuffer(String str) ：将内容初始化为指定字符串的内容</li><li>StringBuilder(CharSequence seq)：将内容初始化为指定的字符序列的内容</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820105823.png" alt="image-20200820105823847"></p><h3 id="1-7-2-StringBuffer和StringBuilder常用方法"><a href="#1-7-2-StringBuffer和StringBuilder常用方法" class="headerlink" title="1.7.2 StringBuffer和StringBuilder常用方法"></a>1.7.2 StringBuffer和StringBuilder常用方法</h3><ul><li>当append和insert时，如果原来value数组长度不够，可自动扩容。默认情况下，扩容为原来容量的2倍 + 2，同时将原有数组中的元素复制到新的数组中。</li><li>如上这些方法支持方法链操作，可以点好几次。</li><li>方法链的原理：</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820110914.png" alt="image-20200820110914360"></p><p><strong>StringBuffer和StringBuilder类的常用方法继承自AbstractStringBuilder，这里列举几个常用的方法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   StringBuffer的常用方法：</span></span><br><span class="line"><span class="comment">   StringBuffer append(xxx)：提供了很多的append()方法，用于进行字符串拼接</span></span><br><span class="line"><span class="comment">   StringBuffer delete(int start,int end)：删除指定位置的内容</span></span><br><span class="line"><span class="comment">   StringBuffer replace(int start, int end, String str)：把[start,end)位置替换为str</span></span><br><span class="line"><span class="comment">   StringBuffer insert(int offset, xxx)：在指定位置插入xxx</span></span><br><span class="line"><span class="comment">   StringBuffer reverse() ：把当前字符序列逆转</span></span><br><span class="line"><span class="comment">   public int indexOf(String str)</span></span><br><span class="line"><span class="comment">   public String substring(int start,int end):返回一个从start开始到end索引结束的左闭右开区间的子字符串</span></span><br><span class="line"><span class="comment">   public int length()</span></span><br><span class="line"><span class="comment">   public char charAt(int n )</span></span><br><span class="line"><span class="comment">   public void setCharAt(int n ,char ch)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">       总结：</span></span><br><span class="line"><span class="comment">       增：append(xxx)</span></span><br><span class="line"><span class="comment">       删：delete(int start,int end)</span></span><br><span class="line"><span class="comment">       改：setCharAt(int n ,char ch) / replace(int start, int end, String str)</span></span><br><span class="line"><span class="comment">       查：charAt(int n )</span></span><br><span class="line"><span class="comment">       插：insert(int offset, xxx)</span></span><br><span class="line"><span class="comment">       长度：length();</span></span><br><span class="line"><span class="comment">       *遍历：for() + charAt() / toString()</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">       StringBuffer s1 = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line">       s1.append(<span class="number">1</span>);<span class="comment">//增</span></span><br><span class="line">       s1.append(<span class="string">'2'</span>);</span><br><span class="line">       System.out.println(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        s1.delete(2,4);//删</span></span><br><span class="line"></span><br><span class="line">       s1.replace(<span class="number">2</span>,<span class="number">4</span>,<span class="string">"hello"</span>);<span class="comment">//改</span></span><br><span class="line">       System.out.println(s1);</span><br><span class="line"></span><br><span class="line">       s1.insert(<span class="number">2</span>,<span class="keyword">false</span>);<span class="comment">//插</span></span><br><span class="line">       System.out.println(s1);</span><br><span class="line"></span><br><span class="line">       s1.reverse();<span class="comment">//反转</span></span><br><span class="line">       System.out.println(s1);</span><br><span class="line"></span><br><span class="line">       String s2 = s1.substring(<span class="number">1</span>, <span class="number">3</span>);<span class="comment">//取子串</span></span><br><span class="line">       System.out.println(s1.length());</span><br><span class="line">       System.out.println(s2);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">abc12</span><br><span class="line">abhello2</span><br><span class="line">abfalsehello2</span><br><span class="line"><span class="number">2</span>olleheslafba</span><br><span class="line"><span class="number">13</span></span><br><span class="line">ol</span><br></pre></td></tr></table></figure><h3 id="1-7-3-举个例子"><a href="#1-7-3-举个例子" class="headerlink" title="1.7.3 举个例子"></a>1.7.3 举个例子</h3><p><strong>以下代码输出什么？我已经在注释后面打上了结果</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       StringBuffer sb12 = <span class="keyword">new</span> StringBuffer(<span class="string">"abc"</span>);</span><br><span class="line">       sb12.setCharAt(<span class="number">0</span>,<span class="string">'m'</span>);</span><br><span class="line">       System.out.println(sb12);<span class="comment">//mbc</span></span><br><span class="line"></span><br><span class="line">       StringBuffer sb2 = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">       System.out.println(sb2.length());<span class="comment">//0</span></span><br><span class="line"></span><br><span class="line">       String str = <span class="keyword">null</span>;</span><br><span class="line">       StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">       sb.append(str);</span><br><span class="line">       System.out.println(sb.length());<span class="comment">//4</span></span><br><span class="line">       System.out.println(sb);<span class="comment">//null</span></span><br><span class="line">       StringBuffer sb1 = <span class="keyword">new</span> StringBuffer(str);<span class="comment">//java.lang.NullPointerException</span></span><br><span class="line">       System.out.println(<span class="string">"123"</span>);</span><br><span class="line">       System.out.println(sb1);<span class="comment">//</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="1-8-对比-String-、StringBuffer-、StringBuilder"><a href="#1-8-对比-String-、StringBuffer-、StringBuilder" class="headerlink" title="1.8 对比 String 、StringBuffer 、StringBuilder"></a>1.8 对比 String 、StringBuffer 、StringBuilder</h2><ul><li><p>String(JDK1.0)：不可变字符序列</p></li><li><p>StringBuffer(JDK1.0)：可变字符序列、效率低、线程安全(很多方法由synchronized修饰)</p></li><li><p>StringBuilder(JDK 5.0)：可变字符序列、效率高、线程不安全</p></li></ul><p>注意：作为参数传递的话，方法内部String不会改变其值，StringBuffer和StringBuilder会改变其值。</p><p><strong>效率比较：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//初始设置</span></span><br><span class="line">        <span class="keyword">long</span> startTime = <span class="number">0L</span>;</span><br><span class="line">        <span class="keyword">long</span> endTime = <span class="number">0L</span>;</span><br><span class="line">        String text = <span class="string">""</span>;</span><br><span class="line">        StringBuffer buffer = <span class="keyword">new</span> StringBuffer(<span class="string">""</span>);</span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder(<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//开始对比</span></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100_0000</span>; i++) &#123;</span><br><span class="line">            buffer.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"StringBuffer的执行时间："</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100_0000</span>; i++) &#123;</span><br><span class="line">            builder.append(String.valueOf(i));</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"StringBuilder的执行时间："</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">        startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2_0000</span>; i++) &#123;</span><br><span class="line">            text = text + i;</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"String的执行时间："</span> + (endTime - startTime));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//百万级以内</span></span><br><span class="line">StringBuffer的执行时间：<span class="number">67</span></span><br><span class="line">StringBuilder的执行时间：<span class="number">54</span></span><br><span class="line">String的执行时间：<span class="number">1058</span></span><br><span class="line"><span class="comment">//千万级</span></span><br><span class="line">StringBuffer的执行时间：<span class="number">581</span></span><br><span class="line">StringBuilder的执行时间：<span class="number">603</span></span><br><span class="line">String的执行时间：<span class="number">926</span></span><br></pre></td></tr></table></figure><p>StringBuilder和StringBuffer的效率有时候不相上下，但是一定比String快。</p><p>千万级StringBuffer快一点，百万级以下StringBuilder快一点，视具体操作系统和硬件而定叭。</p><h1 id="2-日期时间相关类"><a href="#2-日期时间相关类" class="headerlink" title="2. 日期时间相关类"></a>2. 日期时间相关类</h1><p><strong>计算世界时间的主要标准有：</strong></p><ul><li>UTC(Coordinated Universal Time)</li><li>GMT(Greenwich Mean Time)</li><li>CST(Central Standard Time)</li></ul><h2 id="2-1-JDK8之前处理日期时间相关类"><a href="#2-1-JDK8之前处理日期时间相关类" class="headerlink" title="2.1 JDK8之前处理日期时间相关类"></a>2.1 JDK8之前处理日期时间相关类</h2><h3 id="2-1-1-java-lang-System类"><a href="#2-1-1-java-lang-System类" class="headerlink" title="2.1.1 java.lang.System类"></a>2.1.1 java.lang.System类</h3><p>System类提供的public static long currentTimeMillis()用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。<br><strong>此方法适于计算时间差。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差。</span></span><br><span class="line">        <span class="comment">//称为时间戳</span></span><br><span class="line">        System.out.println(time);<span class="comment">//1597895477010</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-2-java-util-Date类"><a href="#2-1-2-java-util-Date类" class="headerlink" title="2.1.2 java.util.Date类"></a>2.1.2 java.util.Date类</h3><p>表示特定的瞬间，精确到毫秒</p><p><strong>构造器 ：</strong></p><ul><li><p>Date()： 使用无参构造器创建的对象可以获取本地当前时间。</p></li><li><p>Date(long date)：创建指定毫秒数的Date对象</p><p><strong>常用方法：</strong></p></li><li><p>getTime():返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</p></li><li><p>toString():把此 Date 对象转换为以下形式的 String： dow mon dd  hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Sun, Mon, Tue, Wed, Thu, Fri, Sat)，zzz是时间标准。</p></li><li><p>其它很多方法都过时了。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="comment">//说明一点：public class java.sql.Date extends java.util.Date &#123;...&#125;</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器一：Date()：创建一个对应当前时间的Date对象</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date1.toString());<span class="comment">//Thu Aug 20 11:37:14 CST 2020</span></span><br><span class="line"></span><br><span class="line">        System.out.println(date1.getTime());<span class="comment">//1597894634029</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器二：创建指定毫秒数的Date对象</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">1597894634029L</span>);</span><br><span class="line">        System.out.println(date2.toString());<span class="comment">//Thu Aug 20 11:37:14 CST 2020</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建java.sql.Date对象</span></span><br><span class="line">        java.sql.Date date3 = <span class="keyword">new</span> java.sql.Date(<span class="number">1597894634029L</span>);</span><br><span class="line">        System.out.println(date3);<span class="comment">//2020-08-20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如何将java.util.Date对象转换为java.sql.Date对象</span></span><br><span class="line">        <span class="comment">//情况一：</span></span><br><span class="line">        Date date4 = <span class="keyword">new</span> java.sql.Date(<span class="number">1597894634029L</span>);</span><br><span class="line">        java.sql.Date date5 = (java.sql.Date) date4;</span><br><span class="line">        System.out.println(date5);<span class="comment">//2020-08-20</span></span><br><span class="line">        <span class="comment">//情况二：</span></span><br><span class="line">        Date date6 = <span class="keyword">new</span> Date();</span><br><span class="line">        java.sql.Date date7 = <span class="keyword">new</span> java.sql.Date(date6.getTime());</span><br><span class="line">        System.out.println(date6);<span class="comment">//Thu Aug 20 11:53:29 CST 2020</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-1-3-java-text-SimpleDateFormat类"><a href="#2-1-3-java-text-SimpleDateFormat类" class="headerlink" title="2.1.3 java.text.SimpleDateFormat类"></a>2.1.3 java.text.SimpleDateFormat类</h3><ul><li>Date类的API不易于国际化，大部分被废弃了，java.text.SimpleDateFormat类是一个不与语言环境有关的方式来格式化和解析日期的具体类。</li><li>它允许进行格式化：<code>日期 -&gt;文本、 解析：文本 -&gt; 日期</code></li><li>格式化：<br>  SimpleDateFormat() ：默认的模式和语言环境创建对象<br>  public SimpleDateFormat(String pattern) ：该构造方法可以用参数pattern指定的格式创建一个对象，该对象调用：public String format(Date date) ：方法格式化时间对象date</li><li>解析：<br>  public Date parse(String source)：  从给定字符串的开始解析文本，以生成一个日期。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleDateFormat</span><span class="params">()</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//实例化SimpleDateFormat:使用默认的构造器</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//格式化：日期 ---&gt;字符串</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);<span class="comment">//Thu Aug 20 11:57:11 CST 2020</span></span><br><span class="line"></span><br><span class="line">        String format = sdf.format(date);</span><br><span class="line">        System.out.println(format);<span class="comment">//20-8-20 上午11:57</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析：格式化的逆过程，字符串 ---&gt; 日期</span></span><br><span class="line">        String str = <span class="string">"20-8-20 上午11:57"</span>;</span><br><span class="line">        Date date1 = sdf.parse(str);</span><br><span class="line">        System.out.println(date1);<span class="comment">//Thu Aug 20 11:57:00 CST 2020</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  按照指定的方式格式化和解析：调用带参的构造器   *************/</span></span><br><span class="line"><span class="comment">//        SimpleDateFormat sdf1 = new SimpleDateFormat("yyyyy.MMMMM.dd GGG hh:mm aaa");</span></span><br><span class="line">        SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String format1 = sdf1.format(date);</span><br><span class="line">        System.out.println(format1);<span class="comment">//2020-08-20 12:02:39</span></span><br><span class="line">        <span class="comment">//解析:要求字符串必须是符合SimpleDateFormat识别的格式(通过构造器参数体现),</span></span><br><span class="line">        <span class="comment">//否则，抛异常</span></span><br><span class="line">        Date date2 = sdf1.parse(<span class="string">"2020-08-20 12:02:39"</span>);</span><br><span class="line">        System.out.println(date2);<span class="comment">//Thu Aug 20 00:02:39 CST 2020</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820124457.png" alt="image-20200820124457055"></p><h3 id="2-1-4-java-util-Calendar-日历-类"><a href="#2-1-4-java-util-Calendar-日历-类" class="headerlink" title="2.1.4 java.util.Calendar( 日历)类"></a>2.1.4 java.util.Calendar( 日历)类</h3><p> Calendar是一个抽象基类，主用用于完成<code>日期字段之间相互操作</code>的功能。</p><ul><li>获取Calendar实例的方法<br>  使用<code>Calendar.getInstance()</code>方法<br> 调用它的<code>子类GregorianCalendar的构造器</code>。 </li><li>一个Calendar的实例是系统时间的抽象表示，通过<code>get(int field)</code>方法来取得想要的时间信息。比如YEAR、MONTH、DAY_OF_WEEK、HOUR_OF_DAY 、MINUTE、SECOND<br> public void set(int field,int value)<br> public void add(int field,int amount)<br> public final Date getTime()<br> public final void setTime(Date date)</li><li>注意:<br> 获取月份时：一月是0，二月是1，以此类推，12月是11<br> 获取星期时：周日是1，周二是2 ， 。。。。周六是7</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCalendar</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.实例化</span></span><br><span class="line">    <span class="comment">//方式一：创建其子类（GregorianCalendar）的对象</span></span><br><span class="line">    <span class="comment">//方式二：调用其静态方法getInstance()</span></span><br><span class="line">    Calendar calendar = Calendar.getInstance();</span><br><span class="line">    System.out.println(calendar.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.常用方法</span></span><br><span class="line">    <span class="comment">//get()  测试时间：2020.8.20 星期四</span></span><br><span class="line">    <span class="keyword">int</span> days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    System.out.println(calendar.get(Calendar.YEAR));<span class="comment">//2020</span></span><br><span class="line">    System.out.println(calendar.get(Calendar.MONTH));<span class="comment">//7</span></span><br><span class="line">    System.out.println(calendar.get(Calendar.DAY_OF_YEAR));<span class="comment">//233</span></span><br><span class="line">    System.out.println(calendar.get(Calendar.DAY_OF_MONTH));<span class="comment">//20</span></span><br><span class="line">    System.out.println(calendar.get(Calendar.DAY_OF_WEEK));<span class="comment">//5</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">    <span class="comment">//set()</span></span><br><span class="line">    <span class="comment">//calendar可变性</span></span><br><span class="line">    calendar.set(Calendar.DAY_OF_MONTH,<span class="number">22</span>);<span class="comment">//当前日期设置为22号</span></span><br><span class="line">    days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    System.out.println(days);<span class="comment">//22</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//add()</span></span><br><span class="line">    calendar.add(Calendar.DAY_OF_MONTH,-<span class="number">3</span>);<span class="comment">//当前日期减3天</span></span><br><span class="line">    days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    System.out.println(days);<span class="comment">//19</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//getTime():日历类---&gt; Date</span></span><br><span class="line">    Date date = calendar.getTime();</span><br><span class="line">    System.out.println(date);<span class="comment">//Wed Aug 19 16:42:41 CST 2020</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//setTime():Date ---&gt; 日历类</span></span><br><span class="line">    Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">    calendar.setTime(date1);</span><br><span class="line">    days = calendar.get(Calendar.DAY_OF_MONTH);</span><br><span class="line">    System.out.println(days);<span class="comment">//20</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-JDK8中新处理日期时间相关类"><a href="#2-2-JDK8中新处理日期时间相关类" class="headerlink" title="2.2 JDK8中新处理日期时间相关类"></a>2.2 JDK8中新处理日期时间相关类</h2><h3 id="2-2-1-新日期间时间API-出现的背景"><a href="#2-2-1-新日期间时间API-出现的背景" class="headerlink" title="2.2.1 新日期间时间API 出现的背景"></a>2.2.1 新日期间时间API 出现的背景</h3><p>如果我们可以跟别人说：“我们在1502643933071见面，别晚了！”那么就再简单不过了。但是我们希望时间与昼夜和四季有关，于是事情就变复杂了。JDK 1.0中包含了一个java.util.Date类，但是它的大多数方法已经在JDK 1.1引入Calendar类之后被弃用了。而Calendar并不比Date好多少。它们面临的问题是：<br><code>可变性</code>：像日期和时间这样的类应该是不可变的。<br><code>偏移性</code>：Date中的年份是从1900开始的，而月份都从0开始。<br><code>格式化</code>：格式化只对Date有用，Calendar则不行。此外，它们也不是线程安全的；不能处理闰秒等。</p><p>总结：对日期和时间的操作一直是Java程序员最痛苦的地方之一。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDate</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="comment">//偏移量，Date中的年份是从1900开始的，而月份都从0开始</span></span><br><span class="line">      Date date1 = <span class="keyword">new</span> Date(<span class="number">2020</span> - <span class="number">1900</span>,<span class="number">9</span> - <span class="number">1</span>,<span class="number">8</span>);</span><br><span class="line">      Date date2 = <span class="keyword">new</span> Date(<span class="number">2020</span>,<span class="number">9</span> ,<span class="number">8</span>);</span><br><span class="line">      System.out.println(date1);<span class="comment">//Tue Sep 08 00:00:00 CST 2020</span></span><br><span class="line">      System.out.println(date2);<span class="comment">//Fri Oct 08 00:00:00 CST 3920</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-新时间日期API"><a href="#2-2-2-新时间日期API" class="headerlink" title="2.2.2 新时间日期API"></a>2.2.2 新时间日期API</h3><blockquote><p>新时间日期API添加了如下包：</p><p>java.time – 包含值对象的基础包<br>java.time.chrono – 提供对不同的日历系统的访问<br>java.time.format – 格式化和解析时间和日期<br>java.time.temporal – 包括底层框架和扩展特性<br>java.time.zone – 包含时区支持的类</p></blockquote><ul><li>第三次引入的API是成功的，并且Java 8中引入的java.time API 已经纠正了过去的缺陷，将来很长一段时间内它都会为我们服务。</li><li>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。</li><li>新的<code>java.time</code>中包含了：<ul><li>所有关于本地日期（LocalDate）类</li><li>本地时间（LocalTime）类</li><li>本地日期时间（LocalDateTime）类</li><li>时区（ZonedDateTime）类</li><li>持续时间（Duration）类。</li></ul></li><li>历史悠久的 Date 类新增了 toInstant() 方法，用于把 Date 转换成新的表示形式。</li><li>这些新增的本地化时间日期 API 大大简化了日期时间和本地化的管理。</li></ul><h3 id="2-2-3-LocalDate-、LocalTime-、LocalDateTime"><a href="#2-2-3-LocalDate-、LocalTime-、LocalDateTime" class="headerlink" title="2.2.3  LocalDate 、LocalTime 、LocalDateTime"></a>2.2.3  LocalDate 、LocalTime 、LocalDateTime</h3><ul><li>LocalDate、LocalTime、LocalDateTime 类是其中较重要的几个类，它们的实例是<code>不可变的对象</code>，分别表示使用 ISO-8601日历系统的日期、时间、日期和时间。它们提供了简单的本地日期或时间，并不包含当前的时间信息，也不包含与时区相关的信息。</li><li>LocalDate代表IOS格式（yyyy-MM-dd）的日期,可以存储 生日、纪念日等日期。</li><li>LocalTime表示一个时间，而不是日期。</li><li>LocalDateTime是用来表示日期和时间的，这是一个最常用的类之一。</li></ul><p>注：ISO-8601日历系统是国际标准化组织制定的现代公民的日期和时间的表示法，也就是公历。</p><p>LocalTime一些常用方法：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820170520.png" alt="image-20200820170519978"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//now():获取当前的日期、时间、日期+时间</span></span><br><span class="line">        LocalDate localDate = LocalDate.now();</span><br><span class="line">        LocalTime localTime = LocalTime.now();</span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">        System.out.println(localDate);<span class="comment">//2020-08-20</span></span><br><span class="line">        System.out.println(localTime);<span class="comment">//17:19:15.882</span></span><br><span class="line">        System.out.println(localDateTime);<span class="comment">//2020-08-20T17:19:15.882</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//of():设置指定的年、月、日、时、分、秒。没有偏移量</span></span><br><span class="line">        LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2020</span>, <span class="number">10</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">43</span>);</span><br><span class="line">        LocalDate localDate2=LocalDate.of(<span class="number">2020</span>,<span class="number">8</span>,<span class="number">20</span>);</span><br><span class="line">        System.out.println(localDateTime1);<span class="comment">//2020-10-06T13:23:43</span></span><br><span class="line">        System.out.println(localDate2);<span class="comment">//2020-08-20</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getXxx()：获取相关的属性  2020-08-20T17:19:15.882</span></span><br><span class="line">        System.out.println(localDateTime.getYear());<span class="comment">//2020</span></span><br><span class="line">        System.out.println(localDateTime.getMonth());<span class="comment">//AUGUST</span></span><br><span class="line">        System.out.println(localDateTime.getDayOfYear());<span class="comment">//233</span></span><br><span class="line">        System.out.println(localDateTime.getDayOfMonth());<span class="comment">//20</span></span><br><span class="line">        System.out.println(localDateTime.getDayOfWeek());<span class="comment">//THURSDAY</span></span><br><span class="line">        System.out.println(localDateTime.getMonthValue());<span class="comment">//8</span></span><br><span class="line">        System.out.println(localDateTime.getHour());<span class="comment">//17</span></span><br><span class="line">        System.out.println(localDateTime.getMinute());<span class="comment">//19</span></span><br><span class="line">        System.out.println(localDateTime.getSecond());<span class="comment">//15</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//体现不可变性</span></span><br><span class="line">        <span class="comment">//withXxx():设置相关的属性</span></span><br><span class="line">        LocalDate localDate1 = localDate.withDayOfMonth(<span class="number">22</span>);</span><br><span class="line">        System.out.println(localDate);<span class="comment">//2020-08-20</span></span><br><span class="line">        System.out.println(localDate1);<span class="comment">//2020-08-20</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        LocalDateTime localDateTime2 = localDateTime.withHour(<span class="number">4</span>);</span><br><span class="line">        System.out.println(localDateTime);<span class="comment">//2020-08-20T17:19:15.882</span></span><br><span class="line">        System.out.println(localDateTime2);<span class="comment">//2020-08-20T04:19:15.882</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不可变性</span></span><br><span class="line">        <span class="comment">//plusxxx：向当前对象添加几天、几周、几个月、几年、几小时</span></span><br><span class="line">        LocalDateTime localDateTime3 = localDateTime.plusMonths(<span class="number">3</span>);</span><br><span class="line">        System.out.println(localDateTime);<span class="comment">//2020-08-20T17:19:15.882</span></span><br><span class="line">        System.out.println(localDateTime3);<span class="comment">//2020-11-20T17:19:15.882</span></span><br><span class="line">        System.out.println(<span class="string">"---------------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//不可变性</span></span><br><span class="line">        <span class="comment">//minusXXX：从当前对象减去几月、几周、几天、几年、几小时</span></span><br><span class="line">        LocalDateTime localDateTime4 = localDateTime.minusDays(<span class="number">6</span>);</span><br><span class="line">        System.out.println(localDateTime);<span class="comment">//2020-08-20T17:19:15.882</span></span><br><span class="line">        System.out.println(localDateTime4);<span class="comment">//2020-08-14T17:19:15.882</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-瞬时：Instant"><a href="#2-2-4-瞬时：Instant" class="headerlink" title="2.2.4 瞬时：Instant"></a>2.2.4 瞬时：Instant</h3><ul><li>Instant：<code>时间线上的一个瞬时点</code>。 这可能被用来记录应用程序中的事件时间戳。</li><li>在处理时间和日期的时候，我们通常会想到年,月,日,时,分,秒。然而，这只是时间的一个模型，是面向人类的。第二种通用模型是面向机器的，或者说是连续的。在此模型中，时间线中的一个点表示为一个很大的数，这有利于计算机处理。在UNIX中，这个数从1970年开始，以秒为的单位；同样的，在Java中，也是从1970年开始，但以毫秒为单位。</li><li>java.time包通过值类型Instant提供机器视图，不提供处理人类意义上的时间单位。Instant表示时间线上的一点，而不需要任何上下文信息，例如，时区。概念上讲，它只是简单的表示自1970年1月1日0时0分0秒（UTC）开始的秒数。因为java.time包是基于纳秒计算的，所以Instant的精度可以达到纳秒级。</li><li>(1 ns = 10 ^-9^ s) ，1秒 = 1000毫秒 =10^6^微秒=10^9^纳秒</li><li><code>时间戳是指格林威治时间1970 年01 月01 日00 时00 分00 秒( 北京时间1970 年01 月01日 日08 时00 分00 秒) 起至现在的总秒数</code></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820181616.png" alt="image-20200820181615961"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820181546.png" alt="image-20200820181546657"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//now():获取本初子午线对应的标准时间</span></span><br><span class="line">    Instant instant = Instant.now();</span><br><span class="line">    System.out.println(instant);<span class="comment">//2020-08-20T10:35:04.996Z</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加时间的偏移量</span></span><br><span class="line">    OffsetDateTime offsetDateTime = instant.atOffset(ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">    System.out.println(offsetDateTime);<span class="comment">//2020-08-20T18:35:04.996+08:00</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//toEpochMilli():获取自1970年1月1日0时0分0秒（UTC）开始的毫秒数  ---&gt; Date类的getTime()</span></span><br><span class="line">    <span class="keyword">long</span> milli = instant.toEpochMilli();</span><br><span class="line">    System.out.println(milli);<span class="comment">//1597919704996L</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//ofEpochMilli():通过给定的毫秒数，获取Instant实例  --&gt;Date(long millis)</span></span><br><span class="line">    Instant instant1 = Instant.ofEpochMilli(<span class="number">1597919704996L</span>);</span><br><span class="line">    System.out.println(instant1);<span class="comment">//2020-08-20T10:35:04.996Z</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-5-java-time-format-DateTimeFormatter-类—格式化与解析日期-或-时间"><a href="#2-2-5-java-time-format-DateTimeFormatter-类—格式化与解析日期-或-时间" class="headerlink" title="2.2.5  java.time.format.DateTimeFormatter 类—格式化与解析日期 或 时间"></a>2.2.5  java.time.format.DateTimeFormatter 类—格式化与解析日期 或 时间</h3><ul><li>java.time.format.DateTimeFormatter 类：该类提供了三种格式化方法：<ol><li>预定义的标准格式。如：ISO_LOCAL_DATE_TIME; ISO_LOCAL_DATE; ISO_LOCAL_TIME</li><li>本地化相关的格式。如：ofLocalizedDateTime(FormatStyle.LONG)</li><li>自定义的格式。如：ofPattern(“yyyy-MM-dd hh:mm:ss”)</li></ol></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820183814.png" alt="image-20200820183814620"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/************   方式一：预定义的标准格式。  ************/</span></span><br><span class="line"><span class="comment">//        如：ISO_LOCAL_DATE_TIME;ISO_LOCAL_DATE;ISO_LOCAL_TIME</span></span><br><span class="line">        DateTimeFormatter formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME;</span><br><span class="line">        <span class="comment">//格式化:日期--&gt;字符串</span></span><br><span class="line">        LocalDateTime localDateTime = LocalDateTime.now();</span><br><span class="line">        String str1 = formatter.format(localDateTime);</span><br><span class="line"></span><br><span class="line">        System.out.println(localDateTime);<span class="comment">//2020-08-20T18:50:25.850</span></span><br><span class="line">        System.out.println(str1);<span class="comment">//2020-08-20T18:50:25.85</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析：字符串 --&gt;日期</span></span><br><span class="line">        TemporalAccessor parse = formatter.parse(<span class="string">"2020-08-20T18:39:23.152"</span>);</span><br><span class="line">        System.out.println(parse);<span class="comment">//&#123;&#125;,ISO resolved to 2020-08-20T18:39:23.152</span></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">/************  方式二： 本地化相关的格式。如：ofLocalizedDateTime()  ************/</span></span><br><span class="line"><span class="comment">//        FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT :适用于LocalDateTime</span></span><br><span class="line">        DateTimeFormatter formatter1 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.LONG);</span><br><span class="line">        DateTimeFormatter formatter11 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);</span><br><span class="line">        DateTimeFormatter formatter111 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str11 = formatter1.format(localDateTime);</span><br><span class="line">        String str111 = formatter11.format(localDateTime);</span><br><span class="line">        String str1111 = formatter111.format(localDateTime);</span><br><span class="line">        System.out.println(str11);<span class="comment">//2020年8月20日 下午06时50分25秒</span></span><br><span class="line">        System.out.println(str111);<span class="comment">//2020-8-20 18:50:25</span></span><br><span class="line">        System.out.println(str1111);<span class="comment">//20-8-20 下午6:50</span></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      本地化相关的格式。如：ofLocalizedDate()</span></span><br><span class="line"><span class="comment">//      FormatStyle.FULL / FormatStyle.LONG / FormatStyle.MEDIUM / FormatStyle.SHORT : 适用于LocalDate</span></span><br><span class="line">        DateTimeFormatter formatter2 = DateTimeFormatter.ofLocalizedDate(FormatStyle.FULL);</span><br><span class="line">        DateTimeFormatter formatter22 = DateTimeFormatter.ofLocalizedDate(FormatStyle.LONG);</span><br><span class="line">        DateTimeFormatter formatter222 = DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM);</span><br><span class="line">        DateTimeFormatter formatter2222 = DateTimeFormatter.ofLocalizedDate(FormatStyle.SHORT);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str3 = formatter2.format(LocalDate.now());</span><br><span class="line">        String str33 = formatter22.format(LocalDate.now());</span><br><span class="line">        String str333 = formatter222.format(LocalDate.now());</span><br><span class="line">        String str3333 = formatter2222.format(LocalDate.now());</span><br><span class="line">        System.out.println(str3);<span class="comment">//2020年8月20日 星期四</span></span><br><span class="line">        System.out.println(str33);<span class="comment">//2020年8月20日</span></span><br><span class="line">        System.out.println(str333);<span class="comment">//2020-8-20</span></span><br><span class="line">        System.out.println(str3333);<span class="comment">//20-8-20</span></span><br><span class="line">        System.out.println(<span class="string">"---------------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  方式三：自定义的格式。如：ofPattern("yyyy-MM-dd hh:mm:ss")  ************/</span></span><br><span class="line">        DateTimeFormatter formatter3 = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        <span class="comment">//格式化</span></span><br><span class="line">        String str4 = formatter3.format(LocalDateTime.now());</span><br><span class="line">        System.out.println(str4);<span class="comment">//2020-08-20 06:50:25</span></span><br><span class="line">        <span class="comment">//解析</span></span><br><span class="line">        TemporalAccessor accessor = formatter3.parse(<span class="string">"2020-08-20 06:49:07"</span>);</span><br><span class="line">        System.out.println(accessor);<span class="comment">//&#123;MicroOfSecond=0, MilliOfSecond=0, NanoOfSecond=0, SecondOfMinute=7, MinuteOfHour=49, HourOfAmPm=6&#125;,ISO resolved to 2020-08-20</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-6-其它API"><a href="#2-2-6-其它API" class="headerlink" title="2.2.6 其它API"></a>2.2.6 其它API</h3><ul><li><p>ZoneId ：该类中包含了所有的时区信息，一个时区的ID，如 Europe/Paris</p></li><li><p>ZonedDateTime ：一个在ISO-8601日历系统时区的日期时间，如 2007-12-03T10:15:30+01:00 Europe/Paris。</p><p>其中每个时区都对应着ID，地区ID都为“{区域}/{城市}”的格式，例如：Asia/Shanghai等</p></li><li><p>Clock： ：使用时区提供对当前即时、日期和时间的访问的时钟。</p></li><li><p>持续时间：Duration，用于计算两个“时间”间隔</p></li><li><p>日期间隔：Period，用于计算两个“日期”间隔</p></li><li><p>TemporalAdjuster : 时间校正器。有时我们可能需要获取例如：将日期调整到“下一个工作日”等操作。</p></li><li><p>TemporalAdjusters : 该类通过静态方法(firstDayOfXxx()/lastDayOfXxx()/nextXxx())提供了大量的常用TemporalAdjuster 的实现。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/************  ZoneId:类中包含了所有的时区信息  ************/</span></span><br><span class="line">    <span class="comment">// ZoneId的getAvailableZoneIds():获取所有的ZoneId</span></span><br><span class="line">    Set&lt;String&gt; zoneIds = ZoneId.getAvailableZoneIds();</span><br><span class="line">    System.out.println(zoneIds.size());</span><br><span class="line">    <span class="keyword">for</span> (String s : zoneIds) &#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"----------------------------"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ZoneId的of():获取指定时区的时间</span></span><br><span class="line">    LocalDateTime localDateTime = LocalDateTime.now(ZoneId.of(<span class="string">"Asia/Tokyo"</span>));</span><br><span class="line">    System.out.println(localDateTime);<span class="comment">//2020-08-20T20:05:04.625</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/************ ZonedDateTime:带时区的日期时间   ************/</span></span><br><span class="line">    <span class="comment">// ZonedDateTime的now():获取本时区的ZonedDateTime对象</span></span><br><span class="line">    ZonedDateTime zonedDateTime = ZonedDateTime.now();</span><br><span class="line">    System.out.println(zonedDateTime);<span class="comment">//2020-08-20T19:05:04.631+08:00[Asia/Shanghai]</span></span><br><span class="line">    <span class="comment">// ZonedDateTime的now(ZoneId id):获取指定时区的ZonedDateTime对象</span></span><br><span class="line">    ZonedDateTime zonedDateTime1 = ZonedDateTime.now(ZoneId.of(<span class="string">"Asia/Tokyo"</span>));</span><br><span class="line">    System.out.println(zonedDateTime1);<span class="comment">//2020-08-20T20:05:04.631+09:00[Asia/Tokyo]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/************  Duration:用于计算两个“时间”间隔，以秒和纳秒为基准  ************/</span></span><br><span class="line">    LocalTime localTime = LocalTime.now();</span><br><span class="line">    LocalTime localTime1 = LocalTime.of(<span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">    <span class="comment">//between():静态方法，返回Duration对象，表示两个时间的间隔</span></span><br><span class="line">    Duration duration = Duration.between(localTime1, localTime);</span><br><span class="line">    System.out.println(duration);<span class="comment">//PT3H41M32.631S</span></span><br><span class="line">    System.out.println(duration.getSeconds());<span class="comment">//13292</span></span><br><span class="line">    System.out.println(duration.getNano());<span class="comment">//631000000</span></span><br><span class="line">    LocalDateTime localDateTime2 = LocalDateTime.of(<span class="number">2016</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">    LocalDateTime localDateTime1 = LocalDateTime.of(<span class="number">2017</span>, <span class="number">6</span>, <span class="number">12</span>, <span class="number">15</span>, <span class="number">23</span>, <span class="number">32</span>);</span><br><span class="line">    Duration duration1 = Duration.between(localDateTime1, localDateTime2);</span><br><span class="line">    System.out.println(duration1.toDays());<span class="comment">//-365</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/************  Period:用于计算两个“日期”间隔，以年、月、日衡量  ************/</span></span><br><span class="line">    LocalDate localDate = LocalDate.now();</span><br><span class="line">    LocalDate localDate1 = LocalDate.of(<span class="number">2028</span>, <span class="number">3</span>, <span class="number">18</span>);</span><br><span class="line">    Period period = Period.between(localDate, localDate1);</span><br><span class="line">    System.out.println(period);<span class="comment">//P7Y6M27D</span></span><br><span class="line">    System.out.println(period.getYears());<span class="comment">//7</span></span><br><span class="line">    System.out.println(period.getMonths());<span class="comment">//6</span></span><br><span class="line">    System.out.println(period.getDays());<span class="comment">//27</span></span><br><span class="line">    Period period1 = period.withYears(<span class="number">2</span>);</span><br><span class="line">    System.out.println(period1);<span class="comment">//P2Y6M27D</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">/************  TemporalAdjuster:时间校正器  ************/</span></span><br><span class="line">    <span class="comment">// 获取当前日期的下一个周日是哪天？</span></span><br><span class="line">    TemporalAdjuster temporalAdjuster = TemporalAdjusters.next(DayOfWeek.SUNDAY);</span><br><span class="line">    LocalDateTime localDateTime = LocalDateTime.now().with(temporalAdjuster);</span><br><span class="line">    System.out.println(localDateTime);<span class="comment">//2020-08-23T19:09:26.712</span></span><br><span class="line">    <span class="comment">// 获取下一个工作日是哪天？</span></span><br><span class="line">    LocalDate localDate = LocalDate.now().with(<span class="keyword">new</span> TemporalAdjuster() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Temporal <span class="title">adjustInto</span><span class="params">(Temporal temporal)</span> </span>&#123;</span><br><span class="line">            LocalDate date = (LocalDate) temporal;</span><br><span class="line">            <span class="keyword">if</span> (date.getDayOfWeek().equals(DayOfWeek.FRIDAY)) &#123;</span><br><span class="line">                <span class="keyword">return</span> date.plusDays(<span class="number">3</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (date.getDayOfWeek().equals(DayOfWeek.SATURDAY)) &#123;</span><br><span class="line">                <span class="keyword">return</span> date.plusDays(<span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> date.plusDays(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    System.out.println(<span class="string">"下一个工作日是："</span> + localDate);<span class="comment">//下一个工作日是：2020-08-21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-7-新日期与传统日期处理的转换"><a href="#2-2-7-新日期与传统日期处理的转换" class="headerlink" title="2.2.7 新日期与传统日期处理的转换"></a>2.2.7 新日期与传统日期处理的转换</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820191037.png" alt="image-20200820191037056"></p><h1 id="3-比较器"><a href="#3-比较器" class="headerlink" title="3. 比较器"></a>3. 比较器</h1><ul><li>在Java中经常会涉及到对象数组的排序问题，那么就涉及到对象之间的比较问题。</li><li>Java实现对象排序的方式有两种：<ol><li><code>自然排序：java.lang.Comparable</code></li><li><code>定制排序：java.util.Comparator</code></li></ol></li></ul><h2 id="3-1-自然排序：java-lang-Comparable"><a href="#3-1-自然排序：java-lang-Comparable" class="headerlink" title="3.1 自然排序：java.lang.Comparable"></a>3.1 自然排序：java.lang.Comparable</h2><ul><li><p>Comparable接口强行对实现它的每个类的对象进行整体排序。这种排序被称为类的自然排序。</p></li><li><p>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过 <code>compareTo(Object obj)</code> 方法的返回值来比较大小。</p><p>如果当前对象this大于形参对象obj，则返回正整数，</p><p>如果当前对象this小于形参对象obj，则返回负整数，</p><p>如果当前对象this等于形参对象obj，则返回零。</p></li><li><p>实现Comparable接口的对象列表（和数组）可以通过 Collections.sort 或Arrays.sort进行自动排序。实现此接口的对象可以用作有序映射中的键或有序集合中的元素，无需指定比较器。</p></li><li><p>对于类 C 的每一个 e1 和 e2 来说，当且仅当 e1.compareTo(e2) == 0 与e1.equals(e2) 具有相同的 boolean 值时，类 C 的自然排序才叫做与 equals一致。建议（虽然不是必需的）最好使自然排序与 equals 一致。</p></li><li><p>Comparable 的典型实现：(<code>默认都是从小到大排列的</code>)</p><ul><li>String：按照字符串中字符的Unicode值进行比较</li><li>Character：按照字符的Unicode值来进行比较</li><li>数值类型对应的包装类以及BigInteger、BigDecimal：按照它们对应的数值大小进行比较</li><li>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</li><li>Date、Time等：后面的日期时间比前面的日期时间大</li></ul></li></ul><p>举个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"AA"</span>,<span class="string">"CC"</span>,<span class="string">"KK"</span>,<span class="string">"MM"</span>,<span class="string">"GG"</span>,<span class="string">"JJ"</span>,<span class="string">"DD"</span>&#125;;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[AA, CC, DD, GG, JJ, KK, MM]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Goods[] arr = <span class="keyword">new</span> Goods[<span class="number">5</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> Goods(<span class="string">"lenovoMouse"</span>,<span class="number">34</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> Goods(<span class="string">"dellMouse"</span>,<span class="number">43</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> Goods(<span class="string">"xiaomiMouse"</span>,<span class="number">12</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> Goods(<span class="string">"huaweiMouse"</span>,<span class="number">65</span>);</span><br><span class="line">        arr[<span class="number">4</span>] = <span class="keyword">new</span> Goods(<span class="string">"microsoftMouse"</span>,<span class="number">43</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        <span class="keyword">for</span>(Goods v: arr)&#123;</span><br><span class="line">            System.out.println(v.toString());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">implements</span>  <span class="title">Comparable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">(String name, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Goods&#123;"</span> +</span><br><span class="line">                    <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", price="</span> + price +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//指明商品比较大小的方式:按照价格从低到高排序,再按照产品名称从高到低排序</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Goods)&#123;</span><br><span class="line">                Goods goods = (Goods)o;</span><br><span class="line">                <span class="comment">//方式一：</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">this</span>.price &gt; goods.price)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">this</span>.price &lt; goods.price)&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> -<span class="keyword">this</span>.name.compareTo(goods.name);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//方式二：调用相应数据类型的重写方法</span></span><br><span class="line"><span class="comment">//           return Double.compare(this.price,goods.price);</span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"传入的数据类型不一致！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//test2()</span><br><span class="line">Goods&#123;name='xiaomiMouse', price=<span class="number">12</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='lenovoMouse', price=<span class="number">34</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='microsoftMouse', price=<span class="number">43</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='dellMouse', price=<span class="number">43</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='huaweiMouse', price=<span class="number">65</span>.<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="3-2-定制排序：java-util-Comparator"><a href="#3-2-定制排序：java-util-Comparator" class="headerlink" title="3.2 定制排序：java.util.Comparator"></a>3.2 定制排序：java.util.Comparator</h2><ul><li><p><code>当元素的类型没有实现java.lang.Comparable 接口而又不方便修改代码，了 或者实现了java.lang.Comparable 接口的排序规则不适合当前的操作，那么可以考虑使用 Comparator 的对象来 排序</code>，强行对多个对象进行整体排序的比较。</p></li><li><p>重写compare(Object o1,Object o2)方法，比较o1和o2的大小： </p><p>如果方法返示 回正整数，则表示o1 大于o2 ；</p><p>如果返回0 ，表示相等；</p><p>返回负整数，表示o1 小于o2。</p></li><li><p>可以将 Comparator 传递给 sort 方法（如 Collections.sort 或 Arrays.sort），从而允许在排序顺序上实现精确控制。</p></li><li><p>还可以使用 Comparator 来控制某些数据结构（如有序 set或有序映射）的顺序，或者为那些没有自然顺序的对象 collection 提供排序。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"AA"</span>, <span class="string">"CC"</span>, <span class="string">"KK"</span>, <span class="string">"MM"</span>, <span class="string">"GG"</span>, <span class="string">"JJ"</span>, <span class="string">"DD"</span>&#125;;</span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="comment">//按照字符串从大到小的顺序排列</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> String &amp;&amp; o2 <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                    String s1 = (String) o1;</span><br><span class="line">                    String s2 = (String) o2;</span><br><span class="line">                    <span class="keyword">return</span> -s1.compareTo(s2);</span><br><span class="line">                &#125;</span><br><span class="line"><span class="comment">//                return 0;</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的数据类型不一致"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(arr));<span class="comment">//[MM, KK, JJ, GG, DD, CC, AA]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Goods[] arr = <span class="keyword">new</span> Goods[<span class="number">6</span>];</span><br><span class="line">        arr[<span class="number">0</span>] = <span class="keyword">new</span> Goods(<span class="string">"lenovoMouse"</span>, <span class="number">34</span>);</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="keyword">new</span> Goods(<span class="string">"dellMouse"</span>, <span class="number">43</span>);</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="keyword">new</span> Goods(<span class="string">"xiaomiMouse"</span>, <span class="number">12</span>);</span><br><span class="line">        arr[<span class="number">3</span>] = <span class="keyword">new</span> Goods(<span class="string">"huaweiMouse"</span>, <span class="number">65</span>);</span><br><span class="line">        arr[<span class="number">4</span>] = <span class="keyword">new</span> Goods(<span class="string">"huaweiMouse"</span>, <span class="number">224</span>);</span><br><span class="line">        arr[<span class="number">5</span>] = <span class="keyword">new</span> Goods(<span class="string">"microsoftMouse"</span>, <span class="number">43</span>);</span><br><span class="line"></span><br><span class="line">        Arrays.sort(arr, <span class="keyword">new</span> Comparator() &#123;</span><br><span class="line">            <span class="comment">//指明商品比较大小的方式:按照产品名称从低到高排序,再按照价格从高到低排序</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Object o1, Object o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (o1 <span class="keyword">instanceof</span> Goods &amp;&amp; o2 <span class="keyword">instanceof</span> Goods) &#123;</span><br><span class="line">                    Goods g1 = (Goods) o1;</span><br><span class="line">                    Goods g2 = (Goods) o2;</span><br><span class="line">                    <span class="keyword">if</span> (g1.getName().equals(g2.getName())) &#123;</span><br><span class="line">                        <span class="keyword">return</span> -Double.compare(g1.getPrice(), g2.getPrice());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> g1.getName().compareTo(g2.getName());<span class="comment">//调用String的compareTo()方法</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"输入的数据类型不一致"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">for</span> (Goods v : arr) &#123;</span><br><span class="line">            System.out.println(v.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Goods</span> <span class="keyword">implements</span> <span class="title">Comparable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String name;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Goods</span><span class="params">(String name, <span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.price = price;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Goods&#123;"</span> +</span><br><span class="line">                    <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                    <span class="string">", price="</span> + price +</span><br><span class="line">                    <span class="string">'&#125;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Goods&#123;name='dellMouse', price=<span class="number">43</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='huaweiMouse', price=<span class="number">224</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='huaweiMouse', price=<span class="number">65</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='lenovoMouse', price=<span class="number">34</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='microsoftMouse', price=<span class="number">43</span>.<span class="number">0</span>&#125;</span><br><span class="line">Goods&#123;name='xiaomiMouse', price=<span class="number">12</span>.<span class="number">0</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="4-System类"><a href="#4-System类" class="headerlink" title="4. System类"></a>4. System类</h1><ul><li><p>System类代表系统，系统级的很多属性和控制方法都放置在该类的内部。该类位于java.lang包。</p></li><li><p>由于该类的构造器是private的，所以无法创建该类的对象，也就是无法实例化该类。其内部的成员变量和成员方法都是static的，所以也可以很方便的进行调用。</p></li><li><p>成员变量：System类内部包含<code>in、out和err</code>三个成员变量，分别代表<code>标准输入流(键盘输入)，标准输出流(显示器)和标准错误输出流(显示器)。</code></p></li><li><p>成员方法<br><code>native long currentTimeMillis()：</code>该方法的作用是返回当前的计算机时间，时间的表达格式为当前计算机时<br>间和GMT时间(格林威治时间)1970年1月1号0时0分0秒所差的毫秒数。<br> <code>void exit(int status):</code>该方法的作用是退出程序。其中status的值为0代表正常退出，非零代表异常退出。 使用该方法可以在图形界面编程中实现程序的退出功能等。</p><p><code>void gc()：</code> 该方法的作用是请求系统进行垃圾回收。至于系统是否立刻回收，则取决于系统中垃圾回收算法的实现以及系统执行时的情况。<br><code>String getProperty(String key)：</code> 该方法的作用是获得系统中属性名为key的属性对应的值。系统中常见的属性名以及属性的作用如下表所示：</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200820202750.png" alt="image-20200820202750543"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String javaVersion = System.getProperty(<span class="string">"java.version"</span>);</span><br><span class="line">    System.out.println(<span class="string">"java的version:"</span> + javaVersion);</span><br><span class="line"></span><br><span class="line">    String javaHome = System.getProperty(<span class="string">"java.home"</span>);</span><br><span class="line">    System.out.println(<span class="string">"java的home:"</span> + javaHome);</span><br><span class="line"></span><br><span class="line">    String osName = System.getProperty(<span class="string">"os.name"</span>);</span><br><span class="line">    System.out.println(<span class="string">"os的name:"</span> + osName);</span><br><span class="line"></span><br><span class="line">    String osVersion = System.getProperty(<span class="string">"os.version"</span>);</span><br><span class="line">    System.out.println(<span class="string">"os的version:"</span> + osVersion);</span><br><span class="line"></span><br><span class="line">    String userName = System.getProperty(<span class="string">"user.name"</span>);</span><br><span class="line">    System.out.println(<span class="string">"user的name:"</span> + userName);</span><br><span class="line"></span><br><span class="line">    String userHome = System.getProperty(<span class="string">"user.home"</span>);</span><br><span class="line">    System.out.println(<span class="string">"user的home:"</span> + userHome);</span><br><span class="line"></span><br><span class="line">    String userDir = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">    System.out.println(<span class="string">"user的dir:"</span> + userDir);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java的version:<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>_161</span><br><span class="line">java的home:C:\Program Files\Java\jdk1.<span class="number">8</span>.<span class="number">0</span>_161\jre</span><br><span class="line">os的name:Windows <span class="number">10</span></span><br><span class="line">os的version:<span class="number">10</span>.<span class="number">0</span></span><br><span class="line">user的name:君莫笑</span><br><span class="line">user的home:C:\Users\君莫笑</span><br><span class="line">user的<span class="built_in">dir</span>:D:\Project\IDEA\Java\JavaSE</span><br></pre></td></tr></table></figure><h1 id="5-Math类"><a href="#5-Math类" class="headerlink" title="5. Math类"></a>5. Math类</h1><p><strong>java.lang.Math 提供了一系列静态方法用于 科学 计算。其 方法的参数和返回为 值类型一般为double 型。</strong><br>abs 绝对值<br>acos,asin,atan,cos,sin,tan 三角函数<br>sqrt 平方根<br>pow(double a,doble b) a 的b 次幂<br>log 自然对数<br>exp e 为底指数<br>max(double a,double b)<br>min(double a,double b)<br>random() 返回0.0 到1.0 的随机数<br>long round(double a) double 型数据a 转换为long 型（四舍五入）<br>toDegrees(double angrad) 弧度—&gt; 角度<br>toRadians(double angdeg) 角度—&gt;弧度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"90 度的正弦值："</span> + Math.sin(Math.PI/<span class="number">2</span>));</span><br><span class="line">    System.out.println(<span class="string">"0度的余弦值："</span> + Math.cos(<span class="number">0</span>));</span><br><span class="line">    System.out.println(<span class="string">"60度的正切值："</span> + Math.tan(Math.PI/<span class="number">3</span>));</span><br><span class="line">    System.out.println(<span class="string">"1的反正切值： "</span> + Math.atan(<span class="number">1</span>));</span><br><span class="line">    System.out.println(<span class="string">"π/2的角度值："</span> + Math.toDegrees(Math.PI/<span class="number">2</span>));</span><br><span class="line">    System.out.println(Math.PI);<span class="comment">//3.141592653589793</span></span><br><span class="line">    System.out.println(Math.E);<span class="comment">//2.718281828459045</span></span><br><span class="line">    System.out.println(Math.pow(<span class="number">2</span>,<span class="number">3</span>));<span class="comment">//8.0</span></span><br><span class="line">    System.out.println(Math.max(<span class="number">10</span>,<span class="number">20</span>));<span class="comment">//20</span></span><br><span class="line">    System.out.println(Math.abs(-<span class="number">100.111</span>));<span class="comment">//100.111</span></span><br><span class="line">    System.out.println(Math.exp(<span class="number">1</span>));<span class="comment">//2.718281828459045</span></span><br><span class="line">    System.out.println(Math.log(Math.E));<span class="comment">//1.0</span></span><br><span class="line">    System.out.println(Math.sqrt(<span class="number">4</span>));<span class="comment">//2.0</span></span><br><span class="line">    System.out.println(Math.random());<span class="comment">//0.09531601577541382</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-BigInteger与BigDecimal"><a href="#6-BigInteger与BigDecimal" class="headerlink" title="6. BigInteger与BigDecimal"></a>6. BigInteger与BigDecimal</h1><h2 id="6-1-BigInteger"><a href="#6-1-BigInteger" class="headerlink" title="6.1  BigInteger"></a>6.1  BigInteger</h2><ul><li><p>Integer类作为int的包装类，能存储的最大整型值为2 ^31^ -1（有一位是符号位），Long类也是有限的，最大为2 ^63^ -1。如果要表示再大的整数，不管是基本数据类型还是他们的包装类都无能为力，更不用说进行运算了。</p></li><li><p>java.math包的<code>BigInteger 可以表示不可变的任意精度的整数</code>。BigInteger 提供所有 Java 的基本整数操作符的对应物，并提供 java.lang.Math 的所有相关方法。另外，BigInteger 还提供以下运算：模算术、GCD 计算、质数测试、素数生成、位操作以及一些其他操作。</p></li><li><p>构造器：</p><p> BigInteger(String val)：根据字符串构建BigInteger对象</p></li></ul><p><strong>常用方法：</strong></p><ul><li>public BigInteger abs()：返回此 BigInteger 的绝对值的 BigInteger。</li><li>BigInteger add(BigInteger val) ：返回其值为 (this + val) 的 BigInteger</li><li>BigInteger subtract(BigInteger val) ：返回其值为 (this - val) 的 BigInteger</li><li>BigInteger multiply(BigInteger val) ：返回其值为 (this * val) 的 BigInteger</li><li>BigInteger divide(BigInteger val) ：返回其值为 (this / val) 的 BigInteger。整数相除只保留整数部分。</li><li>BigInteger remainder(BigInteger val) ：返回其值为 (this % val) 的 BigInteger。</li><li>BigInteger[] divideAndRemainder(BigInteger val)：返回包含 (this / val) 后跟(this % val) 的两个 BigInteger 的数组。</li><li>BigInteger pow(int exponent) ：返回其值为 (this exponent ) 的 BigInteger。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BigInteger a = <span class="keyword">new</span> BigInteger(<span class="string">"66666666666666666666666666666666666666666666666666666666666666"</span>);</span><br><span class="line">    BigInteger b = <span class="keyword">new</span> BigInteger(<span class="string">"2222222222222222222222222222222222222222222222"</span>);</span><br><span class="line">    System.out.println(<span class="string">"a.add(b)= "</span>+a.add(b));</span><br><span class="line">    System.out.println(<span class="string">"a.subtract(b)= "</span>+a.subtract(b));</span><br><span class="line">    System.out.println(<span class="string">"a.multiply(b)= "</span>+a.multiply(b));</span><br><span class="line">    System.out.println(<span class="string">"a.divide(b)= "</span>+a.divide(b));</span><br><span class="line">    System.out.println(<span class="string">"a.max(b)= "</span>+a.max(b));</span><br><span class="line">    System.out.println(<span class="string">"a.remainder(b)= "</span>+a.remainder(b));</span><br><span class="line">    System.out.println(<span class="string">"a.pow(2)= "</span>+a.pow(<span class="number">2</span>));</span><br><span class="line">    BigInteger c = <span class="keyword">new</span> BigInteger(<span class="string">"-1111111111111111111111111111111111111111"</span>);</span><br><span class="line">    System.out.println(<span class="string">"c.abs()= "</span>+c.abs());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a.add(b)= <span class="number">66666666666666668888888888888888888888888888888888888888888888</span></span><br><span class="line">a.subtract(b)= <span class="number">66666666666666664444444444444444444444444444444444444444444444</span></span><br><span class="line">a.multiply(b)= <span class="number">148148148148148148148148148148148148148148148133333333333333331851851851851851851851851851851851851851851852</span></span><br><span class="line">a.divide(b)= <span class="number">30000000000000000</span></span><br><span class="line">a.max(b)= <span class="number">66666666666666666666666666666666666666666666666666666666666666</span></span><br><span class="line">a.remainder(b)= <span class="number">6666666666666666</span></span><br><span class="line">a.pow(<span class="number">2</span>)= <span class="number">4444444444444444444444444444444444444444444444444444444444444355555555555555555555555555555555555555555555555555555555555556</span></span><br><span class="line">c.abs()= <span class="number">1111111111111111111111111111111111111111</span></span><br></pre></td></tr></table></figure><h2 id="6-2-BigDecimal"><a href="#6-2-BigDecimal" class="headerlink" title="6.2 BigDecimal"></a>6.2 BigDecimal</h2><ul><li>一般的Float类和Double类可以用来做科学计算或工程计算，但在商业计算中， 要求数字精度比较高，故用到<code>java.math.BigDecimal 类 。</code></li><li><code>BigDecimal类支持不可变的、任意精度的有符号十进制定点数。</code></li><li>构造器<br>public BigDecimal(double val)<br>  public BigDecimal(String val)</li><li>常用方法<br>public BigDecimal add(BigDecimal augend)<br> public BigDecimal subtract(BigDecimal subtrahend)<br> public BigDecimal multiply(BigDecimal multiplicand)<br> public BigDecimal divide(BigDecimal divisor, int scale, int roundingMode)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BigDecimal a = <span class="keyword">new</span> BigDecimal(<span class="string">"6666666666666666666666666666666.2222222222222222222222222222222222222222"</span>);</span><br><span class="line">    BigDecimal b = <span class="keyword">new</span> BigDecimal(<span class="string">"222222222222222222222222222222222.1111111111111111111111111111111111111"</span>);</span><br><span class="line">    System.out.println(<span class="string">"a.add(b)= "</span>+a.add(b));</span><br><span class="line">    System.out.println(<span class="string">"a.subtract(b)= "</span>+a.subtract(b));</span><br><span class="line">    System.out.println(<span class="string">"a.multiply(b)= "</span>+a.multiply(b));</span><br><span class="line">    <span class="comment">//取小数点后100位，并四舍五入</span></span><br><span class="line">    System.out.println(<span class="string">"a.divide(b)= "</span>+a.divide(b,<span class="number">100</span>,BigDecimal.ROUND_HALF_UP));</span><br><span class="line">    System.out.println(<span class="string">"a.max(b)= "</span>+a.max(b));</span><br><span class="line">    System.out.println(<span class="string">"a.remainder(b)= "</span>+a.remainder(b));</span><br><span class="line">    System.out.println(<span class="string">"a.pow(2)= "</span>+a.pow(<span class="number">2</span>));</span><br><span class="line">    BigDecimal c = <span class="keyword">new</span> BigDecimal(<span class="string">"-1111111111111111111111111111111111.111111111111111111111111111111111111111"</span>);</span><br><span class="line">    System.out.println(<span class="string">"c.abs()= "</span>+c.abs());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a.add(b)= <span class="number">228888888888888888888888888888888</span>.<span class="number">3333333333333333333333333333333333333222</span></span><br><span class="line">a.subtract(b)= -<span class="number">215555555555555555555555555555555</span>.<span class="number">8888888888888888888888888888888888888778</span></span><br><span class="line">a.multiply(b)= <span class="number">1481481481481481481481481481481381975308641975308641975308641975</span>.<span class="number">35802461234567901234567901234567901235061975308641975308641975308641975308642</span></span><br><span class="line">a.divide(b)= <span class="number">0</span>.<span class="number">0299999999999999999999999999999980149999999999999999999999999999990075013999999999999999999999999995</span></span><br><span class="line">a.max(b)= <span class="number">222222222222222222222222222222222</span>.<span class="number">1111111111111111111111111111111111111</span></span><br><span class="line">a.remainder(b)= <span class="number">6666666666666666666666666666666</span>.<span class="number">2222222222222222222222222222222222222222</span></span><br><span class="line">a.pow(<span class="number">2</span>)= <span class="number">44444444444444444444444444444438518518518518518518518518518518</span>.<span class="number">71604938241975308641975308641975308641977283950617283950617283950617283950617284</span></span><br><span class="line">c.abs()= <span class="number">1111111111111111111111111111111111</span>.<span class="number">111111111111111111111111111111111111111</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> StringBuffer </tag>
            
            <tag> StringBuilder </tag>
            
            <tag> System </tag>
            
            <tag> Date </tag>
            
            <tag> Calendar </tag>
            
            <tag> SimpleDateFormat </tag>
            
            <tag> LocalDate </tag>
            
            <tag> LocalTime </tag>
            
            <tag> LocalDateTime </tag>
            
            <tag> Instant </tag>
            
            <tag> DateTimeFormatter </tag>
            
            <tag> Comparable </tag>
            
            <tag> Comparator </tag>
            
            <tag> Math </tag>
            
            <tag> BigInteger </tag>
            
            <tag> BigDecimal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>入门：Java多线程的生命周期、创建、使用、同步与通信</title>
      <link href="/posts/b9904a01.html"/>
      <url>/posts/b9904a01.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-多线程相关基本概念"><a href="#1-多线程相关基本概念" class="headerlink" title="1. 多线程相关基本概念"></a>1. 多线程相关基本概念</h1><p><strong>在学习多线程编程之前，先大致回顾一下操作系统有关线程相关的知识点。以便于更好的理解多线程编程。</strong></p><h2 id="1-1-程序-进程-线程"><a href="#1-1-程序-进程-线程" class="headerlink" title="1.1 程序-进程-线程"></a>1.1 程序-进程-线程</h2><ul><li><code>程序(program)</code>是为完成特定任务、用某种语言编写的一组<code>指令的集合</code>。即指一段<code>静态的代码</code>，静态对象。</li><li><code>进程(process)</code>是程序的一次执行过程，或是<code>正在运行的一个程序</code>。是一个动态的过程：有它自身的产生、存在和消亡的过程。——生命周期<ul><li>如：运行中的QQ，运行中的MP3播放器</li><li>程序是静态的，进程是动态的</li><li><code>进程作为资源分配的单位</code>，系统在运行时会为每个进程分配不同的内存区域</li></ul></li><li><code>线程(thread)</code>，进程可进一步细化为线程，是<code>一个程序内部的一条执行路径</code>。<ul><li>若一个进程同一时间 <code>并行</code>执行多个线程，就是支持多线程的</li><li><code>线程作为调度和执行的单位，每个线程拥有独立的运行栈和程序计数器(pc)</code>，线程切换的开销小</li><li>一个进程中的多个线程共享相同的内存单元/内存地址空间-&gt;它们从同一堆中分配对象，可以访问相同的变量和对象。这就使得线程间通信更简便、高效。但<code>多个线程操作共享的系统资源可能就会带来安全的隐患</code>。</li></ul></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200815120503.png" alt="image-20200815120503247"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200815120536.png" alt="image-20200815120536622"></p><h2 id="1-2-线程的分类"><a href="#1-2-线程的分类" class="headerlink" title="1.2 线程的分类"></a>1.2 线程的分类</h2><p>在Java中有两类线程：<code>User Thread(用户线程)</code>、<code>Daemon Thread(守护线程)</code></p><p>用个比较通俗的比如，任何一个守护线程都是整个JVM中所有非守护线程的保姆：</p><p>只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。</p><p>Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)，它就是一个很称职的守护者。</p><p>User和Daemon两者几乎没有区别，唯一的不同之处就在于虚拟机的离开：如果 User Thread已经全部退出运行了，只剩下Daemon Thread存在了，虚拟机也就退出了。 因为没有了被守护者，Daemon也就没有工作可做了，也就没有继续运行程序的必要了。</p><p>通过在start()方法前调用<code>thread.setDaemon(true)</code>可以把一个用户线程变 成一个守护线程。</p><blockquote><p>参考：<a href="https://blog.csdn.net/shimiso/article/details/8964414?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-4.channel_param" target="_blank" rel="noopener">线程的分类</a></p></blockquote><h2 id="1-3-线程的优先级"><a href="#1-3-线程的优先级" class="headerlink" title="1.3 线程的优先级"></a>1.3 线程的优先级</h2><p>Java中线程优先级可以指定，范围是1~10。但是并不是所有的操作系统都支持10级优先级的划分（比如有些操作系统只支持3级划分：低，中，高），Java只是给操作系统一个优先级的<strong>参考值</strong>，线程最终<strong>在操作系统的优先级</strong>是多少还是由操作系统决定。</p><p>线程的执行顺序由调度程序来决定，线程的优先级会在线程被调用之前设定。</p><p>Java源码中3种预定义的优先级：</p><ul><li>MAX_PRIORITY ：10</li><li>MIN _PRIORITY ：1</li><li>NORM_PRIORITY ：5 //默认的线程优先级为5</li></ul><p>线程创建时继承父线程的优先级。</p><p>通常情况下，高优先级的线程将会比低优先级的线程有<strong>更高的几率</strong>得到执行。我们使用方法<code>Thread</code>类的<code>setPriority()</code>实例方法来设定线程的优先级。<code>getPriority()</code> 返回线程优先级。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread a = <span class="keyword">new</span> Thread();</span><br><span class="line">        System.out.println(<span class="string">"我是默认线程优先级："</span>+a.getPriority());</span><br><span class="line">        Thread b = <span class="keyword">new</span> Thread();</span><br><span class="line">        b.setPriority(<span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">"我是设置过的线程优先级："</span>+b.getPriority());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我是默认线程优先级：<span class="number">5</span></span><br><span class="line">我是设置过的线程优先级：<span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="1-4-单核与多核CPU"><a href="#1-4-单核与多核CPU" class="headerlink" title="1.4 单核与多核CPU"></a>1.4 单核与多核CPU</h2><ul><li>单核CPU，其实是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务。例如：虽然有多车道，但是收费站只有一个工作人员在收费，只有收了费才能通过，那么CPU就好比收费人员。如果有某个人不想交钱，那么收费人员可以把他“挂起”（晾着他，等他想通了，准备好了钱，再去收费）。但是因为CPU时间单元特别短，因此感觉不出来。</li><li>如果是多核的话，就相当于多条车道，多个收费站台，可以同时执行多个收费任务，能更好的发挥多线程的效率。（现在的服务器都是多核的）</li><li>一个Java应用程序java.exe，至少有三个线程：main()主线程，gc()垃圾回收线程，异常处理线程。当然如果发生异常，会影响主线程。</li></ul><h2 id="1-5-并行与并发"><a href="#1-5-并行与并发" class="headerlink" title="1.5 并行与并发"></a>1.5 并行与并发</h2><ul><li>并行：多个CPU同时执行多个任务。<code>同一时刻</code>执行多个任务。</li><li>并发：一个CPU(采用时间片)同时执行多个任务。<code>同一时间段内</code>执行多个任务。</li></ul><h2 id="1-6-使用多线程的优点"><a href="#1-6-使用多线程的优点" class="headerlink" title="1.6 使用多线程的优点"></a>1.6 使用多线程的优点</h2><p>背景 ： 以单核CPU为例，只使用单个线程先后完成多个任务（调用多个方法），肯定比用多个线程来完成用的时间更短（因为异步性，线程的切换需要时间），为何仍需多线程呢？</p><p><strong>多线程程序的优点：</strong></p><ol><li>提高应用程序的响应。对图形化界面更有意义，可增强用户体验。比如音乐播放器可以同时放音乐，也可以同时搜索浏览其它歌曲信息。</li><li>提高计算机系统CPU的利用率，程序不必按顺序执行，可以多个线程同时安排任务执行，让CPU不空闲。</li><li>改善程序结构。将既长又复杂的进程分为多个线程，独立运行，利于理解和修改。</li></ol><h2 id="1-7-何时使用多线程？"><a href="#1-7-何时使用多线程？" class="headerlink" title="1.7  何时使用多线程？"></a>1.7  何时使用多线程？</h2><ul><li>程序需要同时执行两个或多个任务。比如刚刚提到的音乐播放器的使用体验。</li><li>程序需要实现一些需要等待的任务时，如用户输入、文件读写操作、网络操作、搜索等。比如浏览网页文章时的图片加载，可能不是一次性从上到下加载完，而是多线程加载，文字和图片分两个线程加载，整体内容会显示出来，图片没加载完的先以默认图片形式呈现。</li><li>需要一些后台运行的程序时。比如java程序里面的main线程执行的同时可能有垃圾，那么GC垃圾回收线程就负责main线程运行时边回收垃圾。</li></ul><blockquote><p>关于进程线程的相关更多了解，可参考：<a href="https://blog.csdn.net/weixin_43914604/article/details/104415990" target="_blank" rel="noopener">进程与线程</a>，文章部分图片如下：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200815122437.png" alt="image-20200815122437338"></p></blockquote><h1 id="2-线程的生命周期"><a href="#2-线程的生命周期" class="headerlink" title="2.线程的生命周期"></a>2.线程的生命周期</h1><p>JDK 中用Thread.State 类定义了 线程的几种状态：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Thread.State 源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> State &#123;</span><br><span class="line">    NEW, <span class="comment">//新创建</span></span><br><span class="line">    RUNNABLE,<span class="comment">//可运行</span></span><br><span class="line">    BLOCKED,<span class="comment">//被阻塞</span></span><br><span class="line">    WAITING,<span class="comment">//等待</span></span><br><span class="line">    TIMED_WAITING,<span class="comment">//计时等待</span></span><br><span class="line">    TERMINATED;<span class="comment">//被终止</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NEW：处于NEW状态的线程此时尚未启动。这里的尚未启动指的是还没调用Thread实例的start()方法。</p><p>RUNNABLE：调用start()方法，线程进入可运行状态。一个处于可运行状态的线程可能正在运行也可能没有运行，这取决于操作系统分配给线程的运行时间。Java线程的<strong>RUNNABLE</strong>状态其实是包括了传统操作系统线程的<strong>ready</strong>和<strong>running</strong>两个状态的。</p><p>BLOCKED：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态。处于BLOCKED状态的线程正等待锁的释放以进入同步区。</p><p>WAITING：等待状态。处于等待状态的线程变成RUNNABLE状态需要其他线程唤醒。</p><p>TIMED_WAITING：超时等待状态。线程等待一个具体的时间，时间到后会被自动唤醒。</p><p>TERMINATED：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200816102640.jpg" alt="java线程状态切换"></p><h1 id="3-线程的创建和使用"><a href="#3-线程的创建和使用" class="headerlink" title="3. 线程的创建和使用"></a>3. 线程的创建和使用</h1><p><strong>上面我们已经大致回顾了多线程相关的操作系统基本概念，接下来正式开始学习如何在Java应用程序中创建和使用多线程。</strong></p><p>JDK1.5之前创建新执行线程有两种方法：</p><ul><li>继承Thread类的方式</li><li>实现Runnable接口的方式</li></ul><p>JDK5.0 新增线程创建方式：</p><ul><li>实现Callable 接口</li><li>使用线程池</li></ul><h2 id="3-1-继承Thread类"><a href="#3-1-继承Thread类" class="headerlink" title="3.1  继承Thread类"></a>3.1  继承Thread类</h2><p><strong>我们先看看Thread中的一些常用方法：</strong></p><ul><li><p>void start(): 启动线程，并执行对象的run()方法</p></li><li><p>run(): 线程在被调度时执行的操作</p></li><li><p>String getName(): 返回线程的名称</p></li><li><p>void setName(String name):设置该线程名称</p></li><li><p>static Thread currentThread(): 返回当前线程。在Thread子类中就是this，通常用于主线程和Runnable实现类</p></li><li><p>static void yield()： ： 线程让步</p><p>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</p><p>若队列中没有同优先级的线程，忽略此方法</p></li><li><p>join() ： 当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止</p><p>低优先级的线程也可以获得执行</p></li><li><p>static void sleep(long millis) ：(指定时间:毫秒)</p><p>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。</p><p>抛出InterruptedException异常</p></li><li><p>stop(): 强制线程生命期结束，不推荐使用，方法已过时。</p></li><li><p>boolean isAlive()： ： 返回boolean，判断线程是否还活着。</p></li></ul><p>注意点：</p><ol><li>如果自己手动调用run()方法，那么就只是普通方法，没有启动多线程模式。</li><li>run()方法由JVM调用，什么时候调用，执行的过程控制都有操作系统的CPU调度决定。</li><li>想要启动多线程，必须调用start方法。</li><li>一个线程对象只能调用一次start()方法启动，如果重复调用了，则将抛出以上的异常“IllegalThreadStateException”。</li></ol><p><strong>下面举个例子用Thread实现线程的创建：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//1. 创建一个继承于Thread类的子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//2. 重写Thread类的run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":  "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建Thread类的子类的对象</span></span><br><span class="line">        MyThread t1 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t1.setName(<span class="string">"线程一"</span>);</span><br><span class="line">        <span class="comment">//4.通过此对象调用start():JVM ①启动当前线程 ② 调用当前线程的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我们不能通过直接调用run()的方式启动线程。</span></span><br><span class="line">        <span class="comment">// 这样只是简单的调用一个方法，没有创建线程，这个run方法还是在main线程内执行</span></span><br><span class="line">        <span class="comment">//t1.run();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//再启动一个线程，遍历10以内的偶数。不可以还让已经start()的线程去执行。会报IllegalThreadStateException</span></span><br><span class="line">        <span class="comment">//t1.start();</span></span><br><span class="line">        <span class="comment">//我们需要重新创建一个线程的对象</span></span><br><span class="line">        MyThread t2 = <span class="keyword">new</span> MyThread();</span><br><span class="line">        t2.setName(<span class="string">"线程二"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如下操作仍然是在main线程中执行的。</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">"main线程"</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":  "</span> + i );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行顺序图：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200816105353.png" alt="image-20200816105350982"></p><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">main线程:  <span class="number">0</span></span><br><span class="line">线程二:  <span class="number">0</span></span><br><span class="line">线程一:  <span class="number">0</span></span><br><span class="line">线程二:  <span class="number">2</span></span><br><span class="line">main线程:  <span class="number">2</span></span><br><span class="line">线程二:  <span class="number">4</span></span><br><span class="line">线程一:  <span class="number">2</span></span><br><span class="line">线程二:  <span class="number">6</span></span><br><span class="line">main线程:  <span class="number">4</span></span><br><span class="line">线程二:  <span class="number">8</span></span><br><span class="line">线程一:  <span class="number">4</span></span><br><span class="line">线程二:  <span class="number">10</span></span><br><span class="line">main线程:  <span class="number">6</span></span><br><span class="line">线程二:  <span class="number">12</span></span><br><span class="line">线程一:  <span class="number">6</span></span><br><span class="line">线程二:  <span class="number">14</span></span><br><span class="line">main线程:  <span class="number">8</span></span><br><span class="line">main线程:  <span class="number">10</span></span><br><span class="line">main线程:  <span class="number">12</span></span><br><span class="line">线程二:  <span class="number">16</span></span><br><span class="line">线程一:  <span class="number">8</span></span><br><span class="line">线程二:  <span class="number">18</span></span><br><span class="line">main线程:  <span class="number">14</span></span><br><span class="line">线程一:  <span class="number">10</span></span><br><span class="line">main线程:  <span class="number">16</span></span><br><span class="line">main线程:  <span class="number">18</span></span><br><span class="line">线程一:  <span class="number">12</span></span><br><span class="line">线程一:  <span class="number">14</span></span><br><span class="line">线程一:  <span class="number">16</span></span><br><span class="line">线程一:  <span class="number">18</span></span><br></pre></td></tr></table></figure><h2 id="3-2-测试Thread的常用方法"><a href="#3-2-测试Thread的常用方法" class="headerlink" title="3.2 测试Thread的常用方法"></a>3.2 测试Thread的常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    sleep(<span class="number">10</span>);<span class="comment">//因为sleep方法声明了InterruptedException，所以得捕获异常</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//Thread.currentThread()返回当前线程。在Thread子类中就是this，通常用于主线程和Runnable实现类</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.getName() + <span class="string">"-"</span> + Thread.currentThread().getPriority() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">20</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程</span></span><br><span class="line">                <span class="comment">//也可能操作系统马上又让当前线程继续执行</span></span><br><span class="line">                yield();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloThread</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadMethodTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        HelloThread h1 = <span class="keyword">new</span> HelloThread(<span class="string">"Thread：1"</span>);</span><br><span class="line"></span><br><span class="line">        h1.setName(<span class="string">"线程一"</span>);</span><br><span class="line">        <span class="comment">//设置分线程的优先级</span></span><br><span class="line">        h1.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        h1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给主线程命名</span></span><br><span class="line">        Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line">        System.out.println(h1.isAlive());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"-"</span> + Thread.currentThread().getPriority() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//当某个程序执行流中调用其他线程的 join() 方法时，</span></span><br><span class="line">                    <span class="comment">// 调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止</span></span><br><span class="line">                    h1.join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(h1.isAlive());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">true</span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">0</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">2</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">4</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">6</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">8</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">10</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">12</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">14</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">16</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">18</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">20</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">0</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">2</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">4</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">6</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">8</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">10</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">12</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">14</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">16</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">18</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">20</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">22</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">24</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">26</span></span><br><span class="line">线程一-<span class="number">10</span>: <span class="number">28</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">22</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">24</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">26</span></span><br><span class="line">主线程-<span class="number">5</span>: <span class="number">28</span></span><br><span class="line">false</span><br></pre></td></tr></table></figure><h2 id="3-3-实现Runnable接口"><a href="#3-3-实现Runnable接口" class="headerlink" title="3.3  实现Runnable接口"></a>3.3  实现Runnable接口</h2><p>1) 定义子类，实现Runnable接口。<br>2) 子类中重写Runnable接口中的run方法。<br>3) 通过Thread类含参构造器创建线程对象。<br>4) 将Runnable接口的子类对象作为实际参数传递给Thread类的构造器中。<br>5) 调用Thread类的start方法：开启线程，调用Runnable子类接口的run方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 创建一个实现了Runnable接口的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 实现类去实现Runnable中的抽象方法：run()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3. 创建实现类的对象</span></span><br><span class="line">        MThread mThread = <span class="keyword">new</span> MThread();</span><br><span class="line">        <span class="comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(mThread);<span class="comment">//target为Runnable的对象变量</span></span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        <span class="comment">//5. 通过Thread类的对象调用start():① 启动线程 ②调用Thread线程的run()--&gt;调用了Runnable类型的target的run()</span></span><br><span class="line">        t1.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//再启动一个线程，遍历30以内的偶数</span></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(mThread);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">1</span>:<span class="number">0</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">0</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">2</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">4</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">6</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">8</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">10</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">12</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">14</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">16</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">2</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">18</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">4</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">20</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">22</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">24</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">6</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">26</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">8</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">28</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">10</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">12</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">14</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">16</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">18</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">20</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">22</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">24</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">26</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">28</span></span><br></pre></td></tr></table></figure><h2 id="3-4-Thread与Runnable两种方式的联系和区别"><a href="#3-4-Thread与Runnable两种方式的联系和区别" class="headerlink" title="3.4 Thread与Runnable两种方式的联系和区别"></a>3.4 Thread与Runnable两种方式的联系和区别</h2><p><strong>联系：</strong>我们可以从Thread的源码中看出Thread其实也是实现了Runnable的一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread</span> <span class="keyword">extends</span> <span class="title">Object</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br></pre></td></tr></table></figure><p><strong>区别：</strong></p><ul><li><p>继承Thread：线程运行代码存放在Thread子类run方法中。</p></li><li><p>实现Runnable：线程运行代码存放在实现接口的类的run方法中。</p></li></ul><p><strong>Runnable实现方式的好处：</strong></p><ul><li>避免了单继承的局限性</li><li>多个线程可以共享同一个接口实现类的对象，非常适合多个相同线程来处理同一份资源。</li></ul><p><strong>下面来到题目举个例子：创建三个窗口卖票，总票数为50张，分别使用继承Thread类和Runnable的方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: adsd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-08-16 11:32</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果不加static就是每个线程都有20张票</span></span><br><span class="line">    <span class="comment">//加static就是所有线程共用20张票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(getName() + <span class="string">"正在卖票，卖出的票号为： "</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowRunnable</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"正在卖票，卖出的票号为： "</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/************  Thread方式  ************/</span></span><br><span class="line">        WindowThread t1 = <span class="keyword">new</span> WindowThread();</span><br><span class="line">        WindowThread t2 = <span class="keyword">new</span> WindowThread();</span><br><span class="line">        WindowThread t3 = <span class="keyword">new</span> WindowThread();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"Thread的窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"Thread的窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"Thread的窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t1.join();</span><br><span class="line">            t2.join();</span><br><span class="line">            t3.join();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"---------------------------------------"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//        WindowRunnable r = new WindowRunnable();</span></span><br><span class="line"><span class="comment">//        WindowRunnable rr = new WindowRunnable();</span></span><br><span class="line"><span class="comment">//        WindowRunnable rrr = new WindowRunnable();</span></span><br><span class="line"><span class="comment">//        //如果这样写的话就是每个线程各自有20张票</span></span><br><span class="line"><span class="comment">//        Thread r1 = new Thread(r);</span></span><br><span class="line"><span class="comment">//        Thread r2 = new Thread(rr);</span></span><br><span class="line"><span class="comment">//        Thread r3 = new Thread(rrr);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        WindowRunnable r = <span class="keyword">new</span> WindowRunnable();</span><br><span class="line">        <span class="comment">//每个线程共享r对象的20张票</span></span><br><span class="line">        Thread r1 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread r2 = <span class="keyword">new</span> Thread(r);</span><br><span class="line">        Thread r3 = <span class="keyword">new</span> Thread(r);</span><br><span class="line"></span><br><span class="line">        r1.setName(<span class="string">"Runnable的窗口1"</span>);</span><br><span class="line">        r2.setName(<span class="string">"Runnable的窗口2"</span>);</span><br><span class="line">        r3.setName(<span class="string">"Runnable的窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        r1.start();</span><br><span class="line">        r2.start();</span><br><span class="line">        r3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Thread的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">18</span></span><br><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">19</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">16</span></span><br><span class="line">Thread的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">17</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">14</span></span><br><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">15</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">12</span></span><br><span class="line">Thread的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">13</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">10</span></span><br><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">11</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">8</span></span><br><span class="line">Thread的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">9</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">6</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">4</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">3</span></span><br><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">7</span></span><br><span class="line">Thread的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">1</span></span><br><span class="line">Thread的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">2</span></span><br><span class="line">Thread的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">5</span></span><br><span class="line">---------------------------------------</span><br><span class="line">Runnable的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Runnable的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">20</span></span><br><span class="line">Runnable的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">17</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">18</span></span><br><span class="line">Runnable的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">19</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">15</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">13</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">12</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">11</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">10</span></span><br><span class="line">Runnable的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">16</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">9</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">7</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">6</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">5</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">4</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">3</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">2</span></span><br><span class="line">Runnable的窗口<span class="number">3</span>正在卖票，卖出的票号为： <span class="number">1</span></span><br><span class="line">Runnable的窗口<span class="number">1</span>正在卖票，卖出的票号为： <span class="number">14</span></span><br><span class="line">Runnable的窗口<span class="number">2</span>正在卖票，卖出的票号为： <span class="number">8</span></span><br></pre></td></tr></table></figure><p>我们从上面可以看出20号票有重复出票的情况，这两种方式存在线程的安全问题，待解决。</p><h2 id="3-5-实现Callable接口"><a href="#3-5-实现Callable接口" class="headerlink" title="3.5 实现Callable接口"></a>3.5 实现Callable接口</h2><p>与使用Runnable相比， Callable功能更强大些</p><ul><li>相比run()方法，可以有返回值</li><li>方法可以抛出异常</li><li>支持泛型的返回值</li><li>需要借助FutureTask类，比如获取返回结果</li></ul><p>Future接口</p><ul><li>可以对具体Runnable、Callable任务的执行结果进行取消、查询是否完成、获取结果等。</li><li><code>FutrueTask是Futrue接口的唯一的实现类</code></li><li>FutureTask 同时实现了Runnable, Future接口。它既可以作为Runnable被线程执行，又可以作为Future得到Callable的返回值</li></ul><p>我们可以看看这些接口和类的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Callable</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">V <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FutureTask</span>&lt;<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; </span>&#123;……&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RunnableFuture</span>&lt;<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Runnable</span>, <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Future</span>&lt;<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">boolean</span> <span class="title">cancel</span><span class="params">(<span class="keyword">boolean</span> mayInterruptIfRunning)</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">boolean</span> <span class="title">isCancelled</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">boolean</span> <span class="title">isDone</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">V <span class="title">get</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException, ExecutionException</span>;</span><br><span class="line">     <span class="function">V <span class="title">get</span><span class="params">(<span class="keyword">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException, ExecutionException, TimeoutException</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用Callable举个例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如何理解实现Callable接口的方式创建多线程比实现Runnable接口创建多线程方式强大？</span></span><br><span class="line"><span class="comment"> * 1. call()可以有返回值的。</span></span><br><span class="line"><span class="comment"> * 2. call()可以抛出异常，被外面的操作捕获，获取异常的信息</span></span><br><span class="line"><span class="comment"> * 3. Callable是支持泛型的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.创建一个实现Callable的实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumThread</span> <span class="keyword">implements</span> <span class="title">Callable</span></span>&#123;</span><br><span class="line">    <span class="comment">//2.实现call方法，将此线程需要执行的操作声明在call()中</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">30</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(i);</span><br><span class="line">                sum += i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;<span class="comment">//sum自动装箱为Integer</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//3.创建Callable接口实现类的对象</span></span><br><span class="line">        NumThread numThread = <span class="keyword">new</span> NumThread();</span><br><span class="line">        <span class="comment">//4.将此Callable接口实现类的对象作为传递到FutureTask构造器中，创建FutureTask的对象</span></span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(numThread);</span><br><span class="line">        <span class="comment">//5.将FutureTask的对象作为参数传递到Thread类的构造器中，创建Thread对象，并调用start()</span></span><br><span class="line">        <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//6.获取Callable中call方法的返回值</span></span><br><span class="line">            <span class="comment">//get()返回值即为FutureTask构造器参数Callable实现类重写的call()的返回值。</span></span><br><span class="line">            Object sum = futureTask.get();</span><br><span class="line">            System.out.println(<span class="string">"总和为："</span> + sum);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="number">16</span></span><br><span class="line"><span class="number">18</span></span><br><span class="line"><span class="number">20</span></span><br><span class="line"><span class="number">22</span></span><br><span class="line"><span class="number">24</span></span><br><span class="line"><span class="number">26</span></span><br><span class="line"><span class="number">28</span></span><br><span class="line"><span class="number">30</span></span><br><span class="line">总和为：<span class="number">240</span></span><br></pre></td></tr></table></figure><h2 id="3-6-使用线程池"><a href="#3-6-使用线程池" class="headerlink" title="3.6 使用线程池"></a>3.6 使用线程池</h2><p><code>背景</code>： 经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对性能影响很大。<br><code>思路</code>：提前 创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。<br><code>好处</code>：</p><ul><li>提高响应速度（减少了创建新线程的时间）</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li><li>便于线程管理：<ul><li>corePoolSize：核心池的大小</li><li>maximumPoolSize：最大线程数</li><li>keepAliveTime：线程没有任务时最多保持多长时间后会终止<br>…</li></ul></li></ul><p><strong>线程池相关API：</strong></p><p>JDK 5.0起提供了线程池相关API：<code>ExecutorService</code>和<code>Executors</code></p><ul><li><code>ExecutorService</code>：真正的线程池接口。常见子类ThreadPoolExecutor<ol><li>void execute(Runnable command) ：执行任务/命令，没有返回值，一般用来执行Runnable</li><li><T> Future<T> submit(Callable<T> task)：执行任务，有返回值，一般用来执行Callable</li><li>void shutdown() ：关闭连接池</li></ol></li><li><code>Executors</code>：工具类、线程池的工厂类，用于创建并返回不同类型的线程池<ol><li>Executors.newCachedThreadPool()：创建一个可根据需要创建新线程的线程池</li><li>Executors.newFixedThreadPool(n); 创建一个可重用固定线程数的线程池</li><li>Executors.newSingleThreadExecutor() ：创建一个只有一个线程的线程池</li><li>Executors.newScheduledThreadPool(n)：创建一个线程池，它可安排在给定延迟后运行命令或者定期地执行。</li></ol></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Thread.sleep;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunnableThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">20</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CallableThread</span> <span class="keyword">implements</span> <span class="title">Callable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;= <span class="number">20</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i % <span class="number">2</span> != <span class="number">0</span>)&#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">": "</span> + i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"测试线程池返回值"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1. 提供指定线程数量的线程池</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(service.getClass());<span class="comment">//其实service是ThreadPoolExecutor类型</span></span><br><span class="line">        ThreadPoolExecutor service1 = (ThreadPoolExecutor) service;</span><br><span class="line">        <span class="comment">//便于线程管理：设置线程池的属性</span></span><br><span class="line">        service1.setCorePoolSize(<span class="number">15</span>);<span class="comment">//等一些方法</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.执行指定的线程的操作。需要提供实现Runnable接口或Callable接口实现类的对象</span></span><br><span class="line">        RunnableThread runnableThread1 = <span class="keyword">new</span> RunnableThread();</span><br><span class="line">        service.execute(runnableThread1);<span class="comment">//适合适用于Runnable</span></span><br><span class="line"></span><br><span class="line">        CallableThread callableThread1 = <span class="keyword">new</span> CallableThread();</span><br><span class="line">        Future&lt;Object&gt; futureTask =service.submit(callableThread1);<span class="comment">//适合使用于Callable</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println((String)futureTask.get());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.关闭连接池</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果;</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class java.util.concurrent.ThreadPoolExecutor</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">0</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">2</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">4</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">6</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">8</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">10</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">12</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">14</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">16</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">18</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>: <span class="number">20</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">1</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">3</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">5</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">7</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">9</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">11</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">13</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">15</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">17</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>: <span class="number">19</span></span><br><span class="line">测试线程池返回值</span><br></pre></td></tr></table></figure><h1 id="4-线程的同步"><a href="#4-线程的同步" class="headerlink" title="4. 线程的同步"></a>4. 线程的同步</h1><p>所谓线程的同步简单点可以理解为，<code>多个线程的执行需要遵循一定的顺序，否则可能出现安全问题</code>，比如上面例子中20号票重复的现象。共享数据没有加锁。</p><p>更多详细的介绍：<a href="https://blog.csdn.net/weixin_43914604/article/details/104942405" target="_blank" rel="noopener">进程的同步与互斥</a></p><p>那么我们如何解决线程同步可能带来的不安全问题呢？我们可以对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。</p><p>Java 对于多线程的安全问题提供了专业的解决 方式 ： <code>同步机制</code></p><h2 id="4-1-synchronized"><a href="#4-1-synchronized" class="headerlink" title="4.1 synchronized"></a>4.1 synchronized</h2><p>在学习Java<code>同步代码块与同步方法</code>时，得先了解一下<code>synchronize</code>(中文翻译：同步)关键字。</p><p><font size=5 color=red>synchronized 的锁是什么 ?</font></p><ul><li><p>synchronized的锁，即<code>同步监视器</code>，一般为类对象</p></li><li><p>任意对象都可以作为同步锁。所有对象都自动含有单一的锁（监视器）</p></li><li><p>同步方法的锁：静态方法（类名.class）、非静态方法（this）</p></li><li><p>同步代码块：自己指定，很多时候也是指定为this或类名.class</p><p><strong>注意：</strong></p></li><li><p>必须确保使用<code>同一个资源</code>的 <code>多个线程共用一把锁</code>，这个非常重要，否则就无法保证共享资源的安全</p></li><li><p>一个线程类中的所有静态方法共用同一把锁（类名.class），所有非静态方法共用同一把锁（this），同步代码块（指定需谨慎）</p></li></ul><h2 id="4-2-同步的范围"><a href="#4-2-同步的范围" class="headerlink" title="4.2 同步的范围"></a>4.2 同步的范围</h2><p>1 、 如何 找问题 ， 即代码是否存在线程安全 ？ （ 非常重要 ）<br>（1）明确哪些代码是多线程运行的代码<br>（2）明确多个线程是否有共享数据<br>（3）明确多线程运行代码中是否有多条语句操作共享数据</p><p>2 、 如何解决呢 ？ （ 非常重要 ）<br>对多条操作共享数据的语句，只能让一个线程都执行完，在执行过程中，其他线程不可以参与执行。<br>即所有操作共享数据的这些语句都要放在同步范围中</p><p>3 、 切记 ：<br> 范围太小：没锁住所有有安全问题的代码<br> 范围太大：没发挥多线程的功能。</p><h2 id="4-3-释放锁的操作"><a href="#4-3-释放锁的操作" class="headerlink" title="4.3 释放锁的操作"></a>4.3 释放锁的操作</h2><p>什么时候回释放锁？</p><ul><li>当前线程的同步方法、同步代码块执行结束。</li><li>当前线程在同步代码块、同步方法中遇到<code>break、return</code>终止了该代码块或该方法的继续执行。</li><li>当前线程在同步代码块、同步方法中出现了未处理的<code>Error或Exception</code>，导致异常结束。</li><li>当前线程在同步代码块、同步方法中执行了线程对象的<code>wait()</code>方法，当前线程暂停，并释放锁。</li></ul><h2 id="4-4-不会释放锁的操作"><a href="#4-4-不会释放锁的操作" class="headerlink" title="4.4 不会释放锁的操作"></a>4.4 不会释放锁的操作</h2><ul><li>线程执行同步代码块或同步方法时，程序调用<code>Thread.sleep()、Thread.yield()</code>方法暂停当前线程的执行</li><li>线程执行同步代码块时，其他线程调用了该线程的suspend()方法将该线程挂起，该线程不会释放锁（同步监视器）。</li><li>应<code>尽量避免</code>使用<code>suspend()和resume()</code>来控制线程</li></ul><p><strong>下面就介绍几种Java实现同步的几个案例，解决线程安全问题，巩固上面说的规则和方法</strong></p><ol><li>同步代码块—Thread</li><li>同步方法—Thread</li><li>同步代码块—Runnable</li><li>同步方法—Runnable</li><li>Lock锁—Thread</li><li>Lock锁—Runnable</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同步代码块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">synchronized</span> ( 同步监视器)&#123;</span><br><span class="line"><span class="comment">// 需要被同步的代码；</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//同步方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span> <span class="params">(String name)</span></span>&#123;</span><br><span class="line">….</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>还是以三个窗口卖票为例，三个窗口一起卖50张票</strong></p><h2 id="4-5-同步代码块—Thread"><a href="#4-5-同步代码块—Thread" class="headerlink" title="4.5  同步代码块—Thread"></a>4.5  同步代码块—Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">50</span>;<span class="comment">//共享资源</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();<span class="comment">//内部对象锁</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//正确 synchronized (obj)</span></span><br><span class="line">            <span class="comment">//正确 Class clazz = Window2.class,Window2.class只会加载一次</span></span><br><span class="line">            <span class="comment">//错误的方式：this代表着t1,t2,t3三个对象</span></span><br><span class="line">            <span class="comment">//只要保证t1,t2,t3三个对象共用同一把锁就行</span></span><br><span class="line">            <span class="keyword">synchronized</span> (Window2<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(getName() + <span class="string">"：卖票，票号为："</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window2 t1 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t2 = <span class="keyword">new</span> Window2();</span><br><span class="line">        Window2 t3 = <span class="keyword">new</span> Window2();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-6-同步方法—Thread"><a href="#4-6-同步方法—Thread" class="headerlink" title="4.6  同步方法—Thread"></a>4.6  同步方法—Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window4</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//private synchronized void show()&#123; //不加static,默认同步监视器：t1,t2,t3。此种解决方式是错误的</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;<span class="comment">//加static,默认同步监视器：Window4.class</span></span><br><span class="line">        <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"：卖票，票号为："</span> + ticket);</span><br><span class="line">            ticket--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window4 t1 = <span class="keyword">new</span> Window4();</span><br><span class="line">        Window4 t2 = <span class="keyword">new</span> Window4();</span><br><span class="line">        Window4 t3 = <span class="keyword">new</span> Window4();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">1</span>：卖票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">2</span>：卖票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">3</span>：卖票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-7-同步代码块—Runnable"><a href="#4-7-同步代码块—Runnable" class="headerlink" title="4.7  同步代码块—Runnable"></a>4.7  同步代码块—Runnable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window1</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">10</span>;</span><br><span class="line"><span class="comment">//    Object obj = new Object();</span></span><br><span class="line"><span class="comment">//    Dog dog = new Dog();</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//正确：synchronized (dog)  </span></span><br><span class="line">            <span class="comment">// 正确：synchronized (obj)  </span></span><br><span class="line">            <span class="comment">//正确：this:唯一的Window1的对象    </span></span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="keyword">this</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":卖票，票号为："</span> + ticket);</span><br><span class="line"></span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window1 w = <span class="keyword">new</span> Window1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-8-同步方法—Runnable"><a href="#4-8-同步方法—Runnable" class="headerlink" title="4.8  同步方法—Runnable"></a>4.8  同步方法—Runnable</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">50</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">             show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认同步监视器：this，即w，三个对象用这一个对象锁</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//synchronized (this)&#123; 也正确</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">":卖票，票号为："</span> + ticket);</span><br><span class="line"></span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WindowTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window3 w = <span class="keyword">new</span> Window3();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">2</span>:卖票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">3</span>:卖票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">1</span>:卖票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-9-Lock锁—Runnable"><a href="#4-9-Lock锁—Runnable" class="headerlink" title="4.9 Lock锁—Runnable"></a>4.9 Lock锁—Runnable</h2><ul><li>从JDK 5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</li><li><code>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具</code>。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</li><li><code>ReentrantLock 类实现了 Lock</code> ，它拥有与 synchronized 相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁、释放锁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock,3个窗口共用一个lock对象</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"：售票，票号为："</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()，如果发生Error或Exception,释放锁以免其它进程被阻塞</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-10-Locak锁—Thread"><a href="#4-10-Locak锁—Thread" class="headerlink" title="4.10  Locak锁—Thread"></a>4.10  Locak锁—Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> ticket = <span class="number">50</span>;</span><br><span class="line">    <span class="comment">//1.实例化ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//2.调用锁定方法lock()</span></span><br><span class="line">                lock.lock();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"：售票，票号为："</span> + ticket);</span><br><span class="line">                    ticket--;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法：unlock()</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Window t1=<span class="keyword">new</span> Window();</span><br><span class="line">        Window t2=<span class="keyword">new</span> Window();</span><br><span class="line">        Window t3=<span class="keyword">new</span> Window();</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"窗口1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"窗口2"</span>);</span><br><span class="line">        t3.setName(<span class="string">"窗口3"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">50</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">49</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">48</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">47</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">46</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">45</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">44</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">43</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">42</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">41</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">40</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">39</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">38</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">37</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">36</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">35</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">34</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">33</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">32</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">31</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">30</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">29</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">28</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">27</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">26</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">25</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">24</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">23</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">22</span></span><br><span class="line">窗口<span class="number">1</span>：售票，票号为：<span class="number">21</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">20</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">19</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">18</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">17</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">16</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">15</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">14</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">13</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">12</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">11</span></span><br><span class="line">窗口<span class="number">2</span>：售票，票号为：<span class="number">10</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">9</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">8</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">7</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">6</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">5</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">4</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">3</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">2</span></span><br><span class="line">窗口<span class="number">3</span>：售票，票号为：<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="4-11-synchronized-与-Lock-的对比"><a href="#4-11-synchronized-与-Lock-的对比" class="headerlink" title="4.11 synchronized 与 Lock 的对比"></a>4.11 synchronized 与 Lock 的对比</h2><ol><li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁），synchronized是隐式锁，出了作用域自动释放</li><li>Lock只有代码块锁，synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li></ol><p><font size=5 color=red>优先使用顺序：</font></p><p>Lock &gt;同步代码块（已经进入了方法体，分配了相应资源） &gt;同步方法（在方法体之外）</p><h2 id="4-12-一个例子：同步存钱问题"><a href="#4-12-一个例子：同步存钱问题" class="headerlink" title="4.12  一个例子：同步存钱问题"></a>4.12  一个例子：同步存钱问题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">银行有一个账户。有两个储户分别向同一个账户存3000元，每次存1000，存3次。每次存完打印账户余额。</span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment"> 1.是否是多线程问题？ 是，两个储户线程</span></span><br><span class="line"><span class="comment"> 2.是否有共享数据？ 有，账户（或账户余额）</span></span><br><span class="line"><span class="comment"> 3.是否有线程安全问题？ 有</span></span><br><span class="line"><span class="comment"> 4.需要考虑如何解决线程安全问题？同步机制：有三种方式。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span><span class="params">(<span class="keyword">double</span> balance)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存钱</span></span><br><span class="line">    <span class="comment">//默认监视器(锁)为 acct对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">double</span> amt)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(amt &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            balance += amt;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":存钱成功。余额为："</span> + balance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Customer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Account acct;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(Account acct)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.acct = acct;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            acct.deposit(<span class="number">1000</span>);<span class="comment">//调用同步方法，每次存1000</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Account acct = <span class="keyword">new</span> Account(<span class="number">0</span>);</span><br><span class="line">        <span class="comment">//c1 c2 两个顾客共用一个账户存钱</span></span><br><span class="line">        Customer c1 = <span class="keyword">new</span> Customer(acct);</span><br><span class="line">        Customer c2 = <span class="keyword">new</span> Customer(acct);</span><br><span class="line"></span><br><span class="line">        c1.setName(<span class="string">"甲"</span>);</span><br><span class="line">        c2.setName(<span class="string">"乙"</span>);</span><br><span class="line"></span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">甲:存钱成功。余额为：<span class="number">1000</span>.<span class="number">0</span></span><br><span class="line">甲:存钱成功。余额为：<span class="number">2000</span>.<span class="number">0</span></span><br><span class="line">甲:存钱成功。余额为：<span class="number">3000</span>.<span class="number">0</span></span><br><span class="line">乙:存钱成功。余额为：<span class="number">4000</span>.<span class="number">0</span></span><br><span class="line">乙:存钱成功。余额为：<span class="number">5000</span>.<span class="number">0</span></span><br><span class="line">乙:存钱成功。余额为：<span class="number">6000</span>.<span class="number">0</span></span><br></pre></td></tr></table></figure><h1 id="5-线程的死锁"><a href="#5-线程的死锁" class="headerlink" title="5. 线程的死锁"></a>5. 线程的死锁</h1><p><strong>死锁：</strong></p><ul><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</li></ul><p><strong>解决方法：</strong></p><ul><li>专门的算法、原则</li><li>尽量减少同步资源的定义</li><li>尽量避免嵌套同步</li></ul><blockquote><p>更多理论参考：<a href="https://blog.csdn.net/weixin_43914604/article/details/105437474" target="_blank" rel="noopener">操作系统之死锁详解(预防、避免、检测、解除)</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//死锁的演示</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">(B b)</span> </span>&#123; <span class="comment">//同步监视器：A类的对象：a</span></span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 进入了A实例的foo方法"</span>); <span class="comment">// ①</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 企图调用B实例的last方法"</span>); <span class="comment">// ③</span></span><br><span class="line">b.last();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;<span class="comment">//同步监视器：A类的对象：a</span></span><br><span class="line">System.out.println(<span class="string">"进入了A类的last方法内部"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">(A a)</span> </span>&#123;<span class="comment">//同步监视器：b</span></span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 进入了B实例的bar方法"</span>); <span class="comment">// ②</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">200</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException ex) &#123;</span><br><span class="line">ex.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"当前线程名: "</span> + Thread.currentThread().getName()</span><br><span class="line">+ <span class="string">" 企图调用A实例的last方法"</span>); <span class="comment">// ④</span></span><br><span class="line">a.last();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">last</span><span class="params">()</span> </span>&#123;<span class="comment">//同步监视器：b</span></span><br><span class="line">System.out.println(<span class="string">"进入了B类的last方法内部"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">B b = <span class="keyword">new</span> B();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Thread.currentThread().setName(<span class="string">"主线程"</span>);</span><br><span class="line"><span class="comment">// 调用a对象的foo方法</span></span><br><span class="line">a.foo(b);</span><br><span class="line">System.out.println(<span class="string">"进入了主线程之后"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Thread.currentThread().setName(<span class="string">"副线程"</span>);</span><br><span class="line"><span class="comment">// 调用b对象的bar方法</span></span><br><span class="line">b.bar(a);</span><br><span class="line">System.out.println(<span class="string">"进入了副线程之后"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">DeadLock dl = <span class="keyword">new</span> DeadLock();</span><br><span class="line"><span class="keyword">new</span> Thread(dl).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dl.init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码分析：如果不加sleep，大概率不会发生死锁现象，因为cpu执行速度快，主线程和副线程很大几率可以一次性取得a和b两个对象锁。加了sleep，主线程和副线程就很大几率会出现死锁，因为很可能会导致主线程和副线程都只拿到了一个锁，两个人同时等待对方手里的锁，进而导致死锁现象。</p><h1 id="6-线程的通信"><a href="#6-线程的通信" class="headerlink" title="6. 线程的通信"></a>6. 线程的通信</h1><p>线程的通信，即多个线程之间的交流合作，按一定的顺序执行或按一定的规则执行。</p><p>这里举一个例子先直观感受一下线程之间的通信方式：<strong>使用两个线程印 打印 1-10 。线程1, 线程2 交替打印</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> Object obj = <span class="keyword">new</span> Object();<span class="comment">//可以用obj</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//也可以用this，同时下面的obj也要换成this</span></span><br><span class="line">            <span class="keyword">synchronized</span> (obj) &#123;</span><br><span class="line"></span><br><span class="line">                obj.notify();</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(number &lt;= <span class="number">10</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">":"</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        <span class="comment">//使得调用如下wait()方法的线程进入阻塞状态,并释放锁</span></span><br><span class="line">                        obj.wait();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommunicationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">"线程1"</span>);</span><br><span class="line">        t2.setName(<span class="string">"线程2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">线程<span class="number">1</span>:<span class="number">1</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">2</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">3</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">4</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">5</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">6</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">7</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">8</span></span><br><span class="line">线程<span class="number">1</span>:<span class="number">9</span></span><br><span class="line">线程<span class="number">2</span>:<span class="number">10</span></span><br></pre></td></tr></table></figure><p>现在对以上使用的方法说明一下：</p><h2 id="6-1-Object用于线程的三个方法"><a href="#6-1-Object用于线程的三个方法" class="headerlink" title="6.1 Object用于线程的三个方法"></a>6.1 Object用于线程的三个方法</h2><p><strong>wait() 与 与 notify() 和 notifyAll()简述：</strong></p><ul><li>wait()：令当前线程挂起并放弃CPU、同步资源并等待，使别的线程可访问并修改共享资源，而当前线程排队等候其他线程调用notify()或notifyAll()方法唤醒，唤醒后等待重新获得对监视器的所有权后才能继续执行。</li><li>notify()：唤醒正在排队等待同步资源的线程中优先级最高者结束等待</li><li>notifyAll ()：唤醒正在排队等待资源的所有线程结束等待.</li><li>这三个方法只有在synchronized方法或synchronized代码块中才能使用，这三个方法的调用者必须是同步代码块或同步方法中的同步监视器，否则会报<code>java.lang.IllegalMonitorStateException异常</code>。</li><li>因为这三个方法必须有锁对象调用，而任意对象都可以作为synchronized的同步锁，因此这三个方法只能在Object类中声明。</li></ul><p><strong>wait() 方法</strong></p><ul><li>在当前线程中调用方法： 对象名.wait()</li><li>使当前线程进入等待（某对象）状态 ，直到另一线程对该对象发出 notify(或notifyAll) 为止。</li><li>调用方法的必要条件：当前线程必须具有对该对象的监控权（加锁）</li><li><code>调用此方法后，当前线程将释放对象监控权 ，然后进入等待</code></li><li>在当前线程被notify后，要重新获得监控权，然后从断点处继续代码的执行。</li></ul><p><strong>notify()/notifyAll()</strong></p><ul><li>在当前线程中调用方法： 对象名.notify()/notifyAll()</li><li>功能：唤醒等待该对象监控权的一个/所有线程。</li><li>调用方法的必要条件：当前线程必须具有对该对象的监控权（获得锁）</li></ul><p><strong>面试题：sleep() 和 wait()的异同？</strong><br>1.相同点：一旦执行方法，都可以使得当前的线程进入阻塞状态。<br>2.不同点：</p><ul><li>两个方法声明的位置不同：Thread类中声明sleep() , Object类中声明wait()</li><li>调用的要求不同：sleep()可以在任何需要的场景下调用。 wait()必须使用在同步代码块或同步方法中</li><li>关于是否释放同步监视器：如果两个方法都使用在同步代码块或同步方法中，sleep()不会释放锁，wait()会释放锁。</li></ul><h2 id="6-2-一个生产者-消费者例题"><a href="#6-2-一个生产者-消费者例题" class="headerlink" title="6.2 一个生产者-消费者例题"></a>6.2 一个生产者-消费者例题</h2><p><strong>问题描述：</strong>生产者(Productor)将产品交给店员(Clerk)，而消费者(Customer)从店员处取走产品，店员一次只能持有固定数量的产品(比如:20），如果生产者试图生产更多的产品，店员会叫生产者停一下，如果店中有空位放产品了再通知生产者继续生产；如果店中没有产品了，店员会告诉消费者等一下，如果店中有产品了再通知消费者来取走产品。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200816231207.png" alt="image-20200816231203694"></p><p><strong>这里可能出现两个问题：</strong></p><ul><li>生产者比消费者快时，消费者会漏掉一些数据没有取到。</li><li>消费者比生产者快时，消费者会取相同的数据。</li></ul><p><strong>分析：</strong></p><ol><li>是否是多线程问题？是，生产者线程，消费者线程</li><li>是否有共享数据？是，店员（或产品）</li><li>如何解决线程的安全问题？同步机制,有三种方法</li><li>是否涉及线程的通信？是</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span> </span>&#123;<span class="comment">//店员</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> productCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产产品，默认同步监视器为clerk</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produceProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (productCount &lt; <span class="number">20</span>) &#123;</span><br><span class="line">            productCount++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":开始生产第"</span> + productCount + <span class="string">"个产品"</span>);</span><br><span class="line">            notify();<span class="comment">//叫醒消费者</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消费产品，默认同步监视器为clerk</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consumeProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (productCount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">":开始消费第"</span> + productCount + <span class="string">"个产品"</span>);</span><br><span class="line">            productCount--;</span><br><span class="line">            notify();<span class="comment">//叫醒生产者</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;<span class="comment">//生产者</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">":开始生产产品....."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clerk.produceProduct();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;<span class="comment">//消费者</span></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">":开始消费产品....."</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            clerk.consumeProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clerk clerk = <span class="keyword">new</span> Clerk();</span><br><span class="line"></span><br><span class="line">        Producer p1 = <span class="keyword">new</span> Producer(clerk);</span><br><span class="line">        p1.setName(<span class="string">"生产者1"</span>);</span><br><span class="line"></span><br><span class="line">        Consumer c1 = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        c1.setName(<span class="string">"消费者1"</span>);</span><br><span class="line">        Consumer c2 = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        c2.setName(<span class="string">"消费者2"</span>);</span><br><span class="line"></span><br><span class="line">        p1.start();</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行的部分结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">生产者<span class="number">1</span>:开始生产产品.....</span><br><span class="line">消费者<span class="number">2</span>:开始消费产品.....</span><br><span class="line">消费者<span class="number">1</span>:开始消费产品.....</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">1</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">2</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">2</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">1</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">1</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">2</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">3</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">3</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">2</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">2</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">3</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">4</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">4</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">3</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">3</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">4</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">5</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">5</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">4</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">4</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">5</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">6</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">6</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">5</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">5</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">6</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">7</span>个产品</span><br><span class="line">消费者<span class="number">2</span>:开始消费第<span class="number">7</span>个产品</span><br><span class="line">消费者<span class="number">1</span>:开始消费第<span class="number">6</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">6</span>个产品</span><br><span class="line">生产者<span class="number">1</span>:开始生产第<span class="number">7</span>个产品</span><br><span class="line">…………………………………………………………</span><br></pre></td></tr></table></figure><h1 id="7-参考文献"><a href="#7-参考文献" class="headerlink" title="7. 参考文献"></a>7. 参考文献</h1><ul><li><a href="https://redspider.gitbook.io/concurrent/" target="_blank" rel="noopener">https://redspider.gitbook.io/concurrent/</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>枚举类与注解</title>
      <link href="/posts/3aa86aea.html"/>
      <url>/posts/3aa86aea.html</url>
      
        <content type="html"><![CDATA[<h1 id="一、枚举类"><a href="#一、枚举类" class="headerlink" title="一、枚举类"></a>一、枚举类</h1><h2 id="1-为什么使用枚举类？"><a href="#1-为什么使用枚举类？" class="headerlink" title="1. 为什么使用枚举类？"></a>1. 为什么使用枚举类？</h2><p><strong>枚举在曰常生活中很常见，举例如下：</strong></p><ol><li>星期：Monday(星期一)、……、Sunday(星期天)</li><li>性别：Man(男)、W oman(女)</li><li>季节：Spring(春节)……Winter(冬天)</li><li>支付方式：Cash（现金）、WeChatPay（微信）、Alipay(支付宝)、BankCard(银行卡)、CreditCard(信用卡)</li><li>就职状态：Busy、Free、Vocation、Dimission</li><li>订单状态：Nonpayment（未付款）、Paid（已付款）、Delivered（已发货）、Return（退货）、Checked（已确认）Fulfilled（已配货）、</li><li>线程状态：创建、就绪、运行、阻塞、死亡</li></ol><p><code>当需要定义一组常量时，我们把常量抽象成类对象去处理，使用枚举定义常量更安全，更便捷，更直观。</code></p><h2 id="2-枚举类的实现和属性概述"><a href="#2-枚举类的实现和属性概述" class="headerlink" title="2. 枚举类的实现和属性概述"></a>2. 枚举类的实现和属性概述</h2><p><strong>若枚举只有一个对象, 则可以作为一种单例模式的实现方式。</strong></p><p><strong>枚举类的实现：</strong></p><ul><li>JDK1.5之前需要自定义枚举类</li><li>JDK 1.5 新增的 enum 关键字用于定义枚举类</li></ul><p><strong>枚举类的属性：</strong></p><ul><li><code>枚举类对象的属性不应允许被改动</code>, 所以应该使用 <code>private final</code>修饰</li><li>枚举类使用 private final 修饰的属性应该在<code>构造器中为其赋值</code></li><li>若枚举类显式的定义了带参数的构造器, 则在列出枚举值时也必须对应的 传入参数</li></ul><h2 id="3-自定义枚举类"><a href="#3-自定义枚举类" class="headerlink" title="3. 自定义枚举类"></a>3. 自定义枚举类</h2><ol><li>私有化类的构造器，保证不能在类的外部创建其对象</li><li>在类的内部创建枚举类的实例。声明为：<code>public static final</code></li><li>对象如果有实例变量，应该声明为<code>private final</code>，并在构造器中初始化</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season spring = Season.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//自定义枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供当前枚举类的多个对象：public static final的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING = <span class="keyword">new</span> Season(<span class="string">"春天"</span>,<span class="string">"春暖花开"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER = <span class="keyword">new</span> Season(<span class="string">"夏天"</span>,<span class="string">"夏日炎炎"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN = <span class="keyword">new</span> Season(<span class="string">"秋天"</span>,<span class="string">"秋高气爽"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER = <span class="keyword">new</span> Season(<span class="string">"冬天"</span>,<span class="string">"冰天雪地"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4.toString()</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Season&#123;"</span> +</span><br><span class="line">                <span class="string">"seasonName='"</span> + seasonName + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", seasonDesc='"</span> + seasonDesc + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Season&#123;seasonName='春天', seasonDesc='春暖花开'&#125;</span><br></pre></td></tr></table></figure><h2 id="4-使用enum的定义枚举类"><a href="#4-使用enum的定义枚举类" class="headerlink" title="4. 使用enum的定义枚举类"></a>4. 使用enum的定义枚举类</h2><p><strong>使用说明：</strong></p><ul><li>使用 enum 定义的枚举类默认继承了<code>java.lang.Enum</code>类，因此不能再继承其他类</li><li>枚举类的<code>构造器只能使用 private 权限修饰符</code></li><li>枚举类的所有<code>实例</code>必须在枚举类中显式列出(, 分隔 ; 结尾)。列出的实例系统会<code>自动添加 public static final</code>修饰</li><li>必<code>须在枚举类的第一行声明枚举类对象</code></li><li>JDK 1.5 中可以在 switch 表达式中使用Enum定义的枚举类的对象作为表达式, case 子句可以直接使用枚举值的名字, 无需添加枚举<br>类作为限定。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Season1 s1=Season1.SUMMER;</span><br><span class="line">       System.out.println(s1);</span><br><span class="line">       System.out.println(s1.getSeasonName());</span><br><span class="line">       System.out.println(s1.getSeasonDesc());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用enum关键字定义枚举类</span></span><br><span class="line"><span class="keyword">enum</span> Season1&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span></span><br><span class="line">    SPRING(<span class="string">"春天"</span>,<span class="string">"春暖花开"</span>),</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>,<span class="string">"夏日炎炎"</span>),</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>,<span class="string">"秋高气爽"</span>),</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>,<span class="string">"冰天雪地"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SUMMER</span><br><span class="line">夏天</span><br><span class="line">夏日炎炎</span><br></pre></td></tr></table></figure><h2 id="5-常用的Enum方法"><a href="#5-常用的Enum方法" class="headerlink" title="5. 常用的Enum方法"></a>5. 常用的Enum方法</h2><p><strong>Enum类的主要方法：</strong></p><ul><li>values() 方法：返回枚举类型的对象数组。该方法可以很方便地遍历所有的枚举值。</li><li>valueOf(String str)：返回指定字符串对应的枚举类对象。要求字符串必须是枚举类对象的“名字”。如不是，会有运行时异常：<br>IllegalArgumentException。</li><li>toString()：返回当前枚举类对象常量的名称</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1[] s=Season1.values();</span><br><span class="line">        <span class="keyword">for</span>(Season1 e: s)&#123;</span><br><span class="line">            System.out.println(e.toString()+<span class="string">","</span>+e.getSeasonName()+<span class="string">","</span>+e.getSeasonDesc());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"****************"</span>);</span><br><span class="line">        Thread.State[] values = Thread.State.values();</span><br><span class="line">        <span class="keyword">for</span> (Thread.State e:values) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"****************"</span>);</span><br><span class="line">        Season1 s2=Season1.valueOf(<span class="string">"SUMMER"</span>);</span><br><span class="line">        System.out.println(s2.toString()+<span class="string">","</span>+s2.getSeasonName()+<span class="string">","</span>+s2.getSeasonDesc());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用enum关键字定义枚举类</span></span><br><span class="line"><span class="keyword">enum</span> Season1&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span></span><br><span class="line">    SPRING(<span class="string">"春天"</span>,<span class="string">"春暖花开"</span>),</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>,<span class="string">"夏日炎炎"</span>),</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>,<span class="string">"秋高气爽"</span>),</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>,<span class="string">"冰天雪地"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">SPRING,春天,春暖花开</span><br><span class="line">SUMMER,夏天,夏日炎炎</span><br><span class="line">AUTUMN,秋天,秋高气爽</span><br><span class="line">WINTER,冬天,冰天雪地</span><br><span class="line">****************</span><br><span class="line">NEW</span><br><span class="line">RUNNABLE</span><br><span class="line">BLOCKED</span><br><span class="line">WAITING</span><br><span class="line">TIMED_WAITING</span><br><span class="line">TERMINATED</span><br><span class="line">****************</span><br><span class="line">SUMMER,夏天,夏日炎炎</span><br></pre></td></tr></table></figure><p><strong>其它方法：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200811181826.png" alt="image-20200811181825664"></p><h2 id="6-枚举类实现接口"><a href="#6-枚举类实现接口" class="headerlink" title="6. 枚举类实现接口"></a>6. 枚举类实现接口</h2><ul><li>和普通 Java 类一样，枚举类可以实现一个或多个接口</li><li>若每个枚举值在调用实现的接口方法呈现相同的行为方式，则只要统一实现该方法即可。</li><li>若需要每个枚举值在调用实现的接口方法呈现出不同的行为方式,则可以让每个枚举值分别来实现该方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1[] s=Season1.values();</span><br><span class="line">        <span class="keyword">for</span>(Season1 e :s )&#123;</span><br><span class="line">            System.out.print(e.toString()+<span class="string">","</span>+e.getSeasonName()+<span class="string">","</span>+e.getSeasonDesc()+<span class="string">","</span>);</span><br><span class="line">            e.show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用enum关键字枚举类</span></span><br><span class="line"><span class="keyword">enum</span> Season1 implements Info&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象，多个对象之间用","隔开，末尾对象";"结束</span></span><br><span class="line">    <span class="comment">//可以给每一个枚举类对象都实现一个show抽象方法</span></span><br><span class="line">    SPRING(<span class="string">"春天"</span>,<span class="string">"春暖花开"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"春天在哪里？"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">"夏天"</span>,<span class="string">"夏日炎炎"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"夏天好热！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">"秋天"</span>,<span class="string">"秋高气爽"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"秋天不回来"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">"冬天"</span>,<span class="string">"冰天雪地"</span>)&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"大约在冬季"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明Season对象的属性:private final修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私有化类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    公共的枚举类对象方法</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void show() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println("这是一个季节");</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SPRING,春天,春暖花开,春天在哪里？</span><br><span class="line">SUMMER,夏天,夏日炎炎,夏天好热！</span><br><span class="line">AUTUMN,秋天,秋高气爽,秋天不回来</span><br><span class="line">WINTER,冬天,冰天雪地,大约在冬季</span><br></pre></td></tr></table></figure><h1 id="二、注解-Annotation"><a href="#二、注解-Annotation" class="headerlink" title="二、注解(Annotation)"></a>二、注解(Annotation)</h1><h2 id="1-注解概述"><a href="#1-注解概述" class="headerlink" title="1. 注解概述"></a>1. 注解概述</h2><ul><li>从 JDK 5.0 开始, Java 增加了对元数据(MetaData) 的支持, 也就是<code>Annotation(注解)</code></li><li><code>Annotation 其实就是代码里的 特殊标记, 这些标记可以在编译, 类加载, 运行时被读取, 并执行相应的处理。</code></li><li>通过使用Annotation, 程序员可以在不改变原有逻辑的情况下, 在源文件中嵌入一些补充信息。<code>代码分析工具、开发工具和部署工具</code>可以通过这些补充信息<code>进行验证或者进行部署。</code></li><li>Annotation 可以像修饰符一样被使用, 可用于<code>修饰包, 类, 构造器, 法, 成员变量, 参数, 局部变量的声明,</code>这些信息被保存在 Annotation的 <code>“name=value”</code>对中。</li><li>在JavaSE中，注解的使用目的比较简单，例如标记过时的功能，忽略警告等。</li><li>在JavaEE/Android中注解占据了更重要的角色，例如用来配置应用程序的任何切面，代替JavaEE旧版中所遗留的繁冗代码和XML配置等。</li><li>未来的开发模式都是基于注解的，JPA是基于注解的，Spring2.5以上都是基于注解的，Hibernate3.x以后也是基于注解的，现在的<br>Struts2有一部分也是基于注解的了，注解是一种趋势，一定程度上可以说：<code>框架 = 注解 + 反射 + 设计模式。</code></li><li>使用 Annotation 时要在其前面增加<code>@</code>符号, 并 <code>把该 Annotation 当成一个修饰符使用</code>。用于修饰它支持的程序元素。</li></ul><h2 id="2-常见的注解示例"><a href="#2-常见的注解示例" class="headerlink" title="2. 常见的注解示例"></a>2. 常见的注解示例</h2><p><strong>示例一：生成文档相关的注解</strong></p><p><code>@author</code> 标明开发该类模块的作者，多个作者之间使用,分割<br><code>@version</code>标明该类模块的版本<br><code>@see</code> 参考转向，也就是相关主题<br><code>@since</code> 从哪个版本开始增加的<br><code>@param</code>对方法中某参数的说明，如果没有参数就不能写<br><code>@return</code> 对方法返回值的说明，如果方法的返回值类型是void就不能写<br><code>@exception</code> 对方法可能抛出的异常进行说明 ，如果方法没有用throws显式抛出的异常就不能写<br>其中：</p><ul><li>@param @return 和 @exception 这三个标记都是只用于方法的。</li><li>@param的格式要求：@param 形参名 形参类型 形参说明</li><li>@return 的格式要求：@return 返回值类型 返回值说明</li><li>@exception的格式要求：@exception 异常类型 异常说明</li><li>@param和@exception可以并列多个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> 王xx</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@see</span> Math.java</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavadocTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 程序的主方法，程序的入口</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args String[] 命令行参数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 求圆面积的方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> radius double 半径值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> double 圆的面积</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">(<span class="keyword">double</span> radius)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Math.PI * radius * radius;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例二： 在编译时进行格式检查(JDK 内置的三个基本注解)</strong></p><ul><li><code>@Override:</code> 限定<code>重写</code>父类方法, 该注解只能用于方法</li><li><code>@Deprecated:</code>用于表示所修饰的元素(类, 方法等)已<code>过时</code>。通常是因为所修饰的结构危险或存在更好的选择</li><li><code>@SuppressWarnings: 抑制编译器警告;</code>（如果一些类，属性，方法没有使用，则编译器会警告，友情提示警告你写的代码浪费空间资源）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(<span class="string">"unused"</span>)</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="comment">//泛型注解</span></span><br><span class="line">        <span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"unused"</span>, <span class="string">"rawtypes"</span> &#125;)</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"过时的方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"重写的toString方法()"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例三： 跟踪 代码依赖性，实现替代配置文件功能</strong></p><ul><li>Servlet3.0提供了注解(annotation),使得不再需要在web.xml文件中进行Servlet的部署。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200811204450.png" alt="image-20200811204449062"></p><ul><li>spring框架中关于“事务”的管理</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200811204530.png" alt="image-20200811204530448"></p><h2 id="3-如何自定义注解"><a href="#3-如何自定义注解" class="headerlink" title="3. 如何自定义注解"></a>3. 如何自定义注解</h2><ul><li>定义新的 Annotation 类型使用<code>@interface</code>关键字</li><li>自定义注解自动继承了<code>java.lang.annotation.Annotation 接口</code></li><li><code>Annotation 的成员变量在 Annotation 定义中以无参数方法的形式来声明</code>。其方法名和返回值定义了该成员的名字和类型。我们称为配置参数。类型只能是八种基本数据类型、<code>String 类型 、Class 类型 、enum 类型 、Annotation 类型 、以上所有类型的 数组。</code></li><li>可以在定义 Annotation 的成员变量时为其指定初始值, 指定成员变量的初始值可使用<code>default</code>关键字</li><li>如果只有一个参数成员，建议使用 <code>参数名为value</code></li><li>如果定义的注解含有配置参数，那么使用时必须指定参数值，除非它有默认值。格式是“参数名 = 参数值”，如果只有一个参数成员，且名称为value，可以省略“value=”</li><li>没有成员定义的 Annotation 称为<code>标记</code>; 包含成员变量的 Annotation 称为元数据 Annotation</li><li>注意：<code>自定义注解必须配上注解的信息处理流程才有意义。</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="comment">//自定义注解必须配上注解的信息处理流程(使用反射)才有意义。</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "hello"</span>;<span class="comment">//指定成员变量的初始值可使用` default `关键字</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用自定义注解：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MyAnnotation</span>(value=<span class="string">"hi"</span>)<span class="comment">//注解没有default，就需要在使用时初始化值</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-JDK-中的元注解"><a href="#4-JDK-中的元注解" class="headerlink" title="4. JDK 中的元注解"></a>4. JDK 中的元注解</h2><ul><li><p>JDK 的元 Annotation 用于修饰其他 Annotation 定义，对现有注解进行解释说明的注解叫元注解</p></li><li><p>JDK5.0提供了4个标准的meta-annotation类型，分别是：</p><ol><li>Retention</li><li>Target</li><li>Documente</li><li>Inherited</li></ol></li></ul><p><code>元数据：</code>对现有数据进行解释说明的数据叫元数据，比如String name=”BitHachi”; “BitHachi”是现有数据，String name是元数据。</p><p><font color=red size=5>@Retention</font></p><p>@Retention: 只能用于修饰一个 Annotation 定义, 用于指定该 Annotation 的生命周期, @Rentention 包含一个 RetentionPolicy 类型的成员变量, 使用@Rentention 时必须为该 value 成员变量指定值:</p><ul><li>RetentionPolicy.SOURCE:在源文件中有效（即源文件保留），编译器直接丢弃这种策略的注释</li><li>RetentionPolicy.CLASS:在class文件中有效（即class保留） ， 当运行 Java 程序时, JVM不会保留注解。 这是默认值</li><li>RetentionPolicy.RUNTIME:在运行时有效（即运行时保留），当运行 Java 程序时, JVM 会保留注释。程序 可以通过反射获取</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200812192719.png" alt="image-20200812192716508"></p><p><font color=red size=5>@Target</font></p><ul><li>@Target: 用于修饰 Annotation 定义, 用于指定被修饰的 Annotation 能用于修饰哪些程序元素。</li><li>@Target 也包含一个名为 value 的成员变量,这个成员变量是ElementType数组。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200812193200.png" alt="image-20200812193200105"></p><p><font color=red size=5>@Documented</font></p><ul><li>@Documented: 用于指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档。默认情况下，javadoc是不包括注解的。</li><li><code>定义为Documented的注解必须设置Retention值为RUNTIME。</code></li></ul><p><font color=red size=5>@Inherited</font></p><ul><li>@Inherited: 被它修饰的 Annotation 将具有<code>继承性</code>。如果某个类使用了被@Inherited 修饰的 Annotation, 则其子类将自动具有该注解。</li><li>比如：如果把标有@Inherited注解的自定义的注解标注在类级别上，子类则可以继承父类类级别的注解</li><li>实际应用中，使用较少</li></ul><p>接下来介绍利用反射获取注解信息，然后举一个例子将以上4个元注解一起演示一遍</p><h2 id="5-利用反射获取注解信息"><a href="#5-利用反射获取注解信息" class="headerlink" title="5. 利用反射获取注解信息"></a>5. 利用反射获取注解信息</h2><ul><li>JDK 5.0 在 java.lang.reflect 包下新增了 AnnotatedElement 接口, 该接口代表程序中可以接受注解的程序元素</li><li>当一个 Annotation 类型被定义为运行时 Annotation 后, 该注解才是运行时可见, 当 class 文件被载入时保存在 class 文件中的 Annotation 才会被虚拟机读取</li><li>程序可以调用 AnnotatedElement对象的如下方法来访问 Annotation 信息</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200812195452.png" alt="image-20200812195451860"></p><p>元注解与反射获取注解信息示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.*;</span><br><span class="line"><span class="comment">//指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//子类可以继承父类类级别的Annotation</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//指定该 Annotation 的生命周期</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">//指定被修饰的 Annotation 能用于修饰哪些程序元素</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotation &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Class clazz = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Annotation[] annotations = clazz.getAnnotations();<span class="comment">//获取Student的注解信息数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; annotations.length;i++)&#123;</span><br><span class="line">            System.out.println(annotations[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span>()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyAnnotation</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"人吃饭"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">walk</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学生走路"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@Random_name.sgm.my_Annotation.MyAnnotation(value=hello)</span><br></pre></td></tr></table></figure><h2 id="6-JDK8-中注解的新特性"><a href="#6-JDK8-中注解的新特性" class="headerlink" title="6. JDK8 中注解的新特性"></a>6. JDK8 中注解的新特性</h2><p>Java 8对注解处理提供了两点改进：<code>可重复的注解及可用于类型的注解</code>。此外，反射也得到了加强，在Java8中能够得到方法参数的名称。这会简化标注在方法参数上的注解。</p><p><font color=red size=5>可重复注解</font></p><p><strong>可重复注解示例：</strong></p><ol><li>在MyAnnotation上声明@Repeatable，成员值为MyAnnotations.class</li><li>MyAnnotations的@Target可以是MyAnnotation子集或完全一样。</li><li>MyAnnotations的@Retention必须和MyAnnotation完全一样。</li><li>其它元注解，MyAnnotations也要和MyAnnotation保持一样</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//子类可以继承父类类级别的Annotation</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//指定该 Annotation 的生命周期</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">//指定被修饰的 Annotation 能用于修饰哪些程序元素</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Repeatable</span>(MyAnnotations<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">MyAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//子类可以继承父类类级别的Annotation</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//指定该 Annotation 的生命周期</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">//指定被修饰的 Annotation 能用于修饰哪些程序元素</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyAnnotations &#123;</span><br><span class="line">    MyAnnotation[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color=red size=5>类型注解</font></p><ul><li>JDK1.8之后，关于元注解@Target的参数类型ElementType枚举值多了两个：<br><code>TYPE_PARAMETER,TYPE_USE。</code></li><li>在Java 8之前，注解只能是在声明的地方所使用，Java8开始，注解可以应用在任何地方。</li><li><code>ElementType.TYPE_PARAMETER</code> 表示该注解能写在类型变量的声明语句中（如：泛型声明）。</li><li><code>ElementType.TYPE_USE</code> 表示该注解能写在使用类型的任何语句中</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定被该元 Annotation 修饰的 Annotation 类将被javadoc 工具提取成文档</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//子类可以继承父类类级别的Annotation</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="comment">//指定该 Annotation 的生命周期</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="comment">//指定被修饰的 Annotation 能用于修饰哪些程序元素</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE,TYPE_PARAMETER,TYPE_USE&#125;)</span><br><span class="line"><span class="meta">@Repeatable</span>(MyAnnotations<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">MyAnnotation</span> </span>&#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span> <span class="keyword">default</span> "hello"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//该注解能写在类型变量的声明语句中（如：泛型声明 T ）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;@<span class="title">MyAnnotation</span> <span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> <span class="keyword">throws</span> @MyAnnotation RuntimeException</span>&#123;</span><br><span class="line"><span class="comment">//该注解能写在使用类型的任何语句中</span></span><br><span class="line">        ArrayList&lt;<span class="meta">@MyAnnotation</span> String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="comment">//该注解能写在使用类型的任何语句中</span></span><br><span class="line">        <span class="keyword">int</span> num = (<span class="meta">@MyAnnotation</span> <span class="keyword">int</span>) <span class="number">10L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 枚举 </tag>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异常: Exception </title>
      <link href="/posts/23a3bd72.html"/>
      <url>/posts/23a3bd72.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是异常？"><a href="#1-什么是异常？" class="headerlink" title="1.什么是异常？"></a>1.什么是异常？</h2><p>在使用计算机语言进行项目开发的过程中，即使程序员把代码写得 <code>尽善尽美</code>，在系统的运行过程中仍然会遇到一些问题，因为很多问题不是靠代码能够避免的，比如：客户输入数据的格式，读取文件是否存在，网络是否始终保持通畅,，栈溢出，堆溢出等等。这些错误就叫做异常。</p><p><code>异常</code>：在Java语言中，将程序执行中发生的不正常情况称为“异常”。(开发过程中的语法错误和逻辑错误不是异常)</p><h2 id="2-异常的分类"><a href="#2-异常的分类" class="headerlink" title="2.异常的分类"></a>2.异常的分类</h2><h3 id="2-1-Error与Exception"><a href="#2-1-Error与Exception" class="headerlink" title="2.1 Error与Exception"></a>2.1 Error与Exception</h3><p><strong>Java程序在执行过程中所发生的异常事件可分为两类：</strong></p><ul><li><p><code>Error</code> ：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。比如：StackOverflowError、VirtualMachineError、OOM（OutOfMemoryError）、ThreadDeath。一般不编写针对性的代码进行处理。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorTest</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//1.栈溢出：java.lang.StackOverflowError</span></span><br><span class="line"><span class="comment">//main(args);</span></span><br><span class="line"><span class="comment">//2.堆溢出：java.lang.OutOfMemoryError </span></span><br><span class="line">Integer[] arr = <span class="keyword">new</span> Integer[<span class="number">1024</span>*<span class="number">1024</span>*<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Exception</code>: 因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。例如：</p><ol><li>空指针访问</li><li>试图读取不存在的文件</li><li>网络连接中断</li><li>数组角标越界</li></ol></li></ul><p><strong>Exception能被程序本身处理，Error是无法处理</strong></p><p><strong>对于<code>Error</code>和<code>Exception</code>，一般有两种 解决方法：</strong></p><ol><li>一是遇到错误就终止程序的运行。</li><li>另一种方法是由程序员在编写程序时，就考虑到错误的检测、错误消息的提示，以及错误的处理。</li></ol><blockquote><p>捕获错误最理想的是在 编译期间，但有的错误只有在 运行时才会发生。<br>比如：除数为0，数组下标越界等</p></blockquote><h3 id="2-2-编译时与运行时异常-受检异常与非受检异常"><a href="#2-2-编译时与运行时异常-受检异常与非受检异常" class="headerlink" title="2.2 编译时与运行时异常(受检异常与非受检异常)"></a>2.2 编译时与运行时异常(受检异常与非受检异常)</h3><p>我们将<code>Error</code>和<code>Exception</code>两种异常按<code>编译时</code>与<code>运行时</code>再细分，可分为<code>编译时异常</code>和<code>运行时异常</code>，<code>编译时异常可称为（checked）受检异常，运行时异常可称为（unchecked）非受检异常</code>。</p><ol><li>运行时异常</li></ol><ul><li><code>指编译器不要求强制处置的异常</code>。一般是指编程时的逻辑错误，是程序员应该积极避免其出现的异常。<code>java.lang.RuntimeException类及它的子类都是运行时异常。</code></li><li>对于这类异常，可以不作处理，因为这类异常很普遍，若全处理可能会对程序的可读性和运行效率产生影响。</li></ul><ol start="2"><li>编译时异常</li></ol><ul><li><p><code>指编译器要求必须处置的异常</code>。即程序在运行时由于外界因素造成的一般性异常。<code>编译器要求Java程序必须捕获或声明所有编译时异常。</code></p></li><li><p>对于这类异常，如果程序不处理，可能会带来意想不到的结果。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809125007.png" alt="image-20200809125007865"></p></li></ul><h2 id="3-常见的具体异常"><a href="#3-常见的具体异常" class="headerlink" title="3.常见的具体异常"></a>3.常见的具体异常</h2><p><strong>以下举几个常见的异常，可以在main方法中自行测试</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/************  以下是编译时异常  ************/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test7</span><span class="params">()</span></span>&#123;</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"hello.txt"</span>);<span class="comment">//当前目录下无hello.txt文件就会报异常</span></span><br><span class="line"><span class="comment">//FileNotFoundException </span></span><br><span class="line">FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> data = fis.read();</span><br><span class="line"><span class="keyword">while</span>(data != -<span class="number">1</span>)&#123;</span><br><span class="line">System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">data = fis.read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fis.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/************  以下是运行时异常  ************/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ArithmeticException </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">        System.out.println(a / b);<span class="comment">//除数不能为0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//InputMismatchException </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">    <span class="keyword">int</span> score = scanner.nextInt();<span class="comment">//输入不匹配异常，假设输入的是字符串</span></span><br><span class="line">        System.out.println(score);</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NumberFormatException </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str = <span class="string">"123"</span>;</span><br><span class="line">        str = <span class="string">"abc"</span>;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str);<span class="comment">//数据格式转换异常，字符串为非数字不能抓换为数字</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ClassCastException</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> Date();</span><br><span class="line">        String str = (String)obj;<span class="comment">//类的强制类型转换异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//IndexOutOfBoundsException  索引越界异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//ArrayIndexOutOfBoundsException </span></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">System.out.println(arr[<span class="number">10</span>]);<span class="comment">//数组索引越界异常</span></span><br><span class="line">        <span class="comment">//StringIndexOutOfBoundsException</span></span><br><span class="line">        String str = <span class="string">"abc"</span>;</span><br><span class="line">        System.out.println(str.charAt(<span class="number">3</span>));<span class="comment">//字符串索引越界异常</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//NullPointerException</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">null</span>;</span><br><span class="line">System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">        String str = <span class="string">"abc"</span>;</span><br><span class="line">        str = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(str.charAt(<span class="number">0</span>));<span class="comment">//str为null,空指针异常</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-如何处理异常？"><a href="#4-如何处理异常？" class="headerlink" title="4.如何处理异常？"></a>4.如何处理异常？</h2><ul><li>在编写程序时，经常要在可能出现错误的地方加上检测的代码，如进行x/y运算时，要检测分母为0，数据为空，输入的不是数据而是字符等。过多的if-else分支会导致程序的代码加长、臃肿，可读性差。因此采用异常处理机制。</li><li>Java采用的异常处理机制，是将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。</li><li>Java异常处理的方式有一下几种：<ol><li>代码中捕获异常：try-catch-finally</li><li>方法后面声明异常：throws + 异常类型</li><li>手动抛出异常：throw +异常对象</li><li>自定义异常</li></ol></li></ul><h3 id="4-1-异常的处理机制"><a href="#4-1-异常的处理机制" class="headerlink" title="4.1 异常的处理机制"></a>4.1 异常的处理机制</h3><p><strong>异常的处理：</strong><code>抓抛模型</code></p><ul><li><p><code>&quot;抛&quot;：</code>程序的执行过程中如出现异常，会生成一个异常类对象，该异常对象将被抛给Java运行时系统，这个过程称为抛出(throw)异常。一旦抛出对象以后，其后的代码就不再执行。<br><strong>关于异常对象的产生：</strong><br>① 由虚拟机自动生成：程序运行过程中，虚拟机检测到程序发生了问题，如果在当前代码中没有找到相应的处理程序，就会在后台自动创建一个对应异常类的实例对象并抛出——自动抛出</p><p>② 由开发人员 手动创建，手动的生成一个异常对象，并抛出（throw）</p></li><li><p><code>&quot;抓&quot;：</code>可以理解为异常的处理方式：① try-catch-finally  ② throws+ 异常类型</p></li></ul><p><strong>异常的抛出机制：</strong></p><ul><li>如果一个方法内抛出异常，该异常对象会被抛给调用者方法中处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。这个过程将一直继续下去，直到异常被处理。这一过程称为<code>捕获(catch)异常</code>。</li><li>如果一个异常回到main()方法，并且main()也不处理，则程序运行终止。</li><li>程序员通常只能处理Exception，而对Error无能为力。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809144453.png" alt="image-20200809144453593"></p><p><strong>接下来举几个例子，具体的用java提供的方法来处理一些异常。</strong></p><h3 id="4-2-代码中捕获异常：try-catch-finally"><a href="#4-2-代码中捕获异常：try-catch-finally" class="headerlink" title="4.2  代码中捕获异常：try-catch-finally"></a>4.2  代码中捕获异常：try-catch-finally</h3><p>try-catch-finally语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">...... <span class="comment">//可能产生异常的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName1 e )&#123;</span><br><span class="line">...... <span class="comment">//当产生ExceptionName1型异常时的处置措施</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>( ExceptionName2 e )&#123;</span><br><span class="line">...... <span class="comment">//当产生ExceptionName2型异常时的处置措施</span></span><br><span class="line">&#125;</span><br><span class="line">[ <span class="keyword">finally</span>&#123;</span><br><span class="line">...... <span class="comment">//无论是否发生异常， 都无条件执行的语句 ***finally可要可不要***</span></span><br><span class="line">&#125; ]</span><br></pre></td></tr></table></figure><p><strong>try：</strong></p><p>捕获异常的第一步是用try{…}语句块选定捕获异常的范围，将可能出现异常的代码放在try语句块中。</p><p><strong>catch (Exceptiontype e)：</strong></p><p>在catch语句块中是对<code>异常对象</code>进行处理的代码。每个try语句块可以伴随<code>一个或多个catch语句</code>，用于<code>处理</code>可能产生的<code>不同类型的异常对象</code>。</p><p><strong>如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类作为catch的参数。</strong></p><p>比 如 ： 可 以 用 ArithmeticException 类 作 为 参 数 的 地 方 ， 就 可 以 用RuntimeException类作为参数，或者用所有异常的父类Exception类作为参数。但不能是与ArithmeticException类无关的异常，如NullPointerException（catch中的语句将不会执行）。</p><p>我们可以在cath中使用异常对象的一些方法来捕获异常的有关信息。<br>下面的是 Throwable 类的主要方法:</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809145511.png" alt="image-20200809145511274"></p><p><strong>finally：</strong></p><ul><li>捕获异常的最后一步是通过finally语句为异常处理提供一个统一的出口，使得在控制流转到程序的其它部分以前，能够对程序的状态作统一的管理。像数据库连接、输入输出流、网络编程Socket等资源，JVM是不能自动的回收的，我们需要自己手动的进行资源的释放。此时的资源释放，就需要声明在finally中。</li><li>不论在try代码块中是否发生了异常事件，catch语句是否执行，catch语句是否有异常，catch语句中是否有return，finally块中的语句都会被执行。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809145948.png" alt="image-20200809145948166"></p><ul><li>finally语句和catch语句是任选的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: sdsd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-08-09 16:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"进入方法A"</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"制造异常"</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"用A方法的finally"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodB</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"进入方法B"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"调用B方法的finally"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            methodA();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        methodB();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">进入方法A</span><br><span class="line">用A方法的finally</span><br><span class="line">制造异常</span><br><span class="line">进入方法B</span><br><span class="line">调用B方法的finally</span><br></pre></td></tr></table></figure><p>下面举一个try-catch-finally的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        String str = <span class="string">"123"</span>;</span><br><span class="line">        str = <span class="string">"abc"</span>;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"-----1-------"</span>);</span><br><span class="line">            num = Integer.parseInt(str);</span><br><span class="line">            str=<span class="keyword">null</span>;</span><br><span class="line">            System.out.println(<span class="string">"-----2-------"</span>);</span><br><span class="line">            System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NumberFormatException e)&#123;</span><br><span class="line">System.out.println(<span class="string">"出现数值转换异常了，不要着急...."</span>);</span><br><span class="line">System.out.println(<span class="string">"e.getMessage()="</span>+e.getMessage());</span><br><span class="line">System.out.println(e.getMessage().toString());</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(NullPointerException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"出现空指针异常了，不要着急...."</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"出现异常了，不要着急...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"num="</span>+num);</span><br><span class="line">        System.out.println(<span class="string">"-----3--------"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809151815.png" alt="image-20200809151815472"></p><ul><li>异常是<code>RuntimeException类或是它的子类</code>，这些类的异常的特点是：即使没有使用try和catch捕获，<code>Java自己也能捕获</code>，并且编译通过( 但<code>运行时会发生异常使得程序运行终止</code> )。</li><li>如果抛出的异常是IOException等类型的<code>编译时时异常</code>，则<code>必须捕获</code>，否则编译错误。也就是说，<code>我们必须处理编译时异常，将异常进行捕捉，转化为运行时异常</code></li></ul><h3 id="4-3-方法中声明抛出异常：throws-异常类型"><a href="#4-3-方法中声明抛出异常：throws-异常类型" class="headerlink" title="4.3 方法中声明抛出异常：throws + 异常类型"></a>4.3 方法中声明抛出异常：throws + 异常类型</h3><ul><li>如果一个方法(中的语句执行时)可能生成某种异常，但是并不能确定如何处理这种异常，则此方法应<code>显示地声明抛出异常</code>，表明<code>该方法将不对这些异常进行处理，而由该方法的调用者负责处理。</code></li><li>在方法声明中用throws语句可以声明抛出异常的列表，throws后面的异常类型可以是方法中产生的异常类型，也可以是它的父类异常类型 。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThrowsTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ThrowsTest t = <span class="keyword">new</span> ThrowsTest();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            t.readFile();<span class="comment">//方法的调用者负责处理</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readFile</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;<span class="comment">//该方法将不对这些异常进行处理，而由该方法的调用者负责处理。</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(<span class="string">"atguigushk.txt"</span>);</span><br><span class="line">        <span class="keyword">int</span> b;</span><br><span class="line">        b = in.read();</span><br><span class="line">        <span class="keyword">while</span> (b != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) b);</span><br><span class="line">            b = in.read();</span><br><span class="line">        &#125;</span><br><span class="line">        in.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong><code>重写方法不能抛出比被重写方法范围更大的异常类型</code>。在多态的情况下，对methodA()方法的调用—异常的捕获按父类声明的异常处理。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B2</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span>  Exception </span>&#123; <span class="comment">// 报错。重写方法不能抛出比被重写方法范围更大的异常类型</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>开发中如何选择使用try-catch-finally 还是使用throws？</strong></p><ol><li><p>如果父类中被重写的方法没有throws方式处理异常，则子类重写的方法也不能使用throws，意味着如果子类重写的方法中有异常，必须使用try-catch-finally方式处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B1</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException </span>&#123;<span class="comment">//报错</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>执行的方法a中，先后又调用了另外的几个方法，这几个方法是递进关系执行的。建议这几个方法使用throws的方式进行处理。而执行的方法a可以考虑使用try-catch-finally方式进行处理。如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            method2();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        method3();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            method2();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        method1();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException,IOException</span>&#123;</span><br><span class="line">        File file = <span class="keyword">new</span> File(<span class="string">"hello1.txt"</span>);</span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> data = fis.read();</span><br><span class="line">        <span class="keyword">while</span>(data != -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>)data);</span><br><span class="line">            data = fis.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"hahaha!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-4-手动抛出异常：throw-异常对象"><a href="#4-4-手动抛出异常：throw-异常对象" class="headerlink" title="4.4 手动抛出异常：throw + 异常对象"></a>4.4 手动抛出异常：throw + 异常对象</h3><ul><li><p>Java异常类对象除在程序执行过程中出现异常时由系统自动生成并抛出，也可根据需要 使用人工 创建并抛出 。</p></li><li><p>首先要生成异常类对象，然后通过throw语句实现抛出操作(提交给Java运行环境)。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IOException e = <span class="keyword">new</span> IOException();</span><br><span class="line"><span class="keyword">throw</span> e;</span><br></pre></td></tr></table></figure></li><li><p>可以抛出的异常必须是Throwable或其子类的实例。下面的语句在编译时将会产生语法错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> String(<span class="string">"want to throw"</span>);<span class="comment">//Error</span></span><br></pre></td></tr></table></figure></li><li><p>可以在每个异常对象构造器中填写要打印的<code>异常信息</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"测试手动抛出异常"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-5-自定义异常类"><a href="#4-5-自定义异常类" class="headerlink" title="4.5 自定义异常类"></a>4.5 自定义异常类</h3><ul><li>一般地，用户自定义异常类都是<code>RuntimeException</code>的子类。</li><li>自定义异常类通常需要编写几个<code>重载的构造器</code>。</li><li>自定义异常需要提供<code>serialVersionUID</code></li><li>自定义的异常通过<code>throw抛出</code>。</li><li>自定义异常最重要的是异常类的名字，当异常出现时，可以根据名字判断异常类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 如何自定义异常类？</span></span><br><span class="line"><span class="comment"> * 1. 继承于现有的异常结构：RuntimeException 、Exception</span></span><br><span class="line"><span class="comment"> * 2. 提供全局常量：serialVersionUID  //标明身份唯一性</span></span><br><span class="line"><span class="comment"> * 3. 提供重载的构造器</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">7034897193246939L</span>;<span class="comment">//标明身份唯一性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: asdsa</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-08-09 16:19</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Student s = <span class="keyword">new</span> Student();</span><br><span class="line">            s.regist(-<span class="number">1001</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">//e.printStackTrace();</span></span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//System.out.println("您输入的数据非法！");</span></span><br><span class="line">            <span class="comment">//手动抛出异常对象</span></span><br><span class="line"><span class="comment">//throw new RuntimeException("您输入的数据非法！");</span></span><br><span class="line"><span class="comment">//throw new Exception("您输入的数据非法！");</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(<span class="string">"不能输入负数"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student [id="</span> + id + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">不能输入负数</span><br></pre></td></tr></table></figure><h2 id="5-一张图概览关键字"><a href="#5-一张图概览关键字" class="headerlink" title="5.一张图概览关键字"></a>5.一张图概览关键字</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200809163215.png" alt="image-20200809163215119"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 异常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类（abstract）与接口（interface）</title>
      <link href="/posts/77de2e90.html"/>
      <url>/posts/77de2e90.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是抽象类？"><a href="#1-什么是抽象类？" class="headerlink" title="1. 什么是抽象类？"></a>1. 什么是抽象类？</h2><p>随着继承层次中一个个新子类的定义，类变得越来越具体，而父类则更一般，更通用。类的设计应该保证父类和子类能够共享特征。有时将一个父类设计得非常抽象，以至于它没有具体的实例，这样的类叫做<code>抽象类</code>。</p><p>抽象类的出现使面向对象更加规范，比如人是一个抽象的概念，没有具体的对象，我们应该将其抽象成一个类，它无法生成对象实例，却拥有一些人通用的属性和方法。有些方法人类都是一样的行为，比如说都是用嘴吃饭，用耳朵听声音等；但有些则不是，比如工作，不同的岗位人们有不同的工作行为，那么这些行为的具体实现在子类完成，Person父类只负责定义。</p><h2 id="2-抽象类与抽象方法的特点"><a href="#2-抽象类与抽象方法的特点" class="headerlink" title="2. 抽象类与抽象方法的特点"></a>2. 抽象类与抽象方法的特点</h2><ul><li>用abstract关键字来修饰一个类，这个类叫做抽象类。</li><li>抽象类可以有构造器，可以使用this关键字，子类可以使用super关键字</li><li>用abstract来修饰一个方法，该方法叫做抽象方法。抽象方法只能声明，具体实现应该交给子类完成<br>抽象方法：只有方法的声明，没有方法的实现。以分号结束：<br>比如：public abstract void talk();</li><li>抽象类中不一定包含抽象方法,但是含有抽象方法的类必须被声明为抽象类。</li><li>抽象类不能被实例化。抽象类是用来被继承的，抽象类的子类必须定义父类的抽象方法，并提供方法体。若没有定义全部的抽象方法，仍为抽象类。</li><li>不能用abstract修饰变量、代码块、构造器；</li><li>不能用abstract修饰私有(private)方法、静态(static)方法、final的方法、final的类</li><li>抽象类可以引用非抽象类的子类对象，并调用子类实现抽象类定义的方法和抽象类本身不是抽象的方法。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Random_name.sgm.abstract_interface;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestMain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-08-08 12:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> aa=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String str=<span class="string">"可以有static属性"</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"可以有代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    A(<span class="keyword">int</span> aa)&#123;</span><br><span class="line">        <span class="keyword">this</span>.aa=aa;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A类中定义的m2方法"</span>);</span><br><span class="line">        System.out.println(<span class="string">"A类中的属性a="</span>+<span class="keyword">this</span>.aa);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> bb=<span class="number">10</span>;</span><br><span class="line">    B(<span class="keyword">int</span> aa,<span class="keyword">int</span> bb)&#123;</span><br><span class="line">        <span class="keyword">super</span>(aa);</span><br><span class="line">        <span class="keyword">this</span>.bb=<span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B类中定义的m1方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B类中重写的的m2方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.m2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> B(<span class="number">20</span>,<span class="number">20</span>);</span><br><span class="line">        a.m1();</span><br><span class="line">        a.m2();</span><br><span class="line">        B b=<span class="keyword">new</span> B(<span class="number">30</span>,<span class="number">30</span>);</span><br><span class="line">        b.m3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以有代码块</span><br><span class="line">B类中定义的m1方法</span><br><span class="line">B类中重写的的m2方法</span><br><span class="line">A类中定义的m2方法</span><br><span class="line">A类中的属性a=<span class="number">30</span></span><br></pre></td></tr></table></figure><h2 id="3-抽象类的应用"><a href="#3-抽象类的应用" class="headerlink" title="3. 抽象类的应用"></a>3. 抽象类的应用</h2><p>抽象类的应用与多态应用相关联。</p><p>抽象类体现的是一种模板模式的设计，抽象类作为多个子类的通用模板，子类在抽象类的基础上进行扩展、改造，但子类总体上会保留抽象类的行为方式。</p><p><strong>抽象类解决的问题：</strong></p><ol><li>当功能内部一部分实现是确定的，一部分实现是不确定的。这时可以把不确定的部分暴露出去，让子类去实现。</li><li>在软件开发中实现一个算法时，整体步骤很固定、通用，这些步骤已经在父类中写好了。但是某些部分易变，易变部分可以抽象出来，供不同子类实现。这就是一种<code>模板模式</code>。</li></ol><p>模板方法设计模式是编程中经常用得到的模式。各个框架、类库中都有他的影子，比如常见的有：</p><ol><li>数据库访问的封装</li><li>Junit单元测试</li><li>JavaWeb的Servlet中关于doGet/doPost方法调用</li><li>Hibernate中模板程序</li><li>Spring中JDBCTemlate、HibernateTemplate等</li></ol><h2 id="4-什么是接口？"><a href="#4-什么是接口？" class="headerlink" title="4. 什么是接口？"></a>4. 什么是接口？</h2><ul><li>接口（英文：Interface），在JAVA编程语言中是一个抽象类型，是抽象方法的集合，接口通常以interface来声明。</li><li>有时必须从几个类中派生出一个子类，继承它们所有的属性和方法。但是，Java不支持多重继承。有了接口，就可以得到多重继承的效果。</li><li>有时必须从几个类中抽取出一些共同的行为特征，而它们之间又没有is-a的关系，仅仅是具有相同的行为特征而已。</li><li>接口就是规范，定义的是一组规则，体现了现实世界中“如果你是/要…则必须能…”的思想。继承是一个”是不是”的关系，而接口实现则是 “能不能”的关系。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200808185924.png" alt="image-20200808185924554"></p><h2 id="5-接口的特点"><a href="#5-接口的特点" class="headerlink" title="5.接口的特点"></a>5.接口的特点</h2><ul><li>接口(interface)是抽象方法和全局常量值定义的集合(jdk8之前)。jdk8之后可以定义static和default的方法和方法体</li><li>接口的特点：<ol><li>用interface来定义。</li><li><code>接口中没有构造器</code>。</li><li>接口不能用于实例化对象。</li><li><code>接口中不能拥有代码块</code></li><li>接口中的所有成员变量都默认是由<code>public static final</code>修饰的。</li><li>接口中的所有抽象方法都默认是由<code>public abstract</code>修饰的。</li><li>一个类可以实现多个接口，接口也可以继承（extends）其它一个或多个接口。</li><li>定义Java类的语法格式：先写extends，后写implements<br>class SubClass <code>extends</code> SuperClass <code>implements</code> InterfaceA{ }</li><li>实现接口的类中必须提供接口中所有方法的具体实现内容，方可实例化。否则，仍为抽象类。</li><li>接口的主要用途就是被实现类实现。（面向接口编程）</li><li>与继承关系类似，接口与实现类之间存在多态性</li><li>接口和类是并列关系，或者可以理解为一种特殊的类。从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义(JDK7.0及之前)，而没有变量和方法的实现。</li></ol></li></ul><p><strong>接口的定义举例：</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200808190415.png" alt="image-20200808190415337"></p><p><strong>JDK8中关于接口的改进:</strong></p><ul><li><p>Java 8中，你可以为接口添加静态方法和默认方法。从技术角度来说，这是完全合法的，只是它看起来违反了接口作为一个抽象定义的理念。</p></li><li><p><code>静态方法</code>：使用 static 关键字修饰。可以通过接口直接调用静态方法，并执行其方法体。我们经常在相互一起使用的类中使用静态方法。可以在标准库中找到像Collection/Collections或者Path/Paths这样成对的接口和类。</p></li><li><p><code>默认方法</code>：默认方法使用 default 关键字修饰。可以通过实现类对象来调用。我们在已有的接口中提供新方法的同时，还保持了与旧版本代码的兼容性。比如：java 8 API中对Collection、List、Comparator等接口提供了丰富的默认方法。</p><ol><li>若一个接口中定义了一个默认方法，而另外一个接口中也定义了一个同名同参数的方法（不管此方法是否是默认方法），在实现类同时实现了这两个接口时，会出现： ·接口冲突·。<br><code>解决办法</code>：实现类必须覆盖接口中同名同参数的方法，来解决冲突。</li><li>若一个接口中定义了一个默认方法，实现其接口的类的父类中也定义了一个同名同参数的非抽象方法，则不会出现冲突问题。因为此时遵守： <code>类优先原则</code>。接口中具有相同名称和参数的默认方法会被忽略。</li></ol></li><li><p><code>接口中静态方法和默认方法必须给出方法体，不能只定义</code></p></li></ul><p><strong>根据接口的特点，综合举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/************  一个类可以实现多个无关的接口  ************/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Runner</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;<span class="comment">//jdk8之前只能声明非static和defult的方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun2</span><span class="params">()</span> </span>&#123;<span class="comment">//jdk8之后可以定义static和defult的方法，不能声明，必须给出方法体</span></span><br><span class="line">        System.out.println(<span class="string">"interface Runner static fun2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.a);<span class="comment">//可以使用this,但是不能更改其值，因为默认缺省public static final</span></span><br><span class="line">        System.out.println(<span class="string">"interface Runner default fun3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Swimmer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">swim</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"interface Swimmer default fun3"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">skip</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"interface Swimmer default skip"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Creator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"eat"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">skip</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"class Creator skip"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Creator</span> <span class="keyword">implements</span> <span class="title">Runner</span> ,<span class="title">Swimmer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">swim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"swim"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1.1</span>d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"class Man  fun3"</span>);<span class="comment">//类覆盖两个接口中默认的方法fun3()</span></span><br><span class="line">        Runner.<span class="keyword">super</span>.fun3();<span class="comment">//调用原接口中默认的方法</span></span><br><span class="line">        Swimmer.<span class="keyword">super</span>.fun3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        Man m = <span class="keyword">new</span> Man();</span><br><span class="line">        t.m1(m);<span class="comment">//接口多态引用，与继承关系类似，接口与实现类之间存在多态性</span></span><br><span class="line">        t.m2(m);</span><br><span class="line">        t.m3(m);</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        Runner.fun2();</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        System.out.println(Runner.a);</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        m.fun3();</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        m.skip();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">(Runner f)</span> </span>&#123;<span class="comment">//接口多态引用</span></span><br><span class="line">        f.run();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">(Swimmer s)</span> </span>&#123;<span class="comment">//接口多态引用</span></span><br><span class="line">        s.swim();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">(Creator a)</span> </span>&#123;<span class="comment">//接口多态引用</span></span><br><span class="line">        a.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">run</span><br><span class="line">swim</span><br><span class="line">eat</span><br><span class="line">-----------</span><br><span class="line">interface Runner static fun2</span><br><span class="line">-----------</span><br><span class="line"><span class="number">10</span></span><br><span class="line">-----------</span><br><span class="line">class Man  fun3</span><br><span class="line"><span class="number">10</span></span><br><span class="line">interface Runner default fun3</span><br><span class="line">interface Swimmer default fun3</span><br><span class="line">-----------</span><br><span class="line">class Creator skip</span><br></pre></td></tr></table></figure><h2 id="6-接口面试题"><a href="#6-接口面试题" class="headerlink" title="6.接口面试题"></a>6.接口面试题</h2><p><strong>题一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span> <span class="keyword">implements</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pX</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(x);<span class="comment">//Error</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.x);<span class="comment">//1</span></span><br><span class="line">        System.out.println(A.x);<span class="comment">//0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> C().pX();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-抽象类与接口的对比"><a href="#7-抽象类与接口的对比" class="headerlink" title="7.抽象类与接口的对比"></a>7.抽象类与接口的对比</h2><p> <img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200808195958.png" alt="image-20200808195958458"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抽象类 </tag>
            
            <tag> 接口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static &amp; main &amp; final</title>
      <link href="/posts/725e9ca.html"/>
      <url>/posts/725e9ca.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><ul><li>本篇文章主要介绍Java语言中的两大关键字satic和final，还有main方法与static的<code>渊源</code>。</li><li>static的中文意思是静态的,final的中文意思是最终的，不可更改的。</li></ul><p><strong>我们将从以下三大主线讲解：</strong></p><ol><li>static 修饰属性、方法、代码块、内部类</li><li>main 方法与 static 的渊源</li><li>final 修饰类、变量和方法</li></ol><h2 id="2-简介JVM内存模型的虚拟机栈，堆和方法区"><a href="#2-简介JVM内存模型的虚拟机栈，堆和方法区" class="headerlink" title="2. 简介JVM内存模型的虚拟机栈，堆和方法区"></a>2. 简介JVM内存模型的虚拟机栈，堆和方法区</h2><p>这里只介绍<code>虚拟机栈，堆和方法区</code>,因为这篇文章需要使用到。</p><ul><li><p>通常所说的<code>栈(Stack)</code> ，是指<code>虚拟机栈</code>。虚拟机栈用于<code>存储局部变量</code>等。局部变量表存放了编译期可知长度的各种基本数据类型(boolean、byte、char、short、int、float、long、double )，对象引用( reference类型，它不等同于对象本身，是对象在堆内存的首地址)。方法执行完， 自动释放，从栈中弹出。</p></li><li><p><code>堆(Heap)</code>，此内存区域的唯一目的就是<code>存放对象实例</code>，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：<code>所有的对象实例以及数组都要在堆上分配</code>。</p></li><li><p><code>方法区(Method Area)</code>，用于存储已被虚拟机加载的<code>类信息、常量、静态变量、即时编译器编译后的代码等数据</code>。</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200803180340.png" alt="image-20200803180340086"></p><h2 id="3-static"><a href="#3-static" class="headerlink" title="3.static"></a>3.static</h2><h3 id="2-1-为什么需要static"><a href="#2-1-为什么需要static" class="headerlink" title="2.1 为什么需要static?"></a>2.1 为什么需要static?</h3><ul><li>有时候我们想要让所有同一个类的实例对象共享同一个数据，那么我们就需要用到类变量，也就是static修饰的变量。</li><li>这个数据可以是属性、方法、代码块、内部类</li></ul><h3 id="2-2-static修饰的属性、方法、代码块、内部类的特点"><a href="#2-2-static修饰的属性、方法、代码块、内部类的特点" class="headerlink" title="2.2 static修饰的属性、方法、代码块、内部类的特点"></a>2.2 static修饰的属性、方法、代码块、内部类的特点</h3><ol><li>随着类的加载而加载；无论是否产生对象，static修饰的属性、方法、代码块、内部类都会在JVM内存区的方法区存在一份</li><li>优先于对象存在，类加载时static域已经在内存中加载了，加载到了JVM内存的<code>方法区</code></li><li>修饰的成员，被同一个类实例的所有对象共享</li><li>访问权限允许时，可不创建对象，直接被类调用，即通过类名访问static修饰的成员，classname.staticmember</li></ol><h3 id="2-2-static-属性"><a href="#2-2-static-属性" class="headerlink" title="2.2 static 属性"></a>2.2 static 属性</h3><ul><li>static修饰的类变量（类属性）由该类的所有实例共享</li><li>static修饰的属性可以被继承</li><li>当某一个实例改变了static修饰的属性的值时，其它实例变量使用时是修改后的值，如下图所举例子所示：</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200803175420.png" alt="image-20200803175417929"></p><h3 id="2-3-static-方法"><a href="#2-3-static-方法" class="headerlink" title="2.3 static 方法"></a>2.3 static 方法</h3><ul><li><p>static修饰的方法简称类方法</p></li><li><p>没有对象的实例时，可以用 <code>类名. 方法名()</code>的形式访问由static修饰的类方法。</p></li><li><p>在<code>static 方法内部只能访问类的static 修饰的属性或方法， 不能访问类的非static 的结构</code>。</p></li><li><p>因为不需要实例就可以访问static 方法，因此static 方法内部不能有this 。当然也不能有super</p></li><li><p><code>static修饰的方法不可以重写</code>,重写的定义是：<strong>方法名、返回值类型、参数列表</strong> 与父类中某个方法一样。经检验子类必须写的和父类一模一样加static才可以覆盖static方法，而这不满足重写的定义，所以不能叫重写</p></li><li><p><code>static修饰的属性和方法可以继承，可以使用子类类名访问，但是不能通过子类对象访问。</code></p></li></ul><h3 id="2-4-static的属性和方法在父类与子类之间的继承和重写关系"><a href="#2-4-static的属性和方法在父类与子类之间的继承和重写关系" class="headerlink" title="2.4  static的属性和方法在父类与子类之间的继承和重写关系"></a>2.4  static的属性和方法在父类与子类之间的继承和重写关系</h3><p><strong>下面一个例子测试了static的属性和方法在父类与子类之间的继承和重写关系：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s=<span class="string">"Person"</span>;<span class="comment">//测试重写</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;<span class="comment">//测试重写</span></span><br><span class="line">        System.out.println(<span class="string">"Person display"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String ss=<span class="string">"Person two"</span>; <span class="comment">//测试继承性</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">displayPerson</span><span class="params">()</span> </span>&#123;<span class="comment">////测试继承性</span></span><br><span class="line">        System.out.println(<span class="string">"Person displayPerson"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String s=<span class="string">"Man"</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;<span class="comment">//将static去掉报错</span></span><br><span class="line">        System.out.println(<span class="string">"Man display"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        total++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getTotalPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//id++; //静态方法不能访问非静态属性和方法</span></span><br><span class="line">        <span class="comment">//displayA();</span></span><br><span class="line">        <span class="comment">//this.total=10;</span></span><br><span class="line">        <span class="comment">//this.id=10;</span></span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/************  打印Person的属性和方法做对比  ************/</span></span><br><span class="line">        System.out.println(Person.s);</span><br><span class="line">        System.out.println(Person.ss);</span><br><span class="line">        Person.display();</span><br><span class="line">        Person.displayPerson();</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  测试继承性  ************/</span></span><br><span class="line">        System.out.println(Man.ss);</span><br><span class="line">        Man.displayPerson();</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  测试重写性  ************/</span></span><br><span class="line">        System.out.println(Man.s);</span><br><span class="line">        Man.display();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  测试多态性  ************/</span></span><br><span class="line">        Person p=<span class="keyword">new</span> Man();<span class="comment">//不能调用Person和Man的任何属性方法，只能调用Object的属性和方法</span></span><br><span class="line"></span><br><span class="line">        Man mm=<span class="keyword">new</span> Man();<span class="comment">//mm不能访问Person的static属性和static方法</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">        System.out.println(<span class="string">"total is "</span> + Man.getTotalPerson());</span><br><span class="line">        Man p1 = <span class="keyword">new</span> Man();<span class="comment">//执行构造器total+1</span></span><br><span class="line">        System.out.println(<span class="string">"total is "</span> + Man.getTotalPerson());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Person</span><br><span class="line">Person two</span><br><span class="line">Person display</span><br><span class="line">Person displayPerson</span><br><span class="line">---------</span><br><span class="line">Person two</span><br><span class="line">Person displayPerson</span><br><span class="line">---------</span><br><span class="line">Man</span><br><span class="line">Man display</span><br><span class="line">---------</span><br><span class="line">total is <span class="number">1</span></span><br><span class="line">total is <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="2-5-static代码块与非static代码块"><a href="#2-5-static代码块与非static代码块" class="headerlink" title="2.5  static代码块与非static代码块"></a>2.5  static代码块与非static代码块</h3><p><strong>既然已经说到了代码块，那么就一次性把静态和非静态代码块一次性尽量总结完叭</strong></p><ul><li>代码块(或初始化块)的作用：<br>  对Java 类或对象进行初始化</li><li>代码块(或初始化块)的分类：<br> 一个类中代码块若有修饰符，则<code>只能被static修饰</code>，称为<code>静态代码块</code>(static block)，没有使用static修饰的，为<code>非静态代码块</code> 。</li><li>static 代码块化 通常用于初始化static</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> total;</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">total = <span class="number">100</span>;<span class="comment">// 为total 赋初值</span></span><br><span class="line">&#125;</span><br><span class="line">…… <span class="comment">//其它属性或方法声明</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>静态代码块：用static 修饰的代码块</strong></p><ol><li>可以有输出语句。</li><li>可以对类的属性、类的声明进行初始化操作。</li><li>不可以对非静态的属性初始化。即：不可以调用非静态的属性和方法。</li><li>若有多个静态的代码块，那么按照从上到下的顺序依次执行。</li><li>静态代码块的执行要先于非静态代码块。</li><li><code>静态代码块随着类的加载而加载，且只执行一次</code>。</li></ol><p><strong>非静态代码块：没有static 修饰的代码块</strong></p><ol><li>可以有输出语句。</li><li>可以对类的属性、类的声明进行初始化操作。</li><li>除了调用非静态的结构外，还可以调用静态的变量或方法。</li><li>若有多个非静态的代码块，那么按照从上到下的顺序依次执行。</li><li><code>每次创建对象的时候，都会执行一次。且先于构造器执行</code>。</li></ol><ul><li>静态代码块不可以继承，只随类的加载执行一次</li><li>非静态代码块可继承，每次创建对象的时候，都会执行一次。且先于构造器执行</li></ul><p>下面看个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    Person()&#123;</span><br><span class="line">        System.out.println(<span class="string">"person construct"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> a=<span class="number">1</span>,b=<span class="number">1</span>;</span><br><span class="line">    &#123;<span class="comment">//`每次创建对象的时候，都会执行一次。且先于构造器执行`</span></span><br><span class="line">        a++;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">20</span>;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            int b=2;//不能在嵌套的两个&#123;&#123;&#125;&#125;定义相同的变量</span></span><br><span class="line">            a++;</span><br><span class="line">        &#125;</span><br><span class="line">        a++;</span><br><span class="line">        System.out.println(<span class="string">"no static Person a="</span>+a);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">int</span> c=<span class="number">1</span>,d=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;<span class="comment">//`静态代码块随着类的加载而加载，且只执行一次`</span></span><br><span class="line">        c++;</span><br><span class="line">        <span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> yy=<span class="number">20</span>;</span><br><span class="line">        &#123;</span><br><span class="line"><span class="comment">//            int b=2;//不能在嵌套的两个&#123;&#123;&#125;&#125;定义相同的变量</span></span><br><span class="line">            c++;</span><br><span class="line">        &#125;</span><br><span class="line">        c++;</span><br><span class="line">        System.out.println(<span class="string">"static Person c="</span>+c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    Man()&#123;</span><br><span class="line">        <span class="keyword">this</span>.a=<span class="number">10</span>;<span class="comment">//不能this.c this.d</span></span><br><span class="line">        <span class="keyword">this</span>.b=<span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">"Man a="</span>+a);</span><br><span class="line">        System.out.println(<span class="string">"Man b="</span>+b);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p=<span class="keyword">new</span> Person();</span><br><span class="line">        System.out.println(<span class="string">"-----------"</span>);</span><br><span class="line">        Man m=<span class="keyword">new</span> Man();</span><br><span class="line">        System.out.println(<span class="string">"---------"</span>);</span><br><span class="line">        System.out.println(Man.c);</span><br><span class="line">        System.out.println(Man.d);</span><br><span class="line">        System.out.println(m.a);</span><br><span class="line">        System.out.println(m.b);<span class="comment">//没有m.c m.d</span></span><br><span class="line">        <span class="comment">//m.xx 报错，就像方法里面的局部变量一样不可以使用对象或类名访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">static Person c=<span class="number">4</span></span><br><span class="line">no static Person a=<span class="number">4</span></span><br><span class="line">person construct</span><br><span class="line">-----------</span><br><span class="line">no static Person a=<span class="number">4</span></span><br><span class="line">person construct</span><br><span class="line">Man a=<span class="number">10</span></span><br><span class="line">Man b=<span class="number">10</span></span><br><span class="line">---------</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">10</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h3 id="2-6-程序中成员变量赋值的执行顺序"><a href="#2-6-程序中成员变量赋值的执行顺序" class="headerlink" title="2.6  程序中成员变量赋值的执行顺序"></a>2.6  程序中成员变量赋值的执行顺序</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200804212544.png" alt="image-20200804212542646"></p><h3 id="2-7-静态内部类"><a href="#2-7-静态内部类" class="headerlink" title="2.7 静态内部类"></a>2.7 静态内部类</h3><ul><li>关于静态内部类可参考此篇文章里面写到的静态内部类：<a href="https://www.bithachi.cn/posts/bf7b3e18.html">https://www.bithachi.cn/posts/bf7b3e18.html</a></li></ul><h2 id="4-static与main"><a href="#4-static与main" class="headerlink" title="4.static与main"></a>4.static与main</h2><h3 id="4-1-static与main方法简介"><a href="#4-1-static与main方法简介" class="headerlink" title="4.1 static与main方法简介"></a>4.1 static与main方法简介</h3><ul><li><p>由于Java虚拟机需要调用类的main()方法，所以该方法的访问权限必须是public，又因为Java虚拟机在执行main()方法时不必创建对象，所以该方法必须是static的，该方法接收一个String类型的数组参数，该数组中保存执行Java命令时传递给所运行的类的参数。</p></li><li><p>又<code>因为main() 方法是静态的，我们不能直接访问该类中的非静态成员</code>，必须创建该类的一个实例对象后，才能通过这个对象去访问类中的非静态成员。</p></li></ul><p><strong>命令行参数用法举例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandPara</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">"args["</span> + i + <span class="string">"] = "</span> + args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200804215629.png" alt="image-20200804215628963"></p><h3 id="4-2-面试题"><a href="#4-2-面试题" class="headerlink" title="4.2 面试题"></a>4.2 面试题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">此处，Something类的文件名叫OtherThing.java</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] something_to_do)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Do something ..."</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">上述程序是否可以正常编译、运行？</span><br></pre></td></tr></table></figure><p><code>答案是可以正常编译执行</code></p><h2 id="5-final"><a href="#5-final" class="headerlink" title="5.final"></a>5.final</h2><p><strong>在Java中声明类、变量和方法时，可使用关键字final来修饰,表示“最终的”。</strong></p><ol><li>final 标记的类不能被继承 。提高安全性，提高程序的可读性。<br>String类、System类、StringBuffer类</li><li>final 标记的方法不能被子类重写。<br>比如：Object类中的getClass()。</li><li>final 标记的变量( 成员变量或局部变量) 即称为常量 。名称大写，且只能被赋值一次。</li><li>final标记的成员变量必须在声明时或在每个构造器中或代码块中显式赋值，然后才能使用。<br>final double MY_PI = 3.14;</li></ol><h3 id="5-1-final-修饰变量——-常量"><a href="#5-1-final-修饰变量——-常量" class="headerlink" title="5.1 final 修饰变量—— 常量"></a>5.1 final 修饰变量—— 常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String INFO = <span class="string">"BitHachi"</span>; <span class="comment">//声明常量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//The final field A.INFO cannot be assigned</span></span><br><span class="line">    <span class="comment">//INFO = "Hachi";//Error</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-2-final修饰类"><a href="#5-2-final修饰类" class="headerlink" title="5.2 final修饰类"></a>5.2 final修饰类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123; <span class="comment">//错误，不能被继承。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-final修饰方法"><a href="#5-3-final修饰方法" class="headerlink" title="5.3 final修饰方法"></a>5.3 final修饰方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"A"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="comment">// 错误，不能被重写。</span></span><br><span class="line">    System.out.println(<span class="string">"B"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-4-static-final—全局常量"><a href="#5-4-static-final—全局常量" class="headerlink" title="5.4  static final—全局常量"></a>5.4  static final—全局常量</h3><ul><li>static final：全局常量</li><li>static修饰的属性强调它们只有一个，final修饰的属性表明是一个常数（创建后不能被修改）。</li><li>static final修饰的属性表示一旦给值，就不可修改，并且可以通过类名访问</li></ul><h3 id="5-5-面试题"><a href="#5-5-面试题" class="headerlink" title="5.5 面试题"></a>5.5 面试题</h3><p><strong>面试一：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addOne</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++x;<span class="comment">//Error</span></span><br><span class="line">    <span class="comment">// return x + 1;//OK</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">调用addOne方法时，不能对<span class="keyword">final</span>常量改变值，只能使用其值</span><br></pre></td></tr></table></figure><p><strong>面试二：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Something</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    Other o = <span class="keyword">new</span> Other();</span><br><span class="line">    <span class="keyword">new</span> Something().addOne(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">(<span class="keyword">final</span> Other o)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// o = new Other();//o是常量不可以再变</span></span><br><span class="line">    o.i++;<span class="comment">//i是变量可以变</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Other</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> static </tag>
            
            <tag> main </tag>
            
            <tag> final </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八大基本数据类型对应的八大包装类（含对应面试题解析）</title>
      <link href="/posts/a852be86.html"/>
      <url>/posts/a852be86.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-为什么我们需要包装类？"><a href="#1-为什么我们需要包装类？" class="headerlink" title="1.为什么我们需要包装类？"></a>1.为什么我们需要包装类？</h2><p>因为Java是面向对象编程的，那么我们想让基本数据类型可以有对象的特征，调用一些方法，那么Java就提供了包装类，实现基本数据类型转换成包装类，进而使得基本数据类型有了类的特点，可以调用类中的方法。</p><h2 id="2-包装类都有哪些呢？"><a href="#2-包装类都有哪些呢？" class="headerlink" title="2. 包装类都有哪些呢？"></a>2. 包装类都有哪些呢？</h2><p>话不多说，直接上图</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731200506.png" alt="image-20200731200506011"></p><h2 id="3-装箱与拆箱"><a href="#3-装箱与拆箱" class="headerlink" title="3.装箱与拆箱"></a>3.装箱与拆箱</h2><p>在我们正式使用包装类之前，我们先了解一下什么是装箱与拆箱。</p><ol><li>装箱：将基本数据类型包装成对应的包装类，比如 int-&gt;Integer</li><li>拆箱：将包装类拆解成对应的基本数据类型，比如 Character-&gt;char</li></ol><h2 id="4-基本类型、包装类与String之间的转换"><a href="#4-基本类型、包装类与String之间的转换" class="headerlink" title="4. 基本类型、包装类与String之间的转换"></a>4. 基本类型、包装类与String之间的转换</h2><p>现在我们先看看基本类型、包装类与String之间的转换，然后依次代码测试这些转换</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731201545.png" alt="image-20200731201544760"></p><h2 id="5-代码测试"><a href="#5-代码测试" class="headerlink" title="5.代码测试"></a>5.代码测试</h2><p><strong>我们以上图的序号依次测试这些转换方式，1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;6</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: TestMain</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-31 20:12</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 测试基本数据类型、包装类与String之间的转换</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/************  1：基本数据类型-&gt;包装类 ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 1 -------"</span>);</span><br><span class="line">        <span class="keyword">int</span> i1=<span class="number">100</span>;</span><br><span class="line">        Integer t1=<span class="keyword">new</span> Integer(i1);<span class="comment">//通过构造器</span></span><br><span class="line">        Float f1=<span class="keyword">new</span> Float(<span class="string">"32.1F"</span>);<span class="comment">//通过字符串参数</span></span><br><span class="line">        Character ch1=<span class="string">'A'</span>;<span class="comment">//自动装箱</span></span><br><span class="line">        System.out.println(t1+<span class="string">","</span>+f1+<span class="string">",ch1"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/************  2.包装类-&gt;基本数据类型  ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 2 ------"</span>);</span><br><span class="line">        <span class="keyword">int</span> i2=t1.intValue();<span class="comment">//调用包装类的方法</span></span><br><span class="line">        <span class="keyword">char</span> ch2=ch1;<span class="comment">//自动拆箱</span></span><br><span class="line">        System.out.println(i2+<span class="string">","</span>+ch2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  3.String类-&gt;基本数据类型  ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 3 ----------"</span>);</span><br><span class="line">        String s3=<span class="string">"123"</span>;</span><br><span class="line">        <span class="keyword">int</span> i3=Integer.parseInt(s3);<span class="comment">//调用相应的包装类的parseXxx（String）静态方法</span></span><br><span class="line">        <span class="keyword">boolean</span> b3=<span class="keyword">new</span> Boolean(<span class="string">"true"</span>);<span class="comment">//通过包装类的构造器</span></span><br><span class="line">        System.out.println(i3+<span class="string">","</span>+b3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  4. 基本数据类型-&gt;String类 ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 4 ----------"</span>);</span><br><span class="line">        String s4=String.valueOf(<span class="number">3.4F</span>);<span class="comment">//String的valueOf(x);</span></span><br><span class="line">        String d4=<span class="number">5.2</span>D+<span class="number">3.4</span>d+<span class="string">""</span>;<span class="comment">//String + 自动转换</span></span><br><span class="line">        System.out.println(s4+<span class="string">","</span>+d4);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/************  5.String类-&gt;包装类  ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 5 ----------"</span>);</span><br><span class="line">        String s5=<span class="string">"142.35D"</span>;</span><br><span class="line">        Double d5=<span class="keyword">new</span> Double (s5);<span class="comment">//通过字符串参数</span></span><br><span class="line">        System.out.println(s5);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  6.包装类-&gt;String类  ************/</span></span><br><span class="line">        System.out.println(<span class="string">"------- 6 ----------"</span>);</span><br><span class="line">        Float f6=<span class="number">123.456f</span>;</span><br><span class="line">        String s6=f6.toString();<span class="comment">//对应包装类对象的toString()方法</span></span><br><span class="line">        String sf=Float.toString(f6);<span class="comment">//调用对应包装类的toString(x)方法</span></span><br><span class="line">        System.out.println(s6+<span class="string">","</span>+sf);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">------- <span class="number">1</span> -------</span><br><span class="line"><span class="number">100</span>,<span class="number">32</span>.<span class="number">1</span>,ch1</span><br><span class="line">------- <span class="number">2</span> ------</span><br><span class="line"><span class="number">100</span>,A</span><br><span class="line">------- <span class="number">3</span> ----------</span><br><span class="line"><span class="number">123</span>,true</span><br><span class="line">------- <span class="number">4</span> ----------</span><br><span class="line"><span class="number">3</span>.<span class="number">4</span>,<span class="number">8</span>.<span class="number">6</span></span><br><span class="line">------- <span class="number">5</span> ----------</span><br><span class="line"><span class="number">142</span>.<span class="number">35</span>D</span><br><span class="line">------- <span class="number">6</span> ----------</span><br><span class="line"><span class="number">123</span>.<span class="number">456</span>,<span class="number">123</span>.<span class="number">456</span></span><br></pre></td></tr></table></figure><h2 id="6-面试题"><a href="#6-面试题" class="headerlink" title="6.面试题"></a>6.面试题</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FaceTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/************  1  ************/</span></span><br><span class="line">        <span class="comment">//比较情况下，编译时将Integer统一编译成Double,与位数多的单位保持一致</span></span><br><span class="line">        Object o1 = <span class="keyword">true</span> ? <span class="keyword">new</span> Integer(<span class="number">1</span>) : <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">        System.out.println(o1);<span class="comment">//1.0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  2  ************/</span></span><br><span class="line">        <span class="comment">//这里没有比较，只有条件判断</span></span><br><span class="line">        Object o2;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">true</span>)</span><br><span class="line">            o2 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            o2 = <span class="keyword">new</span> Double(<span class="number">2.0</span>);</span><br><span class="line">        System.out.println(o2);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/************  3  ************/</span></span><br><span class="line">        <span class="comment">//Integer内部定义了IntegerCache类结构，IntegerCache中定义了 Integer[],</span></span><br><span class="line">        <span class="comment">//保存了从-128~127范围的整数。如果我们使用自动装箱的方式，给Integer赋值的范围在</span></span><br><span class="line">        <span class="comment">//- 128~127范围内时，可以直接使用数组中的元素，不用再去new了.目的:提高效率</span></span><br><span class="line">        Integer i = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        Integer j = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        System.out.println(i == j);<span class="comment">//false</span></span><br><span class="line">        Integer m = <span class="number">1</span>;</span><br><span class="line">        Integer n = <span class="number">1</span>;</span><br><span class="line">        System.out.println(m == n);<span class="comment">//true</span></span><br><span class="line">        Integer x = <span class="number">128</span>;</span><br><span class="line">        Integer y = <span class="number">128</span>;</span><br><span class="line">        System.out.println(x == y);<span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.<span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line">false</span><br><span class="line">true</span><br><span class="line">false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 包装类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Object与equals</title>
      <link href="/posts/a501ac60.html"/>
      <url>/posts/a501ac60.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-Object"><a href="#1-Object" class="headerlink" title="1. Object"></a>1. Object</h2><ul><li>Object类是所有Java类的根父类</li><li>如果在类的声明中未使用extends关键字指明其父类，则默认父类为java.lang.Object类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">等价于：</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以使用 Object 类型的变量引用任何类型的对象：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">method(Object obj)&#123;…&#125; <span class="comment">//可以接收任何类作为其参数</span></span><br><span class="line">Person o=<span class="keyword">new</span> Person();</span><br><span class="line">method(o);</span><br></pre></td></tr></table></figure><ul><li><p>Object中的方法：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200512001544984.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>Object 类型的变量只能用于作为各种值的通用持有者。要想对其中的内容进行具体的 操作，还需要清楚对象的原始类型， 并进行相应的类型转换：</p></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200511233922386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200511233900840.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>所有的数组类型，不管是对象数组还是基本类型的数组都扩展了 Object 类。</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200511234412434.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-equals"><a href="#2-equals" class="headerlink" title="2. equals"></a>2. equals</h2><ul><li><p>基本类型比较值:只要两个变量的值相等，即为true。<br>int a=5; if(a==5){…}</p></li><li><p>引用类型比较引用(是否指向同一个对象地址)：只有指向同一个对象地址时，==才返回true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1=<span class="keyword">new</span> Person();</span><br><span class="line">        Person p2=<span class="keyword">new</span> Person();</span><br><span class="line">        Person p3=p2;</span><br><span class="line">        Object o=p2;</span><br><span class="line">        <span class="keyword">if</span>(p1==p2)</span><br><span class="line">            System.out.println(<span class="string">"p1==p2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(p1.equals(p2))</span><br><span class="line">            System.out.println(<span class="string">"p1 is equals p2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(p3.equals(p2))</span><br><span class="line">            System.out.println(<span class="string">"p3 is equals p2"</span>);</span><br><span class="line">        <span class="keyword">if</span>(o.equals(p2))</span><br><span class="line">            System.out.println(<span class="string">"o is equals p2"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p3 is equals p2</span><br><span class="line">o is equals p2</span><br></pre></td></tr></table></figure><p>内存分析：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731122930.png" alt="image-20200731122930031"></p><p><strong>Object源码中equals:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123; <span class="comment">//子类可重写</span></span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">/* 我们可以知道比较的是引用指向的对象地址是否相同，相同则返回true，不相同则返回false */</span></span><br></pre></td></tr></table></figure></li><li><p><code>特例</code> ：当用equals() 方法进行比较时 ，对类File 、String 、Date 及包装类（ （Wrapper Class） ） 来说 ， 是比较类型及内容而不考虑引用的是否是同一个对象 ；<br>  原因：在这些类中重写了Object 类的equals() 方法 。</p><p>  看看String的equals：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Compares this string to the specified object.  The result is &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     * true&#125; if and only if the argument is not &#123;<span class="doctag">@code</span> null&#125; and is a &#123;<span class="doctag">@code</span></span></span><br><span class="line"><span class="comment">     * String&#125; object that represents the same sequence of characters as this</span></span><br><span class="line"><span class="comment">     * object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>  anObject</span></span><br><span class="line"><span class="comment">     *         The object to compare this &#123;<span class="doctag">@code</span> String&#125; against</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the given object represents a &#123;<span class="doctag">@code</span> String&#125;</span></span><br><span class="line"><span class="comment">     *          equivalent to this string, &#123;<span class="doctag">@code</span> false&#125; otherwise</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>  #compareTo(String)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>  #equalsIgnoreCase(String)</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object anObject)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == anObject) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (anObject <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">            String anotherString = (String)anObject;</span><br><span class="line">            <span class="keyword">int</span> n = value.length;</span><br><span class="line">            <span class="keyword">if</span> (n == anotherString.value.length) &#123;</span><br><span class="line">                <span class="keyword">char</span> v1[] = value;</span><br><span class="line">                <span class="keyword">char</span> v2[] = anotherString.value;</span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">while</span> (n-- != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (v1[i] != v2[i])</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                    i++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>当自定义使用equals()时 时 ， 可以重写 。 用于比较两个对象的 “ 内容 ” 是否都相等</li></ul><p><strong>重写equals() 方法的原则:</strong></p><ol><li><p>对称性：如果x.equals(y)返回是“true”，那么y.equals(x)也应该返回是“true”。</p></li><li><p>自反性：x.equals(x)必须返回是“true”。</p></li><li><p>传递性：如果x.equals(y)返回是“true”，而且y.equals(z)返回是“true”，那么z.equals(x)也应该返回是“true”。</p></li><li><p>一致性：如果x.equals(y)返回是“true”，只要x和y内容一直不变，不管你重复x.equals(y)多少次，返回都是“true”。</p></li></ol><blockquote><p>任何情况下，x.equals(null)，永远返回是“false”；</p><p>x.equals(和x不同类型的对象)永远返回是“false”</p></blockquote><p><strong>面试题：== 和equals 的区别注意事项:</strong></p><ol><li><p>== 既可以比较基本类型也可以比较引用类型。对于基本类型就是比较值，对于引用类型就是比较内存地址</p></li><li><p>equals 的话，它是属于java.lang.Object 类里面的方法，如果该方法没有被重写过默认也是==; </p><p>我们可以到 看到String类 等类的 的equals 方法是被重写过的，而且String 类在日常开发中了 用的比较多，久而久之，形成了equals 是比较值的错误观点。</p></li><li><p>具体要看自定义类里有没有重写Object 的equals 方法来判断。</p></li><li><p>通常情况下，重写equals 方法，会比较类中的相应属性是否都相等</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"hello"</span>);</span><br><span class="line">System.out.println(<span class="string">"str1和str2是否相等？"</span>+ (str1 == str2));<span class="comment">//false</span></span><br><span class="line">System.out.println(<span class="string">"str1是否equals str2？"</span>+(str1.equals(str2)));<span class="comment">//true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Object </tag>
            
            <tag> equals </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this与super大详解</title>
      <link href="/posts/720ba9d4.html"/>
      <url>/posts/720ba9d4.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-this"><a href="#1-this" class="headerlink" title="1.this"></a>1.this</h2><h3 id="1-1-this是什么？"><a href="#1-1-this是什么？" class="headerlink" title="1.1. this是什么？"></a>1.1. this是什么？</h3><ul><li>this是Java中的关键字，它的作用和其词义很接近,<code>这个</code>。<br>它在方法内部使用，即这个方法所属对象的引用；<br>它在构造器内部使用，表示该构造器正在初始化的对象。</li><li>this 可以调用类的属 性、方法和构造器</li><li>什么时候使用this关键字呢？<br>当在方法内需要用到调用该方法的对象时，就用this。<br>具体的：我们可以用this来区分属性和局部变量。<br>比如：this.name = name;</li></ul><h3 id="1-2-this调用对象中的属性、构造器和方法"><a href="#1-2-this调用对象中的属性、构造器和方法" class="headerlink" title="1.2 this调用对象中的属性、构造器和方法"></a>1.2 this调用对象中的属性、构造器和方法</h3><p><strong>规则：</strong></p><ol><li>在任意方法或构造器内，如果使用当前类的成员变量或成员方法可以在其前面添加this，增强程序的阅读性。不过，通常我们都习惯省略this。</li><li>当形参与成员变量同名时，如果在方法内或构造器内需要使用成员变量，必须添加this来表明该变量是类的成员变量</li><li>使用this访问属性和方法时，如果在本类中未找到，会从父类中查找</li><li>this可以在一个类中相互调用构造器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123; <span class="comment">// 无参构造器</span></span><br><span class="line">        System.out.println(<span class="string">"新对象实例化"</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(); <span class="comment">// 调用本类中的无参构造器</span></span><br><span class="line">        <span class="keyword">this</span>.name = name ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name) ; <span class="comment">// 调用有一个参数的构造器</span></span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"对象的姓名："</span> + name);</span><br><span class="line">        <span class="keyword">this</span>.speak();<span class="comment">//this指代当前操作的对象p1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">speak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age=<span class="number">20</span>;</span><br><span class="line">        System.out.println(<span class="string">"局部变量年龄： "</span>+age);</span><br><span class="line">        System.out.println(<span class="string">"对象的年龄："</span> + <span class="keyword">this</span>.age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"王五"</span>, <span class="number">18</span>);</span><br><span class="line">        p1.getInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">新对象实例化</span><br><span class="line">对象的姓名：王五</span><br><span class="line">局部变量年龄： <span class="number">20</span></span><br><span class="line">对象的年龄：<span class="number">18</span></span><br></pre></td></tr></table></figure><h2 id="2-super"><a href="#2-super" class="headerlink" title="2.super"></a>2.super</h2><h3 id="2-1-super是什么？"><a href="#2-1-super是什么？" class="headerlink" title="2.1 super是什么？"></a>2.1 super是什么？</h3><ul><li><p>super是Java的关键字</p></li><li><p>在Java类中使用super来调用父类中的指定操作：</p><ol><li><p>super可用于访问父类中定义的<code>属性</code>，protected,public,default</p></li><li><p>super可用于调用父类中定义的<code>成员方法</code></p></li><li><p>super可用于在子类构造器中调用<code>父类的构造器</code></p><ul><li><p>当父类中没有空参数的构造器时，子类的构造器必须通过<code>this(参数列表</code>或者<code>super( 参数列表)</code>语句指定调用本类或者父类中相应的构造器。同时，<code>只能”二选一”，且必须放在构造器的首行</code></p></li><li><p><code>子类</code>中所有的<code>构造器默认</code>都会<code>访问父类</code>中 <code>空参数</code>的<code>构造器</code></p></li><li><p>如果子类构造器中既未显式调用父类或本类的构造器，且父类中又没有无参的构造器，则<code>编译出错</code></p></li></ul></li></ol></li></ul><p><strong>注意：</strong></p><ol><li>当子父类出现同名成员时，可以用super表明调用的是父类中的成员</li><li>super的追溯不仅限于<code>直接父类</code></li><li>super和this的用法相像，this代表本类对象的引用，super代表父类的内存空间的标识</li></ol><h3 id="2-2-super调用父类的属性、构造器、方法"><a href="#2-2-super调用父类的属性、构造器、方法" class="headerlink" title="2.2 super调用父类的属性、构造器、方法"></a>2.2 super调用父类的属性、构造器、方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Person</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-30 18:07</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String isPublic=<span class="string">"isPublic"</span>;</span><br><span class="line">    <span class="keyword">protected</span> String isProtected=<span class="string">"isProtected"</span>;</span><br><span class="line">    <span class="keyword">private</span> String isPrivate=<span class="string">"isProtected"</span>;</span><br><span class="line">    String isDefault=<span class="string">"isDefault"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfopublic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getInfopublic：Name: "</span> + name + <span class="string">"  age: "</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getInfoPrivate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getInfoPrivate：Name: "</span> + name + <span class="string">"  age: "</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getInfoProtected</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getInfoProtected：Name: "</span> + name + <span class="string">"  age: "</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function">String <span class="title">getInfoDefault</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"getInfoDefault：Name: "</span> + name + <span class="string">"  age: "</span> + age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age, Date d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.birthDate = d;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name, age, <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, Date d)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name, <span class="number">22</span>, d);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>(name, <span class="number">22</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: JavaSE</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: Studnet</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-30 20:25</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String school;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, age);</span><br><span class="line">        school = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);<span class="comment">//调用父类的构造器</span></span><br><span class="line">        school = s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//this和super测试调用父类的属性和方法,不能调用父类的private修饰的属性和方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">       System.out.println(<span class="keyword">this</span>.isDefault);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.isProtected);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.isPublic);</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.isDefault);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.isProtected);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.isPublic);</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getInfoDefault());</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getInfoProtected());</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getInfopublic());</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.getInfoDefault());</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.getInfoProtected());</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.getInfopublic());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 编译出错: 没有 super(),系统将调用父类无参数的构造器。</span></span><br><span class="line">    <span class="comment">// Person没有无参数的构造器</span></span><br><span class="line"><span class="comment">//    public Student(String s) &#123;</span></span><br><span class="line"><span class="comment">//        school = s;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s=<span class="keyword">new</span> Student(<span class="string">"BitHachi"</span>,<span class="string">"加里敦大学"</span>);</span><br><span class="line">        s.display();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">isDefault</span><br><span class="line">isProtected</span><br><span class="line">isPublic</span><br><span class="line">----------------</span><br><span class="line">isDefault</span><br><span class="line">isProtected</span><br><span class="line">isPublic</span><br><span class="line">----------------</span><br><span class="line">getInfoDefault：Name: BitHachi  age: <span class="number">22</span></span><br><span class="line">getInfoProtected：Name: BitHachi  age: <span class="number">22</span></span><br><span class="line">getInfopublic：Name: BitHachi  age: <span class="number">22</span></span><br><span class="line">----------------</span><br><span class="line">getInfoDefault：Name: BitHachi  age: <span class="number">22</span></span><br><span class="line">getInfoProtected：Name: BitHachi  age: <span class="number">22</span></span><br><span class="line">getInfopublic：Name: BitHachi  age: <span class="number">22</span></span><br></pre></td></tr></table></figure><h2 id="3-this与super-比较"><a href="#3-this与super-比较" class="headerlink" title="3. this与super 比较"></a>3. this与super 比较</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730205424.png" alt="image-20200730205424453"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
            <tag> this </tag>
            
            <tag> super </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面向对象OOP三大特性：继承、封装、多态</title>
      <link href="/posts/c72fe2cc.html"/>
      <url>/posts/c72fe2cc.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-继承"><a href="#1-继承" class="headerlink" title="1.继承"></a>1.继承</h2><p>继承是<strong>类与类的一种关系</strong>，子类拥有父类的所有(public,default,protected)属性和方法，从而实现了代码的复用。**</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730195024.png" alt="image-20200730195023660"></p><p><strong>继承与实现的区别：</strong></p><ol><li>概念不同</li></ol><p>​    继承：子类与父类的继承。如果多个类的某个部分的功能相同，那么可以抽象出一个类出来，把他们的相同部分都放到父类里，让他们都继承这个类。</p><p>​    实现：接口的实现。如果多个类都有一个行为，但是处理的方法方式不同，那么就定义一个接口，也就是一个标准，让各个类分别实现这个接口，各自实现自己具体的处理方法。</p><ol start="2"><li>关键词不同</li></ol><p>​    继承：extends，实现：implements</p><ol start="3"><li>数量不同</li></ol><p>​    单继承，多实现。</p><ol start="4"><li>属性不同</li></ol><p>​    在接口中只能定义全局常量（<strong>public static final</strong> ）,和空的方法体；而在继承中可以定义属性,方法等…</p><blockquote><p><strong>注*</strong>：JDK 1.8 以后，接口里可以有静态方法和方法体了。*</p></blockquote><ol start="5"><li>限制不同</li></ol><p>​    某个接口被类实现时,在类中一定要实现接口中的抽象方法；而继承则无需。</p><h2 id="2-封装"><a href="#2-封装" class="headerlink" title="2.封装"></a>2.封装</h2><ol><li><p>为什么需要封装？<br> 我要用洗衣机，只需要按一下开关和洗涤模式就可以了。有必要了解洗衣机内部的结构吗？有必要碰电动机吗？<br> 如果我们把洗衣机的内部结构暴露出来，当我们使用的时候可能会误操作，碰到一些核心部件更改了配置，导致洗衣机功能出现问题，不能正常工作，所以封装就显得很有必要，把需要暴露的暴露出来，比如洗衣机的一些按钮和加水的地方，不需要的隐藏起来，比如发动机，内部芯片电线等，这样就保证了洗衣机的稳定工作和安全性。</p></li><li><p>封装性的设计思想：<code>隐藏</code>对象内部的复杂性，只对外公开简单的接口。便于外界调用，从而提高系统的可扩展性、可维护性。<code>把该隐藏的隐藏起来，该暴露的暴露出来</code>。</p></li><li><p>封装的程序设计意义：为了实现程序设计的“高内聚，低耦合”。</p><ul><li>高内聚 ：类的内部数据操作细节自己完成，不允许外部干涉；</li><li>低耦合 ：仅对外暴露少量的方法用于使用。</li></ul><blockquote><p>例如：通过将数据声明为私有的(private)，再提供公共的（public）方法:getXxx() 和setXxx()实现对该属性的操作,以实现高内聚与低耦合。</p></blockquote></li></ol><h2 id="3-多态"><a href="#3-多态" class="headerlink" title="3.多态"></a>3.多态</h2><p>Java中的多态主要指<code>引用多态</code>和<code>方法多态</code>。</p><p> <code>引用多态</code>：父类引用可以指向本类对象，也可指向子类对象。引用多态的强大主要体现在调用属性、方法时，可以根据引用具体指向的对象去调用，例如：子类中<code>重写</code>了父类方法。子类重写父类的方法，在调用方法时根据引用指向的子类对象决定调用哪个具体的方法。</p><p>  <code>方法多态</code>：方法多态的强大主要体现在可以根据调用时参数的不同，而自主匹配调用的方法，例如：<code>重载</code>。</p><p>  方法<code>重写与重载</code>的区别：</p><p><code>重写</code>：一般发生在有继承关系的子类中，子类中定义了一个方法，其<strong>方法名、返回值类型、参数列表</strong> 与父类中某个方法一样，此时就是子类中重写(覆盖)了父类的同名方法。</p><ul><li>子类重写的方法访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li><li>子类方法抛出的异常不能大于父类被重写方法的异常</li><li>子类不能重写父类中声明为private权限的方法</li></ul><p><code>重载</code>(Overloading)：发生在同一个类中，存在 多个方法的<strong>方法名相同，参数列表不同</strong>。参数列表不同指的是参数个数、参数类型或者参数的顺序不同。</p><ul><li>被重载的方法可以声明新的或更广的检查异常；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法返回类型可以不同；</li></ul><blockquote><p>子类与父类中同名同参数的方法必须同时声明为非static的(即为重写)，或者同时声明为<br>static的（不是重写）。因为static方法是属于类的，子类无法覆盖父类的方法。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730200939.png" alt="image-20200730200939545"></p><p><strong>注意：</strong></p><p><strong>这里我们讨论多态调用属性和方法的规则：</strong></p><p>这里假设两个类Student extends Person ，父类是Person，子类是Student</p><blockquote><p>Person 引用指向子类对象Student，<code>Person p=new Student()</code></p></blockquote><blockquote><p>当p调用属性时：p只能调用Person类的属性，即使Student定义了一模一样的属性，p实际调用的也是Person类的属性</p></blockquote><blockquote><p>当p调用方法时：</p><pre><code>1. Student 没有重写Person的方法，那么p只能调用Person类里面的方法 2. Student 重写了 Person的方法，那么p调用被子类重写的方法时，p在编译时是Person的方法，运行时是Student重写的方法。</code></pre></blockquote><p><strong>关于多态这里还要说明一点，关于对象的类型转换：</strong></p><ul><li>从子类到父类的类型转换可以自动进行; Person p=new Student()</li><li>从父类到子类的类型转换必须通过 <code>强制类型转换</code>实现；Student s=(Student)Person;</li><li>无继承关系的引用类型间的转换是非法的</li><li>在强制类型转换之前可以使用<code>instanceof</code></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731103859.png" alt="image-20200731103858655"></p><p>一段代码体会一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Object obj = <span class="string">"Hello"</span>;<span class="comment">//向上转型</span></span><br><span class="line">       String objStr = (String) obj;<span class="comment">//向下转型</span></span><br><span class="line">       System.out.println(objStr);</span><br><span class="line">       </span><br><span class="line">       Object objPri = <span class="keyword">new</span> Integer(<span class="number">5</span>);<span class="comment">//向上转型</span></span><br><span class="line">       <span class="comment">// 下面代码运行时引发 ClassCastException 异常，</span></span><br><span class="line">       <span class="comment">// 因为 objPri 分配的对象不是String而是 new Integer(5)</span></span><br><span class="line">       String str = (String) objPri;<span class="comment">//向下转型失败</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello</span><br><span class="line">Exception <span class="keyword">in</span> thread "main" java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</span><br><span class="line"><span class="built_in">at</span> Random_name.sgm.thisandsuper.Student.main(Student.java:<span class="number">64</span>)</span><br></pre></td></tr></table></figure><p>​    因为在对象强制类型转换时，有可能会出现类型转换异常ClassCastException，所以我们在向下转型时需要检查，我们可以使用instanceof进行检查。</p><p>​    <strong>x instanceof A ：检验x 是否为类A 的对象，返回值为boolean</strong></p><blockquote><ol><li>要求x所属的类与类A必须是子类和父类的关系，否则编译错误。</li><li>如果x属于类A的子类B，x instanceof A值也为true。</li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果检查为true就可以进行向下转型，将父类强制类型转换为子类</span></span><br><span class="line"><span class="comment">//Object为所有类的父类，所以可以引用任何类对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Object)&#123;</span><br><span class="line">        Object ob=(Object)o;</span><br><span class="line">        System.out.println(<span class="string">"Object"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">        Person p=(Person)o;</span><br><span class="line">        System.out.println(<span class="string">"Person"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(o <span class="keyword">instanceof</span> Student)&#123;</span><br><span class="line">        Student s=(Student)o;</span><br><span class="line">        System.out.println(<span class="string">"Student"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Object o1=<span class="keyword">new</span> Person();</span><br><span class="line">  fun(o1);</span><br><span class="line">  System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"></span><br><span class="line">  Object o2=<span class="keyword">new</span> Student();</span><br><span class="line">  fun(o2);</span><br><span class="line">  System.out.println(<span class="string">"-------------"</span>);</span><br><span class="line"></span><br><span class="line">  Person p=<span class="keyword">new</span> Student();</span><br><span class="line">  fun(p);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Object</span><br><span class="line">Person</span><br><span class="line">-------------</span><br><span class="line">Object</span><br><span class="line">Person</span><br><span class="line">Student</span><br><span class="line">-------------</span><br><span class="line">Object</span><br><span class="line">Person</span><br><span class="line">Student</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 继承 </tag>
            
            <tag> 封装 </tag>
            
            <tag> 多态 </tag>
            
            <tag> 重写 </tag>
            
            <tag> 重载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows10+PicGo+七牛云+Typora搭建写作环境与图床</title>
      <link href="/posts/641e0332.html"/>
      <url>/posts/641e0332.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-需要的环境工具"><a href="#1-需要的环境工具" class="headerlink" title="1.需要的环境工具"></a>1.需要的环境工具</h2><ul><li>Typora : markdown 文档写作工具，使用PicGo<code>间接</code>将图片上传到七牛云</li><li>PicGo : 图床工具，负责<code>直接</code>上传图片到七牛云</li><li>七牛云：存储从PicGo上传来的图片，为什么选择七牛云，因为每个月有10G的免费流量和存储空间，可以白嫖（哈哈）</li><li>域名：需要一个域名绑定七牛云的CDN，以访问图片，域名可以从阿里云，腾讯云等平台购买，域名需要备案。</li></ul><h2 id="2-下载软件"><a href="#2-下载软件" class="headerlink" title="2.下载软件"></a>2.下载软件</h2><h3 id="2-1-Typora"><a href="#2-1-Typora" class="headerlink" title="2.1 Typora"></a>2.1 Typora</h3><ul><li>下载地址：<a href="https://typora.io/" target="_blank" rel="noopener">https://typora.io/</a>，下载后直接安装next默认就行了，可以根据自己喜好更改安装路径</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729204003.png" alt="image-20200729204003283"></p><h3 id="2-2-PicGo"><a href="#2-2-PicGo" class="headerlink" title="2.2 PicGo"></a>2.2 PicGo</h3><ul><li>下载地址：<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/picgo/releases</a>,下载后直接安装next默认就行了，可以根据自己喜好更改安装路径</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729204412.png" alt="image-20200729204412318"></p><h3 id="2-3软件图标"><a href="#2-3软件图标" class="headerlink" title="2.3软件图标"></a>2.3软件图标</h3><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729204635.png" alt="image-20200729204635137"></p><h2 id="3-正式开始配置"><a href="#3-正式开始配置" class="headerlink" title="3.正式开始配置"></a>3.正式开始配置</h2><h3 id="3-1-注册七牛云"><a href="#3-1-注册七牛云" class="headerlink" title="3.1 注册七牛云"></a>3.1 注册七牛云</h3><ul><li>点击<a href="https://www.qiniu.com/" target="_blank" rel="noopener">七牛云官网</a> → 点击右上角免费注册 → 按步骤填写相关信息-&gt;进行相关的实名认证</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729205616.png" alt="image-20200729205616919"></p><h3 id="3-2-配置对象存储"><a href="#3-2-配置对象存储" class="headerlink" title="3.2 配置对象存储"></a>3.2 配置对象存储</h3><blockquote><p>七牛云对象存储就是存储你图片的地方</p></blockquote><ul><li>打开七牛云控制台-&gt;点击对象存储</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729205747.png" alt="image-20200729205747005"></p><ul><li>点击新建空间</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729205811.png" alt="image-20200729205811290"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729205924.png" alt="image-20200729205924364"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729210009.png" alt="image-20200729210009650"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729210128.png" alt="image-20200729210128499"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729210401.png" alt="image-20200729210401673"></p><h3 id="3-3-DNS配置"><a href="#3-3-DNS配置" class="headerlink" title="3.3 DNS配置"></a>3.3 DNS配置</h3><ul><li>绑定cname</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729211649.png" alt="image-20200729211649079"></p><ul><li>前往你域名购买的服务商平台进行CNAME配置</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729211451.png" alt="image-20200729211451426"></p><p>以上配置成功之后，就可以上传图片，并通过你的域名来访问图片了</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729211812.png" alt="image-20200729211812258"></p><h3 id="3-4-配置PicGo"><a href="#3-4-配置PicGo" class="headerlink" title="3.4 配置PicGo"></a>3.4 配置PicGo</h3><ul><li><p>上面我们已经可以通过七牛云配置来访问图片了，但是上传图片和使用链接到Typora还是比较麻烦的，于是我们使用PicGo软件来简化这一步骤。</p></li><li><p>接下来进行配置</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729212326.png" alt="image-20200729212326328"></p></li><li><p>上面的AK和SK就是下面图片所显示的的缩写</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729212232.png" alt="image-20200729212232427"></p><ul><li>关于存储区域，根据你当初申请对象存储空间时的地区来写代号</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729212533.png" alt="image-20200729212533624"></p><h3 id="3-5-配置Typora"><a href="#3-5-配置Typora" class="headerlink" title="3.5 配置Typora"></a>3.5 配置Typora</h3><ul><li>以上配置完毕，接下来我们配置Typora，可以实现截屏图片，粘贴复制直接生成mrakdown格式，简化PicGo上传步骤</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213020.png" alt="image-20200729213020743"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213111.png" alt="image-20200729213111212"></p><p>然后就可以在PicGo里面看到你上传的Typora测试图片了</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213318.png" alt="image-20200729213317978"></p><h2 id="4-PicGo上传图片的几种方式和格式"><a href="#4-PicGo上传图片的几种方式和格式" class="headerlink" title="4. PicGo上传图片的几种方式和格式"></a>4. PicGo上传图片的几种方式和格式</h2><ol><li>直接在Typoar里面粘贴或拖拽你需要的图片，会自动生成mrakdown方式链接到文档中，我个人最喜欢这种方式，简介快速</li></ol><ol start="2"><li>其它方式，直接见图叭</li></ol><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213525.png" alt="image-20200729213525180"></p><h2 id="5-相关问题"><a href="#5-相关问题" class="headerlink" title="5. 相关问题"></a>5. 相关问题</h2><ol><li>最近遇到一个问题，PicGo不能上传图片到七牛云，我这里的解决方案是查看日志然后修改PicGo的配置解决的，希望诸君遇到的时候，能给大家一个参考叭</li><li>我这里遇到的问题就是我明明配置的七牛云图床，日志文件里面居然是smms图床，不知道是不是PicGo的问题，我后来改了一下，重新启动PicGo才搞定。</li></ol><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213726.png" alt="image-20200729213726459"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729213945.png" alt="image-20200729213944978"></p><ul><li>修改配置文件</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729214003.png" alt="image-20200729214003794"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729214059.png" alt="image-20200729214059442"></p><blockquote><p>OK，完工，尽情享受Typora+PicGo+七牛云的写作环境叭。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解：面向对象与面向过程的比较 &amp; 类之间的关系：泛化、实现、依赖、关联、聚合、组合</title>
      <link href="/posts/769cd987.html"/>
      <url>/posts/769cd987.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-面向对象程序设计概述"><a href="#1-面向对象程序设计概述" class="headerlink" title="1.面向对象程序设计概述"></a>1.面向对象程序设计概述</h2><ul><li>面向对象程序设计（简称 OOP) 是当今主流的程序设计范型， 它已经取代了 20 世纪 70 年代的“ 结构化” 过程化程序设计开发技术。</li></ul><h3 id="1-1-面向对象程序设计"><a href="#1-1-面向对象程序设计" class="headerlink" title="1.1 面向对象程序设计"></a>1.1 面向对象程序设计</h3><ul><li><code>Java 是完全面向对象的， 必须熟悉 OOP 才能 够编写 Java 程序</code>。 </li><li>面向对象的程序是由对象组成的， 每个对象包含对用户公开的特定功能部分和隐藏的实 现部分。程序中的很多对象来自标准库，还有一些是自定义的。</li></ul><h3 id="1-2-传统结构化程序设计"><a href="#1-2-传统结构化程序设计" class="headerlink" title="1.2 传统结构化程序设计"></a>1.2 传统结构化程序设计</h3><ul><li><code>传统的结构化程序设计</code>通过设计一系列的过程（即算法）来求解问题。一旦确定了这些 过程， 就要开始考虑存储数据的方式。这就是 Pascal 语言的设计者 Niklaus Wirth将其著作命 名为《算法 + 数据结构 = 程序》 </li><li>在 Wirth命名的书名中， <code>算法是第一位的，数据结构是第二位的</code>，这就明确地表述了程序员的工作方式。 先要确定如何操作数据， 然后再决定如何组织数据， 以便于数据操作。 而 <code>OOP 却调换了这个次序， 将数据放在第一位，然后再考虑操作数据的算法</code>。 </li></ul><h3 id="1-3-面向对象与面向过程举例"><a href="#1-3-面向对象与面向过程举例" class="headerlink" title="1.3 面向对象与面向过程举例"></a>1.3 面向对象与面向过程举例</h3><p><strong>举个例子简单说明面向过程开发与面向对象oop开发的不同：</strong></p><blockquote><ul><li>对于一些规模较小的问题， 将其分解为过程的开发方式比较理想。</li><li>而面向对象更加适用 于解决规模较大的问题。</li><li>要想实现一个简单的 Web 浏览器可能需要大约 2000 个过程，这些<code>过程</code>可能需要对一组<code>全局数据</code>进行操作。</li><li>采用<code>面向对象</code>的设计风格， 可能只需要<code>大约 100 个 类</code>，每个类平均包含 20 个方法（如图 4-丨所示)。</li><li>后者更易于程序员掌握， 也容易找到 bug 假设给定对象的数据出错了，在访问过这个数据项的 20 个方法中查找错误要比在 2000 个过 程中查找容易得多<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200418220221214.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h2 id="2-类之间的关系"><a href="#2-类之间的关系" class="headerlink" title="2.类之间的关系"></a>2.类之间的关系</h2><p><strong>在类之间， 最常见的关系有：</strong></p><ol><li>泛化/继承（Generalization）</li><li>实现（Realization）</li><li>依赖(Dependency)</li><li>关联（Association)</li><li>聚合（Aggregation）</li><li>组合(Composition)</li></ol><blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200419122034743.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h3 id="2-1-泛化-继承"><a href="#2-1-泛化-继承" class="headerlink" title="2.1   泛化/继承"></a>2.1   泛化/继承</h3><ul><li>含义：继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力。</li><li>代码体现：在Java中继承关系通过关键字<code>extends</code>明确标识</li><li>箭头指向：继承用一条带空心三角箭头的实线表示，从子类指向父类，或者子接口指向父接口。 </li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730233912.png" alt="image-20200730233912528"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235837.png" alt="image-20200730235837723"></p><h3 id="2-2-实现"><a href="#2-2-实现" class="headerlink" title="2.2  实现"></a>2.2  实现</h3><ul><li>含义：实现指的是一个class类实现interface接口（可以是多个）的功能，实现是类与接口之间最常见的关系。</li><li>代码体现：在Java中此类关系通过关键字<code>implements</code>明确标识</li><li>箭头指向：实现用一条带空心三角箭头的虚线表示，从类指向实现的接口。 </li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730234024.png" alt="image-20200730234024499"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235911.png" alt="image-20200730235911565"></p><h3 id="2-3-依赖"><a href="#2-3-依赖" class="headerlink" title="2.3 依赖"></a>2.3 依赖</h3><ul><li><p>含义：一种使用的关系，即一个类的实现需要另一个类的协助，要尽量不使用双向的互相依赖.</p><p>这种使用关系是具有偶然性的、临时性的、非常弱的，类B的变化会影响到类A。</p></li><li><p>代码表现：<code>局部变量、方法的参数或者对静态方法的调用；</code>类B作为方法参数(局部变量)被类A在某个method方法中使用</p></li><li><p>箭头指向：用带箭头的虚线表示，指向被使用者</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730234318.png" alt="image-20200730234318100"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235930.png" alt="image-20200730235930003"></p><h3 id="2-4-关联"><a href="#2-4-关联" class="headerlink" title="2.4 关联"></a>2.4 关联</h3><ul><li><p>含义：是一种拥有的关系，它使一个类知道另一个类的属性和方法；</p><p>这种关系比依赖更强、不存在依赖关系的偶然性、关系也不是临时性的，一般是长期性的，而且双方的关系一般是平等的。</p><p>如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。</p></li><li><p>代码体现：<code>成员变量。</code>被关联类B以类的属性形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。</p></li><li><p>箭头指向： 带普通箭头的实心线，指向被拥有者</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235106.png" alt="image-20200730235106481"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235804.png" alt="image-20200730235804652"></p><h3 id="2-5-聚合"><a href="#2-5-聚合" class="headerlink" title="2.5 聚合"></a>2.5 聚合</h3><ul><li><p>含义：聚合是关联关系的一种特例，它体现的是整体与部分的关系，即has-a的关系。</p><p>此时整体与部分之间是可分离的，它们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享。</p><p>比如计算机与CPU、公司与员工的关系等，比如一个航母编队包括海空母舰、驱护舰艇、舰载飞机及核动力攻击潜艇等。</p></li><li><p>代码体现：成员变量；和关联关系是一致的，只能从语义级别来区分</p></li><li><p>箭头指向：带空心菱形的实心线，菱形指向整体</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235742.png" alt="image-20200730235741993"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730235750.png" alt="image-20200730235750830"></p><h3 id="2-5-组合"><a href="#2-5-组合" class="headerlink" title="2.5  组合"></a>2.5  组合</h3><ul><li><p>含义：组合也是关联关系的一种特例，它体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合。<br>它同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束，</p><p>比如人和人的大脑。比如公司和部门是整体和部分的关系，没有公司就不存在部门。</p></li><li><p>代码体现：成员变量；和关联关系是一致的，只能从语义级别来区分</p></li><li><p>箭头指向：带实心菱形的实线，菱形指向整体</p></li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731000327.png" alt="image-20200731000327025"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731000334.png" alt="image-20200731000334893"></p><h3 id="2-6-强弱顺序"><a href="#2-6-强弱顺序" class="headerlink" title="2.6 强弱顺序"></a>2.6 强弱顺序</h3><p>各种关系的强弱顺序：<strong>泛化/继承 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</strong></p><h3 id="2-7-一张图融会贯通"><a href="#2-7-一张图融会贯通" class="headerlink" title="2.7 一张图融会贯通"></a>2.7 一张图融会贯通</h3><p>下面这张UML图，比较形象地展示了各种类图关系：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200731001326.png" alt="image-20200731001326493"></p><h2 id="3-参考文献"><a href="#3-参考文献" class="headerlink" title="3. 参考文献"></a>3. 参考文献</h2><ul><li><a href="http://www.uml.org.cn/oobject/201609062.asp#" target="_blank" rel="noopener">http://www.uml.org.cn/oobject/201609062.asp#</a></li><li><a href="https://www.cnblogs.com/liuling/archive/2013/05/03/classrelation.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuling/archive/2013/05/03/classrelation.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> OOP </tag>
            
            <tag> POP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>复制数组的四种方法以及时间效率比较</title>
      <link href="/posts/de8ce5fb.html"/>
      <url>/posts/de8ce5fb.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>原文链接：<a href="https://blog.csdn.net/qq_33591903/article/details/82532626" target="_blank" rel="noopener">https://blog.csdn.net/qq_33591903/article/details/82532626</a></p></blockquote><h2 id="零、数组复制效率的比较"><a href="#零、数组复制效率的比较" class="headerlink" title="零、数组复制效率的比较"></a>零、数组复制效率的比较</h2><p>java中数组复制的方式，有以下几种</p><p>（1）System.arraycopy（）；</p><p>（2）Arrays.copyOf（）；</p><p>（3）clone（）；</p><p>（4）for循环</p><p>今天我们比较一下这四者的效率</p><hr><h2 id="一、System-arraycopy（）"><a href="#一、System-arraycopy（）" class="headerlink" title="一、System.arraycopy（）"></a>一、System.arraycopy（）</h2><p>此方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">arraycopy</span><span class="params">(Object src,  <span class="keyword">int</span>  srcPos,Object dest, <span class="keyword">int</span> destPos,<span class="keyword">int</span> length)</span></span>;</span><br></pre></td></tr></table></figure><p>可见此方法是一个本地方法，方法对应的实现不在当前文件里，而是在其他语言实现的的文件的，比如C、C++中。</p><p>使用本地方法，案例来说效率应该最高，稍后进行效率测试。</p><hr><h2 id="二、Arrays-copyOf（）"><a href="#二、Arrays-copyOf（）" class="headerlink" title="二、Arrays.copyOf（）"></a>二、Arrays.copyOf（）</h2><p>此方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> &lt;T,U&gt; T[] copyOf(U[] original, <span class="keyword">int</span> newLength, Class&lt;? extends T[]&gt; newType) &#123;</span><br><span class="line">      <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">   T[] copy = ((Object)newType == (Object)Object[]<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line">? (T[]) new Object[newLength]</span><br><span class="line">: (T[]) Array.newInstance(newType.getComponentType(), newLength);</span><br><span class="line">      </span><br><span class="line">      System.arraycopy(original, <span class="number">0</span>, copy, <span class="number">0</span>,</span><br><span class="line">   Math.min(original.length, newLength));</span><br><span class="line"><span class="keyword">return</span> copy;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>可以看得出来，本质上调用的是System.arraycopy（）方法，也就是前一种方法，那么效率肯定比不上前一种数组复制方法。</p><hr><h2 id="三、clone（）"><a href="#三、clone（）" class="headerlink" title="三、clone（）"></a>三、clone（）</h2><p>此方法的源码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">native</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException</span>;</span><br></pre></td></tr></table></figure><p>这个方法是Object类中的一个本地方法，这里虽然返回Object，看着需要强制类型转换，但Object子类重写了这个方法，会返回相应的类型。</p><hr><h2 id="四、for循环"><a href="#四、for循环" class="headerlink" title="四、for循环"></a>四、for循环</h2><p>最简单粗暴的一种方式，循环原始数组并直接赋值到目标数组中。</p><hr><h2 id="五、四种的比较"><a href="#五、四种的比较" class="headerlink" title="五、四种的比较"></a>五、四种的比较</h2><p>他们之间的效率比较需要从原始数组的大小出发。</p><p>先贴出比较的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> day0908;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestArrayCopy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testSystemArrayCopy</span><span class="params">(String[] orginal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start_time = System.nanoTime();</span><br><span class="line">        String[] target = <span class="keyword">new</span> String[orginal.length];</span><br><span class="line">        System.arraycopy(orginal, <span class="number">0</span>, target, <span class="number">0</span>, target.length);</span><br><span class="line">        <span class="keyword">long</span> end_time = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">"使用System.arraycopy方法耗时:"</span> + (end_time - start_time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testArraysCopyOf</span><span class="params">(String[] orginal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start_time = System.nanoTime();</span><br><span class="line">        String[] target = <span class="keyword">new</span> String[orginal.length];</span><br><span class="line">        target = Arrays.copyOf(orginal, orginal.length);</span><br><span class="line">        <span class="keyword">long</span> end_time = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">"使用Arrays.copyOf方法耗时:"</span> + (end_time - start_time));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testClone</span><span class="params">(String[] orginal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start_time = System.nanoTime();</span><br><span class="line">        String[] target = <span class="keyword">new</span> String[orginal.length];</span><br><span class="line">        target = orginal.clone();</span><br><span class="line">        <span class="keyword">long</span> end_time = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">"使用clone方法耗时:"</span> + (end_time - start_time));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testFor</span><span class="params">(String[] orginal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start_time = System.nanoTime();</span><br><span class="line">        String[] target = <span class="keyword">new</span> String[orginal.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; orginal.length; i++) &#123;</span><br><span class="line">            target[i] = orginal[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end_time = System.nanoTime();</span><br><span class="line">        System.out.println(<span class="string">"使用for循环耗时:"</span> + (end_time - start_time));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        <span class="comment">//需要改变原始数组的大小</span></span><br><span class="line">        String[] original = <span class="keyword">new</span> String[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; original.length; i++) &#123;</span><br><span class="line">            original[i] = <span class="string">"abcd"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"原始数组的大小:"</span> + original.length);</span><br><span class="line">        testSystemArrayCopy(original);</span><br><span class="line">        testArraysCopyOf(original);</span><br><span class="line">        testClone(original);</span><br><span class="line">        testFor(original);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比较他们之间的效率需要从目标数组的大小出发。</p><p>【1】目标数组是个小数组，长度在200以内</p><p>四种方式的效率：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729191821.png" alt="image-20200729191820741"></p><p>可以看得出：Arrays.copyOf（）的效率最差，其余三种效率差异不大。</p><hr><p>【2】目标是个中等数组，长度以千为单位。</p><p>四种方式的效率：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729191857.png" alt="image-20200729191857013"></p><p>可以看得出，System.arraycopy（）与clone（）方式差异不大，使用for循环的方式，耗时比之前的情况变得严重起来。</p><hr><p>【3】目标数组是个大型数组，长度以万为单位。</p><p>四种方式的效率：</p><p> <img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729192436.png" alt="image-20200729192436700"></p><p>可以看得出，此时System.arraycopy（）方法的效率最高，且数组长度在此基础增加时，此方法效率还是最高，而for循环的效率在这种情况下表现得十分糟糕。</p><hr><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>（1）原始数组长度不管是多少的时候，Arrays.copyOf（）的效率都比System.arraycopy（）差。</p><p>（2）原始数组长度比较小的时候，几百以内，for循环表现十分优异，并随着数组长度的增加，效率越来越低，因此，for循环适合于小型数组。</p><p>（3）原始数组长度中等的时候，比如几千的时候，两个本地方法的效率差不多。</p><p>（4）原始数组长度比较大的时候，以万为单位，这时候本地方法System.arraycopy（）方法的优势体现出来了，力压其他三种方式。</p><p>因此，需要根据操作的数组的长度，灵活地选择数组复制方式，会使得我们的程序得到性能的略微提升。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用传递与值传递？</title>
      <link href="/posts/255ba281.html"/>
      <url>/posts/255ba281.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-方法参数的两种类型"><a href="#1-方法参数的两种类型" class="headerlink" title="1.方法参数的两种类型"></a>1.方法参数的两种类型</h2><ul><li>形参是基本数据类型：将实参基本数据类型变量的“数据值”传递给形参</li><li>形参是引用数据类型：将实参引用数据类型变量的“地址值”传递给形参</li></ul><blockquote><p>严格点说其实只有一种：值传递。 即将实际参数(基本数据类型或引用数据类型)值的副本传入方法内，而参数本身不受影响。</p></blockquote><h2 id="2-方法参数的规则"><a href="#2-方法参数的规则" class="headerlink" title="2.方法参数的规则"></a>2.方法参数的规则</h2><ul><li>一个方法不能修改一个基本数据类型的参数（byte,short,int,long,float,double,char,boolean）</li><li>一个方法可以改变一个对象参数的状态</li><li>一个方法不能让对象引用一个新的对象</li></ul><h2 id="3-代码验证"><a href="#3-代码验证" class="headerlink" title="3.代码验证"></a>3.代码验证</h2><h3 id="3-1一个方法不能修改一个基本数据类型的参数"><a href="#3-1一个方法不能修改一个基本数据类型的参数" class="headerlink" title="3.1一个方法不能修改一个基本数据类型的参数"></a>3.1一个方法不能修改一个基本数据类型的参数</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422105221571.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>说明：</strong></p><blockquote><p>调用tripleValue这个方法之 后，percent 的值还是 10。<br>下面看一下具体的执行 过程：</p><ul><li>1 ) x 被初始化为 percent 值的一个拷贝（也就 是 10 ) </li><li>2 ) x 被乘以 3后等于 30。 但是 percent 仍然 是 10 </li><li>3 ) 这个方法结束之后，参数变量 X 不再使用。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422105822332.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h3 id="3-2一个方法可以改变一个对象参数的状态"><a href="#3-2一个方法可以改变一个对象参数的状态" class="headerlink" title="3.2一个方法可以改变一个对象参数的状态"></a>3.2一个方法可以改变一个对象参数的状态</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422110319630.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>说明：</strong></p><blockquote><p>具体的执行过程为：</p><ul><li>1 ) X 被初始化为 harry 值的拷贝，这里是一个对象的引用。 </li><li>2 ) raiseSalary 方法应用于这个对象引用。x 和 harry 同时引用的那个 Employee 对象的薪金提高了 200%。 </li><li>3 ) 方法结束后，参数变量 x 不再使用。</li><li>当然，对象变量 harry 继续引用那个薪金增至 3 倍的雇员对象<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422111030995.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h3 id="3-3一个方法不能让对象引用一个新的对象"><a href="#3-3一个方法不能让对象引用一个新的对象" class="headerlink" title="3.3一个方法不能让对象引用一个新的对象"></a>3.3一个方法不能让对象引用一个新的对象</h3><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422112207577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>说明：</strong></p><blockquote><ul><li>方法并没有改变存储在变量 a 和 b 中的对象引用。</li><li>swap 方法的参数 x 和 y 被初始 化为两个对象引用的拷贝，这个方法交换的是这两个拷贝。 </li><li>在方法结束时局部变量变量 X 和 y 从栈区出栈，被丢弃了。原来的变量 a 和 b 仍然引用 这个方法调用之前所引用的对象<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200422112508900.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><strong>这个过程说明：</strong><code>Java 程序设计语言对对象采用的不是引用调用，实际上， 对象引用是按值传递的。</code><br>对象引用按值传递，即方法传递的是这两个对象引用的值，可以理解为地址，就像基本数据类型一样，我们不能改变着两个引用值/地址，但是我们却可以改变这两个引用值指向的对应对象的状态值</p></blockquote><h2 id="4-一个案例进一步理解方法调用"><a href="#4-一个案例进一步理解方法调用" class="headerlink" title="4.一个案例进一步理解方法调用"></a>4.一个案例进一步理解方法调用</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730112803.png" alt="image-20200730112803505"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">second</span><span class="params">(Value v, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        i = <span class="number">0</span>;</span><br><span class="line">        v.i = <span class="number">20</span>;</span><br><span class="line">        Value val = <span class="keyword">new</span> Value();</span><br><span class="line">        v = val;</span><br><span class="line">        System.out.println(v.i + <span class="string">" "</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">first</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">5</span>;</span><br><span class="line">        Value v = <span class="keyword">new</span> Value();</span><br><span class="line">        v.i = <span class="number">25</span>;</span><br><span class="line">        second(v, i);</span><br><span class="line">        System.out.println(v.i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.first();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Value</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">15</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>块作用域block与流程控制</title>
      <link href="/posts/5093c0c3.html"/>
      <url>/posts/5093c0c3.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-块作用域—block"><a href="#1-块作用域—block" class="headerlink" title="1.块作用域—block"></a>1.块作用域—block</h2><ul><li><code>块（即复合语句）是指由一对大括号括起来的若干条简单的 Java 语句</code>。块确定了变量的作用域。一个块可以嵌套在另一个块中，块内可以写很多语句,。</li><li><code>不能在嵌套的两个块中声明同名的变量</code>。</li><li>例如，下面的代码就有错误，而无法通过编译<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412223608354.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="2-条件语句—if-else"><a href="#2-条件语句—if-else" class="headerlink" title="2.条件语句—if/else"></a>2.条件语句—if/else</h2><ul><li>在 Java 中，条件语句的格式为：<br><code>if (condition) statement</code></li><li>条件必须用括号括起来</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412223810579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>在 Java 中， 更一般的条件语句格式如下所示<br><code>if (condition) statement1 else statement2</code></li><li>其中 else 部分是可选的。else 子句与最邻近的 if 构成一组<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224309110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224035550.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224402591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224147443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-循-环"><a href="#3-循-环" class="headerlink" title="3.循 环"></a>3.循 环</h2><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><ul><li>当条件为 true 时，while 循环执行一条语句（也可以是一个语句块）。一般格式为:<br><code>while { condition ) statement</code><ul><li>如果开始循环条件的值就为 false, 则 while 循环体一次也不执行<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224534785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412224924379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ul><h3 id="do-while"><a href="#do-while" class="headerlink" title="do-while"></a>do-while</h3><ul><li>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</li><li>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">       <span class="comment">//代码语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式);</span><br></pre></td></tr></table></figure><blockquote><p>注意：布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p></blockquote></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412225503968.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-确定-amp-通用循环"><a href="#4-确定-amp-通用循环" class="headerlink" title="4.确定&amp;通用循环"></a>4.确定&amp;通用循环</h2><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><ul><li>虽然所有循环结构都可以用 while 或者 do…while表示，但 Java 提供了另一种语句 —— for 循环，使一些循环结构变得更加简单。</li><li>for循环执行的次数是在执行前就确定的。</li><li>for 语句的第 1 部分通常用于对计数器<code>初始化</code>；第 2 部分给出每次新一轮循环执行前要<code>检测的循环条件</code>；第 3 部分指示如何<code>更新计数器</code>。</li><li>语法格式如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化; 布尔表达式; 更新) &#123;</span><br><span class="line">    <span class="comment">//代码语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>关于 for 循环有以下几点说明：</strong></p><ul><li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li><li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li><li>执行一次循环后，更新循环控制变量。</li><li>再次检测布尔表达式。循环执行上面的过程。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412230138839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><strong>注意：</strong></p><ul><li>当在 for 语句的第 1 部分中声明了一个变量之后，这个变量的作用域就为 for 循环的整个循环体。</li><li>如果在 for 语句内部定义一个变量， 这个变量就不能在循环体之外使用</li></ul><h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><ul><li>Java5 引入了一种主要用于数组的增强型 for 循环。</li><li>Java 增强 for 循环语法格式如下:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(声明语句 : 表达式)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="comment">//代码句子</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><code>声明语句</code>：声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</li><li><code>表达式</code>：表达式是要访问的数组名，或者是返回值为数组的方法。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412230816520.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="5-多重选择—switch"><a href="#5-多重选择—switch" class="headerlink" title="5.多重选择—switch"></a>5.多重选择—switch</h2><ul><li>switch case 语句判断一个变量与一系列值中某个值是否相等，每个值称为一个分支。</li><li>一般语句格式：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> value :</span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">       <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="comment">//你可以有任意数量的case语句</span></span><br><span class="line">    <span class="keyword">default</span> : <span class="comment">//可选</span></span><br><span class="line">       <span class="comment">//语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>switch case 语句有如下规则：</strong></p><ul><li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li><li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。</li><li>case 语句中的<code>值value的数据类型必须与变量expression的数据类型相同</code>，而且只能是常量或者字面常量。</li><li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li><li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li><li>switch 语句可以包含一个 <code>default 分支</code>，该分支一般是 switch 语句的最后一个分支（<code>可以在任何位置，但建议在最后一个</code>）。<code>default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句</code>。</li><li>switch case 执行时，一定会先进行匹配，匹配成功返回当前 case 的值，再根据是否有 break，判断是否继续输出，或是跳出判断。</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412232055751.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>如果 case 语句块中没有 break 语句时，JVM 并不会顺序输出每一个 case 对应的返回值，而是继续匹配，匹配不成功则返回默认 case。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020041223224851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>如果 case 语句块中没有 break 语句时，匹配成功后，从当前 case 开始，后续所有 case 的值都会输出。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412232350833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>如果当前匹配成功的 case 语句块没有 break 语句，则从当前 case 开始，后续所有 case 的值都会输出，如果后续的 case 语句块有 break 语句则会跳出判断。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412232451347.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="6-中断控制流程语句"><a href="#6-中断控制流程语句" class="headerlink" title="6.中断控制流程语句"></a>6.中断控制流程语句</h2><h3 id="不带标签的break"><a href="#不带标签的break" class="headerlink" title="不带标签的break"></a>不带标签的break</h3><ul><li>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</li><li>break <code>跳出最里层的循环，并且继续执行该循环下面的语句</code>。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412233108706.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h3 id="带标签的break"><a href="#带标签的break" class="headerlink" title="带标签的break"></a>带标签的break</h3><ul><li><p>Java 提供了一种带标签的 break语句，用于<code>跳出多重嵌套的循环语句</code>。</p></li><li><p>有时候，在嵌套很深的循环语句中会发生一些不可预料的事情。此时可能更加希望跳到嵌套的所有循环语句之外。通过添加一些额外的条件判断实现各层循环的检测很不方便。</p></li><li><p>这里有一个示例说明了 break 语句的工作状态。请注意，<code>标签必须放在希望跳出的最外层循环之前， 并且必须紧跟一个冒号</code>。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724202200519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><blockquote><p>事实上，可以将标签应用到任何语句中， 甚至可以应用到 if语句或者块语句中</p></blockquote><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><ul><li>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</li><li>在 for 循环中，continue 语句使程序立即跳转到更新语句。</li><li>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</li><li>简单点说，就是跳过本次循环，执行下一次循环<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412235313606.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算术运算符、自增自减运算符、关系&amp;逻辑运算符、位运算符、括号及运算符级别</title>
      <link href="/posts/48045e04.html"/>
      <url>/posts/48045e04.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-思维导图"><a href="#0-思维导图" class="headerlink" title="0.思维导图"></a>0.思维导图</h2><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729110103.png" alt="image-20200729110103144"></p><h2 id="1-算术运算符"><a href="#1-算术运算符" class="headerlink" title="1.算术运算符"></a>1.算术运算符</h2><table><thead><tr><th>运算符</th><th>含义</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>/</td><td>除</td></tr><tr><td>%</td><td>求余/取模</td></tr></tbody></table><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408141052246.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-结合赋值与运算符"><a href="#2-结合赋值与运算符" class="headerlink" title="2.结合赋值与运算符"></a>2.结合赋值与运算符</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020040817315972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-自增与自减运算符"><a href="#3-自增与自减运算符" class="headerlink" title="3.自增与自减运算符"></a>3.自增与自减运算符</h2><ul><li>x为+|-</li><li>axx后缀和前缀xxa形式都会使变量值加 1 或减 1。但用在表达式中时，二者就有区别了。前缀形式会先完成加 1; 而后缀形式会使用变量原来的值。</li><li>切记不可以以纯数字来使用，比如6++就是错的<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408174904958.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="4-关系运算符与逻辑boolean运算符"><a href="#4-关系运算符与逻辑boolean运算符" class="headerlink" title="4.关系运算符与逻辑boolean运算符"></a>4.关系运算符与逻辑boolean运算符</h2><table><thead><tr><th>符号</th><th>描述</th></tr></thead><tbody><tr><td>==</td><td>检查如果两个操作数的值是否相等，如果相等则条件为真。</td></tr><tr><td>!=</td><td>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td></tr><tr><td>&lt;</td><td>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td></tr><tr><td>&gt;</td><td>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td></tr><tr><td>&gt;=</td><td>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td></tr><tr><td>&lt;=</td><td>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td></tr><tr><td>&amp;&amp;</td><td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td></tr><tr><td>||</td><td>称为逻辑或操作符。如果任何两个操作数任何一个为真，条件为真。</td></tr><tr><td>!</td><td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td></tr><tr><td>ex1?:ex2:ex3</td><td>如果ex1为true，则取ex2的值，否则取ex3的值</td></tr></tbody></table><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408182932144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408183011698.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724174950589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-位运算符"><a href="#5-位运算符" class="headerlink" title="5.位运算符"></a>5.位运算符</h2><ul><li><p>Java定义了位运算符，应用于整数类型(int)，长整型(long)，短整型(short)，字符型(char)，和字节型(byte)等类型。</p></li><li><p>位运算符作用在所有的位上，并且按位运算。</p></li><li><p>假设a = 60，b = 13;它们的二进制格式表示将如下：</p><blockquote><p>A = 0011 1100<br>B = 0000 1101<br>A&amp;B = 0000 1100<br>A | B = 0011 1101<br>A ^ B = 0011 0001<br>~A= 1100 0011</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020072417504479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408185241210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="6-括号与运算符级别"><a href="#6-括号与运算符级别" class="headerlink" title="6.括号与运算符级别"></a>6.括号与运算符级别</h2><ul><li>当多个运算符出现在一个表达式中，谁先谁后呢？这就涉及到运算符的优先级别的问题。在一个多运算符的表达式中，运算符优先级不同会导致最后得出的结果差别甚大。</li><li>下表中具有<code>最高优先级的运算符在的表的最上面，最低优先级的在表的底部</code>。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724175216908.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408202533924.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 运算符 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String概述</title>
      <link href="/posts/cbe8e8d0.html"/>
      <url>/posts/cbe8e8d0.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-字符串简介"><a href="#1-字符串简介" class="headerlink" title="1.字符串简介"></a>1.字符串简介</h2><ul><li>从概念上讲， Java 字符串就是 Unicode 字符序列。 例如， 串“ Java\u2122” 由 5 个Unicode 字符 J、a、 v、a 和™。</li><li>Java 没有内置的字符串类型， 而是在标准 Java 类库中提供了一个预定义类，很自然地叫做 String。</li><li>每个用双引号括起来的字符串都是 String类的一个实例<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200411175428894.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="2-子串—substring-begin-end"><a href="#2-子串—substring-begin-end" class="headerlink" title="2.子串—substring(begin,end)"></a>2.子串—substring(begin,end)</h2><ul><li>String 类的 substring 方法可以从一个较大的字符串提取出一个子串<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200411180542424.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="3-拼接—“-”"><a href="#3-拼接—“-”" class="headerlink" title="3.拼接—“+”"></a>3.拼接—“+”</h2><ul><li>Java语言允许使用 + 号连接（拼接）两个字符串。</li><li>当将一个字符串与一个非字符串的值进行拼接时，<code>后者被转换成字符串</code>，任何一个java对象都可以转换成字符串</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200729123255.png" alt="image-20200729123253985"></p><h2 id="4-不可变字符串"><a href="#4-不可变字符串" class="headerlink" title="4.不可变字符串"></a>4.不可变字符串</h2><ul><li>String 类没有提供用于修改字符串的方法6 如果希望将 greeting=”Hello” 的内容修改为“ Help!”，不能直接地将 greeting 的最后两个位置的字符修改为‘p ’ 和‘!’</li><li>如何修改这个字符串呢？ 在 Java中实现这项操作非常容易。首先提取需要的字符， 然后再拼接上替换的字符串：</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200411183037166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>当然，可以修改字符串变量 greeting， 让它引用另外一个字符串， 这就如同可以将存放 3 的数值变量改成存放 4 一样。但是这样效率并不高</li><li>当我们修改greeting=“Help!”时，这样做会不会产生内存遗漏呢？ 毕竞， <code>原始字符串放置在堆中</code>。十分幸运，Java 将自动地进行<code>垃圾回收</code>。 如果一块内存不再使用了， 系统最终会将其回收。</li><li>不可变字符串有一个优点：<code>编译器可以让字符串共享</code>。</li><li>可以想象将各种字符串存放在<code>公共的存储池</code>中。字符串变量指向存储池中相应的位置。如果复制一个字符串变量， 原始字符串与复制的字符串共享相同的字符。</li></ul><h2 id="5-检测字符串是否相等—equals"><a href="#5-检测字符串是否相等—equals" class="headerlink" title="5.检测字符串是否相等—equals()"></a>5.检测字符串是否相等—equals()</h2><ul><li>可以使用 equals 方法检测两个字符串是否相等。</li><li>也可以使用 if (greeti ng.compareTo(“Hel1oH) == 0} . . ,不过， 使用equals 看起来更为清晰。</li><li>要想检测两个字符串是否相等，而不区分大小写， 可以使用equalsIgnoreCase 方法。</li><li>一定不要使用=运算符检测两个字符串是否相等！ 这个运算符只能够确定两个字串是否放置在同一个位置上。当然， 如果字符串放置在同一个位置上， 它们必然相等。但是，完全有可能将内容相同的多个字符串的拷贝放置在不同的位置上。</li><li>如果虚拟机始终将相同的字符串共享， 就可以使用=运算符检测是否相等。但实际上只有字符串常量是共享的，而 + 或 substring 等操作产生的结果并不是共享的。因此，千万不要使甩== 运算符测试字符串的相等性， 以免在程序中出现糟糕的 bug。从表面上看， 这种bug 很像随机产生的间歇性错误。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200411190645619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="6-空串与Null串"><a href="#6-空串与Null串" class="headerlink" title="6.空串与Null串"></a>6.空串与Null串</h2><ul><li><p>空串 “” 是长度为 0 的字符串。</p></li><li><p>空串是一个 Java 对象， 有自己的串长度（ 0 ) 和内容（空）。</p></li><li><p>可以调用以下代码检查一个字符串是否为空：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str.length() = <span class="number">0</span>)</span><br><span class="line">或</span><br><span class="line"><span class="keyword">if</span> (str.equals(<span class="string">""</span>))</span><br></pre></td></tr></table></figure></li><li><p>String 变量还可以存放一个特殊的值， 名为 null, 这表示目前没有任何对象与该变量关联（关于 null 的更多信息后面博文会提到)。</p></li><li><p>要检查一个字符串是否为 null, 要使用以下条件：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str == <span class="keyword">null</span>)</span><br></pre></td></tr></table></figure><ul><li>有时要检查一个字符串既不是 null 也不为空串，这种情况下就需要使用以下条件：</li><li>首先要检查 str 不为 null。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (str != <span class="keyword">null</span> &amp;&amp; str.lengthO != <span class="number">0</span>)</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200412002454951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="7-码点和代码单元"><a href="#7-码点和代码单元" class="headerlink" title="7.码点和代码单元"></a>7.码点和代码单元</h2><blockquote><p><a href="https://www.jianshu.com/p/668356dd8089" target="_blank" rel="noopener">https://www.jianshu.com/p/668356dd8089</a>这篇文章对理解码点和代码单元有帮助</p></blockquote><ul><li>Java 字符串由 char 值序列组成。从 3.3.3 节“ char 类型” 已经看到， char 数据类型是一个采用 UTF-16 编码表示 Unicode 码点的代码单元。大多数的常用 Unicode 字符使用一个代码单元就可以表示，而辅助字符需要一对代码单元表示。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200411200614186.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt=" "></li><li>如果想要遍历一个字符串，并且依次査看每一个码点， 可以使用下列语句：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> cp = sentence.codePointAt(i);</span><br><span class="line"><span class="keyword">if</span> (Character.isSupplementaryCodePoint(cp)) i+= <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span> i++;</span><br></pre></td></tr></table></figure></li><li>可以使用下列语句实现回退操作：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i--;</span><br><span class="line"><span class="keyword">if</span> (CharacterssSurrogate(sentence.charAt(i))) i ;</span><br><span class="line"><span class="keyword">int</span> cp = sentence.codePointAt(i);</span><br></pre></td></tr></table></figure></li><li>显然， 这很麻烦。更容易的办法是使用 codePoints 方法， 它会生成一个 int 值的“ 流”，每个 int 值对应一个码点。 可以将它转换为一个数组，再完成遍历。<br><code>int[] codePoints = str.codePointsO.toArray()；</code></li><li>反之，要把一个码点数组转换为一个字符串， 可以使用构造函数<br><code>String str = new String(codePoints, 0, codePoints.length);</code></li></ul><h2 id="8-常见的String-API"><a href="#8-常见的String-API" class="headerlink" title="8.常见的String API"></a>8.常见的String API</h2><p>String类方法有很多，详情可参考API文档</p><blockquote><p><a href="http://www.matools.com/api/java8" target="_blank" rel="noopener">http://www.matools.com/api/java8</a></p></blockquote><blockquote><p><a href="https://www.runoob.com/java/java-string.html" target="_blank" rel="noopener">菜鸟教程中列举的常用String类的API方法</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> String </tag>
            
            <tag> Stringbuilder </tag>
            
            <tag> Stringbuffer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八大基本数据类型及其转换</title>
      <link href="/posts/abf8abd7.html"/>
      <url>/posts/abf8abd7.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-思维导图总览"><a href="#0-思维导图总览" class="headerlink" title="0.思维导图总览"></a>0.思维导图总览</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020031115504948.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-整型"><a href="#1-整型" class="headerlink" title="1.整型"></a>1.整型</h2><ul><li>整型用于表示没有小数部分的数值， 它允许是负数。<code>默认的整型为int型</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311155123643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>byte 和 short 类型主要用于特定的应用场合，例如，底层的文件处理或者需要控制占用<br>存储空间量的大数组。</li><li>在 Java 中， 整型的范围与运行 Java 代码的机器无关。这就解决了软件从一个平台移植到<br>另一个平台，或者在同一个平台中的不同操作系统之间进行移植给程序员带来的诸多问题。</li><li>长整型数值有一个后缀 L 或 l ( 如 4000000000L。) </li><li>十六进制数值有一个前缀 0x 或 0X (如0xCAFEL </li><li>八进制有一个前缀 0 , 例如， 010 对应八进制中的 8。</li><li>很显然， 八进制表示法比较容易混淆， 所以建议最好不要使用八进制常数。 </li><li>从 Java 7 开始， 加上前缀 0b 或 0B 就可以写二进制数。例如，0bl001就是 9。</li><li>从 Java 7 开始，还可以为数字字面量加下划线，如用 1_000_000(或者0b1111_0100_0010_10 00_0000 )表示一百万。这些下划线只是为了让人更易读。·<code>Java 编译器会去除这些下划线</code>。</li><li>在 Java 中， 所有的数值类型所占据的字节数量与平台无关。</li><li>注意： Java 没有任何无符号（unsigned) 形式的 int、 long、short 或 byte 类型。</li><li>代码测试<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 十六进制  0x或0X都可行</span></span><br><span class="line">        <span class="keyword">int</span> a0 = <span class="number">0xa0</span>;  <span class="comment">// a0的十进制值为160</span></span><br><span class="line">        <span class="keyword">short</span> b0 = <span class="number">0Xa0</span>;</span><br><span class="line">        <span class="keyword">long</span> c0 = <span class="number">0xa0</span>;</span><br><span class="line">        <span class="keyword">byte</span> d0 = <span class="number">0X10</span>; <span class="comment">// 10对应十进制16,不能用0xa0因为超过了byte数值范围</span></span><br><span class="line">        System.out.println(a0 + <span class="string">"  "</span> + b0 + <span class="string">"  "</span> + c0 + <span class="string">"  "</span> + d0);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 八进制  0开头</span></span><br><span class="line">        <span class="keyword">int</span> a1 = <span class="number">010</span>; <span class="comment">// 10的十进制为8</span></span><br><span class="line">        <span class="keyword">short</span> b2 = <span class="number">010</span>;</span><br><span class="line">        <span class="keyword">long</span> c2 = <span class="number">010</span>;</span><br><span class="line">        <span class="keyword">byte</span> d2 = <span class="number">010</span>;</span><br><span class="line">        System.out.println(a1 + <span class="string">"  "</span> + b2 + <span class="string">"  "</span> + c2 + <span class="string">"  "</span> + d2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//二进制  0b或0B都行</span></span><br><span class="line">        <span class="keyword">int</span> a3 = <span class="number">0b100</span>; <span class="comment">// 100十进制的值为4</span></span><br><span class="line">        <span class="keyword">short</span> b3 = <span class="number">0B100</span>;</span><br><span class="line">        <span class="keyword">long</span> c3 = <span class="number">0B100</span>;</span><br><span class="line">        <span class="keyword">byte</span> d3 = <span class="number">0b100</span>;</span><br><span class="line">        System.out.println(a3 + <span class="string">"  "</span> + b3 + <span class="string">"  "</span> + c3 + <span class="string">"  "</span> + d3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">long</span> long1 = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">long</span> long2 = <span class="number">100l</span>;</span><br><span class="line">        <span class="keyword">long</span> long3 = <span class="number">100L</span>;</span><br><span class="line">        System.out.println(long1 + <span class="string">"  "</span> + long2 + <span class="string">"  "</span> + long3);</span><br><span class="line">        <span class="comment">//从结果可以看出不加l或L对结果无影响</span></span><br><span class="line">        <span class="comment">//当数值超过int的范围时必须加上L</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以为数字字面量加下划线,Java 编译器会去除这些下划线</span></span><br><span class="line">        <span class="keyword">int</span> a4 = <span class="number">1____00___00</span>;</span><br><span class="line">        <span class="keyword">short</span> b4 = <span class="number">2_0_3_0</span>;</span><br><span class="line">        <span class="keyword">long</span> c4 = <span class="number">19____00</span>;</span><br><span class="line">        <span class="keyword">byte</span> d4 = <span class="number">10_1</span>;</span><br><span class="line">        System.out.println(a4 + <span class="string">"   "</span> + b4 + <span class="string">"   "</span> + c4 + <span class="string">"   "</span> + d4);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311162756389.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="2-浮点型"><a href="#2-浮点型" class="headerlink" title="2.浮点型"></a>2.浮点型</h2><ul><li>浮点类型用于表示有小数部分的数值,<code>默认的浮点型为double型</code><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311162835476.png" alt="在这里插入图片描述"></li><li>double 表示这种类型的数值精度是 float 类型的两倍（有人称之为双精度数值)</li><li>实际上，只有很少的情况适合使用 float 类型，例如，需要单精度数据的库， 或者需要存储大量数据。</li><li>float 类型的数值有一个后缀 F 或 f (例如，3.14F。) 没有后缀 F 的浮点数值（如 3.14 ) 默认为 double 类型。</li><li>当然，也可以在浮点数值double后面添加后缀 D 或 d (例如，3.14D),不加也可以。</li><li>可以使用十六进制表示浮点数值。例如，0.125=2^-3^ 可以表示成 0x1.0p^-3^。在十六进制表示法中， 使用 p 表示指数， 而不是 e。 <code>注意， 尾数采用十六进制，指数采用十进制。指数的基数是 2，而不是 10。</code><font color=red> 对于十六进制表示我没怼出来，还请大佬多多指教，留个言教教我，抱拳了！</font></li><li>所有的浮点数值计算都遵循 <code>IEEE 754</code> 规范。具体来说，下面是用于表示<code>溢出和出错</code>情况的三个特殊的浮点数值：<br>•正无穷大<br>•负无穷大<br>•NaN (不是一个数字）<br>例如， 一 正整数除以 0 的结果为正无穷大。计算 0/0 或者负数的平方根结果为 NaN。<br>常量 <code>Double.POSITIVE_INFINITY、 Double.NEGATIVE_INFINITY 和 Double.NaN</code><br>( 以及相应的 Float 类型的常量） 分别表示<code>这三个特殊的值</code>， 但在实际应用中很少遇到。</li><li>特别要说明的是， 不能这样检测一个特定值是否等于<code>Double.NaN</code>:</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (x = Double.NaN) <span class="comment">// is never true</span></span><br></pre></td></tr></table></figure><ul><li>所有“ 非数值” 的值都认为是不相同的。然而，可以使用 Double.isNaN 方法：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (Double.isNaN(x)) <span class="comment">// check whether x is "not a number"</span></span><br></pre></td></tr></table></figure><ul><li><p>浮点数值<code>不适用于无法接受舍入误差的金融计算中</code>。</p></li><li><p>例如，命令 System.out.println( 2.0-1.1 ) 将打印出 0.8999999999999999, 而不是人们想象的 0.9。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311163957316.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>这种舍入误差的主要原因是浮点数值采用二进制系统表示， 而在二进制系统中无法精确地表示分数 1/10。 这就好像十进制无法精确地表示分数 1/3—样。</p></li><li><p>如果在数值计算中<code>不允许有任何舍入误差</code>，就应该使用 BigDecimal类</p></li><li><p>代码测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> a = <span class="number">100.111f</span>;</span><br><span class="line">        <span class="keyword">float</span> b = <span class="number">100.111F</span>;</span><br><span class="line">        <span class="keyword">double</span> c = <span class="number">100.111</span>;</span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">100.111</span>D;</span><br><span class="line">        <span class="keyword">double</span> e = <span class="number">100.111</span>d;</span><br><span class="line">        System.out.println(a + <span class="string">"   "</span> + b + <span class="string">"   "</span> + c + <span class="string">"   "</span> + d + <span class="string">"   "</span> + e);</span><br><span class="line">        System.out.println(Double.POSITIVE_INFINITY);</span><br><span class="line">        System.out.println(Double.NEGATIVE_INFINITY);</span><br><span class="line">        System.out.println(Double.NaN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311175055588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="3-char型"><a href="#3-char型" class="headerlink" title="3.char型"></a>3.char型</h2><ul><li>char 类型原本用于表示单个字符。不过，现在情况已经有所变化。 如今，有些 Unicode<br>字符可以用一个 char值描述，另外一些 Unicode 字符则需要两个 char 值。</li><li>char 类型的字面量值要用<code>单引号</code>括起来。</li><li>char a=’’，什么都不写报错，可以存个空格。</li><li>char 类型的值可以表示为十六进制值，其范围从 \u0000 到 \Uffff。例如：  \u03C0 表示希腊字母 π。</li><li>除了转义序列 \u 之外， <code>还有一些用于表示特殊字符的转义序列</code>。所有这些转义序列都可以出现在加引号的字符字面量或字符串中。例如，’\u2122’ 或 “Hello\n”。</li><li></li><li>转义序列 \u还可以出现在加引号的<code>字符常量或字符串之外</code>（而其他所有转义序列不可以）。例 如：</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String\u005B\ u00SD args)</span><br></pre></td></tr></table></figure><p>就完全符合语法规则， \u005B 和 \u005D 是 [ 和 ] 的编码</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311180337755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311181305507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311181416181.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>代码测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//   \u000A   asdasda</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Look inside c:\users</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311181532607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020031118161161.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>抱着玩的兴趣测试了一下\u转义序列</li><li>Unicode转义字符序列的官网  <a href="http://www.52unicode.com/" target="_blank" rel="noopener">http://www.52unicode.com/</a></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311182811687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-boolean型"><a href="#4-boolean型" class="headerlink" title="4.boolean型"></a>4.boolean型</h2><ul><li>boolean (布尔）类型有两个值：<code>false 和 true</code>, 用来判定逻辑条件 整型值和布尔值之间<br>不能进行相互转换。</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311183101733.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="5-java内置常量对应数据类型的取值范围"><a href="#5-java内置常量对应数据类型的取值范围" class="headerlink" title="5.java内置常量对应数据类型的取值范围"></a>5.java内置常量对应数据类型的取值范围</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// byte</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：byte 二进制位数："</span> + Byte.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Byte"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Byte.MIN_VALUE="</span> + Byte.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Byte.MAX_VALUE="</span> + Byte.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// short</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：short 二进制位数："</span> + Short.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Short"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Short.MIN_VALUE="</span> + Short.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Short.MAX_VALUE="</span> + Short.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// int</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：int 二进制位数："</span> + Integer.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Integer"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Integer.MIN_VALUE="</span> + Integer.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Integer.MAX_VALUE="</span> + Integer.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// long</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：long 二进制位数："</span> + Long.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Long"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Long.MIN_VALUE="</span> + Long.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Long.MAX_VALUE="</span> + Long.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// float</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：float 二进制位数："</span> + Float.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Float"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Float.MIN_VALUE="</span> + Float.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Float.MAX_VALUE="</span> + Float.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// double</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：double 二进制位数："</span> + Double.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Double"</span>);</span><br><span class="line">                System.out.println(<span class="string">"最小值：Double.MIN_VALUE="</span> + Double.MIN_VALUE);</span><br><span class="line">                System.out.println(<span class="string">"最大值：Double.MAX_VALUE="</span> + Double.MAX_VALUE);</span><br><span class="line">                System.out.println();</span><br><span class="line"></span><br><span class="line">                <span class="comment">// char</span></span><br><span class="line">                System.out.println(<span class="string">"基本类型：char 二进制位数："</span> + Character.SIZE);</span><br><span class="line">                System.out.println(<span class="string">"包装类：java.lang.Character"</span>);</span><br><span class="line">                <span class="comment">// 以数值形式而不是字符形式将Character.MIN_VALUE输出到控制台</span></span><br><span class="line">                System.out.println(<span class="string">"最小值：Character.MIN_VALUE="</span></span><br><span class="line">                        + (<span class="keyword">int</span>) Character.MIN_VALUE);</span><br><span class="line">                <span class="comment">// 以数值形式而不是字符形式将Character.MAX_VALUE输出到控制台</span></span><br><span class="line">                System.out.println(<span class="string">"最大值：Character.MAX_VALUE="</span></span><br><span class="line">                        + (<span class="keyword">int</span>) Character.MAX_VALUE);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020031119152014.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="6-数据类型默认值"><a href="#6-数据类型默认值" class="headerlink" title="6.数据类型默认值"></a>6.数据类型默认值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">boolean</span> bool;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">byte</span> by;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> ch;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> d;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">float</span> f;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">long</span> l;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">short</span> sh;</span><br><span class="line">    <span class="keyword">static</span> String str;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Bool :"</span> + bool);</span><br><span class="line">        System.out.println(<span class="string">"Byte :"</span> + by);</span><br><span class="line">        System.out.println(<span class="string">"Character:"</span> + ch);</span><br><span class="line">        System.out.println(<span class="string">"Double :"</span> + d);</span><br><span class="line">        System.out.println(<span class="string">"Float :"</span> + f);</span><br><span class="line">        System.out.println(<span class="string">"Integer :"</span> + i);</span><br><span class="line">        System.out.println(<span class="string">"Long :"</span> + l);</span><br><span class="line">        System.out.println(<span class="string">"Short :"</span> + sh);</span><br><span class="line">        System.out.println(<span class="string">"String :"</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200311191720101.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="7-数值类型之间的转换"><a href="#7-数值类型之间的转换" class="headerlink" title="7.数值类型之间的转换"></a>7.数值类型之间的转换</h2><h3 id="（1）定义数据类型后自动转换"><a href="#（1）定义数据类型后自动转换" class="headerlink" title="（1）定义数据类型后自动转换"></a>（1）定义数据类型后自动转换</h3><ul><li>数值类型之间的转换就是自动将一种数据类型转换成另一种数据类型</li><li>数值类型之间自动转换时的表：<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408153958379.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter3.Section35.cs352;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">mains</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*可能会出现信息丢失的转换情况*/</span></span><br><span class="line">    <span class="keyword">int</span> a=<span class="number">1234567899</span>;</span><br><span class="line">    <span class="keyword">long</span> b=<span class="number">1234567891234567891L</span>;</span><br><span class="line">    <span class="keyword">float</span> fa=a,fb=b;<span class="comment">//单精度浮点型只保留8位小数</span></span><br><span class="line">    <span class="keyword">double</span> da=a,db=b;    <span class="comment">//双精度浮点型只保留16位小数</span></span><br><span class="line">    System.out.println(fa);</span><br><span class="line">    System.out.println(fb);</span><br><span class="line">    System.out.println(da);</span><br><span class="line">    System.out.println(db);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*不会出现信息丢失的转换情况*/</span></span><br><span class="line">        <span class="keyword">byte</span> b1=<span class="number">123</span>;</span><br><span class="line">        <span class="keyword">short</span> s1=b1;</span><br><span class="line">        <span class="keyword">int</span> i1=b1;</span><br><span class="line">        <span class="keyword">long</span> l1=b1;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line">        System.out.println(i1);</span><br><span class="line">        System.out.println(l1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">short</span> s2=<span class="number">12345</span>;</span><br><span class="line">        <span class="keyword">int</span> i2=s2;</span><br><span class="line">        <span class="keyword">long</span> l2=s2;</span><br><span class="line">        System.out.println(i2);</span><br><span class="line">        System.out.println(l2);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> i3=<span class="number">1234567891</span>;</span><br><span class="line">        <span class="keyword">long</span> l3=i3;</span><br><span class="line">        <span class="keyword">double</span> d3=i3;</span><br><span class="line">        System.out.println(l3);</span><br><span class="line">        System.out.println(d3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span> c1=<span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">int</span> i4=c1;</span><br><span class="line">        System.out.println(i4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">float</span> f1=<span class="number">123.12345f</span>;</span><br><span class="line">        <span class="keyword">double</span> d4=f1;</span><br><span class="line">        System.out.println(f1);</span><br><span class="line">        System.out.println(d4);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020040816310291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>这里浮点型取值范围与计算机组成原理里面讲的IEEE754标准有关</li></ul><h3 id="（2）二元运算时的自动转换"><a href="#（2）二元运算时的自动转换" class="headerlink" title="（2）二元运算时的自动转换"></a>（2）二元运算时的自动转换</h3><ul><li>此外两种不同类型的数据进行二元运算时，比如加减乘除，数据转换从位数少的数据类型向位数多的数据类型转换，然后再进行二元运算。</li><li>比如char是1个字节，int是4个字节，char+int，两种数据类型相加，得到的是一个整数。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> ch2=<span class="string">'A'</span>;</span><br><span class="line">      <span class="keyword">int</span>  i=<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">double</span> d1=<span class="number">100.11</span>d;</span><br><span class="line">      System.out.println(ch2+i);</span><br><span class="line">      System.out.println(d1+i);</span><br><span class="line">      System.out.println(d1+ch2);</span><br></pre></td></tr></table></figure></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408164202519.png" alt="在这里插入图片描述"></p><h3 id="（3）强制类型转换"><a href="#（3）强制类型转换" class="headerlink" title="（3）强制类型转换"></a>（3）强制类型转换</h3><ul><li>比如说将double转换为int型，即不按照上面所提到的转换表表进行合法转换</li><li>强制类型转换将小数部分截去，将浮点值转换为整型值</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408170650185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>如果试图将一个数值从一种类型强制转换为另一种类型， 而又超出了目标类型的表示范围，结果就会截断成一个完全不同的值<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200408171338790.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>不要将boolean与其它数据类型进行转换</li><li>可以用条件转换<code>x? 1:0</code>代替</li></ul><h2 id="8-参考"><a href="#8-参考" class="headerlink" title="8.参考"></a>8.参考</h2><ul><li><a href="https://www.runoob.com/java/java-basic-datatypes.html" target="_blank" rel="noopener">https://www.runoob.com/java/java-basic-datatypes.html</a></li><li>《java核心技术卷一第十版》</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 基本数据类型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装jdk配置环境、cmd命令行运行java程序、安装IDEA编写代码测试</title>
      <link href="/posts/c3aae306.html"/>
      <url>/posts/c3aae306.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-安装jdk配置环境"><a href="#1-安装jdk配置环境" class="headerlink" title="1.安装jdk配置环境"></a>1.安装jdk配置环境</h2><ul><li>首先打开官网Oracle <a href="https://www.oracle.com/java/technologies/javase-downloads.html" target="_blank" rel="noopener">https://www.oracle.com/java/technologies/javase-downloads.html</a><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308130724110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308130803535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>下载完毕到本地安装，配置环境变量JAVA_HOME和Path<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308131449239.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308131009983.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308131112644.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308131125210.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308132105618.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308132229797.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><ul><li>cmd测试是否配置成功</li><li>window+R<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020030813240593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>有下图上的信息则代表配置环境变量正确<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308132505607.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></li></ul><h2 id="2-cmd命令行测试环境变量配置是否正确及运行java程序"><a href="#2-cmd命令行测试环境变量配置是否正确及运行java程序" class="headerlink" title="2.cmd命令行测试环境变量配置是否正确及运行java程序"></a>2.cmd命令行测试环境变量配置是否正确及运行java程序</h2><ul><li><p>首先我们建立一个A.text文件夹，然后修改后缀为java。改为A.java文件</p></li><li><p>可能有时候电脑默认不会显示后缀名可以修改一下系统设置，就可以看见后缀名进行更改了<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308133239941.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>A.java中写入测试代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"Hello World !"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>再次打开cmd，找到A.java目录<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308134024335.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li><li><p>测试A.java代码</p></li><li><p>首先javac 先编译A.java源代码文件，生成A.class字节码文件</p></li><li><p>再用java虚拟机运行A.class 字节码文件<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308134924270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></li></ul><h2 id="3-安装IDEA编写代码测试"><a href="#3-安装IDEA编写代码测试" class="headerlink" title="3.安装IDEA编写代码测试"></a>3.安装IDEA编写代码测试</h2><ul><li>打开IDEA官网下载界面 <a href="https://www.jetbrains.com/idea/download" target="_blank" rel="noopener">https://www.jetbrains.com/idea/download</a><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308135801256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>然后点击安装包安装就可以了<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308135953484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>后续步骤都默认next</li><li>现在我们来新建一个文件来测试java代码<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308140320218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308140425338.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308140453319.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308140520801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308141122409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308141324993.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308141352871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> IDEA </tag>
            
            <tag> CMD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE、JavaEE、JavaME、jdk、jre、jvm、java主要的11个特性</title>
      <link href="/posts/42a4578.html"/>
      <url>/posts/42a4578.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-JavaSE、JavaEE、JavaME是什么？"><a href="#1-JavaSE、JavaEE、JavaME是什么？" class="headerlink" title="1.JavaSE、JavaEE、JavaME是什么？"></a>1.JavaSE、JavaEE、JavaME是什么？</h2><ul><li>JavaSE（J2SE）（Java2 Platform Standard Edition，java平台标准版）</li><li>JavaEE(J2EE)(Java 2 Platform,Enterprise Edition，java平台企业版)</li><li>JavaME(J2ME)(Java 2 Platform Micro Edition，java平台微型版)。</li><li>Java SE是标准版，包含标准的JVM和标准库</li><li>Java EE是企业版，在Java SE的基础上加上了大量的API和库，以便方便开发Web应用、数据库、消息服务等，Java EE的应用使用的虚拟机和Java SE完全相同。</li><li>Java ME和Java SE不同，它是一个针对嵌入式设备的“瘦身版”，Java SE的标准库无法在Java ME上使用，Java ME的虚拟机也是“瘦身版”。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308230636304.png" alt="在这里插入图片描述"></li><li>Java大致学习方向如下：</li></ul><ol><li>首先要学习Java SE，掌握Java语言本身、Java核心开发技术以及Java标准库的使用；</li><li>如果继续学习Java EE，那么Spring框架、数据库开发、分布式架构就是需要学习的；</li><li>如果要学习大数据开发，那么Hadoop、Spark、Flink这些大数据平台就是需要学习的，他们都基于Java或Scala开发；</li><li>如果想要学习移动开发，那么就深入Android平台，掌握Android App开发。</li></ol><ul><li>无论怎么选择，Java SE的核心技术是基础，必须学好！</li></ul><h2 id="2-jdk、jre、jvm是什么？"><a href="#2-jdk、jre、jvm是什么？" class="headerlink" title="2.jdk、jre、jvm是什么？"></a>2.jdk、jre、jvm是什么？</h2><ul><li>JDK：Java Development Kit 是针对Java开发员的产品，是整个Java的核心，包括了Java运行环境<br>JRE、Java工具和Java基础类库。</li><li>JRE：Java Runtime Environment 是运行JAVA程序所必须的环境的集合，包含JVM标准实现及Java核心类库。</li><li>JVM：Java Virtual Machine （Java虚拟机）的缩写，是整个java实现跨平台的最核心的部分，能够运行以Java语言编写的软件程序。</li><li>来自oracle官方的结构图，jvm虚拟机在最底层。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020030823200043.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li><li>一个java程序的执行过程，首先jdk中的编译器javac将源代码编译成字节码class文件，然后jre中的java虚拟机jvm执行字节码文件class运行程序。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200308231749362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="3-java主要的11个特性"><a href="#3-java主要的11个特性" class="headerlink" title="3.java主要的11个特性"></a>3.java主要的11个特性</h2><ul><li><p>Java语言是简单的：<br>Java语言的语法与C语言和C++语言很接近，使得大多数程序员很容易学习和使用。另一方面，Java丢弃了C++中很少使用的、很难理解的、令人迷惑的那些特性，如操作符重载、多继承、自动的强制类型转换。特别地，Java语言不使用指针，而是引用。并提供了自动的废料收集，使得程序员不必为内存管理而担忧。</p></li><li><p>Java语言是面向对象的：<br>Java语言提供类、接口和继承等面向对象的特性，为了简单起见，只支持类之间的单继承，但支持接口之间的多继承，并支持类与接口之间的实现机制（关键字为implements）。Java语言全面支持动态绑定，而C++语言只对虚函数使用动态绑定。总之，Java语言是一个纯的面向对象程序设计语言。</p></li><li><p>Java语言是分布式的：<br>Java语言支持Internet应用的开发，在基本的Java应用编程接口中有一个网络应用编程接口（java net），它提供了用于网络应用编程的类库，包括URL、URLConnection、Socket、ServerSocket等。Java的RMI（远程方法激活）机制也是开发分布式应用的重要手段。</p></li><li><p>Java语言是健壮的：<br>Java的强类型机制、异常处理、垃圾的自动收集等是Java程序健壮性的重要保证。对指针的丢弃是Java的明智选择。Java的安全检查机制使得Java更具健壮性。</p></li><li><p>Java语言是安全的：<br>Java通常被用在网络环境中，为此，Java提供了一个安全机制以防恶意代码的攻击。除了Java语言具有的许多安全特性以外，Java对通过网络下载的类具有一个安全防范机制（类ClassLoader），如分配不同的名字空间以防替代本地的同名类、字节代码检查，并提供安全管理机制（类SecurityManager）让Java应用设置安全哨兵。</p></li><li><p>Java语言是体系结构中立的：<br>Java程序（后缀为java的文件）在Java平台上被编译为体系结构中立的字节码格式（后缀为class的文件），然后可以在实现这个Java平台的任何系统中运行。这种途径适合于异构的网络环境和软件的分发。</p></li><li><p>Java语言是可移植的：<br>这种可移植性来源于体系结构中立性，另外，Java还严格规定了各个基本数据类型的长度。Java系统本身也具有很强的可移植性，Java编译器是用Java实现的，Java的运行环境是用ANSI C实现的。</p></li><li><p>Java语言是解释型的：<br>如前所述，Java程序在Java平台上被编译为字节码格式，然后可以在实现这个Java平台的任何系统中运行。在运行时，Java平台中的Java解释器对这些字节码进行解释执行，执行过程中需要的类在联接阶段被载入到运行环境中。</p></li><li><p>Java是高性能的：<br>与那些解释型的高级脚本语言相比，Java的确是高性能的。事实上，Java的运行速度随着JIT(Just-In-Time）编译器技术的发展越来越接近于C++。</p></li><li><p>Java语言是多线程的：<br>在Java语言中，线程是一种特殊的对象，它必须由Thread类或其子（孙）类来创建。通常有两种方法来创建线程：其一，使用型构为Thread(Runnable)的构造子类将一个实现了Runnable接口的对象包装成一个线程，其二，从Thread类派生出子类并重写run方法，使用该子类创建的对象即为线程。值得注意的是Thread类已经实现了Runnable接口，因此，任何一个线程均有它的run方法，而run方法中包含了线程所要运行的代码。线程的活动由一组方法来控制。Java语言支持多个线程的同时执行，并提供多线程之间的同步机制（关键字为synchronized）。</p></li><li><p>Java语言是动态的：<br>Java语言的设计目标之一是适应于动态变化的环境。Java程序需要的类能够动态地被载入到运行环境，也可以通过网络来载入所需要的类。这也有利于软件的升级。另外，Java中的类有一个运行时刻的表示，能进行运行时刻的类型检查。</p></li></ul><p>参考：</p><ul><li>《java核心技术卷一原书第10版》</li><li>《head first java》</li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1255876875896416" target="_blank" rel="noopener">廖雪峰的官方网站</a></li><li><a href="https://www.runoob.com/java/java-intro.html" target="_blank" rel="noopener">菜鸟教程</a></li><li><a href="https://docs.oracle.com/javase/8/docs/" target="_blank" rel="noopener">Oracl官网</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概述：标识符、访问修饰符、变量、数组、枚举、注释、空行、继承、接口、（对象、类、方法、实例变量）、关键字表</title>
      <link href="/posts/5812e9ad.html"/>
      <url>/posts/5812e9ad.html</url>
      
        <content type="html"><![CDATA[<h2 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1.标识符"></a>1.标识符</h2><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符。</p><p>关于 Java 标识符，有以下几点需要注意：</p><ul><li>所有的标识符都应该以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）<code>开始</code></li><li>首字符<code>之后</code>可以是字母（A-Z 或者 a-z）,美元符（$）、下划线（_）或数字的任何字符组合</li><li>关键字不能用作标识符</li><li>标识符是大小写敏感的</li><li>合法标识符举例：age、$salary、_value、__1_value</li><li>非法标识符举例：123abc、-salary</li></ul><h2 id="2-标识符命名规范"><a href="#2-标识符命名规范" class="headerlink" title="2.标识符命名规范"></a>2.标识符命名规范</h2><p>编写 Java 程序时，应注意以下几点：</p><ul><li>大小写敏感：Java 是大小写敏感的，这就意味着标识符 Hello 与 hello 是不同的。</li><li>类名、接口名：多单词组成时，所有单词的首字母大写：XxxYyyZzz ，<code>驼峰命名法</code>。</li><li>变量名、方法名：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：xxxYyyZzz</li><li>源文件名：源文件名必须和类名相同。当保存文件的时候，你应该使用类名作为文件名保存，文件名的后缀为 .java。</li><li>常量名：所有字母都大写。多单词时每个单词用下划线连接：XXX_YYY_ZZZ</li><li>主方法入口：所有的 Java 程序由 public static void main(String []args) 方法开始执行。</li><li>包名：多单词组成时所有字母都小写：xxxyyyzzz</li></ul><h2 id="3-访问修饰符"><a href="#3-访问修饰符" class="headerlink" title="3.访问修饰符"></a>3.访问修饰符</h2><p>像其他语言一样，Java可以使用修饰符来修饰类中方法和属性。主要有两类修饰符：</p><ul><li>访问控制修饰符 : default, public , protected, private</li><li>非访问控制修饰符 : final, abstract, static, synchronized</li></ul><p><strong>可以使用访问控制符来保护对类、变量、方法和构造方法的访问。Java 支持 4 种不同的访问权限。</strong></p><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><p>我们可以通过以下表来说明访问权限：</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200808172940.png" alt="image-20200808172939930"></p><h2 id="4-变量"><a href="#4-变量" class="headerlink" title="4.变量"></a>4.变量</h2><p> <strong>变量的概念：</strong></p><ul><li>内存中的一个存储区域</li><li>该区域的数据可以在同一类型范围内不断变化</li><li>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</li></ul><p><strong>变量的作用：</strong></p><ul><li>用于在内存中保存数据</li></ul><p><strong>使用变量注意：</strong></p><ul><li><p>Java中每个变量必须先声明，后使用</p></li><li><p>使用变量名来访问这块区域的数据</p></li><li><p>变量的作用域：其定义所在的一对{ }内</p></li><li><p>变量只有在其作用域内才有效</p></li><li><p>同一个作用域内，不能定义重名的变量</p></li></ul><p><strong>声明变量：</strong><br>语法：&lt;数据类型&gt; &lt;变量名称&gt;<br>例如：int var;</p><p><strong>变量的赋值</strong><br> 语法：&lt;变量名称&gt; = &lt;值&gt;<br> 例如：var = 10;</p><p><strong>声明和赋值变量</strong><br>语法： &lt;数据类型&gt; &lt;变量名&gt; = &lt;初始化值&gt;<br>例如：int var = 10;</p><p><strong>变量的分类- 按数据类型：</strong></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724173603447.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724173713517.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730103212.png" alt="image-20200730103212337"></p><p> <strong>类变量、成员变量和局部变量内存分析：</strong></p><ol><li><p>类变量(静态变量)：用static修饰的变量称为静态变量，其内容被该类的所有对象共享，<strong>所有对象中这个类变量的值都指向相同的一处内存</strong>，随便一个对象修改了此处内存的值都会影响其他对象。</p></li><li><p>成员变量：在类定义时声明的变量，随着对象的建立而建立，随着对象的消失而消失，存在于对象所在的<strong>堆内存</strong>中。</p></li><li><p>局部变量：在函数中声明的变量，只定义在局部范围内，只在所属的区域有效。存在于<strong>栈内存</strong>中，作用的范围结束，栈帧释放，变量就消失。</p></li></ol><h2 id="5-数组"><a href="#5-数组" class="headerlink" title="5.数组"></a>5.数组</h2><ul><li>数组是储存在<code>堆</code>上的<code>对象</code>，可以保存多个同类型变量。数组名引用是存在栈区，实际new分配的内存在堆区。</li></ul><h2 id="6-枚举"><a href="#6-枚举" class="headerlink" title="6. 枚举"></a>6. 枚举</h2><ul><li>Java 5.0引入了枚举，枚举限制变量只能是预先设定好的值。使用枚举可以减少代码中的 bug。</li><li>注意：<code>枚举可以单独声明或者声明在类里面 。方法、变量、构造函数也可以在枚举中定义</code>。</li><li>例如，我们为果汁店设计一个程序，它将限制果汁为小杯、中杯、大杯。这就意味着它不允许顾客点除了这三种尺寸外的果汁。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FreshJuice</span> </span>&#123;</span><br><span class="line">   <span class="keyword">enum</span> FreshJuiceSize&#123; SMALL, MEDIUM , LARGE &#125;</span><br><span class="line">   FreshJuiceSize size;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreshJuiceTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">      FreshJuice juice = <span class="keyword">new</span> FreshJuice();</span><br><span class="line">      juice.size = FreshJuice.FreshJuiceSize.MEDIUM  ;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-注释"><a href="#7-注释" class="headerlink" title="7.注释"></a>7.注释</h2><ul><li>类似于 C/C++、Java 也支持单行以及多行注释。注释中的字符将被 Java 编译器忽略。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">   <span class="comment">/* 这是第一个Java程序</span></span><br><span class="line"><span class="comment">    *它将打印Hello World</span></span><br><span class="line"><span class="comment">    * 这是一个多行注释的示例</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">       <span class="comment">// 这是单行注释的示例</span></span><br><span class="line">       <span class="comment">/* 这个也是单行注释的示例 */</span></span><br><span class="line">       System.out.println(<span class="string">"Hello World"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-空行"><a href="#8-空行" class="headerlink" title="8.空行"></a>8.空行</h2><ul><li>空白行或者有注释的行，Java 编译器都会忽略掉。</li></ul><h2 id="9-继承"><a href="#9-继承" class="headerlink" title="9.继承"></a>9.继承</h2><ul><li><p>在 Java 中，一个类可以由其他类派生。如果你要创建一个类，而且已经存在一个类具有你所需要的属性或方法，那么你可以将新创建的类继承该类。</p></li><li><p>利用继承的方法，可以重用已存在类的方法和属性，而不用重写这些代码。<code>被继承的类称为超类（super class），派生类称为子类（subclass）</code>。</p></li></ul><h2 id="10-接口"><a href="#10-接口" class="headerlink" title="10.接口"></a>10.接口</h2><ul><li>在 Java 中，<code>接口可理解为对象间相互通信的协议</code>。接口在继承中扮演着很重要的角色。</li><li><code>接口只定义派生要用到的方法，但是方法的具体实现完全取决于派生类</code>。</li></ul><h2 id="11-对象、类、方法、实例"><a href="#11-对象、类、方法、实例" class="headerlink" title="11.对象、类、方法、实例"></a>11.对象、类、方法、实例</h2><ul><li>一个 Java 程序可以认为是一系列对象的集合，而这些对象通过调用彼此的方法来协同工作。下面简要介绍下类、对象、方法和实例变量的概念。</li><li>对象：<code>对象是类的一个实例</code>，有状态和行为，状态即属性，行为即方法。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。</li><li>类：<code>类是一个模板，它描述一类对象的行为和状态</code>,它具有属性、构造器、普通方法、或代码块。</li><li>实例变量：非static修饰的变量，在类的内部，方法外部的变量。</li><li>方法：方法就是行为，一个类可以有很多方法。逻辑运算、数据修改以及所有动作都是在方法中完成的。<code>方法通过方法名被调用，且只有被调用才会执行。</code></li></ul><p>方法调用的过程分析:</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200730103612.png" alt="image-20200730103612875"></p><h2 id="12-关键字表"><a href="#12-关键字表" class="headerlink" title="12.关键字表"></a>12.关键字表</h2><ul><li>下面列出了 Java 关键字。这些保留字不能用于常量、变量、和任何标识符的名称。</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724172810844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200724172821303.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="13-保留字-reserved-word"><a href="#13-保留字-reserved-word" class="headerlink" title="13.保留字(reserved word)"></a>13.保留字(reserved word)</h2><ul><li>现有Java版本尚未使用，但以后版本可能会作为关键字使<br>用。自己命名标识符时要避免使用这些保留字<br><code>goto 、const</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射详解</title>
      <link href="/posts/6e3bcb10.html"/>
      <url>/posts/6e3bcb10.html</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>Java的反射机制是Java特性之一，反射机制是构建框架技术的基础所在。灵活掌握Java反射机制，对以后学习框架技术有很大的帮助。</li><li>本篇文章用到的代码在我的github上面：<a href="https://github.com/BitHachi/Java_core_book/tree/master/src/JavaSE/Chapter5/Section57" target="_blank" rel="noopener">BitHachi/JJava_core_book/tree/master/src/JavaSE/Chapter5/Section57</a>。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200722195924629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul></blockquote><h1 id="1-什么是Java的反射呢？"><a href="#1-什么是Java的反射呢？" class="headerlink" title="1.什么是Java的反射呢？"></a>1.什么是Java的反射呢？</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大家都知道，要让Java程序能够运行，那么就得让Java类要被Java虚拟机加载。Java类如果不被Java虚拟机加载，是不能正常运行的。现在我们运行的所有的程序都是在编译期的时候就已经知道了你所需要的那个类的已经被加载了。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Java的反射机制是在编译并不确定是哪个类被加载了，而是在程序运行的时候才加载、探知、自审。使用在编译期并不知道的类。这样的特点就是反射。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，属性、构造器、方法，并可以调用对应的属性和方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reflection（反射）是被视为<code>动态语言</code>的关键。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为： 反射</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813154207.png" alt="image-20200813154206826"></p><p><strong>补充：动态语言 vs 静态语言</strong></p><p><strong>动态语言</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>是一类在运行时可以改变其结构的语言</code>：例如新的函数、对象、甚至代码可以被引进，已有的函数可以被删除或是其他结构上的变化。通俗点说就是 <code>在运行时代码可以根据某些条件改变自身结构</code>。主要动态语言：Object-C、C#、JavaScript、PHP、Python、Erlang。<br><strong>静态语言</strong><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与动态语言相对应的，<code>运行时结构不可变的语言就是静态语言</code>。如Java、C、C++。</p><blockquote><p>Java不是动态语言，但Java可以称之为<code>“准动态语言”</code>。即Java有一定的动态性，我们可以利用<code>反射机制、字节码操作获得类似动态语言的特性</code>。Java的动态性让编程的时候更加灵活！</p></blockquote><h1 id="2-Java反射有什么作用呢？"><a href="#2-Java反射有什么作用呢？" class="headerlink" title="2.Java反射有什么作用呢？"></a>2.Java反射有什么作用呢？</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假如我们有两个程序员，一个程序员在写程序的时候，需要使用第二个程序员所写的类，但第二个程序员并没完成他所写的类。那么第一个程序员的代码能否通过编译呢？这是不能通过编译的。利用Java反射的机制，就可以让第一个程序员在没有得到第二个程序员所写的类的时候，来完成自身代码的编译。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<code>Java的反射机制它知道类的基本结构，这种对Java类结构探知的能力，我们称为Java类的“自审”。</code>大家都用过IDEA和eclipse。当我们构建出一个对象的时候，去调用该对象的方法和属性的时候。一按点，编译工具就会自动的把该对象能够使用的所有的方法和属性全部都列出来，供用户进行选择。这就是利用了Java反射的原理，是对我们创建对象的探知、自审。(反射是一种功能强大且复杂的机制。使用它的主要人员是工具构造者，而不是应用程序员。)</p><p><strong>Java 反射机制提供的功能:</strong></p><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法</li><li>在运行时获取泛型信息</li><li>在运行时调用任意一个对象的成员变量和方法</li><li>在运行时处理注解</li><li>生成动态代理</li></ul><p><strong>反射相关的主要API：</strong></p><ul><li>java.lang.Class: 代表一 个类，用来描述类的类</li><li>java.lang.reflect.Method: 代表类 的 方法</li><li>java.lang.reflect.Field: 代表类的 成员 变量</li><li>java.lang.reflect.Constructor: 代表类 的 构造 </li><li>… …</li></ul><h1 id="3-Class类"><a href="#3-Class类" class="headerlink" title="3.Class类"></a>3.Class类</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要正确使用Java反射机制就得使用java.lang.Class这个类。它是Java反射机制的起源。当一个类被加载以后，Java虚拟机就会自动产生一个Class对象。通过这个Class对象我们就能获得加载到虚拟机当中这个Class对象对应的方法、成员变量以及构造方法的声明和定义等信息。</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。一个 Class 对象包含了特定某个结构(class/interface/enum/annotation/primitive type/void/[])的有关信息。</p><ul><li>Class本身也是一个类</li><li>Class 对象只能由系统建立对象</li><li>一个加载的类在 JVM 中只会有一个Class实例</li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的所有被加载的结构</li><li>Class类是Reflection的根源，针对任何你想动态加载、运行的类，唯有先获得相应的Class对象</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813165351.png" alt="image-20200813165350109"></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813165419.png" alt="image-20200813165419078"></p><h1 id="4-获取class类对象"><a href="#4-获取class类对象" class="headerlink" title="4.获取class类对象"></a>4.获取class类对象</h1><p><strong>首先我们得知道哪些类型可以有Class类对象？</strong></p><p>（1）class：<br>外部类，成员(成员内部类，静态内部类)，局部内部类，匿名内部类<br>（2）interface：接口<br>（3）[]：数组<br>（4）enum：枚举<br>（5）annotation：注解@interface<br>（6）primitive type：基本数据类型<br>（7）void</p><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       Class c1 = Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c2 = Comparable<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c3 = String[]<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c4 = <span class="keyword">int</span>[][]<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c5 = ElementType<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c6 = Override<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c7 = <span class="keyword">int</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c8 = <span class="keyword">void</span><span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">       Class c9 = Class<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line"></span><br><span class="line">       System.out.println(c1);</span><br><span class="line">       System.out.println(c2);</span><br><span class="line">       System.out.println(c3);</span><br><span class="line">       System.out.println(c4);</span><br><span class="line">       System.out.println(c5);</span><br><span class="line">       System.out.println(c6);</span><br><span class="line">       System.out.println(c7);</span><br><span class="line">       System.out.println(c8);</span><br><span class="line">       System.out.println(c9);</span><br><span class="line">       System.out.println(<span class="string">"--------"</span>);</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">       <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">       Class c10 = a.getClass();</span><br><span class="line">       Class c11 = b.getClass();</span><br><span class="line">       <span class="comment">// 只要数组的元素类型与维度一样，就是同一个Class</span></span><br><span class="line">       System.out.println(c10 == c11);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class java.lang.Object</span><br><span class="line">interface java.lang.Comparable</span><br><span class="line">class [Ljava.lang.String;</span><br><span class="line">class [[I</span><br><span class="line">class java.lang.annotation.ElementType</span><br><span class="line">interface java.lang.Override</span><br><span class="line">int</span><br><span class="line">void</span><br><span class="line">class java.lang.Class</span><br><span class="line">--------</span><br><span class="line">true</span><br></pre></td></tr></table></figure><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>那么我们如何获取class对象呢？这里有四种方法：</strong> </p><h2 id="4-1-使用类对象的getClass-方法"><a href="#4-1-使用类对象的getClass-方法" class="headerlink" title="4.1  使用类对象的getClass()方法"></a>4.1  使用类对象的getClass()方法</h2><ul><li>使用类对象的getClass()方法<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721223506271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="4-2-Class-forName-classname"><a href="#4-2-Class-forName-classname" class="headerlink" title="4.2 Class.forName(classname)"></a>4.2 Class.forName(classname)</h2><ul><li><p>使用 Class.forName(classname) 静态方法。当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象</p></li><li><p>如果className不是类名或接口名，则forname抛出一个checked exception异常所以应该给这个方法提供一个异常处理器</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721224056665.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-3-class"><a href="#4-3-class" class="headerlink" title="4.3 .class"></a>4.3 .class</h2></li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721224339711.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-4-类的加载器：ClassLoader"><a href="#4-4-类的加载器：ClassLoader" class="headerlink" title="4.4 类的加载器：ClassLoader"></a>4.4 类的加载器：ClassLoader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ClassLoader cl = 类名.getClass().getClassLoader();</span><br><span class="line">Class clazz4 = cl.loadClass(<span class="string">"类的全类名"</span>);</span><br></pre></td></tr></table></figure><h1 id="5-通过反射创建类对象"><a href="#5-通过反射创建类对象" class="headerlink" title="5.通过反射创建类对象"></a>5.通过反射创建类对象</h1><ul><li>既然通过上文我们知道了如何获取class对象，那么我们是不是就可以根据这个类对象来创建实例对象呢？当然可以</li><li>通过反射创建类对象主要有两种方式：通过 Class 对象的 newInstance() 方法、通过 Constructor 对象的 newInstance() 方法。</li></ul><h2 id="5-1-Class-对象的-newInstance-方法"><a href="#5-1-Class-对象的-newInstance-方法" class="headerlink" title="5.1 Class 对象的 newInstance() 方法"></a>5.1 Class 对象的 newInstance() 方法</h2><ul><li>newlnstance方法调用默认的构造器（没有参数的构造器）初始化新创建的对象。如果这个类没有默认的构造器， 就会抛出一个异常。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721230954365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="5-2-Constructor-对象的-newInstance-方法"><a href="#5-2-Constructor-对象的-newInstance-方法" class="headerlink" title="5.2  Constructor 对象的 newInstance() 方法"></a>5.2  Constructor 对象的 newInstance() 方法</h2><ul><li>通过 Constructor 对象创建类对象可以选择特定构造方法，而通过 Class 对象则只能使用默认的无参数构造方法。</li><li>这里getConstructor和newInstance使用时需要设置异常处理，我这里是直接在main后面throws了<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721231841616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h1 id="6-获取类属性、方法、构造器的结构"><a href="#6-获取类属性、方法、构造器的结构" class="headerlink" title="6.获取类属性、方法、构造器的结构"></a>6.获取类属性、方法、构造器的结构</h1><ul><li>我们已经成功获取了class类对象，并学会了如何创建对象，现在我们还可以看看对象内部的结构是什么样的，比如属性、方法和构造器。</li><li>在java.lang.reflect 包中有三个类 Field、Method 和 Constructor分别用于描述类的属性、 方法和构造器</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br></pre></td></tr></table></figure><p><strong>下面介绍一下 Field、Method 和 Constructor三个类的常用方法</strong></p><ul><li>Field类的getType 方法， 用来返回属性所属类型的 Class 对象</li><li>Method 类有一个getReturnType方法，返回return值所属类型的Class对象</li><li>Method 和 Constructor 类有一个共同的方法getParameterTypes，返回方法参数所属类型的Class对象</li><li>Field、Method 和 Constructor都有一个getName 方法，返回方法名的字符串</li><li>Field、Method 和 Constructor都有一个getModifiers方法，它将返回一个整型数值，用不同的位开关描述 public 和 static 这样 的修饰符使用状况。可以利用 Modifier.toString方法将 修饰符打印出来。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">String modifiers = Modifier.toString(m.getModifiers());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>该修饰符是java.lang.reflect.Modifier的静态属性。这里是用十进制表示的，源码里面是十六进制表示的。<br>对应表如下：<br>PUBLIC: 1<br>PRIVATE: 2<br>PROTECTED: 4<br>STATIC: 8<br>FINAL: 16<br>SYNCHRONIZED: 32<br>VOLATILE: 64<br>TRANSIENT: 128<br>NATIVE: 256<br>INTERFACE: 512<br>ABSTRACT: 1024<br>STRICT: 2048</p></blockquote><ul><li>可以使用Modifiei类中的 isPublic、 isPrivate 或 isFinal 判断方法或构造器是否是 public、 private 或 final</li><li>Class类中的 getFields、 getMethods 和 getConstructors方 法将 分 别 返 回 类 提 供 的 所有public 属性、 方法和构造器数组， 其中<code>包括超类的公有成员</code>。</li><li>Class 类的 getDeclareFields、 getDeclareMethods 和getDeclaredConstructors方法将分别返回类中声明的全部属性、 方法和构 造器， 其中包括private和protected成员，但<code>不包括超类的成员</code>。</li></ul><p><strong>下面是一个代码案例,显示了如何打印一个类的全部信息的方法。<br>这个程序提醒用户输入一个类名，然后输出类中所有的属性、方法、构造器。里面有一些数字是我用来测试，类似-m8-</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter5.Section57.cs573;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This program uses reflection to print all features of a class.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Cay Horstmann</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.1 2004-02-21</span></span><br><span class="line"><span class="comment"> * 利用反射分析类的能力，查看属性、构造器、方法的结构</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReflectionTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           String name = <span class="string">"JavaSE.Chapter5.Section57.cs571.Employee"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取输入字符串的类对象</span></span><br><span class="line">            Class cl = Class.forName(name);</span><br><span class="line">            System.out.println(cl + <span class="string">"-1-"</span>);</span><br><span class="line">            <span class="comment">//获取父类对象</span></span><br><span class="line">            Class supercl = cl.getSuperclass();</span><br><span class="line">            System.out.println(supercl + <span class="string">"-2-"</span>);</span><br><span class="line">            <span class="comment">//获取类的访问修饰符和属于public、private、还是final</span></span><br><span class="line">            String modifiers = Modifier.toString(cl.getModifiers());</span><br><span class="line">            System.out.println(cl.getModifiers() + <span class="string">"-----cl.getModifiers"</span>);</span><br><span class="line">            System.out.println(modifiers + <span class="string">"-4-"</span>);</span><br><span class="line">            <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) System.out.print(modifiers + <span class="string">" "</span>);</span><br><span class="line">            System.out.print(<span class="string">"class "</span> + name);</span><br><span class="line">            if (supercl != null &amp;&amp; supercl != Object.class) System.out.print(" extends "</span><br><span class="line">                    + supercl.getName());</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">"\n&#123;\n"</span>);</span><br><span class="line">            System.out.println(<span class="string">"------------打印构造器方法-----------"</span>);</span><br><span class="line">            printConstructors(cl);</span><br><span class="line">            System.out.println(<span class="string">"------------打印非构造器方法-----------"</span>);</span><br><span class="line">            printMethods(cl);</span><br><span class="line">            System.out.println(<span class="string">"------------打印属性信息-----------"</span>);</span><br><span class="line">            printFields(cl);</span><br><span class="line">            System.out.println(<span class="string">"&#125;"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prints all constructors of a class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printConstructors</span><span class="params">(Class cl)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*返回反映Constructor对象表示的类声明的所有Constructor对象的数组类 。</span></span><br><span class="line"><span class="comment">         这些是public，protected，default（package）访问和私有构造函数。</span></span><br><span class="line"><span class="comment">         返回的数组中的元素不会排序，并且不是任何特定的顺序。</span></span><br><span class="line"><span class="comment">         如果类有一个默认构造函数，它将包含在返回的数组中。</span></span><br><span class="line"><span class="comment">         如果类对象表示接口，原始类型，数组类或空值，则此方法返回长度为0的数组。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Constructor[] constructors = cl.getDeclaredConstructors();</span><br><span class="line">        System.out.println(Arrays.toString(constructors) + <span class="string">"-c5-"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Constructor c : constructors) &#123;</span><br><span class="line">            String name = c.getName();</span><br><span class="line">            System.out.print(<span class="string">"   "</span>);</span><br><span class="line">            String modifiers = Modifier.toString(c.getModifiers());</span><br><span class="line">            System.out.println(c.getModifiers() + <span class="string">"-----Counstructor.getModifiers"</span>);</span><br><span class="line">            <span class="comment">//打印构造方法的访问修饰符</span></span><br><span class="line">            <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) System.out.print(modifiers + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">//打印构造方法的名字</span></span><br><span class="line">            System.out.print(name + <span class="string">"("</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取类构造器的参数类型数组</span></span><br><span class="line">            Class[] paramTypes = c.getParameterTypes();</span><br><span class="line">            System.out.println(<span class="string">"-6-"</span> + Arrays.toString(paramTypes) + <span class="string">"-c6-"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; paramTypes.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>) System.out.print(<span class="string">", "</span>);</span><br><span class="line">                <span class="comment">//打印参数类型名字</span></span><br><span class="line">                System.out.print(paramTypes[j].getName());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">");"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prints all methods of a class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMethods</span><span class="params">(Class cl)</span> </span>&#123;</span><br><span class="line">        Method[] methods = cl.getDeclaredMethods();</span><br><span class="line">        System.out.println(Arrays.toString(methods) + <span class="string">"-m7-"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</span><br><span class="line">            Class retType = m.getReturnType();</span><br><span class="line">            System.out.println(retType + <span class="string">"-m8-"</span>);</span><br><span class="line">            String name = m.getName();</span><br><span class="line"></span><br><span class="line">            System.out.print(<span class="string">"   "</span>);</span><br><span class="line">            <span class="comment">// print modifiers, return type and method name</span></span><br><span class="line">            String modifiers = Modifier.toString(m.getModifiers());</span><br><span class="line">            System.out.println(m.getModifiers() + <span class="string">"-----Method.getModifiers"</span>);</span><br><span class="line">            <span class="comment">//打印方法的访问修饰符</span></span><br><span class="line">            <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) System.out.print(modifiers + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">//打印方法返回类型和方法名</span></span><br><span class="line">            System.out.print(retType.getName() + <span class="string">" "</span> + name + <span class="string">"("</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// print parameter types</span></span><br><span class="line">            Class[] paramTypes = m.getParameterTypes();</span><br><span class="line">            System.out.println(<span class="string">"-m9-"</span> + Arrays.toString(paramTypes) + <span class="string">"-m9-"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; paramTypes.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>) System.out.print(<span class="string">", "</span>);</span><br><span class="line">                <span class="comment">//打印方法参数类型</span></span><br><span class="line">                System.out.print(paramTypes[j].getName());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">");"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Prints all fields of a class</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cl a class</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printFields</span><span class="params">(Class cl)</span> </span>&#123;</span><br><span class="line">        Field[] fields = cl.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            Class type = f.getType();<span class="comment">//返回属性所属类型的 Class 对象</span></span><br><span class="line">            System.out.println(type + <span class="string">"-f10-"</span>);</span><br><span class="line">            String name = f.getName();</span><br><span class="line">            System.out.print(<span class="string">"   "</span>);</span><br><span class="line">            String modifiers = Modifier.toString(f.getModifiers());</span><br><span class="line">            System.out.println(f.getModifiers() + <span class="string">"-----Field.getModifiers"</span>);</span><br><span class="line">            <span class="comment">//打印属性的访问修饰符</span></span><br><span class="line">            <span class="keyword">if</span> (modifiers.length() &gt; <span class="number">0</span>) System.out.print(modifiers + <span class="string">" "</span>);</span><br><span class="line">            <span class="comment">//打印属性的类型名和属性名字</span></span><br><span class="line">            System.out.println(type.getName() + <span class="string">" "</span> + name + <span class="string">";"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200722195702267.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200722195718811.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200722195729203.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="7-获取或设置类对象的属性值"><a href="#7-获取或设置类对象的属性值" class="headerlink" title="7.获取或设置类对象的属性值"></a>7.获取或设置类对象的属性值</h1><ul><li>在编写程序时， 如果知道想要査看的属性和类型，查看指定的属性值是一件很容易的事情。而利用反射机制可以查看在编译时还不清楚的属性值。</li><li><code>Class t = f.getType();</code>//获取属性类型,f为Field对象。</li><li>我们可以用<code>f.get(obj)</code>获取 obj 属性的当前值。f为Field对象，obj是一个Object对象。</li><li>可以获得就可以设置。调用<code>f.set(obj，value)</code>可以将 obj 对象的 f 属性设置成新值。f为Field对象。<ul><li>（1）如果我们要查看某个private属性的值，由于受限于java的访问机制，我们需要调用Field、Method 或 Constructor 对象的 setAccessible 方法，来设置private的值的可访问性，<code>x. setAccessible(true);</code>，x为Field、Method 或 Constructor的对象。<br>（2）也可以使用<code>AccessibleObject.setAccessible(x, true);</code>来设置private值的可访问性，它是 Field、 Method 和 Constructor 类的公共超类，x为Field、Method 或 Constructor 对象的数组引用。</li></ul></li></ul><p><strong>接下来的一个例子将使用上面所说的方法，来查看访问对象的属性值</strong></p><p>如下一个可供任意类使用的通用 toString方法。 其中使用 getDeclaredFileds 获得所有的数据属性， 然后使用 setAccessible 将所有的属性设置为可访问的。 对于每个属性，获得了名字和值。递归调用 toString方法，将每个值转换成字符串。(这个例子是java核心技术卷一里面的，这个例子看懂我感觉还是需要花时间的，有的地方我还没看懂……)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter5.Section57.cs574;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> JavaSE.Chapter5.Section57.cs571.Employee;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在运行时使用反射分析对象，查看对象当前的各个属性值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAnalyzerTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, NoSuchFieldException, InstantiationException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Employee s = <span class="keyword">new</span> Employee();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> ObjectAnalyzer().toString(s));</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line">        String[] str = &#123;<span class="string">"str11"</span>, <span class="string">"str22"</span>, <span class="string">"str33"</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> ObjectAnalyzer().toString(str));</span><br><span class="line">        System.out.println(<span class="string">"--------------------------------"</span>);</span><br><span class="line"></span><br><span class="line">        Class em = s.getClass();</span><br><span class="line">        Object obj = em.newInstance();</span><br><span class="line">        Field f = em.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object val = f.get(obj);<span class="comment">//获取属性的值</span></span><br><span class="line">        System.out.println(val);</span><br><span class="line">        f.set(obj, <span class="string">"BitHachi"</span>);</span><br><span class="line">        Employee em2 = (Employee) obj;</span><br><span class="line">        System.out.println(em2.getName());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter5.Section57.cs574;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.AccessibleObject;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Modifier;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectAnalyzer</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> ArrayList&lt;Object&gt; visited = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (obj == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="string">"null"</span>;</span><br><span class="line">      <span class="keyword">if</span> (visited.contains(obj)) <span class="keyword">return</span> <span class="string">"..."</span>;</span><br><span class="line">      visited.add(obj);</span><br><span class="line">      Class cl = obj.getClass();</span><br><span class="line">      <span class="comment">//如果对象是一个字符串对象，则直接打印其值</span></span><br><span class="line">      <span class="keyword">if</span> (cl == String<span class="class">.<span class="keyword">class</span>) <span class="title">return</span> (<span class="title">String</span>) <span class="title">obj</span></span>;</span><br><span class="line">      <span class="comment">//判断类对象是否是一个数组</span></span><br><span class="line">      <span class="keyword">if</span> (cl.isArray()) &#123;</span><br><span class="line">         <span class="comment">//getComponentType返回对象数组的的Class类对象。 如果此类不表示数组类，则此方法返回null。</span></span><br><span class="line">         String r = cl.getComponentType() + <span class="string">"[]&#123;"</span>;</span><br><span class="line">         System.out.println(r + <span class="string">"-1-"</span>);</span><br><span class="line">         <span class="comment">//返回指定数组对象的长度Array.getLength(obj)</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Array.getLength(obj); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span>) r += <span class="string">","</span>;</span><br><span class="line">            <span class="comment">//返回指定数组对象中的索引组件的值。</span></span><br><span class="line">            Object val = Array.get(obj, i);</span><br><span class="line">            System.out.println(val + <span class="string">" -val -2-"</span>);</span><br><span class="line">            <span class="comment">/*确定指定类对象表示一个基本类型。</span></span><br><span class="line"><span class="comment">            有九个预定类对象代表八个原始类型和void。</span></span><br><span class="line"><span class="comment">            这些是由Java虚拟机创建，并且具有相同的名称为他们所代表的基本类型，</span></span><br><span class="line"><span class="comment">            即boolean ， byte ， char ， short ， int ， long ， float和double 。</span></span><br><span class="line"><span class="comment">            isPrimitive返回一个boolean值*/</span></span><br><span class="line">            <span class="keyword">if</span> (cl.getComponentType().isPrimitive()) r += <span class="string">"@"</span> + val + <span class="string">"@"</span>;</span><br><span class="line">            <span class="keyword">else</span> r += toString(val);</span><br><span class="line">            System.out.println(r + <span class="string">"-3-"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> r + <span class="string">"&#125;"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      String r = cl.getName();</span><br><span class="line">      System.out.println(r + <span class="string">"-4-"</span>);</span><br><span class="line">      <span class="comment">// 检查此类和所有超类的字段</span></span><br><span class="line">      <span class="keyword">do</span> &#123;</span><br><span class="line">         r += <span class="string">"["</span>;</span><br><span class="line">         <span class="comment">//获取类的所有属性得一个数组</span></span><br><span class="line">         Field[] fields = cl.getDeclaredFields();</span><br><span class="line">         <span class="comment">/*setAccessible()为反射对象设置可访问标志。 true 表明屏蔽 Java语言的访问检查，</span></span><br><span class="line"><span class="comment">         使得对象的 private私有属性也可以被査询和设置。 */</span></span><br><span class="line">         AccessibleObject.setAccessible(fields, <span class="keyword">true</span>);</span><br><span class="line">         <span class="comment">//获取所有属性的名字和值</span></span><br><span class="line">         <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Modifier.isStatic(f.getModifiers())) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!r.endsWith(<span class="string">"["</span>)) r += <span class="string">","</span>;</span><br><span class="line">               r += f.getName() + <span class="string">"="</span>;</span><br><span class="line">               System.out.println(r + <span class="string">"-5-"</span>);</span><br><span class="line">               <span class="keyword">try</span> &#123;</span><br><span class="line">                  Class t = f.getType();<span class="comment">//获取属性类型</span></span><br><span class="line">                  Object val = f.get(obj);<span class="comment">//获取属性的值</span></span><br><span class="line">                  System.out.println(val + <span class="string">" -val -6-"</span>);</span><br><span class="line">                  <span class="keyword">if</span> (t.isPrimitive()) &#123;</span><br><span class="line">                     r += val;</span><br><span class="line">                     System.out.println(r + <span class="string">"-7-"</span>);</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                     r += toString(val);</span><br><span class="line">                     System.out.println(r + <span class="string">"-7-"</span>);</span><br><span class="line">                  &#125;</span><br><span class="line"></span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                  e.printStackTrace();</span><br><span class="line">               &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">         r += <span class="string">"]"</span>;</span><br><span class="line">         cl = cl.getSuperclass();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">while</span> (cl != <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> r;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200722195249588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="8-利用反射调用任意方法"><a href="#8-利用反射调用任意方法" class="headerlink" title="8.利用反射调用任意方法"></a>8.利用反射调用任意方法</h1><p><strong>通过反射，调用类中的方法，通过Method类完成。步骤：</strong></p><ol><li>通过Class类的getMethod(String name,Class…parameterTypes)方法取得一个Method对象，并设置此方法操作时所需要的参数类型。</li><li>之后使用Object invoke(Object obj, Object[] args)进行调用，并向方法中传递要设置的obj对象的参数信息。</li></ol><p><strong>Object invoke(Object obj, Object … args)</strong></p><p><strong>说明：</strong></p><ol><li>Object 对应原方法的返回值，若原方法无返回值，此时返回null</li><li>若原方法若为静态方法，此时形参Object obj可为null</li><li>若原方法形参列表为空，则Object[] args为null</li><li>若原方法声明为private,则需要在调用此invoke()方法前，显式调用方法对象的setAccessible(true)方法，将可访问private的方法。</li></ol><p><strong>下面是一个代码示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter5.Section57.cs576;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodTableTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      <span class="comment">// 获取相应方法的Method对象，通过类对象来获取方法对象</span></span><br><span class="line">      Method square = MethodTableTest.class.getMethod("square", double.class);</span><br><span class="line">      Method sqrt = Math.class.getMethod("sqrt", double.class);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 打印x和y值表</span></span><br><span class="line">      printTable(<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>, square);</span><br><span class="line">      printTable(<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>, sqrt);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">square</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x * x;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Prints a table with x- and y-values for a method</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> from the lower bound for the x-values 上限</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> to   the upper bound for the x-values  下限</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> n    the number of rows in the table   个数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> f    a method with a double parameter and double return value</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printTable</span><span class="params">(<span class="keyword">double</span> from, <span class="keyword">double</span> to, <span class="keyword">int</span> n, Method f)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// print out the method as table header</span></span><br><span class="line">      System.out.println(<span class="string">"方法： "</span> + f);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">double</span> dx = (to - from) / (n - <span class="number">1</span>);<span class="comment">//按上下限设置每次加的值</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">double</span> x = from; x &lt;= to; x += dx) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">double</span> y = (Double) f.invoke(<span class="keyword">null</span>, x);<span class="comment">//调用这个方法对象进行计算</span></span><br><span class="line">            System.out.printf(<span class="string">"%10.4f | %10.4f%n"</span>, x, y);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020072220232476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="9-使用反射编写泛型数组代码，复制数组"><a href="#9-使用反射编写泛型数组代码，复制数组" class="headerlink" title="9. 使用反射编写泛型数组代码，复制数组"></a>9. 使用反射编写泛型数组代码，复制数组</h1><ul><li>我们可以利用反射来扩充一个数组的容量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE.Chapter5.Section57.cs575;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Array;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOfTest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">      a = (<span class="keyword">int</span>[]) goodCopyOf(a, <span class="number">10</span>);</span><br><span class="line">      System.out.println(Arrays.toString(a));</span><br><span class="line">      System.out.println(<span class="string">"--------------------"</span>);</span><br><span class="line">      String[] b = &#123;<span class="string">"Tom"</span>, <span class="string">"Dick"</span>, <span class="string">"Harry"</span>&#125;;</span><br><span class="line">      b = (String[]) goodCopyOf(b, <span class="number">10</span>);</span><br><span class="line">      System.out.println(Arrays.toString(b));</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">goodCopyOf</span><span class="params">(Object a, <span class="keyword">int</span> newLength)</span> </span>&#123;</span><br><span class="line">      <span class="comment">//第一步：获取a数组的类对象</span></span><br><span class="line">      Class cl = a.getClass();</span><br><span class="line">      System.out.println(cl + <span class="string">"---1"</span>);</span><br><span class="line">      <span class="comment">//第二步：判断a数组的类对象是否是一个数组</span></span><br><span class="line">      <span class="keyword">if</span> (!cl.isArray()) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">      <span class="comment">//第三步：使用Class类的getComponentType方法确定数组对应的类型</span></span><br><span class="line">      Class componentType = cl.getComponentType();</span><br><span class="line">      System.out.println(componentType + <span class="string">"---2"</span>);</span><br><span class="line">      <span class="comment">//获取数组的长度</span></span><br><span class="line">      <span class="keyword">int</span> length = Array.getLength(a);</span><br><span class="line">      System.out.println(length + <span class="string">"---3"</span>);</span><br><span class="line">      <span class="comment">//构造新数组newInstance方法</span></span><br><span class="line">      <span class="comment">//返回一个具有给定类型、给定长度的新数组</span></span><br><span class="line">      Object newArray = Array.newInstance(componentType, newLength);</span><br><span class="line">      <span class="comment">/*arraycopy(Object src, int srcPos, Object dest, int destPos, int length)</span></span><br><span class="line"><span class="comment">      将指定源数组中的数组从指定位置复制到目标数组的指定位置。*/</span></span><br><span class="line">      System.arraycopy(a, <span class="number">0</span>, newArray, <span class="number">0</span>, Math.min(length, newLength));</span><br><span class="line">      <span class="keyword">return</span> newArray;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020072220285340.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="10-可以用-比较两个Class对象"><a href="#10-可以用-比较两个Class对象" class="headerlink" title="10. 可以用==比较两个Class对象"></a>10. 可以用==比较两个Class对象</h1><ul><li>虚拟机为每个类型管理一个 Class 对象。因此， 可以利用== 运算符实现两个类对象比较的操作。 例如:</li></ul><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200617213040641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="11-类的加载与ClassLoader理解"><a href="#11-类的加载与ClassLoader理解" class="headerlink" title="11. 类的加载与ClassLoader理解"></a>11. 类的加载与ClassLoader理解</h1><h2 id="11-1-了解类的加载过程"><a href="#11-1-了解类的加载过程" class="headerlink" title="11.1 了解类的加载过程"></a>11.1 了解类的加载过程</h2><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813173019.png" alt="image-20200813173019571"></p><p><code>加载</code>：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口（即引用地址）。所有需要访问和使用类数据只能通过这个Class对象。这个加载的过程需要类加载器参与。</p><p><code>链接</code>：将Java类的二进制代码合并到JVM的运行状态之中的过程。</p><ul><li>验证：确保加载的类信息符合JVM规范，例如：以cafe开头，没有安全方面的问题</li><li>准备：正式为类变量（static）分配内存并 <code>设置类变量默认初始值的阶段</code>，这些内存都将在方法区中进行分配。</li><li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li></ul><p><code>初始化</code>：</p><ul><li>执行<code>类构造器&lt;clinit&gt;()方法</code>的过程。<code>类构造器&lt;clinit&gt;()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的</code>。（类构造器是构造类信息的，不是构造该类对象的构造器）。</li><li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li><li>虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确加锁和同步。</li></ul><p><strong>举个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoadingTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(A.m);<span class="comment">//100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一步：将A.class读入内存，并创建一个Class对象，此过程有ClassLoader完成</span></span><br><span class="line"><span class="comment">//第二步：链接结束后m=0</span></span><br><span class="line"><span class="comment">//第三步：初始化后，m的值由&lt;clinit&gt;()方法执行决定</span></span><br><span class="line"><span class="comment">// 这个A的类构造器&lt;clinit&gt;()方法由类变量的赋值和静态代码块中的语句按照**顺序**合并产生，类似于</span></span><br><span class="line"><span class="comment">// &lt;clinit&gt;()&#123;</span></span><br><span class="line"><span class="comment">// m = 300;</span></span><br><span class="line"><span class="comment">// m = 100;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="11-2-什么时候会发生类初始化-？"><a href="#11-2-什么时候会发生类初始化-？" class="headerlink" title="11.2  什么时候会发生类初始化 ？"></a>11.2  什么时候会发生类初始化 ？</h2><p> <strong>类的主动引用 （ 一定会发生类的初始化 ）</strong></p><ul><li>当虚拟机启动，先初始化main方法所在的类</li><li>new一个类的对象</li><li>调用类的静态成员（除了final常量）和静态方法</li><li>使用java.lang.reflect包的方法对类进行反射调用</li><li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类</li></ul><p><strong>类的被动引用 （ 不会发生类的初始化 ）</strong></p><ul><li>当访问一个静态域时，只有真正声明这个域的类才会被初始化</li><li>当通过子类引用父类的静态变量，不会导致子类初始化</li><li>通过数组定义类引用，不会触发此类的初始化</li><li>引用常量不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中了）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoadingTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 主动引用：一定会导致A和Father的初始化</span></span><br><span class="line">        <span class="comment">// A a = new A();</span></span><br><span class="line">        <span class="comment">// System.out.println(A.m);</span></span><br><span class="line">        <span class="comment">// Class.forName("xxxx");</span></span><br><span class="line">        <span class="comment">// 被动引用</span></span><br><span class="line">        A[] array = <span class="keyword">new</span> A[<span class="number">5</span>];<span class="comment">//不会导致A和Father的初始化</span></span><br><span class="line">        <span class="comment">// System.out.println(A.b);//只会初始化Father</span></span><br><span class="line">        <span class="comment">// System.out.println(A.M);//不会导致A和Father的初始化</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"main所在的类"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"父类被加载"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">"子类被加载"</span>);</span><br><span class="line">    m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="11-3-类加载器的作用"><a href="#11-3-类加载器的作用" class="headerlink" title="11.3 类加载器的作用"></a>11.3 类加载器的作用</h2><p><strong>类加载器的作用：</strong></p><ul><li><code>类加载的作用</code>：将class文件字节码内容加载到内存中，并将这些<code>静态数据转换成方法区的运行时数据结构</code>，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</li><li><code>类缓存</code>：标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</li></ul><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813190848.png" alt="image-20200813190848622"></p><p><strong>JVM 规范定义了如下类型的类的加载器。</strong></p><p><img src= "/img/loading.gif" data-src="https://image.bithachi.cn/20200813190918.png" alt="image-20200813190918140"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassLoaderTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//对于自定义类，使用系统类加载器进行加载</span></span><br><span class="line">        ClassLoader classLoader = ClassLoaderTest<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line">        <span class="comment">//调用系统类加载器的getParent()：获取扩展类加载器</span></span><br><span class="line">        ClassLoader classLoader1 = classLoader.getParent();</span><br><span class="line">        System.out.println(classLoader1);</span><br><span class="line">        <span class="comment">//调用扩展类加载器的getParent()：无法获取引导类加载器</span></span><br><span class="line">        <span class="comment">//引导类加载器主要负责加载java的核心类库，无法加载自定义类的。</span></span><br><span class="line">        ClassLoader classLoader2 = classLoader1.getParent();</span><br><span class="line">        System.out.println(classLoader2);</span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader3 = String<span class="class">.<span class="keyword">class</span>.<span class="title">getClassLoader</span>()</span>;</span><br><span class="line">        System.out.println(classLoader3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@<span class="number">18</span>b4aac2</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@<span class="number">1</span>d44bcfa</span><br><span class="line">null</span><br><span class="line">null</span><br></pre></td></tr></table></figure><h1 id="12-收获与感受"><a href="#12-收获与感受" class="headerlink" title="12.收获与感受"></a>12.收获与感受</h1><ul><li>反射里面用到了多态的特性，这一点真的很重要，特别是Object与其它对象之间的互转，不懂得话，很容易懵圈</li><li>4-8的应用是反射里面的核心点，当然还有很多的API没办法一次性讲完，其实只要懂了核心的部分，其它的API就比较好懂了</li><li>关于反射的内容和应用还有很多，以后在工作中遇到了相关内容再进行补充叭，现在作为初学者，先总结整理这么多叭。</li></ul><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul><li><a href="https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html#%E5%8F%8D%E5%B0%84%E5%B8%B8%E7%94%A8api" target="_blank" rel="noopener">https://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html#%E5%8F%8D%E5%B0%84%E5%B8%B8%E7%94%A8api</a></li><li><a href="https://www.iteye.com/blog/762626559-qq-com-395402" target="_blank" rel="noopener">https://www.iteye.com/blog/762626559-qq-com-395402</a></li><li><a href="https://blog.csdn.net/qq_40434646/article/details/82351488" target="_blank" rel="noopener">https://blog.csdn.net/qq_40434646/article/details/82351488</a></li><li><a href="https://blog.csdn.net/kjfcpua/article/details/8496911" target="_blank" rel="noopener">https://blog.csdn.net/kjfcpua/article/details/8496911</a></li><li><a href="http://yuncode.net/code/c_56768be18995515" target="_blank" rel="noopener">http://yuncode.net/code/c_56768be18995515</a></li><li><a href="https://www.cnblogs.com/fengmao/p/8609855.html" target="_blank" rel="noopener">https://www.cnblogs.com/fengmao/p/8609855.html</a></li><li><a href="https://www.cnblogs.com/daimajun/p/6545533.html" target="_blank" rel="noopener">https://www.cnblogs.com/daimajun/p/6545533.html</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《MySQL必知必会》所有SQL语句图表集合（可作为查询表使用）---持续更新</title>
      <link href="/posts/dfcd7c37.html"/>
      <url>/posts/dfcd7c37.html</url>
      
        <content type="html"><![CDATA[<ul><li>本篇文章是对《MySQL必知必会》所有语句知识点的图表集合，适合快速查询遗忘的SQL语句，<code>原创不易，转载请注明出处</code>。</li><li>本文的脉络结构，首先先给出《MySQL必知必会》的目录，有一个全局的认识，方便查找，然后依次列出三张表。</li><li>SQL语句图表集合总共分为三张，<code>第一张</code>的内容是书中3-13章的内容，<code>第二张</code>是14-22章的内容，<code>第三张</code>是23-28章的内容，希望对大家学习MySQL的SQL语句有所帮助叭！</li></ul><h1 id="1-《MySQL必知必会》目录"><a href="#1-《MySQL必知必会》目录" class="headerlink" title="1.《MySQL必知必会》目录"></a>1.《MySQL必知必会》目录</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721140609365.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721140403664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721140427144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721140449494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721140510256.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-第一张"><a href="#2-第一张" class="headerlink" title="2.第一张"></a>2.第一张</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200721141746353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="3-第二张"><a href="#3-第二张" class="headerlink" title="3.第二张"></a>3.第二张</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020100713375151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p><h1 id="4-第三张"><a href="#4-第三张" class="headerlink" title="4. 第三张"></a>4. 第三张</h1><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20201007133818313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内部类详解(使用场景和好处、相关内部类的笔试面试题)</title>
      <link href="/posts/bf7b3e18.html"/>
      <url>/posts/bf7b3e18.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>此篇文章作者为：Matrix海子　　　　<br>出处：<a href="http://www.cnblogs.com/dolphin0520/" target="_blank" rel="noopener">http://www.cnblogs.com/dolphin0520/</a></p></blockquote><p>最近也是在学习java，看的是《java核心技术卷一》jdk8，看到内部类的知识点有一点模糊不清，偶然间看到作者写的这篇文章，把我在书中没有完全理解和疑惑的地方全讲清楚了，虽然关于字节码那部分对我这个初学者来说有一些参数看不懂，但是大致通过作者的叙述和自己的思考，可以理解大部分，相信对我以后学习jvm会很有帮助，能看到这篇文章，万分荣幸，感谢作者的心血付出，膜拜。</p><p><strong>进入正文：</strong><br>说起内部类这个词，想必很多人都不陌生，但是又会觉得不熟悉。原因是平时编写代码时可能用到的场景不多，用得最多的是在有事件监听的情况下，并且即使用到也很少去总结内部类的用法。今天我们就来一探究竟。</p><h1 id="1-内部类基础"><a href="#1-内部类基础" class="headerlink" title="1.内部类基础"></a>1.内部类基础</h1><p>在Java中，可以将一个类定义在另一个类里面或者一个方法里面，这样的类称为内部类。广泛意义上的内部类一般来说包括这四种：成员内部类、局部内部类、匿名内部类和静态内部类。下面就先来了解一下这四种内部类的用法。</p><h2 id="1-1-成员内部类"><a href="#1-1-成员内部类" class="headerlink" title="1.1 成员内部类"></a>1.1 成员内部类</h2><p><strong>成员内部类作为类的成员的角色：</strong></p><ol><li>和外部类不同，Inner class还可以声明为private或protected；</li><li>可以调用外部类的结构</li><li>Inner class 可以声明为<code>static</code>的，但此时就不能再使用外层类的非static的成员变量；</li><li>可以在内部定义属性、方法、构造器等结构</li><li>可以声明为<code>abstract</code>类 ，因此可以被其它的内部类继承</li><li>可以声明为<code>final</code>的</li><li>编译以后生成OuterClass$InnerClass.class字节码文件（也适用于局部内部类）</li></ol><p><strong>成员内部类是最普通的内部类，它的定义为位于另一个类的内部，形如下面的形式：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//成员内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"drawshape"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样看起来，类Draw像是类Circle的一个成员，Circle称为外部类。成员内部类可以无条件访问外部类的所有成员属性和成员方法（包括private成员和静态成员）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> count =<span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">            System.out.println(count);   <span class="comment">//外部类的静态成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过要注意的是，当成员内部类拥有和外部类同名的成员变量或者方法时，会发生隐藏现象，即默认情况下访问的是成员内部类的成员。如果要访问外部类的同名成员，需要以下面的形式进行访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">外部类.<span class="keyword">this</span>.成员变量</span><br><span class="line">外部类.<span class="keyword">this</span>.成员方法</span><br></pre></td></tr></table></figure><p>虽然成员内部类可以无条件地访问外部类的成员，而外部类想访问成员内部类的成员却不是这么随心所欲了。在外部类中如果要访问成员内部类的成员，必须先创建一个成员内部类的对象，再通过指向这个对象的引用来访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> radius = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Circle</span><span class="params">(<span class="keyword">double</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.radius = radius;</span><br><span class="line">        getDrawInstance().drawSahpe();   <span class="comment">//必须先创建成员内部类的对象，再进行访问</span></span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> Draw <span class="title">getDrawInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Draw();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Draw</span> </span>&#123;     <span class="comment">//内部类</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawSahpe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(radius);  <span class="comment">//外部类的private成员</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成员内部类是依附外部类而存在的，也就是说，如果要创建成员内部类的对象，前提是必须存在一个外部类的对象。创建成员内部类对象的一般方式如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        <span class="comment">//第一种方式：</span></span><br><span class="line">        Outter outter = <span class="keyword">new</span> Outter();</span><br><span class="line">        Outter.Inner inner = outter.<span class="keyword">new</span> Inner();  <span class="comment">//必须通过Outter对象来创建</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//第二种方式：</span></span><br><span class="line">        Outter.Inner inner1 = outter.getInnerInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Inner inner = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInnerInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inner == <span class="keyword">null</span>)</span><br><span class="line">            inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        <span class="keyword">return</span> inner;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>内部类可以拥有private访问权限、protected访问权限、public访问权限及包访问权限。比如上面的例子，如果成员内部类Inner用private修饰，则只能在外部类的内部访问，如果用public修饰，则任何地方都能访问；如果用protected修饰，则只能在同一个包下或者继承外部类的情况下访问；如果是默认访问权限，则只能在同一个包下访问。这一点和外部类有一点不一样，外部类只能被public和包访问两种权限修饰。我个人是这么理解的，由于成员内部类看起来像是外部类的一个成员，所以可以像类的成员一样拥有多种权限修饰。</p><blockquote><p>这里插入作者当时版本没有考虑到的一个问题：<br>“<code>局部内部类和匿名内部类</code>只能访问局部final变量”<br>从JDK 1.8开始，会默认给这两种内部类访问的field 加上final(隐式地)，所以你可能会在编译器中看到可以访问没有加final的变量，只有你去<code>修改</code>它时，编译器才会<code>报错</code>。</p></blockquote><h2 id="1-2-局部内部类"><a href="#1-2-局部内部类" class="headerlink" title="1.2 局部内部类"></a>1.2 局部内部类</h2><p><strong>局部内部类的特点:</strong></p><ol><li>内部类仍然是一个独立的类，在编译之后内部类会被编译成独立的.class文件，但是前面冠以外部类的类名和$符号，以及数字编号。</li><li>只能在声明它的方法或代码块中使用，而且是先声明后使用。除此之外的任何地方都不能使用该类。</li><li>局部内部类可以使用外部类的成员，包括私有的。</li><li><code>局部内部类可以使用外部方法的局部变量，但是必须是final的</code>。由局部内部类和局部变量的声明周期不同所致。</li><li>局部内部类和局部变量地位类似，不能使用public,protected,缺省,private </li><li>局部内部类不能使用static修饰，因此也不能包含静态成员</li></ol><p>局部内部类是定义在一个方法或者一个作用域里面的类，它和成员内部类的区别在于局部内部类的访问仅限于方法内或者该作用域内。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> People <span class="title">getWoman</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">People</span></span>&#123;   <span class="comment">//局部内部类</span></span><br><span class="line">            <span class="keyword">int</span> age =<span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Woman();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-3-匿名内部类"><a href="#1-3-匿名内部类" class="headerlink" title="1.3 匿名内部类"></a>1.3 匿名内部类</h2><ul><li><p>匿名内部类不能定义任何静态成员、方法和类，只能创建匿名内部类的一个实例。一个匿名内部类一定是在new的后面，用其隐含实现一个接口或实现一个类。</p></li><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类构造器（实参列表）| 实现接口()&#123;</span><br><span class="line"><span class="comment">// 匿名内部类的类体部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>匿名内部类的特点</p><ol><li>匿名内部类必须继承父类或实现接口</li><li>匿名内部类只能有一个对象</li><li>匿名内部类对象只能使用多态形式引用</li></ol></li></ul><p>匿名内部类应该是平时我们编写代码时用得最多的，在编写事件监听的代码时使用匿名内部类不但方便，而且使代码更加容易维护。下面这段代码是一段Android事件监听代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">scan_bt.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">         </span><br><span class="line">        history_bt.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p>这段代码为两个按钮设置监听器，这里面就使用了匿名内部类。这段代码中的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                 </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>就是匿名内部类的使用。代码中需要给按钮设置监听器对象，使用匿名内部类能够在实现父类或者接口中的方法情况下同时产生一个相应的对象，但是前提是这个父类或者接口必须先存在才能这样使用。当然像下面这种写法也是可以的，跟上面使用匿名内部类达到效果相同。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setListener</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    scan_bt.setOnClickListener(<span class="keyword">new</span> Listener1());       </span><br><span class="line">    history_bt.setOnClickListener(<span class="keyword">new</span> Listener2());</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listener1</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">             </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Listener2</span> <span class="keyword">implements</span> <span class="title">View</span>.<span class="title">OnClickListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">             </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法虽然能达到一样的效果，但是既冗长又难以维护，所以一般使用匿名内部类的方法来编写事件监听代码。同样的，匿名内部类也是不能有访问修饰符和static修饰符的。</p><p>　　匿名内部类是唯一一种没有构造器的类。正因为其没有构造器，所以匿名内部类的使用范围非常有限，大部分匿名内部类用于接口回调。匿名内部类在编译的时候由系统自动起名为Outter$1.class。一般来说，匿名内部类用于继承其他类或是实现接口，并不需要增加额外的方法，只是对继承方法的实现或是重写。</p><h2 id="1-4-静态内部类"><a href="#1-4-静态内部类" class="headerlink" title="1.4 静态内部类"></a>1.4 静态内部类</h2><p>静态内部类也是定义在另一个类里面的类，只不过在类的前面多了一个关键字static。静态内部类是不需要依赖于外部类的，这点和类的静态成员属性有点类似，并且它不能使用外部类的非static成员变量或者方法，这点很好理解，因为在没有外部类的对象的情况下，可以创建静态内部类的对象，如果允许访问外部类的非static成员就会产生矛盾，因为外部类的非static成员必须依附于具体的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Outter.Inner inner = <span class="keyword">new</span> Outter.Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200720231313280.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="2-深入理解内部类"><a href="#2-深入理解内部类" class="headerlink" title="2.深入理解内部类"></a>2.深入理解内部类</h1><h2 id="2-1-为什么成员内部类可以无条件访问外部类的成员？"><a href="#2-1-为什么成员内部类可以无条件访问外部类的成员？" class="headerlink" title="2.1 为什么成员内部类可以无条件访问外部类的成员？"></a>2.1 为什么成员内部类可以无条件访问外部类的成员？</h2><p>　　在此之前，我们已经讨论过了成员内部类可以无条件访问外部类的成员，那具体究竟是如何实现的呢？下面通过反编译字节码文件看看究竟。事实上，编译器在进行编译的时候，会将成员内部类单独编译成一个字节码文件，下面是Outter.java的代码：　　</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Inner inner = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Outter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Inner <span class="title">getInnerInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(inner == <span class="keyword">null</span>)</span><br><span class="line">            inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        <span class="keyword">return</span> inner;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">protected</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Inner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">             </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译之后，出现了两个字节码文件：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200720231435730.png" alt="在这里插入图片描述"></p><p>反编译Outter$Inner.class文件得到下面信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">E:\Workspace\Test\bin\com\cxh\test2&gt;javap -v Outter$Inner</span><br><span class="line">Compiled from <span class="string">"Outter.java"</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">com</span>.<span class="title">cxh</span>.<span class="title">test2</span>.<span class="title">Outter</span>$<span class="title">Inner</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span></span></span><br><span class="line">  SourceFile: "Outter.java"</span><br><span class="line">  InnerClass:</span><br><span class="line">   #24= #1 of #22; //Inner=class com/cxh/test2/Outter$Inner of class com/cxh/tes</span><br><span class="line">t2/Outter</span><br><span class="line">  minor version: <span class="number">0</span></span><br><span class="line">  major version: <span class="number">50</span></span><br><span class="line">  Constant pool:</span><br><span class="line">const #1 = class        #2;     //  com/cxh/test2/Outter$Inner</span><br><span class="line">const #2 = Asciz        com/cxh/test2/Outter$Inner;</span><br><span class="line">const #3 = class        #4;     //  java/lang/Object</span><br><span class="line">const #4 = Asciz        java/lang/Object;</span><br><span class="line">const #5 = Asciz        this$0;</span><br><span class="line">const #6 = Asciz        Lcom/cxh/test2/Outter;;</span><br><span class="line">const #7 = Asciz        &lt;init&gt;;</span><br><span class="line">const #8 = Asciz        (Lcom/cxh/test2/Outter;)V;</span><br><span class="line">const #9 = Asciz        Code;</span><br><span class="line">const #10 = Field       #1.#11; //  com/cxh/test2/Outter$Inner.this$0:Lcom/cxh/t</span><br><span class="line">est2/Outter;</span><br><span class="line">const #11 = NameAndType #5:#6;//  this$0:Lcom/cxh/test2/Outter;</span><br><span class="line">const #12 = Method      #3.#13; //  java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">const #13 = NameAndType #7:#14;//  "&lt;init&gt;":()V</span><br><span class="line">const #14 = Asciz       ()V;</span><br><span class="line">const #15 = Asciz       LineNumberTable;</span><br><span class="line">const #16 = Asciz       LocalVariableTable;</span><br><span class="line">const #17 = Asciz       this;</span><br><span class="line">const #18 = Asciz       Lcom/cxh/test2/Outter$Inner;;</span><br><span class="line">const #19 = Asciz       SourceFile;</span><br><span class="line">const #20 = Asciz       Outter.java;</span><br><span class="line">const #21 = Asciz       InnerClasses;</span><br><span class="line">const #22 = class       #23;    //  com/cxh/test2/Outter</span><br><span class="line">const #23 = Asciz       com/cxh/test2/Outter;</span><br><span class="line">const #24 = Asciz       Inner;</span><br><span class="line"> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">final</span> com.cxh.test2.Outter <span class="keyword">this</span>$<span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> com.cxh.test2.Outter$Inner(com.cxh.test2.Outter);</span><br><span class="line">  Code:</span><br><span class="line">   Stack=<span class="number">2</span>, Locals=<span class="number">2</span>, Args_size=<span class="number">2</span></span><br><span class="line">   <span class="number">0</span>:   aload_0</span><br><span class="line">   <span class="number">1</span>:   aload_1</span><br><span class="line">   2:   putfield        #10; //Field this$0:Lcom/cxh/test2/Outter;</span><br><span class="line">   <span class="number">5</span>:   aload_0</span><br><span class="line">   6:   invokespecial   #12; //Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">   <span class="number">9</span>:   <span class="keyword">return</span></span><br><span class="line">  LineNumberTable:</span><br><span class="line">   line <span class="number">16</span>: <span class="number">0</span></span><br><span class="line">   line <span class="number">18</span>: <span class="number">9</span></span><br><span class="line"> </span><br><span class="line">  LocalVariableTable:</span><br><span class="line">   Start  Length  Slot  Name   Signature</span><br><span class="line">   <span class="number">0</span>      <span class="number">10</span>      <span class="number">0</span>    <span class="keyword">this</span>       Lcom/cxh/test2/Outter$Inner;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第11行到35行是常量池的内容，下面逐一第38行的内容：<br><code>final com.cxh.test2.Outter this$0;</code></p><p>　这行是一个指向外部类对象的指针，看到这里想必大家豁然开朗了。也就是说编译器会默认为成员内部类添加了一个指向外部类对象的引用，那么这个引用是如何赋初值的呢？下面接着看内部类的构造器：<br>　<br><code>public com.cxh.test2.Outter$Inner(com.cxh.test2.Outter);</code></p><p>从这里可以看出，虽然我们在定义的内部类的构造器是无参构造器，编译器还是会默认添加一个参数，该参数的类型为指向外部类对象的一个引用，所以成员内部类中的Outter this&amp;0 指针便指向了外部类对象，因此可以在成员内部类中随意访问外部类的成员。从这里也间接说明了成员内部类是依赖于外部类的，如果没有创建外部类的对象，则无法对Outter this&amp;0引用进行初始化赋值，也就无法创建成员内部类的对象了。</p><h2 id="2-2-为什么局部内部类和匿名内部类只能访问局部final变量？"><a href="#2-2-为什么局部内部类和匿名内部类只能访问局部final变量？" class="headerlink" title="2.2 为什么局部内部类和匿名内部类只能访问局部final变量？"></a>2.2 为什么局部内部类和匿名内部类只能访问局部final变量？</h2><p>想必这个问题也曾经困扰过很多人，在讨论这个问题之前，先看下面这段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">                System.out.println(b);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码会被编译成两个class文件：Test.class和Test1.class。默认情况下，编译器会为匿名内部类和局部内部类起名为Outterx.class（x为正整数）。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200720231625870.png" alt="在这里插入图片描述"></p><p>根据上图可知，test方法中的匿名内部类的名字被起为 Test$1。</p><p>　　上段代码中，如果把变量a和b前面的任一个final去掉，这段代码都编译不过。我们先考虑这样一个问题：</p><p>　　当test方法执行完毕之后，变量a的生命周期就结束了，而此时Thread对象的生命周期很可能还没有结束，那么在Thread的run方法中继续访问变量a就变成不可能了，但是又要实现这样的效果，怎么办呢？Java采用了 <code>复制</code>  的手段来解决这个问题。将这段代码的字节码反编译可以得到下面的内容：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020072023164318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>我们看到在run方法中有一条指令：</p><p><code>bipush 10</code></p><p>这条指令表示将操作数10压栈，表示使用的是一个本地局部变量。这个过程是在编译期间由编译器默认进行，如果这个变量的值在编译期间可以确定，则编译器默认会在匿名内部类（局部内部类）的常量池中添加一个内容相等的字面量或直接将相应的字节码嵌入到执行字节码中。这样一来，匿名内部类使用的变量是另一个局部变量，只不过值和方法中局部变量的值相等，因此和方法中的局部变量完全独立开。</p><p><strong>下面再看一个例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(a);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反编译得到：</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200720231732185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>我们看到匿名内部类Test$1的构造器含有两个参数，一个是指向外部类对象的引用，一个是int型变量，很显然，这里是将变量test方法中的形参a以参数的形式传进来对匿名内部类中的拷贝（变量a的拷贝）进行赋值初始化。</p><p>　<code>也就说如果局部变量的值在编译期间就可以确定，则直接在匿名内部里面创建一个拷贝。如果局部变量的值无法在编译期间确定，则通过构造器传参的方式来对拷贝进行初始化赋值。</code></p><p>　　从上面可以看出，在run方法中访问的变量a根本就不是test方法中的局部变量a。这样一来就解决了前面所说的 生命周期不一致的问题。但是新的问题又来了，既然在run方法中访问的变量a和test方法中的变量a不是同一个变量，当在run方法中改变变量a的值的话，会出现什么情况？</p><p>　　<code>对，会造成数据不一致性，这样就达不到原本的意图和要求。</code>为了解决这个问题，java编译器就限定必须将变量a限制为final变量，不允许对变量a进行更改（对于引用类型的变量，是不允许指向新的对象），这样数据不一致性的问题就得以解决了。</p><p>　　到这里，想必大家应该清楚为何 方法中的局部变量和形参都必须用final进行限定了。</p><h2 id="2-3-静态内部类有特殊的地方吗？"><a href="#2-3-静态内部类有特殊的地方吗？" class="headerlink" title="2.3 静态内部类有特殊的地方吗？"></a>2.3 静态内部类有特殊的地方吗？</h2><p>　　从前面可以知道，静态内部类是不依赖于外部类的，也就说可以在不创建外部类对象的情况下创建内部类的对象。另外，静态内部类是不持有指向外部类对象的引用的，这个读者可以自己尝试反编译class文件看一下就知道了，是没有Outter this&amp;0引用的。</p><h1 id="3-内部类的使用场景和好处"><a href="#3-内部类的使用场景和好处" class="headerlink" title="3.内部类的使用场景和好处"></a>3.内部类的使用场景和好处</h1><p>为什么在Java中需要内部类？总结一下主要有以下四点：</p><p>　　1.每个内部类都能独立的继承一个接口的实现，所以无论外部类是否已经继承了某个(接口的)实现，对于内部类都没有影响。内部类使得多继承的解决方案变得完整，</p><p>　　2.方便将存在一定逻辑关系的类组织在一起，又可以对外界隐藏。</p><p>　　3.方便编写事件驱动程序</p><p>　　4.方便编写线程代码</p><p>　　个人觉得第一点是最重要的原因之一，内部类的存在使得Java的多继承机制变得更加完善。</p><h1 id="4-常见的与内部类相关的笔试面试题"><a href="#4-常见的与内部类相关的笔试面试题" class="headerlink" title="4.常见的与内部类相关的笔试面试题"></a>4.常见的与内部类相关的笔试面试题</h1><p><strong>1.根据注释填写(1)，(2)，(3)处的代码</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">           <span class="comment">// 初始化Bean1</span></span><br><span class="line">           (<span class="number">1</span>)</span><br><span class="line">           bean1.I++;</span><br><span class="line">           <span class="comment">// 初始化Bean2</span></span><br><span class="line">           (<span class="number">2</span>)</span><br><span class="line">           bean2.J++;</span><br><span class="line">           <span class="comment">//初始化Bean3</span></span><br><span class="line">           (<span class="number">3</span>)</span><br><span class="line">           bean3.k++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Bean1</span></span>&#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">int</span> I = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean2</span></span>&#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">int</span> J = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bean</span></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Bean3</span></span>&#123;</span><br><span class="line">           <span class="keyword">public</span> <span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从前面可知，对于成员内部类，必须先产生外部类的实例化对象，才能产生内部类的实例化对象。而静态内部类不用产生外部类的实例化对象即可产生内部类的实例化对象。</p><p><code>创建静态内部类对象的一般形式为：  外部类类名.内部类类名 xxx = new 外部类类名.内部类类名()</code></p><p>　<code>创建成员内部类对象的一般形式为：  外部类类名.内部类类名 xxx = 外部类对象名.new 内部类类名()</code><br>　<br>因此，（1），（2），（3）处的代码分别为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//(1)</span></span><br><span class="line">Test test = <span class="keyword">new</span> Test();    </span><br><span class="line">Test.Bean1 bean1 = test.<span class="keyword">new</span> Bean1();  </span><br><span class="line"><span class="comment">//(2)</span></span><br><span class="line">Test.Bean2 b2 = <span class="keyword">new</span> Test.Bean2();   </span><br><span class="line"><span class="comment">//(3)</span></span><br><span class="line">Bean bean = <span class="keyword">new</span> Bean();     </span><br><span class="line">Bean.Bean3 bean3 =  bean.<span class="keyword">new</span> Bean3();</span><br></pre></td></tr></table></figure><p><strong>2.下面这段代码的输出结果是什么？</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span>  </span>&#123;</span><br><span class="line">        Outter outter = <span class="keyword">new</span> Outter();</span><br><span class="line">        outter.<span class="keyword">new</span> Inner().print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line">            System.out.println(<span class="string">"局部变量："</span> + a);</span><br><span class="line">            System.out.println(<span class="string">"内部类变量："</span> + <span class="keyword">this</span>.a);</span><br><span class="line">            System.out.println(<span class="string">"外部类变量："</span> + Outter.<span class="keyword">this</span>.a);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">2</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p><strong>最后补充一点知识：关于成员内部类的继承问题。一般来说，内部类是很少用来作为继承用的。但是当用来继承的话，要注意两点：</strong></p><p>1）成员内部类的引用方式必须为 Outter.Inner.<br>2）构造器中必须有指向外部类对象的引用，并通过这个引用调用super()。这段代码摘自《Java编程思想》</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WithInner</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InheritInner</span> <span class="keyword">extends</span> <span class="title">WithInner</span>.<span class="title">Inner</span> </span>&#123;</span><br><span class="line">      </span><br><span class="line">    <span class="comment">// InheritInner() 是不能通过编译的，一定要加上形参</span></span><br><span class="line">    InheritInner(WithInner wi) &#123;</span><br><span class="line">        wi.<span class="keyword">super</span>(); <span class="comment">//必须有这句调用</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        WithInner wi = <span class="keyword">new</span> WithInner();</span><br><span class="line">        InheritInner obj = <span class="keyword">new</span> InheritInner(wi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 参考资料：</p><p>　　《java编程思想》</p><p>　　<a href="http://www.cnblogs.com/chenssy/p/3388487.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenssy/p/3388487.html</a></p><p>　　<a href="http://blog.csdn.net/zhangjg_blog/article/details/20000769" target="_blank" rel="noopener">http://blog.csdn.net/zhangjg_blog/article/details/20000769</a></p><p>　　<a href="http://blog.csdn.net/zhangjg_blog/article/details/19996629" target="_blank" rel="noopener">http://blog.csdn.net/zhangjg_blog/article/details/19996629</a></p><p>　　<a href="http://blog.csdn.net/zhaoqianjava/article/details/6849812" target="_blank" rel="noopener">http://blog.csdn.net/zhaoqianjava/article/details/6849812</a></p><p>　　<a href="http://www.cnblogs.com/nerxious/archive/2013/01/24/2875649.html" target="_blank" rel="noopener">http://www.cnblogs.com/nerxious/archive/2013/01/24/2875649.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaSE </tag>
            
            <tag> 内部类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《算法》1.1习题解析</title>
      <link href="/posts/801dfee5.html"/>
      <url>/posts/801dfee5.html</url>
      
        <content type="html"><![CDATA[<h2 id="0-0-0"><a href="#0-0-0" class="headerlink" title="0.0.0"></a>0.0.0</h2><blockquote><p>答案解析代码在我的github：<a href="https://github.com/BitHachi/Algorithm-Four/tree/master/src/Chapter1/Section11" target="_blank" rel="noopener">BitHachi/Algorithm-Four</a></p></blockquote><h2 id="1-1-1"><a href="#1-1-1" class="headerlink" title="1.1.1"></a>1.1.1</h2><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506222538908.png" alt="在这里插入图片描述"><br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506223432556.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-2"><a href="#1-1-2" class="headerlink" title="1.1.2"></a>1.1.2</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506223536342.png" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506223834110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-3"><a href="#1-1-3" class="headerlink" title="1.1.3"></a>1.1.3</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506223941397.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020050622484954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-4"><a href="#1-1-4" class="headerlink" title="1.1.4"></a>1.1.4</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506225140427.png" alt="在这里插入图片描述"></p><h2 id="1-1-5"><a href="#1-1-5" class="headerlink" title="1.1.5"></a>1.1.5</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506225333374.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506225824366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-6"><a href="#1-1-6" class="headerlink" title="1.1.6"></a>1.1.6</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020050622585965.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/202005062305466.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-7"><a href="#1-1-7" class="headerlink" title="1.1.7"></a>1.1.7</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506230611779.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506234546578.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-8"><a href="#1-1-8" class="headerlink" title="1.1.8"></a>1.1.8</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506234805247.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506235146144.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-9"><a href="#1-1-9" class="headerlink" title="1.1.9"></a>1.1.9</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506235214761.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200506235850705.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-10"><a href="#1-1-10" class="headerlink" title="1.1.10"></a>1.1.10</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507224406603.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507224745954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-11"><a href="#1-1-11" class="headerlink" title="1.1.11"></a>1.1.11</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507224823974.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507230540533.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-12"><a href="#1-1-12" class="headerlink" title="1.1.12"></a>1.1.12</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507230614343.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507232456787.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-13"><a href="#1-1-13" class="headerlink" title="1.1.13"></a>1.1.13</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507232513716.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507234201494.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507235204735.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200507235242960.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-14"><a href="#1-1-14" class="headerlink" title="1.1.14"></a>1.1.14</h2><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200510205619314.png" alt="在这里插入图片描述"><br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200510211543862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-15"><a href="#1-1-15" class="headerlink" title="1.1.15"></a>1.1.15</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200510211620446.png" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200510220324195.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200510222014334.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-16"><a href="#1-1-16" class="headerlink" title="1.1.16"></a>1.1.16</h2><blockquote><p>给出exR1(6)的返回值</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200614164138629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020061416410416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-17"><a href="#1-1-17" class="headerlink" title="1.1.17"></a>1.1.17</h2><blockquote><p>见书，书上有解析</p></blockquote><h2 id="1-1-18"><a href="#1-1-18" class="headerlink" title="1.1.18"></a>1.1.18</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620164559420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620164619850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-19"><a href="#1-1-19" class="headerlink" title="1.1.19"></a>1.1.19</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fibonacci</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">F</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (N==<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (N==<span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">return</span> f(N-<span class="number">1</span>)+F(N-<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> N=<span class="number">0</span>;N&lt;<span class="number">100</span>;N++)</span><br><span class="line">StdOut.println(N+<span class="string">" "</span>+F(N));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>开发F(N)，用数组保存已经计算过的值。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620171709387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-20"><a href="#1-1-20" class="headerlink" title="1.1.20"></a>1.1.20</h2><p>编写一个递归的静态方法计算ln(N!)的值。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620182642589.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-21"><a href="#1-1-21" class="headerlink" title="1.1.21"></a>1.1.21</h2><p>编写一段程序，从标准输入按行读取数据，其中每行都包含一个名字和两个整数。然后用printf()打印一张表格，每行的若干列数据包括名字、两个整数和第一个整数除以第二个整数的结果，精确到保留小数点后三位。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620193828271.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-22"><a href="#1-1-22" class="headerlink" title="1.1.22"></a>1.1.22</h2><p>使用1.1.6.4节中的rank(递归方法重新实现BinarySearch并跟踪该方法的调用。每当该方法被调用时，打印出它的参数1o和hi并按照递归的深度缩进。提示:为递归方法添加一个参数来保存递归的深度。</p><h2 id="1-1-23"><a href="#1-1-23" class="headerlink" title="1.1.23"></a>1.1.23</h2><p>为BinarySearch的测试用例添加一个<code>参数</code>:<br><code>+</code> 打印出标准输人中不在白名单上的值;<br><code>-</code>则打印出标准输人中在白名单上的值。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020062021433961.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-24"><a href="#1-1-24" class="headerlink" title="1.1.24"></a>1.1.24</h2><ul><li>给出使用欧几里德算法计算105和24的最大公约数的过程中得到的一系列p 和q的值。</li><li>扩展该算法中的代码得到一个程序Euclid, 从命令行接受两个参数，计算它们的最大公约数并打印出每次调用递归方法时的两个参数。</li><li>使用你的程序计算111 111和1 234 567的最大公约数。<br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620215330207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200620215146740.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ul><h2 id="1-1-26"><a href="#1-1-26" class="headerlink" title="1.1.26"></a>1.1.26</h2><blockquote><p>将三个数字排序。假设a,b,c和t都是同一种原始数字类型的变量。证明以下代码能够将a,b,c按照升序排列。 </p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194539687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p></blockquote><h2 id="1-1-27"><a href="#1-1-27" class="headerlink" title="1.1.27"></a>1.1.27</h2><blockquote><p><strong>二项分布。</strong> 估计用以下代码计算binomial(100，50，0.25)将会产生的递归调用次数。<br>将已经计算过的值保存在数组中并给出一个更好的实现。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194606590.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194614287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194621212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-28"><a href="#1-1-28" class="headerlink" title="1.1.28"></a>1.1.28</h2><blockquote><p><strong>删除重复元素。</strong> 修改BinarySearch类中的测试用例来删去排序后白名单中的所有元素。</p></blockquote><p> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194628449.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200628194635683.png" alt="在这里插入图片描述"></p><h2 id="1-1-29"><a href="#1-1-29" class="headerlink" title="1.1.29"></a>1.1.29</h2><blockquote><p>等值键。为BinarySearch类添加一个静态方法rank(),它接受一个键和一个整型有序数组(可能存在重复键)作为参数并返回数组中小于该键的元素数量，以及一个类似的方法count()来返回数组中等于该键的元素的数量。<br>注意:如果i和j分别是rank(key,a)和count(key ,a)的返回值，那么a[i..i+j-1]就是数组中所有和key相等的元素。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705113200761.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-30"><a href="#1-1-30" class="headerlink" title="1.1.30"></a>1.1.30</h2><blockquote><p>数组练习。编写一段程序，创建一个NxN的布尔数组a[][]。其中当i和j互质时(没有相同因子)，a[i][j] 为true,否则为false。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705120246318.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705120319416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-31"><a href="#1-1-31" class="headerlink" title="1.1.31"></a>1.1.31</h2><blockquote><p>随机连接。编写一段程序，从命令行接受一个整数N和double值p (0到1之间)作为参数，在一个圆上画出大小为0.05且间距相等的N个点，然后将每对点按照概率p用灰线连接。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705190728583.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705190951755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-32"><a href="#1-1-32" class="headerlink" title="1.1.32"></a>1.1.32</h2><blockquote><p>直方图。假设标准输人流中含有一系列double值。编写-段程序， 从命令行接受一个整数 N和两个double值l和r。将(I, r)分为N段并使用StdDraw画出输人流中的值落人每段的数量的直方图。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020070520313565.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200705204328949.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-33"><a href="#1-1-33" class="headerlink" title="1.1.33"></a>1.1.33</h2><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706193841425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br> <img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706214051197.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020070620163198.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706201841453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706201847238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-35"><a href="#1-1-35" class="headerlink" title="1.1.35"></a>1.1.35</h2><blockquote><p>模拟掷骰子。以下代码能够计算每种两个骰子之和的准确概率分布：</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> SIDES = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">double</span>[] dist = <span class="keyword">new</span> <span class="keyword">double</span>[<span class="number">2</span> * SIDES + <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= SIDES; i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= SIDES; j++)</span><br><span class="line">        dist[i+j] += <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= <span class="number">2</span>*SIDES; k++)</span><br><span class="line">    dist[k] /= <span class="number">36.0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>dist[i] 的值就是两个骰子之和为i 的概率。用实验模拟N 次掷骰子，并在计算两个1 到 6 之间的随机整数之和时记录每个值的出现频率以验证它们的概率。N 要多大才能够保证你的经验数据和准确数据的吻合程度达到小数点后三位？</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706221728346.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706221351149.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020070622160387.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200706221612755.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-36"><a href="#1-1-36" class="headerlink" title="1.1.36"></a>1.1.36</h2><blockquote><p>乱序检查。通过实验检查表1.1.10中乱序代码是否能够产生预期的效果。编写一个程序ShuffleTest,接受命令行参数M和N,将大小为M的数组打乱N次且每次打乱之前都将数组重新初始化为a[i]=i.打印一个MXM的表格，对于所有的列j,行i表示的是i在打乱后落到j的位置的次数。数组中的所有元素的值都应该接近于N/M。</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">package</span> Chapter1.Section11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdOut;</span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: Algorithm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EX36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-16 19:11</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 练习题1.1.36</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参考：https://www.cnblogs.com/longjin2018/p/9848742.html</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EX36</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="comment">//        int M=Integer.parseInt(args[0]);</span></span><br><span class="line"><span class="comment">//        int N=Integer.parseInt(args[1]);</span></span><br><span class="line">        <span class="keyword">int</span> M=<span class="number">6</span>,N=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span>[] a=<span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">        <span class="keyword">int</span>[][] Info=<span class="keyword">new</span> <span class="keyword">int</span>[M][M];</span><br><span class="line">        <span class="comment">//N次打乱</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//每次打乱前数组重新初始化为a[i]=i</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">                a[i]=i;</span><br><span class="line">            <span class="comment">//打乱</span></span><br><span class="line">            shuffle(a);</span><br><span class="line">            <span class="comment">//打乱后i行的值落到j列的次数增1</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">                Info[a[i]][i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印M*M数组</span></span><br><span class="line">        printArray(Info);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打乱数组</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(<span class="keyword">int</span>[] a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N=a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> r=i+ StdRandom.uniform(N-i);<span class="comment">//返回0~N-i之间的整数再加i</span></span><br><span class="line">            <span class="keyword">int</span> temp=a[i];</span><br><span class="line">            a[i]=a[r];</span><br><span class="line">            a[r]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="comment">//结束打乱</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[][] array)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> rowLen=array.length;</span><br><span class="line">        <span class="keyword">int</span> colLen=array[<span class="number">0</span>].length;</span><br><span class="line">        StdOut.printf(<span class="string">" "</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> col=<span class="number">0</span>;col&lt;colLen;col++)</span><br><span class="line">            StdOut.printf(<span class="string">"%5d"</span>,col);</span><br><span class="line">        StdOut.printf(<span class="string">"\n"</span>);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> row=<span class="number">0</span>;row&lt;rowLen;row++)</span><br><span class="line">        &#123;</span><br><span class="line">            StdOut.printf(<span class="string">"%d"</span>,row);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> col=<span class="number">0</span>;col&lt;colLen;col++)</span><br><span class="line">                StdOut.printf(<span class="string">"%5d"</span>,array[row][col]);</span><br><span class="line">            StdOut.printf(<span class="string">"\n"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-37"><a href="#1-1-37" class="headerlink" title="1.1.37"></a>1.1.37</h2><blockquote><p>糟糕的打乱。假设在我们的乱序代码中你选择的是一个0 到N-1 而非i 到N-1 之间的随机整数。证明得到的结果并非均匀地分布在N! 种可能性之间。用上一题中的测试检验这个版本。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chapter1.Section11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: Algorithm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EX37</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-16 19:23</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 练习题1.1.37</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EX37</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">shuffle</span><span class="params">(<span class="keyword">int</span>[] a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> N = a.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> r = StdRandom.uniform(N); <span class="comment">//  [0,N)</span></span><br><span class="line">            <span class="keyword">int</span> temp = a[i];</span><br><span class="line">            a[i] = a[r];</span><br><span class="line">            a[r] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        if (args.length &lt; 2) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println("Error");</span></span><br><span class="line"><span class="comment">//            return;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        int M = Integer.parseInt(args[0]), N = Integer.parseInt(args[1]);</span></span><br><span class="line">        <span class="keyword">int</span> M=<span class="number">6</span>,N=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[M];</span><br><span class="line">        <span class="keyword">int</span>[][] Info=<span class="keyword">new</span> <span class="keyword">int</span>[M][M];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;N;k++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//每次打乱前数组重新初始化为a[i]=i</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)</span><br><span class="line">                a[i]=i;</span><br><span class="line">            <span class="comment">//打乱</span></span><br><span class="line">            shuffle(a);</span><br><span class="line">            <span class="comment">//打乱后i行的值落到j列的次数增1</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;a.length;i++)</span><br><span class="line">                Info[a[i]][i]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> []i : Info) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j:i)</span><br><span class="line">                System.out.print(j + <span class="string">" "</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1-1-38"><a href="#1-1-38" class="headerlink" title="1.1.38"></a>1.1.38</h2><blockquote><p>二分查找与暴力查找。根据1.1.10.4 节给出的暴力查找法编写一个程序bruteForceSearch，在你的计算机上比较它和BinarySearch 处理largeW.txt 和largeT.txt 所需的时间。</p></blockquote><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020071619491540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200716194926353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkxNDYwNA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="1-1-39"><a href="#1-1-39" class="headerlink" title="1.1.39"></a>1.1.39</h2><blockquote><p>随机匹配。编写一个使用BinarySearch 的程序，它从命令行接受一个整型参数T，并会分别针对N=10^3、10^4、10^5 和10^6 将以下实验运行 T 遍：生成两个大小为N 的随机6 位正整数数组并找出同时存在于两个数组中的整数的数量。打印一个表格，对于每个N，给出T 次实验中该数量的平均值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Chapter1.Section11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> edu.princeton.cs.algs4.StdRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Program</span>: Algorithm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ClassName</span>: EX39</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: Mr.BitHachi</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@CreateTime</span>: 2020-07-16 19:57</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span>: V1.0</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 练习题1.1.39</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EX39</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        int T = Integer.parseInt(args[0]);</span></span><br><span class="line">        <span class="keyword">int</span> T=<span class="number">6</span>;</span><br><span class="line">        <span class="keyword">int</span>[] num = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">4</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;<span class="comment">//对N为10^3 10^4 10^5 10^6运行T遍</span></span><br><span class="line">            <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">                N *= <span class="number">10</span>; <span class="comment">//对N为10^3 10^4 10^5 10^6运行T遍</span></span><br><span class="line">                <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">                <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++) &#123;</span><br><span class="line">                    a[k] = StdRandom.uniform(<span class="number">100000</span>, <span class="number">1000000</span>);<span class="comment">//[100000, 1000000)</span></span><br><span class="line">                    b[k] = StdRandom.uniform(<span class="number">100000</span>, <span class="number">1000000</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Arrays.sort(a);</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; N; k++) &#123;</span><br><span class="line">                    <span class="comment">//二分循环查找一个数组中的值是否在另一个数组中</span></span><br><span class="line">                    <span class="keyword">if</span> (BinarySearch.indexOf(a, b[k]) != -<span class="number">1</span>) &#123;</span><br><span class="line">                        num[j]++; <span class="comment">//对于每个N，N为10^3 10^4 10^5 10^6</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"N\t\tAverage"</span>);</span><br><span class="line">        <span class="keyword">int</span> N = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            N *= <span class="number">10</span>;<span class="comment">//N为10^3 10^4 10^5 10^6</span></span><br><span class="line">            System.out.printf(<span class="string">"%d\t%f\n"</span>, N, (<span class="keyword">double</span>) num[i] / T);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>参考：</strong></p><ul><li>《百科》</li><li><a href="https://www.cnblogs.com/gotodsp/p/4319865.html" target="_blank" rel="noopener">《算法：第四版》课后练习 1.1 答案</a></li><li>github: <a href="https://github.com/jimmysuncpt/Algorithms" target="_blank" rel="noopener">https://github.com/jimmysuncpt/Algorithms</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 《算法》 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
